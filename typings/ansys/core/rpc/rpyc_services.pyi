"""
This type stub file was generated by pyright.
"""

import rpyc
from typing import List

logger = ...
class FileManagement:
    """Class to manage file transfer."""
    def __init__(self, client) -> None:
        ...
    
    def upload(self, localpath, remotepath, overwrite=...): # -> None:
        """Upload a file or a directory to the given remote path.

        Parameters
        ----------
        localpath : str
            Path to the local file or directory.
        remotepath : str
            Remote path.
        overwrite : bool, optional
            Either if overwrite the local file or not.
        """
        ...
    
    def download_folder(self, remotepath, localpath, overwrite=...): # -> None:
        """Download a directory from a given remote path to the local path.

        Parameters
        ----------
        remotepath : str
            Remote path.
        localpath : str
            Path to the local file or directory.
        overwrite : bool, optional
            Either if overwrite the local file or not.
        """
        ...
    
    def download_file(self, remotepath, localpath, overwrite=...): # -> None:
        """Download a file from a given remote path to the local path.

        Parameters
        ----------
        remotepath : str
            Remote path.
        localpath : str
            Path to the local file or directory.
        overwrite : bool, optional
            Either if overwrite the local file or not.
        """
        ...
    
    def open_file(self, remote_file, open_options=..., encoding=...):
        ...
    
    def create_file(self, remote_file, create_options=..., encoding=..., override=...):
        ...
    
    def makedirs(self, remotepath): # -> Literal['Directory Exists!', 'Directory created.']:
        ...
    
    def walk(self, remotepath): # -> None:
        ...
    
    def listdir(self, remotepath): # -> list[Any]:
        ...
    
    def pathexists(self, remotepath): # -> bool:
        ...
    
    def unlink(self, remotepath): # -> bool:
        ...
    
    def normpath(self, remotepath):
        ...
    
    def isdir(self, remotepath):
        ...
    
    def temp_dir(self):
        ...
    


def check_port(port): # -> Literal[0]:
    """Check for an available port on the machine starting from input port.

     Parameters
    ----------
    port : int
        Ports to search.

    Returns
    -------
    int
        Next Port available.
    """
    ...

class PyaedtServiceWindows(rpyc.Service):
    """Server Pyaedt rpyc Service."""
    def on_connect(self, connection): # -> None:
        """Run when a connection is created.

        Parameters
        ----------
        connection : :class:`rpyc.core.protocol.Connection`
            The Connection object representing the connection that was created.

        Returns
        -------
        None
        """
        ...
    
    def on_disconnect(self, connection): # -> None:
        """Run after the connection was closed.

        Returns
        -------
        None
        """
        ...
    
    def exposed_close_connection(self): # -> None:
        ...
    
    def exposed_run_script(self, script, aedt_version=..., ansysem_path=..., non_graphical=...): # -> str:
        """Run script on AEDT in the server.

        .. warning::

            Do not execute this function with untrusted function argument, environment
            variables or pyaedt global settings.
            See the :ref:`security guide<ref_security_consideration>` for details.

        Parameters
        ----------
        script : str or list
            It can be the full path of the script file or a list of command to execute on the server.
        aedt_version : str, optional
            Aedt Version to run.
        ansysem_path : str, optional
            Full path to AEDT Installation folder.
        non_graphical : bool, optional
            Set AEDT to run either in graphical or non graphical. Default is non-grahical

        Returns
        -------
        str
        """
        ...
    
    def exposed_edb(self, edbpath=..., cellname=..., isreadonly=..., edbversion=..., use_ppe=...): # -> Edb:
        """Start a new Hfss session.

        Parameters
        ----------
        edbpath : str, optional
            Full path to the ``aedb`` folder. The variable can also contain
            the path to a layout to import. Allowed formarts are BRD,
            XML (IPC2581), GDS, and DXF. The default is ``None``.
        cellname : str, optional
            Name of the cell to select. The default is ``None``.
        isreadonly : bool, optional
            Whether to open ``edb_core`` in read-only mode. The default is ``False``.
        edbversion : str, optional
            Version of ``edb_core`` to use. The default is ``"2021.2"``.

        Returns
        -------
        :class:`ansys.aedt.core.edb.Edb`
        """
        ...
    
    def exposed_hfss(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Hfss:
        """Start a new Hfss session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.hfss.Hfss`
        """
        ...
    
    def exposed_hfss3dlayout(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Hfss3dLayout:
        """Start a new Hfss3dLayout session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.hfss3dlayout.Hfss3dLayout`
        """
        ...
    
    def exposed_maxwell3d(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Maxwell3d:
        """Start a new Maxwell3d session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.maxwell.Maxwell3d`
        """
        ...
    
    def exposed_maxwell2d(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Maxwell2d:
        """Start a new Maxwell32 session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.maxwell.Maxwell32`
        """
        ...
    
    def exposed_icepak(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Icepak:
        """Start a new Icepak session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.icepak.Icepak`
        """
        ...
    
    def exposed_circuit(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Circuit:
        """Start a new Circuit session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.circuit.Circuit`
        """
        ...
    
    def exposed_mechanical(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Mechanical:
        """Start a new Mechanical session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.mechanical.Mechanical`
        """
        ...
    
    def exposed_q3d(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Q3d:
        """Start a new Q3d session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.q3d.Q3d`
        """
        ...
    
    def exposed_q2d(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=...): # -> Q2d:
        """Start a new Q2d session.

        Parameters
        ----------
        project : str, optional
            Name of the project to select or the full path to the project
            or AEDTZ archive to open.  The default is ``None``, in which
            case an attempt is made to get an active project. If no
            projects are present, an empty project is created.
        design : str, optional
            Name of the design to select. The default is ``None``, in
            which case an attempt is made to get an active design. If no
            designs are present, an empty design is created.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.
        setup : str, optional
            Name of the setup to use as the nominal. The default is
            ``None``, in which case the active setup is used or
            nothing is used.
        version : str, int, float, optional
            Version of AEDT to use. The default is ``None``, in which case
            the active version or latest installed version is used.
        non_graphical : bool, optional
            Whether to launch AEDT in the non-graphical mode. The default
            is``True``, in which case AEDT is launched in the non graphical mode.

        Returns
        -------
        :class:`ansys.aedt.core.q3d.Q2d`
        """
        ...
    


class GlobalService(rpyc.Service):
    """Global class to manage rpyc Server of PyAEDT."""
    def on_connect(self, connection): # -> None:
        """Initialize the service when the connection is created."""
        ...
    
    def on_disconnect(self, connection): # -> None:
        """Finalize the service when the connection is closed."""
        ...
    
    @staticmethod
    def exposed_stop(): # -> None:
        ...
    
    def exposed_redirect(self, stdout): # -> None:
        ...
    
    def exposed_restore(self): # -> None:
        ...
    
    @staticmethod
    def aedt_grpc(port=..., beta_options: List[str] = ..., use_aedt_relative_path=..., non_graphical=..., check_interval=...): # -> int | bool:
        """Start a new AEDT session on a specified gRPC port.

        .. warning::

            Do not execute this function with untrusted function argument, environment
            variables or pyaedt global settings.
            See the :ref:`security guide<ref_security_consideration>` for details.

        Returns
        -------
        port : int
            gRPC port on which the AEDT session has started.
        """
        ...
    
    @property
    def aedt_port(self): # -> Literal[0]:
        """Aedt active port.

        Returns
        -------
        int
        """
        ...
    
    @property
    def aedt_version(self): # -> Literal['']:
        """Aedt Version.

        Returns
        -------
        str
        """
        ...
    
    @property
    def student_version(self): # -> Literal[False]:
        """Student version flag.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def server_name(self): # -> str:
        """Machine name.

        Returns
        -------
        str
        """
        ...
    
    @staticmethod
    def edb(edbpath=..., cellname=..., isreadonly=..., edbversion=..., isaedtowned=..., oproject=..., student_version=..., use_ppe=...): # -> Edb:
        """Starts a new EDB Session.

        Parameters
        ----------
        edbpath : str, optional
            Full path to the ``aedb`` folder. The variable can also contain
            the path to a layout to import. Allowed formats are BRD,
            XML (IPC2581), GDS, and DXF. The default is ``None``.
            For GDS import, the Ansys control file, which is also XML, should have the same
            name as the GDS file. Only the extensions of the two files should differ.
        cellname : str, optional
            Name of the cell to select. The default is ``None``.
        isreadonly : bool, optional
            Whether to open ``edb_core`` in read-only mode when it is
            owned by HFSS 3D Layout. The default is ``False``.
        edbversion : str, optional
            Version of ``edb_core`` to use. The default is ``None``, in which case
            the latest installed version is used.
        isaedtowned : bool, optional
            Whether to launch ``edb_core`` from HFSS 3D Layout. The
            default is ``False``.
        oproject : optional
            Reference to the AEDT project object. The default is ``None``.
        student_version : bool, optional
            Whether to open the AEDT student version. The default is ``False.``
        use_ppe : bool, optional
            Whether to use PPE licensing. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.edb.Edb`
            Edb class.
        """
        ...
    
    @staticmethod
    def exposed_open(filename, open_options=..., encoding=...): # -> Restricted:
        ...
    
    @staticmethod
    def exposed_create(filename, create_options=..., encoding=..., override=...): # -> Restricted | Literal['File already exists']:
        ...
    
    @staticmethod
    def exposed_makedirs(remotepath): # -> Literal['Directory Exists!', 'Directory created!']:
        ...
    
    @staticmethod
    def exposed_listdir(remotepath): # -> list[Any]:
        ...
    
    @staticmethod
    def exposed_pathexists(remotepath): # -> bool:
        ...
    
    @staticmethod
    def exposed_unlink(remotepath): # -> bool:
        ...
    
    @staticmethod
    def exposed_isdir(remotepath): # -> bool:
        ...
    
    @staticmethod
    def exposed_tempdir(): # -> str:
        ...
    
    @staticmethod
    def normpath(remotepath):
        ...
    


class ServiceManager(rpyc.Service):
    """Global class to manage rpyc Server of PyAEDT."""
    def on_connect(self, connection): # -> None:
        """Initiate the service when a connection is created."""
        ...
    
    def on_disconnect(self, connection): # -> None:
        """Finalize the service when the connection is closed."""
        ...
    
    def start_service(self, port): # -> Literal[0, False]:
        """Connect to remove service manager and run a new server on specified port.

        .. warning::

            Do not execute this function with untrusted function argument, environment
            variables or pyaedt global settings.
            See the :ref:`security guide<ref_security_consideration>` for details.

        Parameters
        ----------
        aedt_client_port : int
            Port that the RPyC server is running on inside AEDT.

        Returns
        -------
        RPyC object.
        """
        ...
    
    def exposed_stop_service(self, port): # -> bool:
        """Stops a given Pyaedt Service on specified port.

        Parameters
        ----------
        port : int
            Port id on which there is the service to kill.

        Returns
        -------
        bool
        """
        ...
    
    @staticmethod
    def exposed_check_port(): # -> int:
        """Check if a random port is available."""
        ...
    


