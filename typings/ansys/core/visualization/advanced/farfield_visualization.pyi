"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.internal.checks import graphics_required

class FfdSolutionData:
    """Provides antenna far-field data.

    Read element pattern information in a JSON file generated by :func:`FfdSolutionDataExporter` and return the
    Python interface to plot and analyze the far-field data.

    Parameters
    ----------
    input_file : str
        Metadata information in a JSON file.
    frequency : float, optional
        Active frequency in hertz (Hz). The default is ``None``, in which case the first frequency is active.
    variation : str, optional
            Label to identify corresponding variation.
    model_info : dict, optional
    incident_power : dict, optional
        Dictionary with information of the incident power for each frequency.
        The default is ``None``, in which case an empty dictionary is applied.
        From AEDT 2024.1, this information is available from the XML input file.
        For example, the dictionary format for a two element farfield
        data = incident_power["1GHz"]
        data = [1, 0.99]
    touchstone_file : str, optional
        Touchstone file name. The default is ``None``.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.visualization.advanced.farfield_visualization import FfdSolutionData
    >>> app = ansys.aedt.core.Hfss(version="2025.1", design="Antenna")
    >>> data = app.get_antenna_data()
    >>> metadata_file = data.metadata_file
    >>> app.release_desktop()
    >>> farfield_data = FfdSolutionData(input_file=metadata_file)
    >>> farfield_data.plot_3d(quantity_format="dB10")
    """
    def __init__(self, input_file, frequency=..., variation=..., model_info=..., incident_power=..., touchstone_file=...) -> None:
        ...
    
    @property
    def phi_scan(self): # -> float:
        """Phi scan angle in degrees. It applies only for arrays."""
        ...
    
    @phi_scan.setter
    def phi_scan(self, value): # -> None:
        ...
    
    @property
    def theta_scan(self): # -> float:
        """Theta scan angle in degrees. It applies only for arrays."""
        ...
    
    @theta_scan.setter
    def theta_scan(self, value): # -> None:
        ...
    
    @property
    def metadata(self): # -> Any:
        """Antenna metadata."""
        ...
    
    @property
    def touchstone_data(self): # -> TouchstoneData | None:
        """Touchstone data."""
        ...
    
    @property
    def s_parameters(self): # -> ndarray[_Shape, Any] | None:
        """Passive s-parameters."""
        ...
    
    @property
    def incident_power_element(self): # -> dict[Any, Any]:
        """Incident power per element in watts."""
        ...
    
    @property
    def incident_power(self): # -> int | None:
        """Total incident power in watts."""
        ...
    
    @property
    def accepted_power_element(self): # -> dict[Any, Any]:
        """Accepted power per element in watts."""
        ...
    
    @property
    def accepted_power(self): # -> int | None:
        """Total accepted power in watts."""
        ...
    
    @property
    def radiated_power_element(self): # -> dict[Any, Any]:
        """Radiated power per element in watts."""
        ...
    
    @property
    def radiated_power(self): # -> int | None:
        """Total radiated power in watts."""
        ...
    
    @property
    def active_s_parameters(self): # -> dict[Any, Any] | None:
        """Active s-parameters."""
        ...
    
    @property
    def input_file(self): # -> Any:
        """Input file."""
        ...
    
    @property
    def farfield_data(self): # -> dict[Any, Any]:
        """Farfield data."""
        ...
    
    @property
    def element_info(self): # -> dict[Any, Any]:
        """File information."""
        ...
    
    @property
    def frequencies(self): # -> list[Any]:
        """Available frequencies."""
        ...
    
    @property
    def all_element_names(self): # -> list[Any]:
        """Available port names."""
        ...
    
    @property
    def weight(self): # -> dict[Any, Any]:
        """Weight."""
        ...
    
    @property
    def frequency(self):
        """Active frequency."""
        ...
    
    @frequency.setter
    def frequency(self, val): # -> None:
        ...
    
    @property
    def phase(self): # -> dict[Any, Any]:
        """Phase offset in degrees on each port."""
        ...
    
    @phase.setter
    def phase(self, phases): # -> None:
        ...
    
    @property
    def magnitude(self): # -> dict[Any, Any]:
        """Magnitude weight applied on each port."""
        ...
    
    @magnitude.setter
    def magnitude(self, mags): # -> None:
        ...
    
    @property
    def taper(self): # -> str | None:
        """Taper type.

        Options are:

        - ``"cosine"``
        - ``"flat"``
        - ``"hamming"``
        - ``"triangular"``
        - ``"uniform"``
        """
        ...
    
    @taper.setter
    def taper(self, val): # -> None:
        ...
    
    @property
    def origin(self): # -> list[int]:
        """Far field origin in meters."""
        ...
    
    @origin.setter
    def origin(self, vals): # -> None:
        ...
    
    @pyaedt_function_handler()
    def combine_farfield(self, phi_scan=..., theta_scan=...): # -> dict[Any, Any]:
        """Compute the far field pattern calculated for a specific phi and theta scan angle requested.

        Parameters
        ----------
        phi_scan : float, optional
            Phi scan angle in degrees. The default is ``0.0``.
        theta_scan : float, optional
            Theta scan angle in degrees. The default is ``0.0``.

        Returns
        -------
        dict
            Far field data dictionary.
        """
        ...
    
    @pyaedt_function_handler()
    def get_accepted_power(self): # -> int | None:
        """Compute the accepted power from active s-parameters and incident power.

        Returns
        -------
        float
            Total accepted power.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_contour(self, quantity=..., phi=..., theta=..., title=..., quantity_format=..., output_file=..., levels=..., polar=..., max_theta=..., show=...): # -> ReportPlotter:
        """Create a contour plot of a specified quantity in Matplotlib.

        Parameters
        ----------
        quantity : str, optional
            Far field quantity to plot. The default is ``"RealizedGain"``.
            Available quantities are: ``"RealizedGain"``, ``"RealizedGain_Phi"``, ``"RealizedGain_Theta"``,
            ``"rEPhi"``, ``"rETheta"``, and ``"rETotal"``.
        phi : float, int, optional
            Phi scan angle in degrees. The default is ``0``.
        theta : float, int, optional
            Theta scan angle in degrees. The default is ``0``.
        title : str, optional
            Plot title. The default is ``"RectangularPlot"``.
        quantity_format : str, optional
            Conversion data function.
            Available functions are: ``"abs"``, ``"ang"``, ``"dB10"``, ``"dB20"``, ``"deg"``, ``"imag"``, ``"norm"``,
            and ``"real"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case the file is not exported.
        levels : int, optional
            Color map levels. The default is ``64``.
        show : bool, optional
            Whether to show the plot. The default is ``True``. If ``False``, the Matplotlib
            instance of the plot is shown.
        polar : bool, optional
            Generate the plot in polar coordinates. The default is ``True``. If ``False``, the plot
            generated is rectangular.
        max_theta : float or int, optional
            Maximum theta angle for plotting. The default is ``180``, which plots the far-field data for
            all angles. Setting ``max_theta`` to 90 limits the displayed data to the upper
            hemisphere, that is (0 < theta < 90).

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            Matplotlib figure object.

        Examples
        --------
        >>> from ansys.aedt.core
        >>> app = ansys.aedt.core.Hfss(version="2025.1", design="Antenna")
        >>> setup_name = "Setup1 : LastAdaptive"
        >>> frequencies = [77e9]
        >>> sphere = "3D"
        >>> data = app.get_antenna_data(frequencies, setup_name, sphere)
        >>> data.plot_contour()

        """
        ...
    
    @pyaedt_function_handler()
    def plot_cut(self, quantity=..., primary_sweep=..., secondary_sweep_value=..., phi=..., theta=..., title=..., quantity_format=..., output_file=..., show=..., is_polar=..., show_legend=...): # -> ReportPlotter:
        """Create a 2D plot of a specified quantity in Matplotlib.

        Parameters
        ----------
        quantity : str, optional
            Quantity to plot. The default is ``"RealizedGain"``.
            Available quantities are: ``"RealizedGain"``, ``"RealizedGain_Theta"``, ``"RealizedGain_Phi"``,
            ``"rETotal"``, ``"rETheta"``, and ``"rEPhi"``.
        primary_sweep : str, optional.
            X-axis variable. The default is ``"phi"``. Options are ``"phi"`` and ``"theta"``.
        secondary_sweep_value : float, list, string, optional
            List of cuts on the secondary sweep to plot. The default is ``0``. Options are
            `"all"`, a single value float, or a list of float values.
        phi : float, int, optional
            Phi scan angle in degrees. The default is ``0``.
        theta : float, int, optional
            Theta scan angle in degrees. The default is ``0``.
        title : str, optional
            Plot title. The default is ``"RectangularPlot"``.
        quantity_format : str, optional
            Conversion data function.
            Available functions are: ``"abs"``, ``"ang"``, ``"dB10"``, ``"dB20"``, ``"deg"``, ``"imag"``, ``"norm"``,
            and ``"real"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case an image in not exported.
        show : bool, optional
            Whether to show the plot. The default is ``True``.
            If ``False``, the Matplotlib instance of the plot is shown.
        is_polar : bool, optional
            Whether this plot is a polar plot. The default is ``True``.
        show_legend : bool, optional
            Whether to display the legend or not. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            Matplotlib figure object.
            If ``show=True``, a Matplotlib figure instance of the plot is returned.
            If ``show=False``, the plotted curve is returned.

        Examples
        --------
        >>> from ansys.aedt.core
        >>> app = ansys.aedt.core.Hfss(version="2025.1", design="Antenna")
        >>> setup_name = "Setup1 : LastAdaptive"
        >>> frequencies = [77e9]
        >>> sphere = "3D"
        >>> data = app.get_antenna_data(frequencies, setup_name, sphere)
        >>> data.plot_cut(theta=20)
        """
        ...
    
    @pyaedt_function_handler()
    def plot_3d_chart(self, quantity=..., phi=..., theta=..., title=..., quantity_format=..., output_file=..., show=...): # -> ReportPlotter:
        """Create a 3D chart of a specified quantity in Matplotlib.

        Parameters
        ----------
        quantity : str, optional
            Far field quantity to plot. The default is ``"RealizedGain"``.
            Available quantities are: ``"RealizedGain"``, ``"RealizedGain_Phi"``, ``"RealizedGain_Theta"``,
            ``"rEPhi"``, ``"rETheta"``, and ``"rETotal"``.
        phi : float, int, optional
            Phi scan angle in degree. The default is ``0``.
        theta : float, int, optional
            Theta scan angle in degree. The default is ``0``.
        title : str, optional
            Plot title. The default is ``"3D Plot"``.
        quantity_format : str, optional
            Conversion data function.
            Available functions are: ``"abs"``, ``"ang"``, ``"dB10"``, ``"dB20"``, ``"deg"``, ``"imag"``, ``"norm"``,
            and ``"real"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case a file is not exported.
        show : bool, optional
            Whether to show the plot. The default is ``True``.
            If ``False``, the Matplotlib instance of the plot is not shown.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            Matplotlib figure object.


        Examples
        --------
        >>> from ansys.aedt.core
        >>> app = ansys.aedt.core.Hfss(version="2025.1", design="Antenna")
        >>> setup_name = "Setup1 : LastAdaptive"
        >>> frequencies = [77e9]
        >>> sphere = "3D"
        >>> data = app.get_antenna_data(frequencies, setup_name, sphere)
        >>> data.polar_plot_3d(theta=10)
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def plot_3d(self, quantity=..., quantity_format=..., rotation=..., output_file=..., show=..., show_as_standalone=..., pyvista_object=..., background=..., scale_farfield=..., show_beam_slider=..., show_geometry=...):
        """Create a 3D polar plot of the geometry with a radiation pattern in PyVista.

        Parameters
        ----------
        quantity : str, optional
            Quantity to plot. The default is ``"RealizedGain"``.
            Available quantities are: ``"RealizedGain"``, ``"RealizedGain_Theta"``, ``"RealizedGain_Phi"``,
            ``"rETotal"``, ``"rETheta"``, and ``"rEPhi"``.
        quantity_format : str, optional
            Conversion data function.
            Available functions are: ``"abs"``, ``"ang"``, ``"dB10"``, ``"dB20"``, ``"deg"``, ``"imag"``, ``"norm"``,
            and ``"real"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case a file is not exported.
        rotation : list, optional
            Far field rotation matrix. The matrix contains three vectors, around x, y, and z axes.
            The default is ``[[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]``.
        show : bool, optional
            Whether to show the plot. The default is ``True``.
        show_as_standalone : bool, optional
            Whether to show a plot as standalone. The default is ``False``.
        pyvista_object : :class:`Pyvista.Plotter`, optional
            PyVista instance defined externally. The default is ``None``.
        background : list or str, optional
            Background color if a list is passed or background picture if a string is passed.
            The default is ``None``.
        scale_farfield : list, optional
            List with minimum and maximum values of the scale slider. The default is
            ``None``.
        show_beam_slider : bool, optional
            Whether the Theta and Phi scan slider is active. The default is ``True``.
        show_geometry :
            Whether to show the geometry. The default is ``True``.

        Returns
        -------
        bool or :class:`Pyvista.Plotter`
            ``True`` when successful. The :class:`Pyvista.Plotter` is returned when ``show`` and
            ``image_path`` are ``False``.

        Examples
        --------
        >>> from ansys.aedt.core
        >>> app = ansys.aedt.core.Hfss(version="2025.1", design="Antenna")
        >>> setup_name = "Setup1 : LastAdaptive"
        >>> frequencies = [77e9]
        >>> sphere = "3D"
        >>> data = app.get_antenna_data(setup=setup_name, sphere=sphere)
        >>> data.plot_3d(quantity_format="dB10")
        """
        ...
    
    @pyaedt_function_handler()
    def get_far_field_mesh(self, quantity=..., quantity_format=...):
        """Generate a PyVista ``UnstructuredGrid`` object that represents the far field mesh.

        Parameters
        ----------
        quantity : str, optional
            Far field quantity to plot. The default is ``"RealizedGain"``.
            Available quantities are: ``"RealizedGain"``, ``"RealizedGain_Phi"``, ``"RealizedGain_Theta"``,
            ``"rEPhi"``, ``"rETheta"``, and ``"rETotal"``.
        quantity_format : str, optional
            Conversion data function.
            Available functions are: ``"abs"``, ``"ang"``, ``"dB10"``, ``"dB20"``, ``"deg"``, ``"imag"``, ``"norm"``,
            and ``"real"``.

        Returns
        -------
        :class:`Pyvista.Plotter`
            ``UnstructuredGrid`` object representing the far field mesh.
        """
        ...
    
    @pyaedt_function_handler()
    def get_port_index(self): # -> dict[Any, Any] | Literal[False]:
        """Get port indices.

        Returns
        -------
        list
            Element index.
        """
        ...
    


class UpdateBeamForm:
    """Provides for updating far field data.

    This class is used to interact with the far field Theta and Phi scan.

    Parameters
    ----------
    farfield_data : :class:`ansys.aedt.core.visualization.advanced.farfield_visualization.FfdSolutionData`
        Far field solution data instance.
    farfield_quantity : str, optional
        Quantity to plot. The default is ``"RealizedGain"``.
        Available quantities are: ``"RealizedGain"``, ``"RealizedGain_Phi"``, ``"RealizedGain_Theta"``,
        ``"rEPhi"``, ``"rETheta"``, and ``"rETotal"``.
    quantity_format : str, optional
        Conversion data function.
        Available functions are: ``"abs"``, ``"ang"``, ``"dB10"``, ``"dB20"``, ``"deg"``, ``"imag"``, ``"norm"``,
            and ``"real"``.
    """
    @pyaedt_function_handler(farfield_quantity="quantity")
    def __init__(self, ff, farfield_quantity=..., quantity_format=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def update_phi(self, phi): # -> None:
        """Update the Phi value."""
        ...
    
    @pyaedt_function_handler()
    def update_theta(self, theta): # -> None:
        """Update the Theta value."""
        ...
    


@pyaedt_function_handler()
def export_pyaedt_antenna_metadata(input_file, output_dir, variation=..., model_info=..., power=..., touchstone_file=...):
    """Obtain PyAEDT metadata JSON file from AEDT metadata XML file or embedded element pattern TXT file.

    Parameters
    ----------
    input_file : str
        Full path to the XML or TXT file.
    output_dir : str
        Full path to save the file to.
    variation : str, optional
        Label to identify corresponding variation.
    model_info : dict, optional
    power : dict, optional
        Dictionary with information of the incident power for each frequency.
        The default is ``None``, in which case an empty dictionary is applied.
        From AEDT 2024.1, this information is available from the XML input file.
        For example, the dictionary format for a two element farfield
        data = power[1000000000.0]["IncidentPower"]
        data = [1, 0.99]
    touchstone_file : str, optional
        Touchstone file name. The default is ``None``.

    Returns
    -------
    str
        Metadata JSON file.
    """
    ...

@pyaedt_function_handler()
def antenna_metadata_from_xml(input_file): # -> list[Any] | None:
    """Obtain metadata information from metadata XML file.

    Parameters
    ----------
    input_file : str
        Full path to the XML file.

    Returns
    -------
    dict
        Metadata information.

    """
    ...

