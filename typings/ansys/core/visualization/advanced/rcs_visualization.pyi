"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.internal.checks import graphics_required

current_python_version = ...
if current_python_version < (3, 10):
    ...
class MonostaticRCSData:
    """Provides monostatic radar cross-section (RCS) data.

    Read monostatic RCS metadata in a JSON file generated by :func:`MonostaticRCSExporter` and return the
    Python interface to plot and analyze the RCS data.

    Parameters
    ----------
    input_file : str
        Metadata information in a JSON file.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.visualization.advanced.rcs_visualization import MonostaticRCSData
    >>> app = Hfss(version="2025.1", design="Antenna")
    >>> data = app.get_rcs_data()
    >>> metadata_file = data.metadata_file
    >>> app.release_desktop()
    >>> rcs_data = MonostaticRCSData(input_file=metadata_file)
    """
    def __init__(self, input_file) -> None:
        ...
    
    @property
    def raw_data(self): # -> DataFrame | Series[Any] | dict[Any, Any]:
        """Antenna data."""
        ...
    
    @property
    def metadata(self): # -> Any:
        """Antenna metadata."""
        ...
    
    @property
    def name(self): # -> str | None:
        """Data name."""
        ...
    
    @property
    def solution(self): # -> Any:
        """Data solution name."""
        ...
    
    @property
    def input_file(self): # -> Path:
        """Input file."""
        ...
    
    @property
    def frequency_units(self): # -> Any:
        """Frequency units."""
        ...
    
    @property
    def frequencies(self): # -> Any | list[Any]:
        """Available frequencies."""
        ...
    
    @property
    def available_incident_wave_theta(self): # -> NDArray[Any] | None:
        """Available incident wave Theta."""
        ...
    
    @property
    def incident_wave_theta(self): # -> Any | None:
        """Active incident wave Theta."""
        ...
    
    @incident_wave_theta.setter
    def incident_wave_theta(self, val): # -> None:
        """Active incident wave Theta."""
        ...
    
    @property
    def available_incident_wave_phi(self): # -> NDArray[Any] | None:
        """Available incident wave Phi."""
        ...
    
    @property
    def incident_wave_phi(self): # -> Any | None:
        """Active incident wave Phi."""
        ...
    
    @incident_wave_phi.setter
    def incident_wave_phi(self, val): # -> None:
        """Active incident wave Phi."""
        ...
    
    @property
    def frequency(self): # -> None:
        """Active frequency."""
        ...
    
    @frequency.setter
    def frequency(self, val): # -> None:
        ...
    
    @property
    def data_conversion_function(self): # -> str:
        """RCS data conversion function.

        The available functions are:

        - `"dB10"`: Converts the data to decibels using base 10 logarithm.
        - `"dB20"`: Converts the data to decibels using base 20 logarithm.
        - `"abs"`: Computes the absolute value of the data.
        - `"real"`: Computes the real part of the data.
        - `"imag"`: Computes the imaginary part of the data.
        - `"norm"`: Normalizes the data to have values between 0 and 1.
        - `"ang"`: Computes the phase angle of the data in radians.
        - `"ang_deg"`: Computes the phase angle of the data in degrees.
        """
        ...
    
    @data_conversion_function.setter
    def data_conversion_function(self, val): # -> None:
        ...
    
    @property
    def window(self): # -> str:
        """Window function.

        The available functions are: Options are ``"Flat"``, ``"Hamming``", and ``"Hann"``.
        """
        ...
    
    @window.setter
    def window(self, val): # -> None:
        ...
    
    @property
    def window_size(self): # -> int:
        """Window size."""
        ...
    
    @window_size.setter
    def window_size(self, val): # -> None:
        ...
    
    @property
    def aspect_range(self): # -> str:
        """Aspect range for ISAR."""
        ...
    
    @aspect_range.setter
    def aspect_range(self, val): # -> None:
        ...
    
    @property
    def upsample_range(self): # -> int:
        """Upsample range for ISAR."""
        ...
    
    @upsample_range.setter
    def upsample_range(self, val): # -> None:
        ...
    
    @property
    def upsample_azimuth(self): # -> int:
        """Upsample azimuth for ISAR."""
        ...
    
    @upsample_azimuth.setter
    def upsample_azimuth(self, val): # -> None:
        ...
    
    @property
    def rcs(self): # -> None:
        """RCS data for active frequency, theta and phi."""
        ...
    
    @property
    def rcs_active_theta_phi(self): # -> None:
        """RCS data for active theta and phi."""
        ...
    
    @property
    def rcs_active_frequency(self): # -> None:
        """RCS data for active frequency."""
        ...
    
    @property
    def rcs_active_theta(self): # -> DataFrame | None:
        """RCS data for active incident wave theta."""
        ...
    
    @property
    def rcs_active_phi(self): # -> DataFrame | None:
        """RCS data for active incident wave phi."""
        ...
    
    @property
    def range_profile(self): # -> DataFrame | None:
        """Range profile."""
        ...
    
    @property
    def waterfall(self): # -> DataFrame | None:
        """Waterfall."""
        ...
    
    @property
    def isar_2d(self): # -> DataFrame | None:
        """ISAR 2D."""
        ...
    
    @staticmethod
    def window_function(window=..., size=...): # -> tuple[ndarray[_Shape, dtype[floating[Any]]] | ndarray[tuple[int], dtype[float64]], floating[Any]]:
        """Window function.

        Parameters
        ----------
        window : str, optional.
            Window function. The default is ``"Flat"``. Options are ``"Flat"``, ``"Hamming``", and ``"Hann"``.
        size : int, optional
            Window size. The default is ``512``.

        Returns
        -------
        tuple
            Data windowed and data sum.
        """
        ...
    


class MonostaticRCSPlotter:
    """Provides monostatic radar cross-section (RCS) plot functionalities.

    Parameters
    ----------
    rcs_data : :class:`ansys.aedt.core.visualization.advanced.rcs_visualization`, optional
        Monostatic RCS data object.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.visualization.advanced.rcs_visualization import MonostaticRCSData
    >>> from ansys.aedt.core.visualization.advanced.rcs_visualization import MonostaticRCSPlotter
    >>> app = Hfss(version="2025.1", design="Antenna")
    >>> data = app.get_rcs_data()
    >>> metadata_file = data.metadata_file
    >>> app.release_desktop()
    >>> rcs_data = MonostaticRCSData(input_file=metadata_file)
    >>> rcs_plotter = MonostaticRCSPlotter(rcs_data)
    """
    def __init__(self, rcs_data=...) -> None:
        ...
    
    @property
    def rcs_data(self): # -> None:
        """RCS data object."""
        ...
    
    @property
    def model_info(self): # -> None:
        """Geometry information."""
        ...
    
    @property
    def model_units(self): # -> str:
        """Model units."""
        ...
    
    @property
    def all_scene_actors(self): # -> dict[str, dict[Any, Any]]:
        """All scene actors."""
        ...
    
    @property
    def extents(self): # -> list[int]:
        """Geometry extents."""
        ...
    
    @property
    def center(self): # -> NDArray[Any]:
        """Geometry center."""
        ...
    
    @property
    def radius(self): # -> int:
        """Geometry radius."""
        ...
    
    @pyaedt_function_handler()
    def plot_rcs(self, primary_sweep=..., secondary_sweep=..., secondary_sweep_value=..., title=..., output_file=..., show=..., is_polar=..., show_legend=..., size=...): # -> ReportPlotter | None:
        """Create a 2D plot of the monostatic RCS.

        Parameters
        ----------
        primary_sweep : str, optional.
            X-axis variable. The default is ``"IWavePhi"``. Options are ``"Freq"``, ``"IWavePhi"`` and ``"IWaveTheta"``.
        secondary_sweep : str, optional.
            X-axis variable. The default is ``"IWavePhi"``. Options are ``"Freq"``, ``"IWavePhi"`` and ``"IWaveTheta"``.
        secondary_sweep_value : float, list, string, optional
            List of cuts on the secondary sweep to plot. The default is ``0``. Options are
            `"all"`, a single value float, or a list of float values.
        title : str, optional
            Plot title. The default is ``"RectangularPlot"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case an image in not exported.
        show : bool, optional
            Whether to show the plot. The default is ``True``.
            If ``False``, the Matplotlib instance of the plot is shown.
        is_polar : bool, optional
            Whether this plot is a polar plot. The default is ``True``.
        show_legend : bool, optional
            Whether to display the legend or not. The default is ``True``.
        size : tuple, optional
            Image size in pixel (width, height).

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            PyAEDT matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_rcs_3d(self, title=..., output_file=..., show=..., size=...): # -> ReportPlotter:
        """Create a 3D plot of the monostatic RCS.

        Parameters
        ----------
        title : str, optional
            Plot title. The default is ``"RectangularPlot"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case an image in not exported.
        show : bool, optional
            Whether to show the plot. The default is ``True``.
            If ``False``, the Matplotlib instance of the plot is shown.
        size : tuple, optional
            Image size in pixel (width, height).

        Returns
        -------
        :class:`matplotlib.pyplot.Figure`
            Matplotlib figure object.
            If ``show=True``, a Matplotlib figure instance of the plot is returned.
            If ``show=False``, the plotted curve is returned.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_range_profile(self, title=..., output_file=..., show=..., show_legend=..., size=...): # -> ReportPlotter:
        """Create a 2D plot of the range profile.

        Parameters
        ----------
        title : str, optional
            Plot title. The default is ``"RectangularPlot"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case an image in not exported.
        show : bool, optional
            Whether to show the plot. The default is ``True``.
            If ``False``, the Matplotlib instance of the plot is shown.
        show_legend : bool, optional
            Whether to display the legend or not. The default is ``True``.
        size : tuple, optional
            Image size in pixel (width, height).

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            PyAEDT matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_waterfall(self, title=..., output_file=..., show=..., is_polar=..., size=..., figure=...): # -> ReportPlotter:
        """Create a 2D contour plot of the waterfall.

        Parameters
        ----------
        title : str, optional
            Plot title. The default is ``"RectangularPlot"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case an image in not exported.
        show : bool, optional
            Whether to show the plot. The default is ``True``.
            If ``False``, the Matplotlib instance of the plot is shown.
        is_polar : bool, optional
            Whether to display in polar coordinates. The default is ``True``.
        size : tuple, optional
            Image size in pixel (width, height).
        figure : :class:`matplotlib.pyplot.Figure`, optional
            An existing Matplotlib `Figure` to which the plot is added.
            If not provided, a new `Figure` and `Axes` objects are created.
            Default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            PyAEDT matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_isar_2d(self, title=..., output_file=..., show=..., size=..., figure=...): # -> ReportPlotter:
        """Create a 2D contour plot of the ISAR.

        Parameters
        ----------
        title : str, optional
            Plot title. The default is ``"RectangularPlot"``.
        output_file : str, optional
            Full path for the image file. The default is ``None``, in which case an image in not exported.
        show : bool, optional
            Whether to show the plot. The default is ``True``.
            If ``False``, the Matplotlib instance of the plot is shown.
        size : tuple, optional
            Image size in pixel (width, height).
        figure : :class:`matplotlib.pyplot.Figure`, optional
            An existing Matplotlib `Figure` to which the plot is added.
            If not provided, a new `Figure` and `Axes` objects are created.
            Default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            PyAEDT matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def plot_scene(self, show=...): # -> None:
        """Plot the 3D scene including models, annotations, and results.

        This method visualizes the 3D scene by rendering the mesh objects under the "model",
        "annotations", and "results" categories stored in `self.all_scene_actors`. The meshes
        are rendered using a default PyVista plotter.

        Parameters
        ----------
        show : bool, optional
            Whether to immediately display the plot. If ``True``, the plot will be displayed using ``plotter.show()``.
            If ``False``, the ``plotter`` object is returned for further customization before rendering.
            The default is ``True``.

        Returns
        -------
        pyvista.Plotter or None
            Returns the ``Plotter`` object if ``show`` is set to ``False``. If ``show`` is ``True``,
            the plot is displayed and no value is returned.
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def add_rcs(self, color_bar=...): # -> None:
        """Add a 3D RCS representation to the current scene.

        This function normalizes and visualizes RCS data on a spherical coordinate grid
        (theta, phi), mapping it to 3D Cartesian coordinates (x, y, z). The RCS values are
        color-mapped and added as a mesh to the current scene actors.

        Parameters
        ----------
        color_bar : str, optional
            Color mapping to be applied to the RCS data. It can be a color (``"blue"``,
            ``"green"``, ...) or a colormap (``"jet"``, ``"viridis"``, ...). The default is ``"jet"``.
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def add_range_profile_settings(self, size_range=..., range_resolution=..., tick_color=..., line_color=..., disc_color=..., cone_color=...): # -> None:
        """Add a 3D range profile setting representation to the current scene.

        This function visualizes a 3D range profile with a main line representing the range axis
        and tick marks indicating distance intervals. The profile includes visual elements like
        a disc at the far end and a cone at the starting point. These elements help to display
        a reference range profile in the 3D scene.

        Parameters
        ----------
        size_range : float, optional
            Total size of the range in ``meters``. It determines the length of the range
            profile. The default is ``10.0``.
        range_resolution : float, optional
            Resolution of the range in ``meters``, representing the distance between each tick mark along
            the range profile. The default is ``0.1``.
        tick_color : str, optional
            Color of the tick marks along the range profile. The default is black (``"#000000"``).
        line_color : str, optional
            Color of the line. The default is red (``"#ff0000"``).
        disc_color : str, optional
            Color of the disc. The default is red (``"#ff0000"``).
        cone_color : str, optional
            Color of the cone. The default is green (``"#00ff00"``).
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def add_waterfall_settings(self, aspect_ang_phi=..., phi_num=..., tick_color=..., line_color=..., cone_color=...): # -> None:
        """
        Add a 3D waterfall setting representation to the current scene.

        This function visualizes a 3D "waterfall" pattern that represents angular data across
        a circular arc in a spherical coordinate system. The arc covers an angular extent defined
        by the ``aspect_ang_phi`` parameter, with optional tick marks along the arc. A cone is added
        to indicate the endpoint of the angular sweep.

        Parameters
        ----------
        aspect_ang_phi : float, optional
            The angular extent of the arc in degrees. It defines the total angle (in degrees) over
            which the circular arc spans. The default is ``360.0`` degrees (full circle).
        phi_num : int, optional
            The number of tick marks to be placed along the arc. The default is ``10``.
        tick_color : str, optional
            Color of the tick marks. The default is black (``"#000000"``).
        line_color : str, optional
            Color of the line. The default is red (``"#ff0000"``).
        cone_color : str, optional
            Color of the cone. The default is green (``"#00ff00"``).
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def add_isar_2d_settings(self, size_range=..., range_resolution=..., size_cross_range=..., cross_range_resolution=..., tick_color=..., line_color=...): # -> None:
        """
        Add a preview frame of 2D ISAR (Inverse Synthetic Aperture Radar) visualization to the current 3D scene.

        This function creates a 2D range and cross-range profile in a 3D scene. It includes a main
        line to represent the range axis, tick marks to indicate distance intervals, and additional
        lines to mark the azimuth. The visualization aids in representing ISAR settings for both
        range and cross-range dimensions.

        Parameters
        ----------
        size_range : float, optional
            The total size of the range axis in meters. This sets the overall length of the
            range axis. The default is ``10.0 meters``.
        range_resolution : float, optional
            Resolution of the range axis in meters, specifying the spacing between each tick mark.
            The default is ``0.1 meters``.
        size_cross_range : float, optional
            The total size of the cross-range axis in meters. This sets the width of the cross-range
            axis. The default is ``10.0 meters``.
        cross_range_resolution : float, optional
            Resolution of the cross-range axis in meters, specifying the spacing between each tick mark
            along the azimuth axis. The default is ``0.1 meters``.
        tick_color : str, optional
            Color of the tick marks along both the range and cross-range axes. The default is
            black ("#000000").
        line_color : str, optional
            Color of the line. The default is red (``"#ff0000"``).
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def add_isar_3d_settings(self, size_range=..., range_resolution=..., size_cross_range=..., cross_range_resolution=..., size_elevation_range=..., elevation_range_resolution=..., tick_color=..., line_color=...): # -> None:
        """
        Add a a preview frame of 3D ISAR (Inverse Synthetic Aperture Radar) visualization to the current 3D scene.

        Parameters
        ----------
        size_range : float, optional
            The total size of the range axis in meters. This sets the overall length of the
            range axis. The default is ``10.0 meters``.
        range_resolution : float, optional
            Resolution of the range axis in meters, specifying the spacing between each tick mark.
            The default is ``0.1 meters``.
        size_cross_range : float, optional
            The total size of the cross-range axis in meters. This sets the width of the cross-range
            axis. The default is ``10.0 meters``.
        cross_range_resolution : float, optional
            Resolution of the cross-range axis in meters, specifying the spacing between each tick mark
            along the azimuth axis. The default is ``0.1 meters``.
        size_elevation_range : float, optional
            The total size of the elevation-range axis in meters. This sets the width of the elevation-range
            axis. The default is ``10.0 meters``.
        elevation_range_resolution : float, optional
            Resolution of the elevation-range axis in meters, specifying the spacing between each tick mark
            along the elevation axis. The default is ``0.1 meters``.
        tick_color : str, optional
            Color of the tick marks along both the range and cross-range axes. The default is
            black (``"#000000"``).
        line_color : str, optional
            Color of the line. The default is red (``"#ff0000"``).
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def add_range_profile(self, plot_type=..., color_bar=...): # -> None:
        """Add the 3D range profile.

        This function visualizes a 3D range profile, which represents the RCS data
        as a function of range. The profile is rendered as a plot in the 3D scene using spherical coordinates
        (phi, theta) mapped into Cartesian coordinates (x, y). The range profile can be visualized in different
        plot types such as line plots or color-mapped surfaces.

        Parameters
        ----------
        plot_type : str, optional
            The type of plot to create for the range profile. It can be ``"Line"``, ``"Ribbon"``, ``"Rotated"``,
             ``"Extruded"``, ``"Plane V"``, `"Plane H"``, and `"Projection"``. The default is ``"Line"``.
        color_bar : str, optional
            Color mapping to be applied to the RCS data. It can be a color (``"blue"``,
            ``"green"``, ...) or a colormap (``"jet"``, ``"viridis"``, ...). The default is ``"jet"``.
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def add_waterfall(self, color_bar=...): # -> None:
        """Add the 3D waterfall."""
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def add_isar_2d(self, plot_type=..., color_bar=...): # -> None:
        """Add the ISAR 2D.

        Parameters
        ----------
        plot_type : str, optional
            The type of plot to create for the range profile. It can be ``"plane"``, ``"relief"``, and `"projection"``.
            The default is ``"plane"``.
        color_bar : str, optional
            Color mapping to be applied to the RCS data. It can be a color (``"blue"``,
            ``"green"``, ...) or a colormap (``"jet"``, ``"viridis"``, ...). The default is ``"jet"``.
        """
        ...
    
    @pyaedt_function_handler()
    def add_incident_rcs_settings(self, theta_span: float, num_theta: int, phi_span: float, num_phi: int, arrow_color: str = ..., line_color: str = ...): # -> None:
        """Add incident wave arrow setting for RCS scene.

        This function visualizes the incident wave arrows for RCS settings.

        Parameters
        ----------
        theta_span : float
            Incident theta angle in degrees.
        num_theta : int
            Number of theta points.
        phi_span : float
            Incident phi angle in degrees.
        num_phi : int
            Number of phi points.
        arrow_color : str, optional
            Color of the arrow. The default is red (``"#ff0000"``).
        line_color : str, optional
            Color of the line. The default is red (``"#ff0000"``).
        """
        ...
    
    @pyaedt_function_handler()
    def add_incident_range_profile_settings(self, arrow_color: str = ...): # -> None:
        """Add incident wave arrow setting for range profile scene.

        This function visualizes the incident wave arrows for RCS settings.

        Parameters
        ----------
        arrow_color : str, optional
            Color of the arrow. The default is red (``"#ff0000"``).
        """
        ...
    
    @pyaedt_function_handler()
    def add_incident_waterfall_settings(self, phi_span: float, num_phi: int, arrow_color: str = ..., line_color: str = ...): # -> None:
        """Add incident wave arrow setting for waterfall scene.

        This function visualizes the incident wave arrows for waterfall settings.

        Parameters
        ----------
        phi_span : float
            Incident phi angle in degrees.
        num_phi : int
            Number of phi points.
        arrow_color : str, optional
            Color of the arrow. The default is red (``"#ff0000"``).
        line_color : str, optional
            Color of the line. The default is red (``"#ff0000"``).
        """
        ...
    
    @pyaedt_function_handler()
    def add_incident_isar_2d_settings(self, phi_span: float, num_phi: int, arrow_color: str = ..., line_color: str = ...): # -> None:
        """Add incident wave arrow setting for ISAR 2D scene.

        This function visualizes the incident wave arrows for ISAR 2D settings.

        Parameters
        ----------
        phi_span : float
            Incident phi angle in degrees.
        num_phi : int
            Number of phi points.
        arrow_color : str, optional
            Color of the arrow. The default is red (``"#ff0000"``).
        line_color : str, optional
            Color of the line. The default is red (``"#ff0000"``).
        """
        ...
    
    @pyaedt_function_handler()
    def add_incident_isar_3d_settings(self, theta_span: float, num_theta: int, phi_span: float, num_phi: int, arrow_color: str = ..., line_color: str = ...): # -> None:
        """Add incident wave arrow setting for ISAR 3D scene.

        This function visualizes the incident wave arrows for ISAR 3D settings.

        Parameters
        ----------
        theta_span : float
            Incident theta angle in degrees.
        num_theta : int
            Number of theta points.
        phi_span : float
            Incident phi angle in degrees.
        num_phi : int
            Number of phi points.
        arrow_color : str, optional
            Color of the arrow. The default is red (``"#ff0000"``).
        line_color : str, optional
            Color of the line. The default is red (``"#ff0000"``).
        """
        ...
    
    @pyaedt_function_handler()
    def clear_scene(self, first_level=..., second_level=..., name=...): # -> bool:
        ...
    
    @staticmethod
    def stretch_data(data, scaling_factor, offset):
        """
        Stretches and scales the input data to a specified range.

        This method normalizes the input data between its minimum and maximum values and then applies
        a linear transformation using the formula: ``scaled_data = (data - min) / (max - min) * m + b``.
        The parameters ``m`` and ``b`` control the scaling and shifting of the normalized data.

        Parameters
        ----------
        data : numpy.ndarray or pandas.Series
            The input data array or series to be stretched.
        scaling_factor : float
            The scaling factor applied to the normalized data.
        offset : float
            The offset added to the scaled data after normalization.

        Returns
        -------
        numpy.ndarray or pandas.Series
            Transformed data

        Example:
        -------
        >>> data = np.array([1, 2, 3, 4, 5])
        >>> stretched_data = stretch_data(data, 2, 1)
        >>> print(stretched_data)
        [1.  1.5 2.  2.5 3. ]
        """
        ...
    


class SceneMeshObject:
    """
    A class representing a custom 3D mesh object with visualization properties.

    This class defines a 3D mesh object with customizable properties.
    It provides methods to retrieve the mesh, its associated rendering options, and annotation properties for
    visualization in PyVista.

    """
    @graphics_required
    def __init__(self) -> None:
        ...
    
    @property
    def mesh(self):
        """Get the mesh object."""
        ...
    
    @mesh.setter
    def mesh(self, val): # -> None:
        ...
    
    @property
    def z_offset(self): # -> float:
        "Offset in the Z direction."
        ...
    
    @z_offset.setter
    def z_offset(self, val): # -> None:
        ...
    
    @property
    def scale_factor(self): # -> float:
        """Get the current scale factor."""
        ...
    
    @scale_factor.setter
    def scale_factor(self, val): # -> None:
        """Set a new scale factor and update the mesh accordingly."""
        ...
    
    def reset_scene(self): # -> None:
        """Reset the mesh to its original position and size."""
        ...
    
    def get_mesh(self):
        """Retrieve the mesh object.

        Returns
        -------
        pyvista.PolyData or pyvista.UnstructuredGrid
            The mesh object representing the 3D geometry.
        """
        ...
    
    def name(self): # -> Callable[[], ...]:
        """Name."""
        ...
    
    def line_width(self): # -> Callable[[], Callable[[], ...]]:
        """Line width."""
        ...
    
    def opacity(self): # -> Callable[[], ...]:
        """Opacity."""
        ...
    
    def color(self): # -> Callable[[], ...]:
        """Color."""
        ...
    
    def scalar_dict(self): # -> Callable[[], ...]:
        """Scalar bar dict."""
        ...
    
    def get_model_options(self): # -> dict[str, Callable[[], Callable[[], ...]]]:
        """Retrieve the visualization options for the mesh.

        Returns
        -------
        dict
            A dictionary with the color and opacity settings for rendering the model.
        """
        ...
    
    def get_annotation_options(self): # -> dict[str, Any]:
        """Retrieve the annotation options for the mesh.

        Returns
        -------
        dict
            A dictionary with the color and line width settings for annotating the model.
        """
        ...
    
    def get_result_options(self): # -> dict[str, Any]:
        """Retrieve the result options for the mesh.

        Returns
        -------
        dict
            A dictionary with the settings for results the model.
        """
        ...
    


