"""
This type stub file was generated by pyright.
"""

import skrf as rf
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.internal.checks import graphics_required

REAL_IMAG = ...
MAG_ANGLE = ...
DB_ANGLE = ...
keys = ...
class TouchstoneData(rf.Network):
    """Contains data information from Touchstone Read call."""
    def __init__(self, solution_data=..., touchstone_file=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def reduce(self, ports, output_file=..., reordered=...): # -> str | None:
        """Reduce the Touchstone file and export it.

        Parameters
        ----------
        ports : list
            List of ports or port indexes to use for the reduction.
        output_file : str, optional
            Output file path. The default is ``None``.
        reordered : bool, optional
            Whether to reorder the ports in the output file with given input order or not. The default is ``True``.

        Returns
        -------
        str
            Output file path

        """
        ...
    
    @pyaedt_function_handler()
    def get_coupling_in_range(self, start_frequency=..., low_loss=..., high_loss=..., frequency_sample=..., output_file=..., aedb_path=..., design_name=...): # -> list[Any]:
        """Get coupling losses, excluding return loss, that has at least one frequency point between a range of
        losses.

        Parameters
        ----------
        start_frequency : float, optional
            Specify frequency value below which not check will be done. The default is ``1e9``.
        low_loss: float, optional
            Specify range lower loss. The default is ``-40``.
        high_loss: float, optional
            Specify range higher loss. The default is ``-60``.
        frequency_sample : integer, optional
            Specify frequency sample at which coupling check will be done. The default is ``5``.
        output_file : path, optional
            Output file path to save where identified coupling will be listed. The default is ``None``.
        aedb_path : path, optional
            Full path to the ``aedb`` folder. This project is used to identify ports location. The default is ``None``.
        design_name : string, optional
            Design name from the project where to identify ports location. The default is ``None``.

        Returns
        -------
         list
            List of S parameters in the range [high_loss, low_loss] to plot.

        """
        ...
    
    @pyaedt_function_handler()
    def get_insertion_loss_index(self, threshold=...): # -> list[Any]:
        """Get all insertion losses.

        The first frequency point is used to determine whether two ports are shorted.

        Parameters
        ----------
        threshold : float, int, optional
            Threshold to determine shorted ports in dB. The default value is ``-3``.

        Returns
        -------
         list
            List of index couples representing insertion losses of excitations.

        """
        ...
    
    @graphics_required
    def plot_insertion_losses(self, threshold=..., plot=...): # -> list[Any]:
        """Plot all insertion losses.

        The first frequency point is used to determine whether two ports are shorted.

        Parameters
        ----------
        threshold : float, int, optional
            Threshold to determine shorted ports in dB. The default value is ``-3``.
        plot : bool, optional
            Whether to plot. The default is ``True``.

        Returns
        -------
        list
            List of tuples representing insertion loss excitations.
        """
        ...
    
    @graphics_required
    def plot(self, index_couples=..., show=...): # -> Literal[True]:
        """Plot a list of curves.

        Parameters
        ----------
        index_couples : list, optional
            List of indexes couple to plot. The default value is ``None`` to plot all ``port_tuples``.
        show : bool
            Whether to plot. The default value is ``True``.

        Returns
        -------
        :class:`matplotlib.plt`
        """
        ...
    
    @graphics_required
    def plot_return_losses(self): # -> Literal[True]:
        """Plot all return losses.

        Returns
        -------
        bool
        """
        ...
    
    def get_mixed_mode_touchstone_data(self, num_of_diff_ports=..., port_ordering=...): # -> Self | Literal[False]:
        """Transform network from single ended parameters to generalized mixed mode parameters.

        Parameters
        ----------
        num_of_diff_ports : int, optional
            The number of differential ports.
        port_ordering : str, optional
            The current port ordering. Options are ``"1234"``, ``"1324"``. The default
            is ``1234``.

        Returns
        -------
        class:`ansys.aedt.core.generic.touchstone_parser.TouchstoneData`

        """
        ...
    
    @pyaedt_function_handler()
    def get_return_loss_index(self, excitation_name_prefix=...): # -> list[Any]:
        """Get the list of all the return loss from a list of excitations.

        If no excitation is provided it will provide a full list of return losses.

        Example: excitation_names ["1","2"] is_touchstone_expression=False output ["S(1,1)", S(2,2)]
        Example: excitation_names ["S(1,1)","S(1,2)", S(2,2)] is_touchstone_expression=True output ["S(1,1)", S(2,2)]

        Parameters
        ----------
        excitation_name_prefix :str, optional
            Prefix of the excitation. The default value is ``""``.

        Returns
        -------
        list
            List of index couples representing return losses of excitations.

        """
        ...
    
    @pyaedt_function_handler()
    def get_insertion_loss_index_from_prefix(self, tx_prefix, rx_prefix): # -> list[Any] | Literal[False]:
        """Get the list of all the insertion losses from prefix.

        Parameters
        ----------
        tx_prefix : str
            Prefix for TX (eg. "DIE").
        rx_prefix : str
            Prefix for RX (eg. "BGA").

        Returns
        -------
        list
            List of index couples representing Insertion Losses of excitations.

        """
        ...
    
    @pyaedt_function_handler()
    def get_next_xtalk_index(self, tx_prefix=...): # -> list[Any]:
        """Get the list of all the Near End XTalk a list of excitation.

        Optionally prefix can be used to retrieve driver names.
        Example: excitation_names ["1", "2", "3"] output ["S(1,2)", "S(1,3)", "S(2,3)"].

        Parameters
        ----------
        tx_prefix :str, optional
            Prefix for TX (eg. "DIE"). The default value is ``""``.

        Returns
        -------
        list
            List of index couples representing Near End XTalks.
        """
        ...
    
    @pyaedt_function_handler()
    def get_fext_xtalk_index_from_prefix(self, tx_prefix, rx_prefix, skip_same_index_couples=...): # -> list[Any]:
        """Get the list of all the Far End XTalk from a list of excitations and a prefix that will
        be used to retrieve driver and receivers names.
        If skip_same_index_couples is true, the tx and rx with same index
        position will be considered insertion losses and excluded from the list.

        Parameters
        ----------
        tx_prefix : str
            prefix for TX (eg. "DIE")
        rx_prefix : str
            prefix for RX (eg. "BGA")
        skip_same_index_couples : bool
            Boolean ignore TX and RX couple with same index. The default value is ``True``.

        Returns
        -------
        list
            List of index couples representing Far End XTalks.
        """
        ...
    
    @graphics_required
    def plot_next_xtalk_losses(self, tx_prefix=...): # -> Literal[True]:
        """Plot all next crosstalk curves.

        Parameters
        ----------
        tx_prefix: str, optional
            Prefix for TX. The default value is ``""``.

        Returns
        -------
        bool
        """
        ...
    
    @graphics_required
    def plot_fext_xtalk_losses(self, tx_prefix, rx_prefix, skip_same_index_couples=...): # -> Literal[True]:
        """Plot all fext crosstalk curves.

        Parameters
        ----------
        tx_prefix : str
            Prefix for TX (eg. "DIE").
        rx_prefix : str
            Prefix for RX (eg. "BGA").
        skip_same_index_couples : bool, optional
            Boolean ignore TX and RX couple with same index. The default value is ``True``.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    @graphics_required
    def get_worst_curve(self, freq_min=..., freq_max=..., worst_is_higher=..., curve_list=..., plot=...): # -> tuple[Any, dict[Any, Any]]:
        """Analyze a solution data object with multiple curves and find the worst curve.

        Take the mean of the magnitude over the frequency range.

        Parameters
        ----------
        freq_min : float, optional
            Minimum frequency to analyze in GHz (None to 0). The default value is ``None``.
        freq_max : float, optional
            Maximum frequency to analyze in GHz (None to max freq). The default value is ``None``.
        worst_is_higher : bool
            Worst curve is the one with higher mean value. The default value is ``True``.
        curve_list : list
            List of [m,n] index of curves on which to search. None to search on all curves.
            The default value is ``None``.
        plot : bool, optional
            Whether to plot or not the chart. The default value is ``True``.

        Returns
        -------
        tuple
            Worst element, dictionary of ordered expression.
        """
        ...
    


@pyaedt_function_handler(file_path="input_file")
def read_touchstone(input_file): # -> TouchstoneData:
    """Load the contents of a Touchstone file into an NPort.

    Parameters
    ----------
    input_file : str
        The path of the touchstone file.

    Returns
    -------
    class:`ansys.aedt.core.generic.touchstone_parser.TouchstoneData`
        NPort holding data contained in the touchstone file.

    """
    ...

@pyaedt_function_handler(folder="input_dir")
def check_touchstone_files(input_dir=..., passivity=..., causality=...): # -> dict[Any, Any]:
    """Check passivity and causality for all Touchstone files included in the folder.

    .. warning::

        Do not execute this function with untrusted function argument, environment
        variables or pyaedt global settings.
        See the :ref:`security guide<ref_security_consideration>` for details.

    Parameters
    ----------
    input_dir : str
        Folder path. The default is ``""``.
    passivity : bool, optional
        Whether the passivity check is enabled, The default is ``True``.
    causality : bool, optional
        Whether the causality check is enabled. The default is ``True``.

    Returns
    -------
    dict
        Dictionary with the SNP file name as the key and a list if the passivity and/or causality checks are enabled.
        The first element in the list is a str with ``"passivity"`` or ``"causality"`` as a value. The second element
        is a Boolean that is set to ``True`` when the criteria passed or ``False`` otherwise. The last element
        is a string with the log information.

    """
    ...

@pyaedt_function_handler()
def find_touchstone_files(input_dir): # -> dict[Any, Any]:
    """Get all Touchstone files in a directory.

    Parameters
    ----------
    input_dir : str
        Folder path. The default is ``""``.

    Returns
    -------
    dict
        Dictionary with the SNP file names as the key and the absolute path as the value.
    """
    ...

