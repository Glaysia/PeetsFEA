"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class FfdSolutionDataExporter:
    """Class to enable export of embedded element pattern data from HFSS.

    An instance of this class is returned from the
    :meth:`ansys.aedt.core.Hfss.get_antenna_data` method. This method allows creation of
    the embedded
    element pattern files for an antenna that have been solved in HFSS. The
    ``metadata_file`` properties can then be passed as arguments to
    instantiate an instance of the
    :class:`ansys.aedt.core.ansys.aedt.core.visualization.advanced.farfield_visualization.FfdSolutionData` class for
    subsequent analysis and postprocessing of the array data.

    Note that this class is derived from the :class:`FfdSolutionData` class and can be used directly for
    far-field postprocessing and array analysis, but it remains a property of the
    :class:`ansys.aedt.core.Hfss` application.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.Hfss`
        HFSS application instance.
    sphere_name : str
        Infinite sphere to use.
    setup_name : str
        Name of the setup. Make sure to build a setup string in the form of ``"SetupName : SetupSweep"``.
    frequencies : list
        Frequency list to export. Specify either a list of strings with units or a list of floats in Hertz units.
        For example, ``["9GHz", 9e9]``.
    variations : dict, optional
        Dictionary of all families including the primary sweep. The default value is ``None``.
    overwrite : bool, optional
        Whether to overwrite the existing far field solution data. The default is ``True``.
    export_touchstone : bool, optional
        Whether to export touchstone file. The default is ``False``. Working from 2024 R1.
    set_phase_center_per_port : bool, optional
        Set phase center per port location. The default is ``True``.

    Examples
    --------
    >>> from ansys.aedt.core
    >>> app = ansys.aedt.core.Hfss(version="2025.1", design="Antenna")
    >>> setup_name = "Setup1 : LastAdaptive"
    >>> frequencies = [77e9]
    >>> sphere = "3D"
    >>> data = app.get_antenna_data(frequencies, setup_name, sphere)
    >>> data.plot_3d(quantity_format="dB10")
    """
    def __init__(self, app, sphere_name, setup_name, frequencies, variations=..., overwrite=..., export_touchstone=..., set_phase_center_per_port=...) -> None:
        ...
    
    @property
    def model_info(self): # -> dict[Any, Any]:
        """List of models."""
        ...
    
    @property
    def farfield_data(self): # -> FfdSolutionData | None:
        """Farfield data."""
        ...
    
    @property
    def metadata_file(self): # -> str:
        """Metadata file."""
        ...
    
    @pyaedt_function_handler()
    def export_farfield(self): # -> Literal[False]:
        """Export far field solution data of each element."""
        ...
    


