"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class SolutionData:
    """Contains information from the :func:`GetSolutionDataPerVariation` method."""
    def __init__(self, aedtdata) -> None:
        ...
    
    @property
    def enable_pandas_output(self): # -> bool:
        """Set/Get a flag to use Pandas to export dict and lists.

        This applies to Solution data output.
        If ``True`` the property or method will return a pandas object in CPython environment.
        Default is ``False``.

        Returns
        -------
        bool
        """
        ...
    
    @enable_pandas_output.setter
    def enable_pandas_output(self, val): # -> None:
        ...
    
    @pyaedt_function_handler()
    def set_active_variation(self, var_id=...): # -> bool:
        """Set the active variations to one of available variations in self.variations.

        Parameters
        ----------
        var_id : int
            Index of Variations to assign.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(variation_name="variation")
    def variation_values(self, variation): # -> list[Any]:
        """Get the list of the specific variation available values.

        Parameters
        ----------
        variation : str
            Name of variation to return.

        Returns
        -------
        list
            List of variation values.
        """
        ...
    
    @property
    def intrinsics(self): # -> dict[Any, Any]:
        """Get intrinsics dictionary on active variation."""
        ...
    
    @property
    def nominal_variation(self): # -> None:
        """Nominal variation."""
        ...
    
    @nominal_variation.setter
    def nominal_variation(self, val): # -> None:
        ...
    
    @property
    def primary_sweep(self):
        """Primary sweep.

        Parameters
        ----------
        ps : float
            Perimeter of the source.
        """
        ...
    
    @primary_sweep.setter
    def primary_sweep(self, ps): # -> None:
        ...
    
    @property
    def expressions(self): # -> list[Any]:
        """Expressions."""
        ...
    
    @pyaedt_function_handler()
    def update_sweeps(self): # -> None:
        """Update sweeps.

        Returns
        -------
        dict
            Updated sweeps.
        """
        ...
    
    @pyaedt_function_handler()
    def init_solutions_data(self): # -> None:
        """Initialize the database and store info in variables."""
        ...
    
    @property
    def full_matrix_real_imag(self): # -> tuple[DataFrame | dict[Any, Any], DataFrame | dict[Any, Any]]:
        """Get the full available solution data in Real and Imaginary parts.

        Returns
        -------
        tuple of dicts
            (Real Dict, Imag Dict)
        """
        ...
    
    @property
    def full_matrix_mag_phase(self): # -> tuple[DataFrame | dict[Any, Any], DataFrame | dict[Any, Any]]:
        """Get the full available solution data magnitude and phase in radians.

        Returns
        -------
        tuple of dicts
            (Mag Dict, Phase Dict).
        """
        ...
    
    @staticmethod
    @pyaedt_function_handler()
    def to_degrees(input_list): # -> list[Any]:
        """Convert an input list from radians to degrees.

        Parameters
        ----------
        input_list : list
            List of inputs in radians.

        Returns
        -------
        list
            List of inputs in degrees.

        """
        ...
    
    @staticmethod
    @pyaedt_function_handler()
    def to_radians(input_list): # -> list[Any]:
        """Convert an input list from degrees to radians.

        Parameters
        ----------
        input_list : list
            List of inputs in degrees.

        Returns
        -------
        type
            List of inputs in radians.
        """
        ...
    
    @pyaedt_function_handler()
    def data_magnitude(self, expression=..., convert_to_SI=...): # -> UnknownSeries | list[Any] | Literal[False]:
        """Retrieve the data magnitude of an expression.

        Parameters
        ----------
        expression : str, optional
            Name of the expression. The default is ``None``, in which case the
            active expression is used.
        convert_to_SI : bool, optional
            Whether to convert the data to the SI unit system.
            The default is ``False``.

        Returns
        -------
        list
            List of data.
        """
        ...
    
    @pyaedt_function_handler()
    def data_db10(self, expression=..., convert_to_SI=...): # -> ndarray[_Shape, dtype[Any]] | list[float]:
        """Retrieve the data in the database for an expression and convert in db10.

        Parameters
        ----------
        expression : str, optional
            Name of the expression. The default is ``None``,
            in which case the active expression is used.
        convert_to_SI : bool, optional
            Whether to convert the data to the SI unit system.
            The default is ``False``.

        Returns
        -------
        list
            List of the data in the database for the expression.
        """
        ...
    
    @pyaedt_function_handler()
    def data_db20(self, expression=..., convert_to_SI=...): # -> ndarray[_Shape, dtype[Any]] | list[float]:
        """Retrieve the data in the database for an expression and convert in db20.

        Parameters
        ----------
        expression : str, optional
            Name of the expression. The default is ``None``,
            in which case the active expression is used.
        convert_to_SI : bool, optional
            Whether to convert the data to the SI unit system.
            The default is ``False``.

        Returns
        -------
        list
            List of the data in the database for the expression.
        """
        ...
    
    @pyaedt_function_handler()
    def data_phase(self, expression=..., radians=...): # -> NDArray[float64] | Any | ndarray[_Shape, dtype[Any]] | list[float]:
        """Retrieve the phase part of the data for an expression.

        Parameters
        ----------
        expression : str, None
            Name of the expression. The default is ``None``,
            in which case the active expression is used.
        radians : bool, optional
            Whether to convert the data into radians or degree.
            The default is ``True`` for radians.

        Returns
        -------
        list
            Phase data for the expression.
        """
        ...
    
    @property
    def primary_sweep_values(self): # -> UnknownSeries | list[Any]:
        """Retrieve the primary sweep for a given data and primary variable.

        Returns
        -------
        list
            List of the primary sweep valid points for the expression.
        """
        ...
    
    @property
    def primary_sweep_variations(self): # -> UnknownSeries | list[Any]:
        """Retrieve the variations lists for a given primary variable.

        Returns
        -------
        list
            List of the primary sweep valid points for the expression.

        """
        ...
    
    @pyaedt_function_handler()
    def data_real(self, expression=..., convert_to_SI=...): # -> UnknownSeries | list[Any]:
        """Retrieve the real part of the data for an expression.

        Parameters
        ----------
        expression : str, None
            Name of the expression. The default is ``None``,
            in which case the active expression is used.
        convert_to_SI : bool, optional
            Whether to convert the data to the SI unit system.
            The default is ``False``.

        Returns
        -------
        list
            List of the real data for the expression.
        """
        ...
    
    @pyaedt_function_handler()
    def data_imag(self, expression=..., convert_to_SI=...): # -> UnknownSeries | list[Any]:
        """Retrieve the imaginary part of the data for an expression.

        Parameters
        ----------
        expression : str, optional
            Name of the expression. The default is ``None``,
            in which case the active expression is used.
        convert_to_SI : bool, optional
            Whether to convert the data to the SI unit system.
            The default is ``False``.

        Returns
        -------
        list
            List of the imaginary data for the expression.
        """
        ...
    
    @pyaedt_function_handler()
    def is_real_only(self, expression=...): # -> bool:
        """Check if the expression has only real values or not.

        Parameters
        ----------
        expression : str, optional
            Name of the expression. The default is ``None``,
            in which case the active expression is used.

        Returns
        -------
        bool
            ``True`` if the Solution Data for specific expression contains only real values.
        """
        ...
    
    @pyaedt_function_handler()
    def export_data_to_csv(self, output, delimiter=...): # -> bool:
        """Save to output csv file the Solution Data.

        Parameters
        ----------
        output : str,
            Full path to csv file.
        delimiter : str,
            CSV Delimiter. Default is ``";"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def get_report_plotter(self, curves=..., formula=..., to_radians=..., props=...): # -> ReportPlotter:
        """Get the `ReportPlotter` on the specified curves.

        Parameters
        ----------
        curves : list, str, optional
            Trace names.
        formula : str, optional
            Trace formula. Default is `None` which takes the real part of the trace.
        to_radians : bool, optional
            Whether is data has to be converted to radians or not. Default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            Report plotter class.
        """
        ...
    
    @pyaedt_function_handler(math_formula="formula", xlabel="x_label", ylabel="y_label")
    def plot(self, curves=..., formula=..., size=..., show_legend=..., x_label=..., y_label=..., title=..., snapshot_path=..., is_polar=..., show=...): # -> Figure | Literal[False]:
        """Create a matplotlib figure based on a list of data.

        Parameters
        ----------
        curves : list
            Curves to be plotted. The default is ``None``, in which case
            the first curve is plotted.
        formula : str , optional
            Mathematical formula to apply to the plot curve. The default is ``None``,
            in which case only real value of the data stored in the solution data is plotted.
            Options are ``"abs"``, ``"db10"``, ``"db20"``, ``"im"``, ``"mag"``, ``"phasedeg"``,
            ``"phaserad"``, and ``"re"``.
        size : tuple, optional
            Image size in pixels (width, height).
        show_legend : bool
            Whether to show the legend. The default is ``True``.
            This parameter is ignored if the number of curves to plot is
            greater than 15.
        x_label : str
            Plot X label.
        y_label : str
            Plot Y label.
        title : str
            Plot title label.
        snapshot_path : str
            Full path to image file if a snapshot is needed.
        is_polar : bool, optional
            Set to `True` if this is a polar plot.
        show : bool, optional
            Whether if show the plot or not. Default is set to `True`.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
            Matplotlib class object.
        """
        ...
    
    @pyaedt_function_handler(xlabel="x_label", ylabel="y_label", math_formula="formula", x_axis="primary_sweep", y_axis="secondary_sweep")
    def plot_3d(self, curve=..., primary_sweep=..., secondary_sweep=..., x_label=..., y_label=..., title=..., formula=..., size=..., snapshot_path=..., show=...): # -> ReportPlotter:
        """Create a matplotlib 3D figure based on a list of data.

        Parameters
        ----------
        curve : str
            Curve to be plotted. If None, the first curve will be plotted.
        primary_sweep : str, optional
            Primary sweep variable. The default is ``"Theta"``.
        secondary_sweep : str, optional
            Secondary sweep variable. The default is ``"Phi"``.
        x_label : str
            Plot X label.
        y_label : str
            Plot Y label.
        title : str
            Plot title label.
        formula : str , optional
            Mathematical formula to apply to the plot curve. The default is ``None``.
            Options are `"abs"``, ``"db10"``, ``"db20"``, ``"im"``, ``"mag"``, ``"phasedeg"``,
            ``"phaserad"``, and ``"re"``.
        size : tuple, optional
            Image size in pixels (width, height). The default is ``(2000, 1000)``.
        snapshot_path : str, optional
            Full path to image file if a snapshot is needed.
            The default is ``None``.
        show : bool, optional
            Whether if show the plot or not. Default is set to `True`.

        Returns
        -------
        :class:`matplotlib.figure.Figure`
            Matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def ifft(self, curve_header=..., u_axis=..., v_axis=..., window=...): # -> _Array[tuple[int, int, int], float64]:
        """Create IFFT of given complex data.

        Parameters
        ----------
        curve_header : curve header. Solution data must contain 3 curves with X, Y and Z components of curve header.
        u_axis : str, optional
            U Axis name. Default is Hfss name "_u"
        v_axis : str, optional
            V Axis name. Default is Hfss name "_v"
        window : bool, optional
            Either if Hanning windowing has to be applied.

        Returns
        -------
        List
            IFFT Matrix.
        """
        ...
    
    @pyaedt_function_handler(csv_dir="csv_path", name_str="csv_file_header")
    def ifft_to_file(self, u_axis=..., v_axis=..., coord_system_center=..., db_val=..., num_frames=..., csv_path=..., csv_file_header=...):
        """Save IFFT matrix to a list of CSV files (one per time step).

        Parameters
        ----------
        u_axis : str, optional
            U Axis name. Default is Hfss name "_u"
        v_axis : str, optional
            V Axis name. Default is Hfss name "_v"
        coord_system_center : list, optional
            List of UV GlobalCS Center.
        db_val : bool, optional
            Whether data must be exported into a database. The default is ``False``.
        num_frames : int, optional
            Number of frames to export. The default is ``None``.
        csv_path : str, optional
            Output path. The default is ``None``.
        csv_file_header : str, optional
            CSV file header. The default is ``"res_"``.

        Returns
        -------
        str
            Path to file containing the list of csv files.
        """
        ...
    


