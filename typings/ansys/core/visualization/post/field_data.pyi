"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class BaseFolderPlot:
    @abstractmethod
    def to_dict(self): # -> None:
        """Convert the settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing settings.
        """
        ...
    
    @abstractmethod
    def from_dict(self, dictionary): # -> None:
        """Initialize the settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration settings.
            Dictionary syntax must be the same of the AEDT file.
        """
        ...
    


class ColorMapSettings(BaseFolderPlot):
    """Provides methods and variables for editing color map folder settings.

    Parameters
    ----------
    map_type : str, optional
        The type of colormap to use. Must be one of the allowed types
        (`"Spectrum"`, `"Ramp"`, `"Uniform"`).
        Default is `"Spectrum"`.
    color : str or list[float], optional
        Color to use. If "Spectrum" color map, a string is expected.
        Else a list of 3 values (R,G,B). Default is `"Rainbow"`.
    """
    def __init__(self, map_type=..., color=...) -> None:
        ...
    
    @property
    def map_type(self): # -> None:
        """Get the color map type for the field plot."""
        ...
    
    @map_type.setter
    def map_type(self, value): # -> None:
        """Set the type of color mapping for the field plot.

        Parameters
        ----------
        value : str
            The type of mapping to set. Must be one of 'Spectrum', 'Ramp', or 'Uniform'.

        Raises
        ------
        ValueError
            If the provided `value` is not valid, raises a ``ValueError`` with an appropriate message.
        """
        ...
    
    @property
    def color(self): # -> str | list[int] | None:
        """Get the color based on the map type.

        Returns
        -------
            str or list of float: The color scheme based on the map type.
        """
        ...
    
    @color.setter
    def color(self, v): # -> None:
        """Set the colormap based on the map type.

        Parameters
        ----------
        v : str or list[float]
            The color value to be set. If a string, it should represent a valid color
            spectrum specification (`"Magenta"`, `"Rainbow"`, `"Temperature"` or `"Gray"`).
            If a tuple, it should contain three elements representing RGB values.

        Raises
        ------
            ValueError: If the provided color value is not valid for the specified map type.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def to_dict(self): # -> dict[str, dict[str, Any]]:
        """Convert the color map settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all the color map settings
            for the folder field plot settings.
        """
        ...
    
    def from_dict(self, settings): # -> None:
        """Initialize the number format settings of the colormap settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for colormap settings.
            Dictionary syntax must be the same of relevant portion of the AEDT file.
        """
        ...
    


class AutoScale(BaseFolderPlot):
    """Provides methods and variables for editing automatic scale folder settings.

    Parameters
    ----------
    n_levels : int, optional
        Number of color levels of the scale. Default is `10`.
    limit_precision_digits : bool, optional
        Whether to limit precision digits. Default is `False`.
    precision_digits : int, optional
        Precision digits. Default is `3`.
    use_current_scale_for_animation : bool, optional
        Whether to use the scale for the animation. Default is `False`.
    """
    def __init__(self, n_levels=..., limit_precision_digits=..., precision_digits=..., use_current_scale_for_animation=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        """Convert the auto-scale settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all the auto-scale settings
            for the folder field plot settings.
        """
        ...
    
    def from_dict(self, dictionary): # -> None:
        """Initialize the auto-scale settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for auto-scale settings.
            Dictionary syntax must be the same of relevant portion of the AEDT file.
        """
        ...
    


class MinMaxScale(BaseFolderPlot):
    """Provides methods and variables for editing min-max scale folder settings.

    Parameters
    ----------
    n_levels : int, optional
        Number of color levels of the scale. Default is `10`.
    min_value : float, optional
        Minimum value of the scale. Default is `0`.
    max_value : float, optional
        Maximum value of the scale. Default is `1`.
    """
    def __init__(self, n_levels=..., min_value=..., max_value=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def to_dict(self): # -> dict[str, int | Any]:
        """Convert the min-max scale settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all the min-max scale settings
            for the folder field plot settings.
        """
        ...
    
    def from_dict(self, dictionary): # -> None:
        """Initialize the min-max scale settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for min-max scale settings.
            Dictionary syntax must be the same of relevant portion of the AEDT file.
        """
        ...
    


class SpecifiedScale:
    """Provides methods and variables for editing min-max scale folder settings.

    Parameters
    ----------
    scale_values : int, optional
        Scale levels. Default is `None`.
    """
    def __init__(self, scale_values=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def to_dict(self): # -> dict[str, list[int] | Any]:
        """Convert the specified scale settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all the specified scale settings
            for the folder field plot settings.
        """
        ...
    
    def from_dict(self, dictionary): # -> None:
        """Initialize the specified scale settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for specified scale settings.
            Dictionary syntax must be the same of relevant portion of the AEDT file.
        """
        ...
    


class NumberFormat(BaseFolderPlot):
    """Provides methods and variables for editing number format folder settings.

    Parameters
    ----------
    format_type : int, optional
        Scale levels. Default is `None`.
    width : int, optional
        Width of the numbers space. Default is `4`.
    precision : int, optional
        Precision of the numbers. Default is `4`.
    """
    def __init__(self, format_type=..., width=..., precision=...) -> None:
        ...
    
    @property
    def format_type(self): # -> str:
        """Get the current number format type."""
        ...
    
    @format_type.setter
    def format_type(self, v): # -> None:
        """Set the numeric format type of the scale.

        Parameters
        ----------
        v (str): The new format type to be set. Must be one of the accepted values
            ("Automatic", "Scientific" or "Decimal").

        Raises
        ------
        ValueError: If the provided value is not in the list of accepted values.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        """Convert the number format settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all the number format settings
            for the folder field plot settings.
        """
        ...
    
    def from_dict(self, dictionary): # -> None:
        """Initialize the number format settings of the field plot settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for number format settings.
            Dictionary syntax must be the same of relevant portion of the AEDT file.
        """
        ...
    


class Scale3DSettings(BaseFolderPlot):
    """Provides methods and variables for editing scale folder settings.

    Parameters
    ----------
    scale_type : str, optional
        Scale type. Default is `"Auto"`.
    scale_settings : :class:`ansys.aedt.core.modules.post_general.AutoScale`,
                     :class:`ansys.aedt.core.modules.post_general.MinMaxScale` or
                     :class:`ansys.aedt.core.modules.post_general.SpecifiedScale`, optional
        Scale settings. Default is `AutoScale()`.
    log : bool, optional
        Whether to use a log scale. Default is `False`.
    db : bool, optional
        Whether to use dB scale. Default is `False`.
    unit : int, optional
        Unit to use in the scale. Default is `None`.
    number_format : :class:`ansys.aedt.core.modules.post_general.NumberFormat`, optional
        Number format settings. Default is `NumberFormat()`.
    """
    def __init__(self, scale_type=..., scale_settings=..., log=..., db=..., unit=..., number_format=...) -> None:
        ...
    
    @property
    def unit(self): # -> Literal['hz', 'khz', 'mhz', 'ghz', 'thz', 'rps', 'dbFrequency', 'mohm', 'ohm', 'kohm', 'megohm', 'gohm', 'dbResistance', 'fsie', 'psie', 'nsie', 'usie', 'msie', 'sie', 'dbConductance', 'fh', 'ph', 'nh', 'uh', 'mh', 'h', 'dbInductance', 'ff', 'pf', 'nf', 'uf', 'mf', 'farad', 'dbCapacitance', 'nm', 'um', 'mm', 'meter', 'cm', 'ft', 'inch', 'mil', 'uin', 'dbLength', 'fs', 'ps', 'ns', 'us', 'ms', 's', 'dbTime', 'deg', 'rad', 'dbAngle', 'fw', 'pw', 'nw', 'uw', 'mw', 'w', 'dbm', 'dbw', 'dbPower', 'fv', 'pv', 'nv', 'uv', 'mv', 'v', 'kv', 'dbv', 'dbVoltage', 'fa', 'pa', 'na', 'ua', 'ma', 'a', 'dbCurrent', 'kel', 'cel', 'fah', 'dbTemperature', 'dbchz', 'dbNoiseSpectrum', 'oz_obsolete', 'dbWeight_obsolete', 'L', 'ml', 'dbVolume', 'gauss', 'ugauss', 'tesla', 'utesla', 'dbMagInduction', 'oersted', 'a_per_meter', 'dbMagFieldStrength', 'fnewton', 'pnewton', 'nnewton', 'unewton', 'mnewton', 'newton', 'knewton', 'megnewton', 'gnewton', 'lbForce', 'dbForce', 'fnewtonmeter', 'pnewtonmeter', 'nnewtonmeter', 'unewtonmeter', 'mnewtonmeter', 'newtonmeter', 'knewtonmeter', 'megnewtonmeter', 'gnewtonmeter', 'OzIn', 'LbIn', 'ftlb', 'GmCm', 'KgCm', 'KgMeter', 'dbTorque', 'mmps', 'cmps', 'mps', 'mph', 'fps', 'fpm', 'miph', 'dbSpeed', 'rpm', 'degps', 'degpm', 'degph', 'radps', 'radpm', 'radph', 'dbAngularSpeed', 'weber', 'dbFlux', 'vpm', 'ugram', 'mgram', 'gram', 'kgram', 'oz', 'lb', 'dbMass', 'km', 'megv', 'ka', 'mtesla', 'mgauss', 'kgauss', 'ktesla', 'ka_per_meter', 'koersted', 'kw', 'horsepower', 'btu_per_hr', 'km_per_hr', 'km_per_min', 'km_per_sec', 'mi_per_min', 'mi_per_sec', 'in_per_sec', 'n_per_msq', 'kn_per_msq', 'megn_per_msq', 'gn_per_msq', 'psi', 'kpsi', 'megpsi', 'gpsi', 'upascal', 'mpascal', 'cpascal', 'dpascal', 'pascal', 'hpascal', 'kpascal', 'megpascal', 'gpascal', 'inps2', 'mmps2', 'cmps2', 'mps2', 'aigb2', 'aigb1', 'nmol', 'umol', 'mmol', 'mol', 'kmol', 'degsec', 'degmin', 'perdeg', 'perrad', 'vpervperdeg', 'vpervperrad', 'degpers2', 'pers2', 'radpers2', 'dmsperrad', 'nmsperrad', 'kmsperrad', 'jerk_degpers2', 'jerk_radpers2', 'kgm2pers', 'newtonmetersec', 'AngRps', 'AngSpers', 'newtonmeterperdeg', 'newtonmeterperrad', 'kgm2perrad2', 'nms2perrad2', 'in2', 'ft2', 'um2', 'mm2', 'cm2', 'm2', 'km2', 'percm2', 'perm2', 'm2perhour', 'm2permin', 'm2pers', 'm2perJs', 'm2perw', 'Am2perkW', 'Am2perW', 'm2perkV', 'm2perV', 'Am2perWKel', 'm2perVKel', 'bigB1', 'bigB2', 'Fpercm2', 'nFperm2', 'uFperm2', 'mFperm2', 'Fperm2', 'pFperVm2', 'nFperVm2', 'uFperVm2', 'mFperVm2', 'FperVm2', 'pFperm', 'nFperm', 'uFperm', 'mFperm', 'Fperm', 'nFperCel', 'uFperCel', 'FperCel', 'pFperFah', 'nFperFah', 'uFperFah', 'mFperFah', 'FperFah', 'mFperCel', 'pFperCel', 'pFperKel', 'nFperKel', 'uFperKel', 'mFperKel', 'FperKel', 'As', 'Ah', 'nC', 'uC', 'mC', 'C', 'kC', 'inperlbf', 'cmperN', 'mperN', 'mho', 'inverseohm', 'apv', 'ksie', 'megsie', 'uSperm', 'mSperm', 'cSperm', 'Sperm', 'kSperm', 'Apermin', 'Aperhour', 'uApers', 'mApers', 'Apers', 'kApers', 'uApercm2', 'mApercm2', 'Apercm2', 'uAperm2', 'mAperm2', 'Aperm2', 'Apermm2', 'ApermA', 'mAperA', 'AperA', 'uAmperV', 'mAmperV', 'AmperV', 'AperC', 'AperAhour', 'AperAs', 'uAperWperm2', 'mAperWperm2', 'AperWperm2', 'kAperWperm2', 'uAperm', 'mAperm', 'Aperm', 'kAperm', 'AperKel2half', 'AperKel3', 'AperCelDiff3', 'AperKelDiff3', 'mA2s', 'A2s', 'uAperCel', 'mAperCel', 'AperCel', 'mAperFah', 'AperFah', 'uAperKel', 'mAperKel', 'AperKel', 'kAperKel', 'mNsperm', 'cNsperm', 'dNsperm', 'Nsperm', 'kNsperm', 'gpcm3', 'gpl', 'kgpl', 'kgpdm3', 'kgpm3', 'vpcm', 'nCperm2', 'uCperm2', 'mCperm2', 'Cperm2', 'Whour', 'kWhour', 'eV', 'erg', 'Ws', 'uJ', 'mJ', 'J', 'kJ', 'megJ', 'GJ', 'cm3perPa', 'm3perPa', 'cm3perPas', 'm3perPas', 'Nsperm5', 'Pasperm3', 'maxwell', 'vh', 'vs', 'dyne', 'kpond', 'persec', 'lmperm2', 'lmpercm2', 'Wperm2', 'Wpercm2', 'lmperin2', 'lx', 'klx', 'meglx', 'pHperm', 'nHperm', 'uHperm', 'mHperm', 'Hperm', 'kgperm4', 'Ns2perm5', 'Pas2perm3', 'IrradWpercm2', 'Wperin2', 'uWperm2', 'mWperm2', 'IrradWperm2', 'kWperm2', 'megWperm2', 'inpers3', 'nmpers3', 'umpers3', 'mmpers3', 'cmpers3', 'mpers3', 'yd', 'mileUS', 'ltyr', 'mileNaut', 'fm', 'pm', 'dm', 'mileTerr', 'm2perV2', 'percm', 'permm', 'perum', 'perkm', 'perin', 'VperVperm', 'VperVperin', 'perm', 'umperV', 'mmperV', 'cmperV', 'dmperV', 'mperV', 'kmperV', 'umperVhalf', 'mmperVhalf', 'cmperVhalf', 'dmperVhalf', 'mperVhalf', 'kmperVhalf', 'gm2pers3', 'mlm', 'lm', 'klm', 'meglm', 'mCd', 'Cd', 'kCd', 'megCd', 'GCd', 'AperVs', 'AperWb', 'gpers', 'kgpers', 'molperdm3', 'molpercm3', 'molperl', 'molperm3', 'uJpermol', 'mJpermol', 'Jpermol', 'kJpermol', 'megJpermol', 'gJpermol', 'umolpers', 'mmolpers', 'cmolpers', 'molpers', 'kmolpers', 'Paspermol', 'lbin2', 'lbft2', 'kgm2', 'gmpers', 'kgmpers', 'percent', 'percentperm', 'percentperhour', 'percentperday', 'pers', 'permin', 'perhour', 'perday', 'percentpers', 'VsperA', 'WbperA', 'megw', 'gw', 'mbar', 'bar', 'mmh2o', 'mmhg', 'techAtm', 'torr', 'stAtm', 'psipermin', 'statmpermin', 'techatmpermin', 'mmH2Opermin', 'torrpermin', 'Paperhour', 'mbarperhour', 'barperhour', 'psiperhour', 'statmperhour', 'techatmperhour', 'mbarpers', 'barpers', 'mmH2Operhour', 'torrperhour', 'psipers', 'statmpers', 'techatmpers', 'mmH2Opers', 'torrpers', 'Papermin', 'mbarpermin', 'barpermin', 'Papers', 'perbar', 'permbar', 'perpsi', 'perstatm', 'pertechatm', 'permmHg', 'permmH2O', 'VperVperPa', 'perPa', 'bel', 'permegW', 'permW', 'perkW', 'pergW', 'perJs', 'perW', 'perOhmAs', 'perOhmAh', 'perOhmC', 'perOhmmin', 'perOhmhour', 'perOhms', 'uohm', 'OhmperAs', 'OhmperAhour', 'nOhmperC', 'uOhmperC', 'mOhmperC', 'OhmperC', 'kOhmperC', 'megOhmperC', 'gOhmperC', 'Ohmperum', 'uOhmperm', 'mOhmperm', 'Ohmperm', 'kOhmperm', 'megOhmperm', 'OhmperCel', 'mOhmperKel', 'OhmperKel', 'kOhmperKel', 'Ohmmm2permm', 'Ohmum', 'Ohmcm', 'Ohmm', 'mJperKelkg', 'JperKelkg', 'kJperKelkg', 'Npercm', 'lbfperin', 'Nperm', 'kNperm', 'SufCDAsperm2', 'SufCDnCperm2', 'SufCDuCperm2', 'SufCDmCperm2', 'SufCDCperm2', 'cm2perVs', 'm2perVs', 'cm2pV2s', 'm2pV2s', 'mkel', 'ckel', 'dkel', 'kelm2pw', 'celm2pw', 'perCel', 'perFah', 'percentperKel', 'percentperCel', 'percentperFah', 'perKel', 'perCel2', 'perFah2', 'perKel2', 'celdiff', 'mkeldiff', 'keldiff', 'WsperKel', 'JperKel', 'mWperCel', 'WperCel', 'kWperCel', 'mWperKel', 'WperKel', 'kWperKel', 'mWperKelm', 'WperKelm', 'wpcm2kel', 'wpm2kel', 'mWperKel4', 'WperKel4', 'kWperKel4', 'Wpercm2Kel4', 'Wperm2Kel4', 'KelsperJ', 'KelperW', 'min', 'hour', 'day', 'sperdeg', 'sperrev', 'msperrad', 'sperrad', 's2perdeg2', 's2perrad2', 'cnewtonmeter', 'mAperV', 'AperV', 'kAperV', 'mAperV2', 'AperV2', 'inpers2', 'cmpers2', 'dmpers2', 'mpers2', 'VelSatumperV', 'VelSatmmperV', 'VelSatcmperV', 'VelSatmperV', 'umperV2', 'mmperV2', 'cmperV2', 'mperV2', 'Nsperm2', 'cpoise', 'poise', 'uPas', 'mPas', 'cPas', 'dPas', 'Pas', 'hPas', 'kPas', 'VisFricmNsperm', 'VisFricCNsperm', 'VisFricNsperm', 'VisFrickNsperm', 'gv', 'mVperm2pers2', 'Vperm2pers2', 'Vpermin', 'Vperhour', 'mVpers', 'Vpers', 'kVpers', 'permV', 'perkV', 'perV', 'perV2', 'mV3', 'V3', 'VpermV', 'mVperV', 'VperV', 'mVpermpers3', 'Vpermpers3', 'uVm', 'mVm', 'Vm', 'kVm', 'pVpercell', 'nVpercell', 'uVpercell', 'mVpercell', 'Vpercell', 'kVpercell', 'megVpercell', 'gVpercell', 'Vpermhalf', 'mVperPahalf', 'VperPahalf', 'Vhalf', 'perVhalf', 'uVperCel10', 'mVperCel10', 'VperCel10', 'uVperKel10', 'mVperKel10', 'VperKel10', 'uVperCel11', 'mVperCel11', 'VperCel11', 'uVperKel11', 'mVperKel11', 'VperKel11', 'uVperCel12', 'mVperCel12', 'VperCel12', 'uVperKel12', 'mVperKel12', 'VperKel12', 'uVperCel13', 'mVperCel13', 'VperCel13', 'uVperKel13', 'mVperKel13', 'VperKel13', 'uVperCel14', 'mVperCel14', 'VperCel14', 'uVperKel14', 'mVperKel14', 'VperKel14', 'uVperCel15', 'mVperCel15', 'VperCel15', 'uVperKel15', 'mVperKel15', 'VperKel15', 'uVperCel2', 'mVperCel2', 'VperCel2', 'uVperKel2', 'mVperKel2', 'VperKel2', 'uVperCel3', 'mVperCel3', 'VperCel3', 'uVperKel3', 'mVperKel3', 'VperKel3', 'uVperCel4', 'mVperCel4', 'VperCel4', 'uVperKel4', 'mVperKel4', 'VperKel4', 'uVperCel5', 'mVperCel5', 'VperCel5', 'uVperKel5', 'mVperKel5', 'VperKel5', 'uVperCel6', 'mVperCel6', 'VperCel6', 'uVperKel6', 'mVperKel6', 'VperKel6', 'uVperCel7', 'mVperCel7', 'VperCel7', 'uVperKel7', 'mVperKel7', 'VperKel7', 'uVperCel8', 'mVperCel8', 'VperCel8', 'uVperKel8', 'mVperKel8', 'VperKel8', 'uVperCel9', 'mVperCel9', 'VperCel9', 'uVperKel9', 'mVperKel9', 'VperKel9', 'uVperCel', 'mVperCel', 'VperCel', 'uVperKel', 'mVperKel', 'VperKel', 'mm3', 'm3', 'galUK', 'cup', 'galUS', 'percm3', 'perm3', 'VolFConcm3perPas', 'VolFConm3perPas', 'm3persPahalf', 'm3permin', 'm3perhour', 'cm3pers', 'm3pers', 'ltrpermin', 'cm3pers2', 'm3pers2', 'mton', 'Wirein2', 'Wireft2', 'Wireum2', 'Wiremm2', 'Wirecm2', 'Wirem2', 'JPerM3', 'kJPerM3', 'cm3', 'inch3', 'foot3', 'yard3', 'at', 'uat', 'nat', 'mat', 'kat', 'Fraction', 'fah_diff', 'ckel_diff', 'dkel_diff', 'ft2pers', 'cm2pers', 'kgpermol', 'gpermol', 'kgperms', 'lbmperfts', 'slugperfts', 'celin2pw', 'celmm2pw', 'btupspft2', 'btuphrpft2', 'ergpspcm2', 'micron2', 'mil2', 'btuPerFahSec', 'btuPerRankSec', 'btuPerFahHr', 'btuPerRankHr', 'btuPerFahFtSec', 'btuPerRankFtSec', 'btuPerFahFtHr', 'btuPerRankFtHr', 'calpersmCel', 'calpersmKel', 'ergperscmKel', 'wPerCelM', 'lbmPerFt3', 'slugPerFt3', 'btuPerFahSecFt2', 'btuPerFahHrFt2', 'btuPerRankSecFt2', 'btuPerRankHrFt2', 'wPerCelM2', 'copperOzPerFt2', 'lbmPerSec', 'lbmPerMin', 'btuPerSec', 'ergPerSec', 'IrradWPerMm2', 'IrradMet', 'btuPerSecFt3', 'btuPerHrFt3', 'ergPerSecCm3', 'wPerM3', 'lbfPerFt2', 'celPerW', 'fahSecPerBtu', 'btuPerLbmFah', 'btuPerLbmRank', 'calPerGKel', 'calPerGCel', 'ergPerGKel', 'JPerCelKg', 'kcalPerKgKel', 'kcalPerKgCel', 'rank', 'rankdiff', 'm2PerSec3', 'ft2PerSec3', 'm2PerSec2', 'ft2PerSec2', 'dissPerSec', 'perRank', 'percentperRank', 'ft3PerMin', 'ft3PerSec', 'cfm', 'pressWaterInches', 'q', 'bps', 'kbps', 'mbps', 'gbps', 'kgpersm2', 'lbmperminft2', 'gperscm2', 'Wperm2perCel', 'Wperin2perCel', 'Wpermm2perCel', 'dBperm', 'dBpercm', 'dBperdm', 'dBperkm', 'dBperft', 'dBpermi', 'Nppercm', 'Npperdm', 'Npperft', 'Npperkm', 'Npperm', 'Nppermi']:
        """Get unit used in the plot."""
        ...
    
    @unit.setter
    def unit(self, v): # -> None:
        """Set unit used in the plot.

        Parameters
        ----------
        v: str
            Unit to be set.
        """
        ...
    
    @property
    def scale_type(self): # -> None:
        """Get type of scale used for the field plot."""
        ...
    
    @scale_type.setter
    def scale_type(self, value): # -> None:
        """Set the scale type used for the field plot.

        Parameters
        ----------
            value : str
                The type of scaling to set.
                Must be one of the accepted values ("Auto", "MinMax" or "Specified").

        Raises
        ------
            ValueError
               If the provided value is not in the list of accepted values.
        """
        ...
    
    @property
    def scale_settings(self): # -> AutoScale | MinMaxScale | SpecifiedScale | None:
        """Get the current scale settings based on the scale type."""
        ...
    
    @scale_settings.setter
    def scale_settings(self, value): # -> None:
        """Set the current scale settings based on the scale type."""
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def to_dict(self): # -> dict[str, dict[str, Any]]:
        """Convert the scale settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all scale settings
            for the folder field plot settings.
        """
        ...
    
    def from_dict(self, dictionary): # -> None:
        """Initialize the scale settings of the field plot settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for scale settings.
            Dictionary syntax must be the same of relevant portion of the AEDT file.
        """
        ...
    


class MarkerSettings(BaseFolderPlot):
    """Provides methods and variables for editing marker folder settings.

    Parameters
    ----------
    marker_type : str, optional
        The type of maker to use. Must be one of the allowed types
        (`"Octahedron"`, `"Tetrahedron"`, `"Sphere"`, `"Box"`, `"Arrow"`).
        Default is `"Box"`.
    marker_size : float, optional
        Size of the marker. Default is `0.005`.
    map_size : bool, optional
        Whether to map the field magnitude to the arrow type. Default is `False`.
    map_color : bool, optional
        Whether to map the field magnitude to the arrow color. Default is `True`.
    """
    def __init__(self, marker_type=..., map_size=..., map_color=..., marker_size=...) -> None:
        ...
    
    @property
    def marker_type(self): # -> Literal['Octahedron', 'Tetrahedron', 'Sphere', 'Box', 'Arrow']:
        """Get the type of maker to use."""
        ...
    
    @marker_type.setter
    def marker_type(self, v): # -> None:
        """Set the type of maker to use.

        Parameters
        ----------
        v : str
            Marker type. Must be one of the allowed types
            (`"Octahedron"`, `"Tetrahedron"`, `"Sphere"`, `"Box"`, `"Arrow"`).
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def to_dict(self): # -> dict[str, dict[str, Any]]:
        """Convert the marker settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all the marker settings
            for the folder field plot settings.
        """
        ...
    
    def from_dict(self, dictionary): # -> None:
        """Initialize the marker settings of the field plot settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for marker settings.
            Dictionary syntax must be the same of relevant portion of the AEDT file.
        """
        ...
    


class ArrowSettings(BaseFolderPlot):
    """Provides methods and variables for editing arrow folder settings.

    Parameters
    ----------
    arrow_type : str, optional
        The type of arrows to use. Must be one of the allowed types
        (`"Line"`, `"Cylinder"`, `"Umbrella"`). Default is `"Line"`.
    arrow_size : float, optional
        Size of the arrow. Default is `0.005`.
    map_size : bool, optional
        Whether to map the field magnitude to the arrow type. Default is `False`.
    map_color : bool, optional
        Whether to map the field magnitude to the arrow color. Default is `True`.
    show_arrow_tail : bool, optional
        Whether to show the arrow tail. Default is `False`.
    magnitude_filtering : bool, optional
        Whether to filter the field magnitude for plotting vectors. Default is `False`.
    magnitude_threshold : bool, optional
        Threshold value for plotting vectors. Default is `0`.
    min_magnitude : bool, optional
        Minimum value for plotting vectors. Default is `0`.
    max_magnitude : bool, optional
        Maximum value for plotting vectors. Default is `0.5`.
    """
    def __init__(self, arrow_type=..., arrow_size=..., map_size=..., map_color=..., show_arrow_tail=..., magnitude_filtering=..., magnitude_threshold=..., min_magnitude=..., max_magnitude=...) -> None:
        ...
    
    @property
    def arrow_type(self): # -> None:
        """Get the type of arrows used in the field plot."""
        ...
    
    @arrow_type.setter
    def arrow_type(self, v): # -> None:
        """Set the type of arrows for the field plot.

        Parameters
        ----------
            v : str
                The type of arrows to use. Must be one of the allowed types ("Line", "Cylinder", "Umbrella").

        Raises
        ------
            ValueError
                If the provided value is not in the list of allowed arrow types.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def to_dict(self): # -> dict[str, dict[str, Any]]:
        """Convert the arrow settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all the arrow settings
            for the folder field plot settings.
        """
        ...
    
    def from_dict(self, dictionary): # -> None:
        """Initialize the arrow settings of the field plot settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for arrow settings.
            Dictionary syntax must be the same of relevant portion of the AEDT file.
        """
        ...
    


class FolderPlotSettings(BaseFolderPlot):
    """Provides methods and variables for editing field plots folder settings.

    Parameters
    ----------
    postprocessor : :class:`ansys.aedt.core.modules.post_general.PostProcessor`
    folder_name : str
        Name of the plot field folder.
    arrow_settings : :class:`ansys.aedt.core.modules.solution.ArrowSettings`, optional
        Arrow settings. Default is `None`.
    marker_settings : :class:`ansys.aedt.core.modules.solution.MarkerSettings`, optional
        Marker settings. Default is `None`.
    scale_settings : :class:`ansys.aedt.core.modules.solution.Scale3DSettings`, optional
        Scale settings. Default is `None`.
    color_map_settings : :class:`ansys.aedt.core.modules.solution.ColorMapSettings`, optional
        Colormap settings. Default is `None`.
    """
    def __init__(self, postprocessor, folder_name, arrow_settings=..., marker_settings=..., scale_settings=..., color_map_settings=...) -> None:
        ...
    
    def update(self): # -> None:
        """Update folder plot settings."""
        ...
    
    def to_dict(self): # -> dict[str, dict[Any, Any]]:
        """Convert the field plot settings to a dictionary.

        Returns
        -------
        dict
            A dictionary containing all the settings for the field plot,
            including arrow settings, marker settings,
            scale settings, and color map settings.
        """
        ...
    
    def from_dict(self, dictionary): # -> None:
        """Initialize the field plot settings from a dictionary.

        Parameters
        ----------
        dictionary : dict
            Dictionary containing the configuration for the color map,
            scale, arrow, and marker settings. Dictionary syntax must
            be the same of the AEDT file.
        """
        ...
    


class FieldPlot:
    """Provides for creating and editing field plots.

    Parameters
    ----------
    postprocessor : :class:`ansys.aedt.core.modules.post_general.PostProcessor`
    objects : list
        List of objects.
    solution : str
        Name of the solution.
    quantity : str
        Name of the plot or the name of the object.
    intrinsics : dict, optional
        Name of the intrinsic dictionary. The default is ``{}``.

    """
    @pyaedt_function_handler(objlist="objects", surfacelist="surfaces", linelist="lines", cutplanelist="cutplanes", solutionName="solution", quantityName="quantity", IntrinsincList="intrinsics", seedingFaces="seeding_faces", layers_nets="layer_nets", layers_plot_type="layer_plot_type")
    def __init__(self, postprocessor, objects=..., surfaces=..., lines=..., cutplanes=..., solution=..., quantity=..., intrinsics=..., seeding_faces=..., layer_nets=..., layer_plot_type=...) -> None:
        ...
    
    @property
    def folder_settings(self): # -> FolderPlotSettings | None:
        """Get the folder settings."""
        ...
    
    @folder_settings.setter
    def folder_settings(self, v): # -> None:
        """Set the fieldplot folder settings.

        Parameters
        ----------
        v : FolderPlotSettings
            The new folder plot settings to be set.

        Raises
        ------
        ValueError
            If the provided value is not an instance of `FolderPlotSettings`.
        """
        ...
    
    @property
    def filter_boxes(self): # -> list[str]:
        """Volumes on which filter the plot."""
        ...
    
    @filter_boxes.setter
    def filter_boxes(self, val): # -> None:
        ...
    
    @property
    def plotGeomInfo(self): # -> list[int]:
        """Plot geometry information."""
        ...
    
    @property
    def intrinsicVar(self): # -> Literal['']:
        """Intrinsic variable.

        Returns
        -------
        list or dict
            Variables for the field plot.
        """
        ...
    
    @property
    def plotsettings(self): # -> list[Any]:
        """Plot settings.

        Returns
        -------
        list
            List of plot settings.
        """
        ...
    
    @pyaedt_function_handler()
    def get_points_value(self, points, filename=..., visibility=...): # -> DataFrame | defaultdict[Any, list[Any]]:
        """
        Get points data from field plot.

        .. note::
           This method is working only if the associated field plot is currently visible.

        .. note::
           This method does not work in non-graphical mode.

        Parameters
        ----------
        points : list, list of lists or dict
            List with [x,y,z] coordinates of a point or list of lists of points or
            dictionary with keys containing point names and for each key the point
            coordinates [x,y,z].
        filename : str, optional
            Full path or relative path with filename.
            Default is ``None`` in which case no file is exported.
        visibility : bool, optional
            Whether to keep the markers visible in the UI. Default is ``False``.

        Returns
        -------
        dict or pd.DataFrame
            Dict containing 5 keys: point names, x,y,z coordinates and the quantity probed.
            Each key is associated with a list with the same length of the argument points.
            If pandas is installed, the output is a pandas DataFrame with point names as
            index and coordinates and quantity as columns.
        """
        ...
    
    @property
    def surfacePlotInstruction(self): # -> list[str]:
        """Surface plot settings.

        Returns
        -------
        list
            List of surface plot settings.
        """
        ...
    
    @property
    def surfacePlotInstructionLineTraces(self): # -> list[Any]:
        """Surface plot settings for field line traces.

        ..note::
            ``Specify seeding points on selections`` is by default set to ``by sampling``.

        Returns
        -------
        list
            List of plot settings for line traces.
        """
        ...
    
    @property
    def field_plot_settings(self): # -> list[Any]:
        """Field Plot Settings.

        Returns
        -------
        list
            Field Plot Settings.
        """
        ...
    
    @property
    def field_line_trace_plot_settings(self): # -> list[Any]:
        """Settings for the field line traces in the plot.

        Returns
        -------
        list
            List of settings for the field line traces in the plot.
        """
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> bool:
        """Create a field plot.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> bool:
        """Update the field plot.

        .. note::
           This method works on any plot created inside PyAEDT.
           For Plot already existing in AEDT Design it may produce incorrect results.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def update_field_plot_settings(self): # -> Literal[True]:
        """Modify the field plot settings.

        .. note::
            This method is not available for field plot line traces.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> None:
        """Delete the field plot."""
        ...
    
    @pyaedt_function_handler()
    def change_plot_scale(self, minimum_value, maximum_value, is_log=..., is_db=..., scale_levels=...):
        """Change Field Plot Scale.

        .. deprecated:: 0.10.1
           Use :class:`FieldPlot.folder_settings` methods instead.

        Parameters
        ----------
        minimum_value : str, float
            Minimum value of the scale.
        maximum_value : str, float
            Maximum value of the scale.
        is_log : bool, optional
            Set to ``True`` if Log Scale is setup.
        is_db : bool, optional
            Set to ``True`` if dB Scale is setup.
        scale_levels : int, optional
            Set number of color levels. The default is ``None``, in which case the
            setting is not changed.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.SetPlotFolderSettings
        """
        ...
    
    @pyaedt_function_handler()
    def export_image(self, full_path=..., width=..., height=..., orientation=..., display_wireframe=..., selections=..., show_region=..., show_axis=..., show_grid=..., show_ruler=...): # -> str | Literal[False]:
        """Export the active plot to an image file.

        .. note::
           There are some limitations on HFSS 3D Layout plots.

        full_path : str, optional
            Path for saving the image file. PNG and GIF formats are supported.
            The default is ``None`` which export file in working_directory.
        width : int, optional
            Plot Width.
        height : int, optional
            Plot height.
        orientation : str, optional
            View of the exported plot. Options are ``isometric``,
            ``top``, ``bottom``, ``right``, ``left``, ``front``,
            ``back``, and any custom orientation.
        display_wireframe : bool, optional
            Whether the objects has to be put in wireframe mode. Default is ``True``.
        selections : str or List[str], optional
            Objects to fit for the zoom on the exported image.
            Default is None in which case all the objects in the design will be shown.
            One important note is that, if the fieldplot extension is larger than the
            selection extension, the fieldplot extension will be the one considered
            for the zoom of the exported image.
        show_region : bool, optional
            Whether to include the air region in the exported image. Default is ``True``.
        show_grid : bool, optional
            Whether to display the background grid in the exported image.
            Default is ``True``.
        show_axis : bool, optional
            Whether to display the axis triad in the exported image. Default is ``True``.
        show_ruler : bool, optional
            Whether to display the ruler in the exported image. Default is ``True``.

        Returns
        -------
        str
            Full path to exported file if successful.

        References
        ----------
        >>> oModule.ExportPlotImageToFile
        >>> oModule.ExportModelImageToFile
        >>> oModule.ExportPlotImageWithViewToFile
        """
        ...
    
    @pyaedt_function_handler()
    def export_image_from_aedtplt(self, export_path=..., view=..., plot_mesh=..., scale_min=..., scale_max=...): # -> Literal[False]:
        """Save an image of the active plot using PyVista.

        .. note::
            This method only works if the CPython with PyVista module is installed.

        Parameters
        ----------
        export_path : str, optional
            Path where image will be saved.
            The default is ``None`` which export file in working_directory.
        view : str, optional
           View to export. Options are ``"isometric"``, ``"xy"``, ``"xz"``, ``"yz"``.
        plot_mesh : bool, optional
            Plot mesh.
        scale_min : float, optional
            Scale output min.
        scale_max : float, optional
            Scale output max.

        Returns
        -------
        str
            Full path to exported file if successful.

        References
        ----------
        >>> oModule.UpdateAllFieldsPlots
        >>> oModule.UpdateQuantityFieldsPlots
        >>> oModule.ExportFieldPlot
        """
        ...
    


