"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

quantities_dict_1 = ...
quantities_dict_2 = ...
quantities_type_dict = ...
class Monitor:
    """Provides Icepak monitor methods."""
    def __init__(self, p_app) -> None:
        ...
    
    @pyaedt_function_handler
    def get_icepak_monitor_object(self, monitor_name):
        """Get Icepak monitor object.

        Returns
        -------
        oEditor COM Object
        """
        ...
    
    @property
    def face_monitors(self): # -> dict[Any, Any]:
        """Get point monitor objects.

        Returns
        -------
        dict
            Face monitor objects dictionary.

        """
        ...
    
    @property
    def point_monitors(self): # -> dict[Any, Any]:
        """Get face monitor objects.

        Returns
        -------
        dict
            Point monitor objects dictionary.

        """
        ...
    
    @property
    def all_monitors(self): # -> dict[Any, Any]:
        """Get all monitor objects.

        Returns
        -------
        dict
            Monitor objects dictionary.

        """
        ...
    
    @pyaedt_function_handler()
    def assign_point_monitor(self, point_position, monitor_quantity=..., monitor_name=...): # -> list[Any] | Literal[False]:
        """Create and assign a point monitor.

        Parameters
        ----------
        point_position : list or str
            List of the ``[x, y, z]`` coordinates for the point or name of the point.
            Also, multiple monitor assignment with list of list with coordinates or list
            of strings with points names.
        monitor_quantity : str or list, optional
            Quantity being monitored.  The default is ``"Temperature"``.
        monitor_name : str, optional
            Name of the monitor. The default is ``None``, in which case
            the name is randomly generated.

        Returns
        -------
        str or list
            Monitor name or list of monitor names when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignPointMonitor

        Examples
        --------
        Create two temperature monitor at the points ``[0, 0, 0]`` and ``[1, 1, 1]``.

        >>> icepak.monitor.assign_point_monitor([[0, 0, 0], [1, 1, 1]], monitor_name="monitor1")
        ['monitor1', 'monitor2']

        """
        ...
    
    @pyaedt_function_handler()
    def assign_point_monitor_to_vertex(self, vertex_id, monitor_quantity=..., monitor_name=...): # -> list[Any] | Literal[False]:
        """Create and assign a point monitor to a vertex.

        Parameters
        ----------
        vertex_id : int or list
            ID of the vertex or list of IDs.
        monitor_quantity : str or list, optional
            Quantity being monitored.  The default is ``"Temperature"``.
        monitor_name : str, optional
            Name of the monitor. The default is ``None``, in which case
            the name is randomly generated.

        Returns
        -------
        str or list
            Monitor name or list of monitor names when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignPointMonitor

        """
        ...
    
    @pyaedt_function_handler()
    def assign_surface_monitor(self, surface_name, monitor_quantity=..., monitor_name=...): # -> list[Any] | Literal[False]:
        """Assign a surface monitor.

        Parameters
        ----------
        surface_name : str or list
            Name of the surface or list of names.
        monitor_quantity : str or list, optional
            Quantity being monitored.  The default is ``"Temperature"``.
        monitor_name : str, optional
            Name of the monitor. The default is ``None``, in which case
            the name is randomly generated.

        Returns
        -------
        str or list
            Monitor name or list of monitor names when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignFaceMonitor

        Examples
        --------
        Create a rectangle named ``"Surface1"`` and assign a temperature monitor to that surface.

        >>> surface = icepak.modeler.create_rectangle(icepak.PLANE.XY, [0, 0, 0], [10, 20], name="Surface1")
        >>> icepak.assign_surface_monitor("Surface1", monitor_name="monitor")
        'monitor'
        """
        ...
    
    @pyaedt_function_handler()
    def assign_face_monitor(self, face_id, monitor_quantity=..., monitor_name=...): # -> list[Any] | Literal[False]:
        """Assign a face monitor.

        Parameters
        ----------
        face_id : int or list
            Face id or list of ids
        monitor_quantity : str or list, optional
            Quantity being monitored.  The default is ``"Temperature"``.
        monitor_name : str, optional
            Name of the monitor. The default is ``None``, in which case
            the name is randomly generated.

        Returns
        -------
        str or list
            Monitor name or list of monitor names when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignFaceMonitor
        """
        ...
    
    @pyaedt_function_handler()
    def assign_point_monitor_in_object(self, name, monitor_quantity=..., monitor_name=...): # -> list[Any] | Literal[False]:
        """Assign a point monitor in the centroid of a specific object.

        Parameters
        ----------
        name : str or list
            Name of the object to assign monitor point to.
        monitor_quantity : str or list, optional
            Quantity being monitored.  The default is ``"Temperature"``.
        monitor_name : str, optional
            Name of the monitor. The default is ``None``, in which case
            the name is randomly generated.

        Returns
        -------
        str or list
            Monitor name or list of names when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignPointMonitor

        Examples
        --------
        Create a box named ``"BlockBox1"`` and assign a temperature monitor point to that object.

        >>> box = icepak.modeler.create_box([1, 1, 1], [3, 3, 3], "BlockBox1", "copper")
        >>> icepak.assign_point_monitor(box.name, monitor_name="monitor2")
        "'monitor2'
        """
        ...
    
    @pyaedt_function_handler()
    def delete_monitor(self, monitor_name): # -> bool:
        """Delete monitor object.

        Parameters
        ----------
        monitor_name : str
            Name of the monitor object to delete

        Returns
        -------
        bool
            ``False`` if succesflul, else ``False``.

        References
        ----------
        >>> oModule.DeleteMonitors

        """
        ...
    
    @pyaedt_function_handler()
    def get_monitor_object_assignment(self, monitor):
        """
        Get the object that the monitor is applied to.

        Parameters
        ----------
        monitor : str or FaceMonitor or PointMonitor object
           Monitor object or monitor object name.

        Returns
        -------
        str
            Name of the object.
        """
        ...
    
    @pyaedt_function_handler()
    def insert_monitor_object_from_dict(self, monitor_dict, mode=...): # -> Literal[False]:
        """Insert a monitor.

        Parameters
        ----------
        monitor_dict : dict
           Dictionary containing monitor object information.
        mode : int
            Integer to select the information to handle. To identify the faces, vertices,
            surfaces, and object to which to assign the monitor to, you can use:
            - ids and names, mode=0, required dict keys: "Name", "Type", "ID", "Quantity".
            - positions, mode=1, required dict keys: "Name", "Type", "Geometry Assignment", "Location", "Quantity".

        Returns
        -------
        str
            Name of the monitor object.
        """
        ...
    


class ObjectMonitor:
    """Provides Icepak Monitor methods and properties."""
    def __init__(self, monitor_name, monitor_type, monitor_id, quantity, app) -> None:
        ...
    
    @property
    def geometry_assignment(self):
        """
        Get the geometry assignment for the monitor object.

        Returns
        -------
        str
        """
        ...
    
    @property
    def name(self): # -> Any:
        """
        Get the name of the monitor object.

        Returns
        -------
        str
        """
        ...
    
    @property
    def id(self): # -> Any:
        """
        Get the name, or id of geometry assignment.

        Returns
        -------
        str or int
        """
        ...
    
    @property
    def properties(self): # -> dict[str, Any]:
        """
        Get a dictionary of properties.

        Returns
        -------
        dict
        """
        ...
    
    @pyaedt_function_handler
    def delete(self): # -> Literal[True]:
        """
        Delete a monitor object.

        Returns
        -------
        bool
            ``True`` if successful.
        """
        ...
    
    @property
    def quantities(self): # -> Any:
        """
        Get the quantities being monitored.

        Returns
        -------
        list
        """
        ...
    
    @property
    def type(self): # -> Any:
        """
        Get the monitor type.

        Returns
        -------
        str
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def value(self, quantity=..., setup=..., design_variation_dict=..., si_out=...): # -> dict[Any, Any]:
        """Get a list of values obtained from the monitor object.

        If the simulation is steady state, the list will contain just one element.

        Parameters
        ----------
        quantity : str or list, optional
            String that specifies the quantity that is retrieved. If this parameter is not provided,
            all monitored quantity will be considered.
        design_variation_dict : dict, optional
            Dictionary containing the project and design variables and values. If this parameter
            is not provided, all variations are considered.
        setup : str, optional
            Name of the setup to extract the monitor value from.
            If this parameter is not provided, the first setup of the design is used.
        si_out : bool, optional
            Whether to return the values of th monitor object in SI units. Default is ``True``.

        Returns
        -------
        dict
            Dictionary containing the variables names and values and the monitor values for each
            variation.
        """
        ...
    


class PointMonitor(ObjectMonitor):
    """Provides Icepak point monitor methods and properties."""
    def __init__(self, monitor_name, monitor_type, point_id, quantity, app) -> None:
        ...
    
    @property
    def location(self): # -> list[float]:
        """
        Get the monitor point location.

        Returns
        -------
        list
            List of floats containing [x, y, z] position.
        """
        ...
    


class FaceMonitor(ObjectMonitor):
    """Provides Icepak face monitor properties and methods."""
    def __init__(self, monitor_name, monitor_type, face_id, quantity, app) -> None:
        ...
    
    @property
    def location(self): # -> None:
        """
        Get the monitor location in terms of face or surface center.

        Returns
        -------
        list
            List of floats containing [x, y, z] position.
        """
        ...
    


