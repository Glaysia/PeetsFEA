"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

"""
This module contains this class: `PostProcessorCommon`.

This module provides all functionalities for common AEDT post processing.

"""
TEMPLATES_BY_NAME = ...
class PostProcessorCommon:
    """Manages the main AEDT postprocessing functions.

    This class is inherited in the caller application and is accessible through the post variable( eg. ``hfss.post`` or
    ``q3d.post``).

    .. note::
       Some functionalities are available only when AEDT is running in
       the graphical mode.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_3d.FieldAnalysis3D`
        Inherited parent object. The parent object must provide the members
        ``_modeler``, ``_desktop``, ``_odesign``, and ``logger``.

    Examples
    --------
    >>> from ansys.aedt.core import Q3d
    >>> q3d = Q3d()
    >>> q3d.post.get_solution_data(domain="Original")
    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def available_report_types(self): # -> list[Any]:
        """Report types.

        References
        ----------
        >>> oModule.GetAvailableReportTypes
        """
        ...
    
    @property
    def update_report_dynamically(self): # -> bool:
        """Get/Set the boolean to automatically update reports on edits.

        Returns
        -------
        bool
        """
        ...
    
    @update_report_dynamically.setter
    def update_report_dynamically(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def available_display_types(self, report_category=...) -> list:
        """Retrieve display types for a report categories.

        Parameters
        ----------
        report_category : str, optional
            Type of the report. The default value is ``None``.

        Returns
        -------
        list
            List of available report categories.

        References
        ----------
        >>> oModule.GetAvailableDisplayTypes
        """
        ...
    
    @pyaedt_function_handler()
    def available_quantities_categories(self, report_category=..., display_type=..., solution=..., context=..., is_siwave_dc=...): # -> list[Any]:
        """Compute the list of all available report categories.

        Parameters
        ----------
        report_category : str, optional
            Report category. The default is ``None``, in which case the first default category is used.
        display_type : str, optional
            Report display type. The default is ``None``, in which case the first default type
             is used. In most cases, this default type is ``"Rectangular Plot"``.
        solution : str, optional
            Report setup. The default is ``None``, in which case the first
            nominal adaptive solution is used.
        context : str, dict, optional
            Report category. The default is ``None``, in which case the first default context
            is used. For Maxwell 2D/3D eddy current solution types, the report category
            can be provided as a dictionary, where the key is the matrix name and the value
            the reduced matrix.
        is_siwave_dc : bool, optional
            Whether the setup is SIwave DCIR. The default is ``False``.

        Returns
        -------
        list

        References
        ----------
        >>> oModule.GetAllCategories
        """
        ...
    
    @pyaedt_function_handler()
    def available_report_quantities(self, report_category=..., display_type=..., solution=..., quantities_category=..., context=..., is_siwave_dc=..., differential_pairs=...):
        """Compute the list of all available report quantities of a given report quantity category.

        Parameters
        ----------
        report_category : str, optional
            Report Category. The default is ``None``, in which case the default category is used.
        display_type : str, optional
            Report Display Type.
            The default is ``None``, in which case the default type is used.
            In most of the cases the default type is "Rectangular Plot".
        solution : str, optional
            Report Setup.
            The default is ``None``, in which case the first nominal adaptive solution is used.
        quantities_category : str, optional
            The category that the quantities belong to.
            It must be one of the ``available_quantities_categories`` method.
            The default is ``None``, in which case the first default quantity is used.
        context : str, dict, optional
            Report Context.
            The default is ``None``, in which case the default context is used.
            For Maxwell 2D/3D Eddy Current solution types this can be provided as a dictionary
            where the key is the matrix name and value the reduced matrix.
        is_siwave_dc : bool, optional
            Whether if the setup is SIwave DCIR or not. Default is ``False``.
        differential_pairs : bool, optional
            Whether if return differential pairs traces or not. Default is ``False``.

        Returns
        -------
        list

        References
        ----------
        >>> oModule.GetAllQuantities

        Examples
        --------
        The example shows how to get report expressions for a Maxwell design with Eddy current solution.
        The context has to be provided as a dictionary where the key is the name of the original matrix
        and the value is the name of the reduced matrix.
        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d(solution_type="AC Magnetic")
        >>> rectangle1 = m3d.modeler.create_rectangle(0, [0.5, 1.5, 0], [2.5, 5], name="Sheet1")
        >>> rectangle2 = m3d.modeler.create_rectangle(0, [9, 1.5, 0], [2.5, 5], name="Sheet2")
        >>> rectangle3 = m3d.modeler.create_rectangle(0, [16.5, 1.5, 0], [2.5, 5], name="Sheet3")
        >>> m3d.assign_current(rectangle1.faces[0], amplitude=1, name="Cur1")
        >>> m3d.assign_current(rectangle2.faces[0], amplitude=1, name="Cur2")
        >>> m3d.assign_current(rectangle3.faces[0], amplitude=1, name="Cur3")
        >>> L = m3d.assign_matrix(assignment=["Cur1", "Cur2", "Cur3"], matrix_name="Matrix1")
        >>> out = L.join_series(sources=["Cur1", "Cur2"], matrix_name="ReducedMatrix1")
        >>> expressions = m3d.post.available_report_quantities(
        ...     report_category="AC Magnetic", display_type="Data Table", context={"Matrix1": "ReducedMatrix1"}
        ... )
        >>> expressions = m3d.post.available_report_quantities(
        ...     report_category="EddyCurrent", display_type="Data Table", context={"Matrix1": "ReducedMatrix1"}
        ... )
        >>> m3d.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler()
    def get_all_report_quantities(self, solution=..., context=..., is_siwave_dc=...): # -> dict[Any, Any]:
        """Return all the possible report categories organized by report types, solution and categories.

        Parameters
        ----------
        solution : str optional
            Solution to get the report quantities.
            The default is ``None``, in which case the all solutions are used.
        context : str, dict, optional
            Report Context.
            The default is ``None``, in which case the default context is used.
            For Maxwell 2D/3D Eddy Current solution types this can be provided as a dictionary
            where the key is the matrix name and value the reduced matrix.
        is_siwave_dc : bool, optional
            Whether if the setup is SIwave DCIR or not. Default is ``False``.

        Returns
        -------
        dict
            A dictionary with primary key the report type, secondary key the solution type and
            third key the report categories.
        """
        ...
    
    @pyaedt_function_handler()
    def available_report_solutions(self, report_category=...): # -> list[Any] | None:
        """Get the list of available solutions that can be used for the reports.

        This list differs from the one obtained with ``app.existing_analysis_sweeps``,
        because it includes additional elements like "AdaptivePass".

        Parameters
        ----------
        report_category : str, optional
            Report Category. Default is ``None`` which takes default category.

        Returns
        -------
        list

        References
        ----------
        >>> oModule.GetAvailableSolutions
        """
        ...
    
    @property
    def oreportsetup(self):
        """Report setup.

        Returns
        -------
        :attr:`ansys.aedt.core.modules.post_general.PostProcessor.oreportsetup`

        References
        ----------
        >>> oDesign.GetModule("ReportSetup")
        """
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def oeditor(self): # -> None:
        ...
    
    @property
    def post_solution_type(self):
        """Design solution type.

        Returns
        -------
        type
            Design solution type.
        """
        ...
    
    @property
    def all_report_names(self): # -> list[Any]:
        """List of all report names.

        Returns
        -------
        list

        References
        ----------
        >>> oModule.GetAllReportNames()
        """
        ...
    
    @pyaedt_function_handler(PlotName="plot_name")
    def copy_report_data(self, plot_name, paste=...): # -> Literal[True]:
        """Copy report data as static data.

        Parameters
        ----------
        plot_name : str
            Name of the report.
        paste : bool, optional
            Whether to paste the report. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.CopyReportsData
        >>> oModule.PasteReports
        """
        ...
    
    @pyaedt_function_handler()
    def paste_report_data(self): # -> Literal[True]:
        """Paste report data as static data.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.PasteReports
        """
        ...
    
    @pyaedt_function_handler()
    def delete_report(self, plot_name=...): # -> bool:
        """Delete all reports or specific report.

        Parameters
        ----------
        plot_name : str, optional
            Name of the plot to delete. The default  value is ``None`` and in this case, all reports are deleted.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.DeleteReports
        """
        ...
    
    @pyaedt_function_handler()
    def rename_report(self, plot_name, new_name): # -> bool:
        """Rename a plot.

        Parameters
        ----------
        plot_name : str
            Name of the plot.
        new_name : str
            New name of the plot.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.RenameReport
        """
        ...
    
    @pyaedt_function_handler(soltype="solution_type", ctxt="context", expression="expressions")
    def get_solution_data_per_variation(self, solution_type=..., setup_sweep_name=..., context=..., sweeps=..., expressions=...): # -> SolutionData | None:
        """Retrieve solution data for each variation.

        Parameters
        ----------
        solution_type : str, optional
            Type of the solution. For example, ``"Far Fields"`` or ``"Modal Solution Data"``. The default
            is ``"Far Fields"``.
        setup_sweep_name : str, optional
            Name of the setup for computing the report. The default is ``""``,
            in which case ``"nominal adaptive"`` is used.
        context : list, optional
            List of context variables. The default is ``None``.
        sweeps : dict, optional
            Dictionary of variables and values. The default is ``None``,
            in which case this list is used:
            ``{'Theta': 'All', 'Phi': 'All', 'Freq': 'All'}``.
        expressions : str or list, optional
            One or more traces to include. The default is ``""``.

        Returns
        -------
        from ansys.aedt.core.modules.solutions.SolutionData


        References
        ----------
        >>> oModule.GetSolutionDataPerVariation
        """
        ...
    
    @pyaedt_function_handler()
    def steal_focus_oneditor(self): # -> Literal[True]:
        """Remove the selection of an object that would prevent the image from exporting correctly.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.RestoreWindow
        """
        ...
    
    @pyaedt_function_handler()
    def export_report_to_file(self, output_dir, plot_name, extension, unique_file=..., uniform=..., start=..., end=..., step=..., use_trace_number_format=...):
        r"""
        Export a 2D Plot data to a file.

        This method leaves the data in the plot (as data) as a reference
        for the Plot after the loops.

        Parameters
        ----------
        output_dir : str
            Path to the directory of exported report
        plot_name : str
            Name of the plot to export.
        extension : str
            Extension of export , one of
                * (CSV) .csv
                * (Tab delimited) .tab
                * (Post processor format) .txt
                * (Ensight XY data) .exy
                * (Anosft Plot Data) .dat
                * (Ansoft Report Data Files) .rdat
        unique_file : bool
            If set to True, generates unique file in output_dit
        uniform : bool, optional
            Whether the export uniform points to the file. The
            default is ``False``.
        start : str, optional
            Start range with units for the sweep if the ``uniform`` parameter
            is set to ``True``.
        end : str, optional
            End range with units for the sweep if the ``uniform`` parameter
            is set to ``True``.
        step : str, optional
            Step range with units for the sweep if the ``uniform`` parameter is
            set to ``True``.
        use_trace_number_format : bool, optional
            Whether to use trace number formats and use separate columns for curve. The default is ``False``.

        Returns
        -------
        str
            Path of exported file.

        References
        ----------
        >>> oModule.ExportReportDataToFile
        >>> oModule.ExportUniformPointsToFile
        >>> oModule.ExportToFile

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit("my_project.aedt")
        >>> report = cir.post.create_report("MyScattering")
        >>> cir.post.export_report_to_file("C:\\temp", "MyTestScattering", ".csv")
        """
        ...
    
    @pyaedt_function_handler()
    def export_report_to_csv(self, project_dir, plot_name, uniform=..., start=..., end=..., step=..., use_trace_number_format=...):
        """Export the 2D Plot data to a CSV file.

        This method leaves the data in the plot (as data) as a reference
        for the Plot after the loops.

        Parameters
        ----------
        project_dir : str
            Path to the project directory. The CSV file is plot_name.csv.
        plot_name : str
            Name of the plot to export.
        uniform : bool, optional
            Whether the export uniform points to the file. The
            default is ``False``.
        start : str, optional
            Start range with units for the sweep if the ``uniform`` parameter
            is set to ``True``.
        end : str, optional
            End range with units for the sweep if the ``uniform`` parameter
            is set to ``True``.
        step : str, optional
            Step range with units for the sweep if the ``uniform`` parameter is
            set to ``True``.
        use_trace_number_format : bool, optional
            Whether to use trace number formats. The default is ``False``.

        Returns
        -------
        str
            Path of exported file.

        References
        ----------
        >>> oModule.ExportReportDataToFile
        >>> oModule.ExportToFile
        >>> oModule.ExportUniformPointsToFile
        """
        ...
    
    @pyaedt_function_handler(project_dir="project_path")
    def export_report_to_jpg(self, project_path, plot_name, width=..., height=..., image_format=...): # -> Literal[True]:
        """Export plot to an image file.

        Parameters
        ----------
        project_path : str
            Path to the project directory.
        plot_name : str
            Name of the plot to export.
        width : int, optional
            Image width. Default is ``800`` which takes Desktop size or 800 pixel.
        height : int, optional
            Image height. Default is ``450`` which takes Desktop size or 450 pixel.
        image_format : str, optional
            Format of the image file. The default is ``"jpg"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.ExportImageToFile
        """
        ...
    
    @pyaedt_function_handler(plotname="plot_name")
    def create_report(self, expressions=..., setup_sweep_name=..., domain=..., variations=..., primary_sweep_variable=..., secondary_sweep_variable=..., report_category=..., plot_type=..., context=..., subdesign_id=..., polyline_points=..., plot_name=...): # -> Literal[False]:
        """Create a report in AEDT. It can be a 2D plot, 3D plot, polar plot, or a data table.

        Parameters
        ----------
        expressions : str or list, optional
            One or more formulas to add to the report. Example is value = ``"dB(S(1,1))"``.
        setup_sweep_name : str, optional
            Setup name with the sweep. The default is ``""``.
        domain : str, optional
            Plot Domain. Options are "Sweep", "Time", "DCIR".
        variations : dict, optional
            Dictionary of all families including the primary sweep. The default is ``{"Freq": ["All"]}``.
        primary_sweep_variable : str, optional
            Name of the primary sweep. The default is ``"Freq"``.
        secondary_sweep_variable : str, optional
            Name of the secondary sweep variable in 3D Plots.
        report_category : str, optional
            Category of the Report to be created. If `None` default data Report is used.
            The Report Category can be one of the types available for creating a report depend on the simulation setup.
            For example for a Far Field Plot in HFSS the UI shows the report category as "Create Far Fields Report".
            The report category is "Far Fields" in this case.
            Depending on the setup different categories are available.
            If ``None`` default category is used (the first item in the Results drop down menu in AEDT).
        plot_type : str, optional
            The format of Data Visualization. Default is ``Rectangular Plot``.
        context : str, dict, optional
            The default is ``None``.
            - For HFSS 3D Layout, options are ``"Bondwires"``, ``"Differential Pairs"``,
            ``None``, ``"Probes"``, ``"RL"``, ``"Sources"``, and ``"Vias"``.
            - For Q2D or Q3D, specify the name of a reduced matrix.
            - For a far fields plot, specify the name of an infinite sphere.
            - For Maxwell 2D/3D Eddy Current solution types this can be provided as a dictionary
            where the key is the matrix name and value the reduced matrix.
        plot_name : str, optional
            Name of the plot. The default is ``None``.
        polyline_points : int, optional,
            Number of points to create the report for plots on polylines on.
        subdesign_id : int, optional
            Specify a subdesign ID to export a Touchstone file of this subdesign. Valid for Circuit Only.
            The default value is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Standard`
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.CreateReport

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.post.create_report("dB(S(1,1))")
        >>> variations = hfss.available_variations.nominal_values
        >>> variations["Theta"] = ["All"]
        >>> variations["Phi"] = ["All"]
        >>> variations["Freq"] = ["30GHz"]
        >>> hfss.post.create_report(
        ...     expressions="db(GainTotal)",
        ...     setup_sweep_name=hfss.nominal_adaptive,
        ...     variations=variations,
        ...     primary_sweep_variable="Phi",
        ...     secondary_sweep_variable="Theta",
        ...     report_category="Far Fields",
        ...     plot_type="3D Polar Plot",
        ...     context="3D",
        ... )
        >>> hfss.post.create_report("S(1,1)", hfss.nominal_sweep, variations=variations, plot_type="Smith Chart")
        >>> hfss.release_desktop(False, False)

        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d()
        >>> m2d.post.create_report(
        ...     expressions="InputCurrent(PHA)",
        ...     domain="Time",
        ...     primary_sweep_variable="Time",
        ...     plot_name="Winding Plot 1",
        ... )
        >>> m2d.release_desktop(False, False)

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d(solution_type="EddyCurrent")
        >>> rectangle1 = m3d.modeler.create_rectangle(0, [0.5, 1.5, 0], [2.5, 5], name="Sheet1")
        >>> rectangle2 = m3d.modeler.create_rectangle(0, [9, 1.5, 0], [2.5, 5], name="Sheet2")
        >>> rectangle3 = m3d.modeler.create_rectangle(0, [16.5, 1.5, 0], [2.5, 5], name="Sheet3")
        >>> m3d.assign_current(rectangle1.faces[0], amplitude=1, name="Cur1")
        >>> m3d.assign_current(rectangle2.faces[0], amplitude=1, name="Cur2")
        >>> m3d.assign_current(rectangle3.faces[0], amplitude=1, name="Cur3")
        >>> L = m3d.assign_matrix(assignment=["Cur1", "Cur2", "Cur3"], matrix_name="Matrix1")
        >>> out = L.join_series(sources=["Cur1", "Cur2"], matrix_name="ReducedMatrix1")
        >>> expressions = m3d.post.available_report_quantities(
        ...     report_category="EddyCurrent", display_type="Data Table", context={"Matrix1": "ReducedMatrix1"}
        ... )
        >>> report = m3d.post.create_report(
        ...     expressions=expressions,
        ...     context={"Matrix1": "ReducedMatrix1"},
        ...     plot_type="Data Table",
        ...     plot_name="reduced_matrix",
        ... )
        >>> m3d.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler()
    def get_solution_data(self, expressions=..., setup_sweep_name=..., domain=..., variations=..., primary_sweep_variable=..., report_category=..., context=..., subdesign_id=..., polyline_points=..., math_formula=...):
        """Get a simulation result from a solved setup and cast it in a ``SolutionData`` object.

        Data to be retrieved from Electronics Desktop are any simulation results available in that
        specific simulation context.
        Most of the argument have some defaults which works for most of the ``Standard`` report quantities.

        Parameters
        ----------
        expressions : str or list, optional
            One or more formulas to add to the report. Example is value ``"dB(S(1,1))"`` or a list of values.
            Default is ``None`` which returns all traces.
        setup_sweep_name : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        domain : str, optional
            Plot Domain. Options are "Sweep" for frequency domain related results and "Time" for transient related data.
        variations : dict, optional
            Dictionary of all families including the primary sweep.
            The default is ``None`` which uses the nominal variations of the setup.
        primary_sweep_variable : str, optional
            Name of the primary sweep. The default is ``"None"`` which, depending on the context,
            internally assigns the primary sweep to:
            1. ``Freq`` for frequency domain results,
            2. ``Time`` for transient results,
            3. ``Theta`` for radiation patterns,
            4. ``distance`` for field plot over a polyline.
        report_category : str, optional
            Category of the Report to be created. If ``None`` default data Report is used.
            The Report Category can be one of the types available for creating a report depend on the simulation setup.
            For example for a Far Field Plot in HFSS the UI shows the report category as "Create Far Fields Report".
            The report category is "Far Fields" in this case.
            Depending on the setup different categories are available.
            If ``None`` default category is used (the first item in the Results drop down menu in AEDT).
            To get the list of available categories user can use method ``available_report_types``.
        context : str, dict, optional
            This is the context of the report.
            The default is ``None``. It can be:
            1. `None`
            2. ``"Differential Pairs"``
            3. Reduce Matrix Name for Q2d/Q3d solution
            4. Infinite Sphere name for Far Fields Plot.
            5. Dictionary. If dictionary is passed, key is the report property name and value is property value.
            6. For Maxwell 2D/3D eddy current solution types, this can be provided as a dictionary,
            where the key is the matrix name and value the reduced matrix.
        subdesign_id : int, optional
            Subdesign ID for exporting a Touchstone file of this subdesign.
            This parameter is valid for ``Circuit`` only.
            The default value is ``None``.
        polyline_points : int, optional
            Number of points on which to create the report for plots on polylines.
            This parameter is valid for ``Fields`` plot only.
        math_formula : str, optional
            One of the available AEDT mathematical formulas to apply. For example, ``abs, dB``.


        Returns
        -------
        :class:`ansys.aedt.core.modules.solutions.SolutionData`
            Solution Data object.

        References
        ----------
        >>> oModule.GetSolutionDataPerVariation

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.post.create_report("dB(S(1,1))")
        >>> variations = hfss.available_variations.nominal_values
        >>> variations["Theta"] = ["All"]
        >>> variations["Phi"] = ["All"]
        >>> variations["Freq"] = ["30GHz"]
        >>> data1 = hfss.post.get_solution_data(
        ...    "GainTotal",
        ...    hfss.nominal_adaptive,
        ...    variations=variations,
        ...    primary_sweep_variable="Phi",
        ...    secondary_sweep_variable="Theta",
        ...    context="3D",
        ...    report_category="Far Fields",
        ...)

        >>> data2 =hfss.post.get_solution_data(
        ...    "S(1,1)",
        ...    hfss.nominal_sweep,
        ...    variations=variations,
        ...)
        >>> data2.plot()
        >>> hfss.release_desktop(False, False)

        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d()
        >>> data3 = m2d.post.get_solution_data(
        ...     "InputCurrent(PHA)",
        ...     domain="Time",
        ...     primary_sweep_variable="Time",
        ... )
        >>> data3.plot("InputCurrent(PHA)")
        >>> m2d.release_desktop(False, False)

        >>> from ansys.aedt.core import Circuit
        >>> circuit = Circuit()
        >>> context = {"algorithm": "FFT", "max_frequency": "100MHz", "time_stop": "2.5us", "time_start": "0ps"}
        >>> spectralPlotData = circuit.post.get_solution_data(
        ...     expressions="V(Vprobe1)", domain="Spectral", primary_sweep_variable="Spectrum", context=context
        ... )
        >>> circuit.release_desktop(False, False)

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d(solution_type="EddyCurrent")
        >>> rectangle1 = m3d.modeler.create_rectangle(0, [0.5, 1.5, 0], [2.5, 5], name="Sheet1")
        >>> rectangle2 = m3d.modeler.create_rectangle(0, [9, 1.5, 0], [2.5, 5], name="Sheet2")
        >>> rectangle3 = m3d.modeler.create_rectangle(0, [16.5, 1.5, 0], [2.5, 5], name="Sheet3")
        >>> m3d.assign_current(rectangle1.faces[0], amplitude=1, name="Cur1")
        >>> m3d.assign_current(rectangle2.faces[0], amplitude=1, name="Cur2")
        >>> m3d.assign_current(rectangle3.faces[0], amplitude=1, name="Cur3")
        >>> L = m3d.assign_matrix(assignment=["Cur1", "Cur2", "Cur3"], matrix_name="Matrix1")
        >>> out = L.join_series(sources=["Cur1", "Cur2"], matrix_name="ReducedMatrix1")
        >>> expressions = m3d.post.available_report_quantities(
        ...     report_category="EddyCurrent", display_type="Data Table", context={"Matrix1": "ReducedMatrix1"}
        ... )
        >>> data = m2d.post.get_solution_data(expressions=expressions, context={"Matrix1": "ReducedMatrix1"})
        >>> m3d.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler(input_dict="report_settings")
    def create_report_from_configuration(self, input_file=..., report_settings=..., solution_name=..., name=..., matplotlib=...):
        """Create a report based on a JSON file, TOML file, RPT file, or dictionary of properties.

        Parameters
        ----------
        input_file : str, optional
            Path to the JSON, TOML, or RPT file containing report settings.
        report_settings : dict, optional
            Dictionary containing report settings.
        solution_name : str, optional
            Setup name to use.
        matplotlib : bool, optional
            Whether to use AEDT or ReportPlotter to generate the plot. Eye diagrams are not supported.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Standard`
            Report object if succeeded.

        Examples
        --------
        Create report from JSON file.
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.post.create_report_from_configuration(
        ...     r"C:\\temp\\my_report.json", solution_name="Setup1 : LastAdpative"
        ... )

        Create report from RPT file.
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.post.create_report_from_configuration(r"C:\\temp\\my_report.rpt")

        Create report from dictionary.
        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.generic.file_utils import read_json
        >>> hfss = Hfss()
        >>> dict_vals = read_json("Report_Simple.json")
        >>> hfss.post.create_report_from_configuration(report_settings=dict_vals)
        """
        ...
    


class Reports:
    """Provides the names of default solution types."""
    def __init__(self, post_app, design_type) -> None:
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def standard(self, expressions=..., setup=...): # -> Standard | None:
        """Create a standard or default report object.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Standard`

        Examples
        --------

        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit(my_project)
        >>> report = cir.post.reports_by_category.standard("dB(S(1,1))", "LNA")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        >>> report2 = cir.post.reports_by_category.standard(["dB(S(2,1))", "dB(S(2,2))"], "LNA")

        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def monitor(self, expressions=..., setup=...): # -> Standard | None:
        """Create an Icepak Monitor Report object.

        Parameters
        ----------
        expressions : str or list
            One or more expressions to add to the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Standard`

        Examples
        --------

        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak(my_project)
        >>> report = ipk.post.reports_by_category.monitor(["monitor_surf.Temperature", "monitor_point.Temperature"])
        >>> report = report.create()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def fields(self, expressions=..., setup=..., polyline=...): # -> Fields | None:
        """Create a Field Report object.

        Parameters
        ----------
        expressions : str or list
            One or more expressions to add to the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        polyline : str, optional
            Name of the polyline to plot the field on.
            If a name is not provided, the report might be incorrect.
            The default value is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Fields`

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(my_project)
        >>> report = hfss.post.reports_by_category.fields("Mag_E", "Setup : LastAdaptive", "Polyline1")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def cg_fields(self, expressions=..., setup=..., polyline=...): # -> Fields | None:
        """Create a CG Field Report object in Q3D and Q2D.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        polyline : str, optional
            Name of the polyline to plot the field on.
            If a name is not provided, the report might be incorrect.
            The default value is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Fields`

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> q3d = Q3d(my_project)
        >>> report = q3d.post.reports_by_category.cg_fields("SmoothQ", "Setup : LastAdaptive", "Polyline1")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def dc_fields(self, expressions=..., setup=..., polyline=...): # -> Fields | None:
        """Create a DC Field Report object in Q3D.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        polyline : str, optional
            Name of the polyline to plot the field on.
            If a name is not provided, the report might be incorrect.
            The default value is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Fields`

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> q3d = Q3d(my_project)
        >>> report = q3d.post.reports_by_category.dc_fields("Mag_VolumeJdc", "Setup : LastAdaptive", "Polyline1")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def rl_fields(self, expressions=..., setup=..., polyline=...): # -> Fields | None:
        """Create an AC RL Field Report object in Q3D and Q2D.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        polyline : str, optional
            Name of the polyline to plot the field on.
            If a name is not provided, the report might be incorrect.
            The default value is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Fields`

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> q3d = Q3d(my_project)
        >>> report = q3d.post.reports_by_category.rl_fields("Mag_SurfaceJac", "Setup : LastAdaptive", "Polyline1")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def far_field(self, expressions=..., setup=..., sphere_name=..., source_context=..., **variations): # -> FarField | None:
        """Create a Far Field Report object.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        sphere_name : str, optional
            Name of the sphere to create the far field on.
        source_context : str, optional
            Name of the active source to create the far field on.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.FarField`

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(my_project)
        >>> report = hfss.post.reports_by_category.far_field("GainTotal", "Setup : LastAdaptive", "3D_Sphere")
        >>> report.primary_sweep = "Phi"
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", sphere_name="infinite_sphere")
    def antenna_parameters(self, expressions=..., setup=..., infinite_sphere=...): # -> AntennaParameters | None:
        """Create an Antenna Parameters Report object.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        infinite_sphere : str, optional
            Name of the sphere to compute antenna parameters on.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.AntennaParameters`

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(my_project)
        >>> report = hfss.post.reports_by_category.antenna_parameters("GainTotal", "Setup : LastAdaptive", "3D_Sphere")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def near_field(self, expressions=..., setup=...): # -> NearField | None:
        """Create a Field Report object.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.NearField`

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(my_project)
        >>> report = hfss.post.reports_by_category.near_field("GainTotal", "Setup : LastAdaptive", "NF_1")
        >>> report.primary_sweep = "Phi"
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def modal_solution(self, expressions=..., setup=...): # -> Standard | None:
        """Create a Standard or Default Report object.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Standard`

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(my_project)
        >>> report = hfss.post.reports_by_category.modal_solution("dB(S(1,1))")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def terminal_solution(self, expressions=..., setup=...): # -> Standard | None:
        """Create a Standard or Default Report object.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Standard`

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(my_project)
        >>> report = hfss.post.reports_by_category.terminal_solution("dB(S(1,1))")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def eigenmode(self, expressions=..., setup=...): # -> Standard | None:
        """Create a Standard or Default Report object.

        Parameters
        ----------
        expressions : str or list
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Standard`

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(my_project)
        >>> report = hfss.post.reports_by_category.eigenmode("dB(S(1,1))")
        >>> report.create()
        >>> solutions = report.get_solution_data()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def statistical_eye_contour(self, expressions=..., setup=..., quantity_type=...): # -> AMIConturEyeDiagram | Literal[False] | None:
        """Create a standard statistical AMI contour plot.

        Parameters
        ----------
        expressions : str
            Expression to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is either the sweep
             name to use in the export or ``LastAdaptive``.
        quantity_type : int, optional
            For AMI analysis only, the quantity type. The default is ``3``. Options are:

            - ``0`` for Initial Wave
            - ``1`` for Wave after Source
            - ``2`` for Wave after Channel
            - ``3`` for Wave after Probe.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.AMIConturEyeDiagram`

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit()
        >>> new_eye = cir.post.reports_by_category.statistical_eye_contour("V(Vout)")
        >>> new_eye.unit_interval = "1e-9s"
        >>> new_eye.time_stop = "100ns"
        >>> new_eye.create()

        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def eye_diagram(self, expressions=..., setup=..., quantity_type=..., statistical_analysis=..., unit_interval=...): # -> AMIEyeDiagram | EyeDiagram | None:
        """Create a Standard or Default Report object.

        Parameters
        ----------
        expressions : str
            Expression to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        quantity_type : int, optional
            For AMI Analysis only, specify the quantity type. Options are: 0 for Initial Wave,
            1 for Wave after Source, 2 for Wave after Channel and 3 for Wave after Probe. Default is 3.
        statistical_analysis : bool, optional
            For AMI Analysis only, whether to plot the statistical eye plot or transient eye plot.
            The default is ``True``.
        unit_interval : str, optional
            Unit interval for the eye diagram.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Standard`

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit()
        >>> new_eye = cir.post.reports_by_category.eye_diagram("V(Vout)")
        >>> new_eye.unit_interval = "1e-9s"
        >>> new_eye.time_stop = "100ns"
        >>> new_eye.create()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def spectral(self, expressions=..., setup=...): # -> None:
        """Create a Spectral Report object.

        Parameters
        ----------
        expressions : str or list, optional
            Expression List to add into the report. The expression can be any of the available formula
            you can enter into the Electronics Desktop Report Editor.
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.Spectrum`

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit()
        >>> new_eye = cir.post.reports_by_category.spectral("V(Vout)")
        >>> new_eye.create()

        """
        ...
    
    @pyaedt_function_handler()
    def emi_receiver(self, expressions=..., setup_name=...): # -> EMIReceiver | None:
        """Create an EMI receiver report.

        Parameters
        ----------
        expressions : str or list, optional
            One or more expressions to add into the report. An expression can be any of the formulas that
            can be entered into the Electronics Desktop Report Editor.
        setup_name : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is either the sweep name
            to use in the export or ``LastAdaptive``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.report_templates.EMIReceiver`

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit()
        >>> new_eye = cir.post.emi_receiver()
        >>> new_eye.create()
        """
        ...
    


