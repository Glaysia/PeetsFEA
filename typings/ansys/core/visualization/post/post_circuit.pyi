"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.visualization.post.common import PostProcessorCommon

class PostProcessorCircuit(PostProcessorCommon):
    """Manages the main schematic postprocessing functions.

    .. note::
       Some functionalities are available only when AEDT is running in the graphical mode.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_nexxim.FieldAnalysisCircuit`
        Inherited parent object. The parent object must provide the members
        `_modeler`, `_desktop`, `_odesign`, and `logger`.

    """
    def __init__(self, app) -> None:
        ...
    
    @pyaedt_function_handler()
    def export_model_picture(self, output_file=..., page=..., width=..., height=...): # -> str:
        """Export a snapshot of the schematic to a ``JPG`` file.

        Parameters
        ----------
        output_file : str, optional
            Full Path for exporting the image file. The default is ``None``, in which case working_dir is used.
        page : int, optional
            Page number of the schematic. The default is ``1``.
        width : int, optional
            Export image picture width size in pixels. Default is 1920 which takes the desktop size.
        height : int, optional
            Export image picture height size in pixels. Default is 10800 which takes the desktop size.

        Returns
        -------
        str
            File path of the generated JPG file.

        References
        ----------
        >>> oEditor.ExportImage

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> app = Circuit(non_graphical=False)
        >>> output_file = app.post.export_model_picture(full_name=os.path.join(app.working_directory, "images1.jpg"))
        """
        ...
    
    @pyaedt_function_handler(setupname="setup", plotname="plot_name")
    def create_ami_initial_response_plot(self, setup, ami_name, variation_list_w_value, plot_type=..., plot_initial_response=..., plot_intermediate_response=..., plot_final_response=..., plot_name=...): # -> str:
        """Create an AMI initial response plot.

        Parameters
        ----------
        setup : str
            Name of the setup.
        ami_name : str
            AMI probe name to use.
        variation_list_w_value : list or dict
            List of variations with relative values. List is deprecated.
        plot_type : str
            String containing the report type. Default is ``"Rectangular Plot"``. It can be ``"Data Table"``,
            ``"Rectangular Stacked Plot"``or any of the other valid AEDT Report types.
            The default is ``"Rectangular Plot"``.
        plot_initial_response : bool, optional
            Set either to plot the initial input response.  Default is ``True``.
        plot_intermediate_response : bool, optional
            Set whether to plot the intermediate input response.  Default is ``False``.
        plot_final_response : bool, optional
            Set whether to plot the final input response.  Default is ``False``.
        plot_name : str, optional
            Plot name.  The default is ``None``, in which case
            a unique name is automatically assigned.

        Returns
        -------
        str
            Name of the plot.
        """
        ...
    
    @pyaedt_function_handler(setupname="setup", plotname="plot_name")
    def create_ami_statistical_eye_plot(self, setup, ami_name, variation_list_w_value, ami_plot_type=..., plot_name=...): # -> str:
        """Create an AMI statistical eye plot.

        Parameters
        ----------
        setup : str
            Name of the setup.
        ami_name : str
            AMI probe name to use.
        variation_list_w_value : dict or list
            Variations with relative values. List is deprecated.
        ami_plot_type : str, optional
            String containing the report AMI type. The default is ``"InitialEye"``.
            Options are ``"EyeAfterChannel"``, ``"EyeAfterProbe"````"EyeAfterSource"``,
            and ``"InitialEye"``..
        plot_name : str, optional
            Plot name.  The default is ``None``, in which case
            a unique name starting with ``"Plot"`` is automatically assigned.

        Returns
        -------
        str
           The name of the plot.

        References
        ----------
        >>> oModule.CreateReport
        """
        ...
    
    @pyaedt_function_handler(setupname="setup", plotname="plot_name")
    def create_statistical_eye_plot(self, setup, probe_names, variation_list_w_value, plot_name=...): # -> str:
        """Create a statistical QuickEye, VerifEye, and/or Statistical Eye plot.

        Parameters
        ----------
        setup : str
            Name of the setup.
        probe_names : str or list
            One or more names of the probes to plot in the eye diagram.
        variation_list_w_value : list
            List of variations with relative values.
        plot_name : str, optional
            Plot name. The default is ``None``, in which case a name is automatically assigned.

        Returns
        -------
        str
            The name of the plot.

        References
        ----------
        >>> oModule.CreateReport
        """
        ...
    
    @pyaedt_function_handler()
    def sample_waveform(self, waveform_data, waveform_sweep, waveform_unit=..., waveform_sweep_unit=..., unit_interval=..., clock_tics=..., pandas_enabled=...): # -> UnknownSeries | list[Any]:
        """Sampling a waveform at clock times plus half unit interval.

        Parameters
        ----------
        waveform_data : list or pandas.Series
            Waveform data.
        waveform_sweep : list or pandas.Series
            Waveform sweep data.
        waveform_unit : str, optional
            Waveform units. The default values is ``V``.
        waveform_sweep_unit : str, optional
            Time units. The default value is ``s``.
        unit_interval : float, optional
            Unit interval in seconds. The default is ``1e-9``.
        clock_tics : list, optional
            List with clock tics. The default is ``None``, in which case the clock tics from
            the AMI receiver are used.
        pandas_enabled : bool, optional
            Whether to enable the Pandas data format. The default is ``False``.

        Returns
        -------
        list or :class:`pandas.Series`
            Sampled waveform in ``Volts`` at different times in ``seconds``.

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> circuit = Circuit()
        >>> circuit.post.sample_ami_waveform(name, probe_name, source_name, circuit.available_variations.nominal)
        """
        ...
    
    @pyaedt_function_handler(setupname="setup", probe_name="probe", source_name="source")
    def sample_ami_waveform(self, setup, probe, source, variation_list_w_value, unit_interval=..., ignore_bits=..., plot_type=..., clock_tics=...): # -> list[list[Any]] | None:
        """Sampling a waveform at clock times plus half unit interval.

        Parameters
        ----------
        setup : str
            Name of the setup.
        probe : str
            Name of the AMI probe.
        source : str
            Name of the AMI source.
        variation_list_w_value : list
            Variations with relative values.
        unit_interval : float, optional
            Unit interval in seconds. The default is ``1e-9``.
        ignore_bits : int, optional
            Number of initial bits to ignore. The default is ``0``.
        plot_type : str, optional
            Report type. The default is ``None``, in which case all report types are generated.
            Options for a specific report type are ``"InitialWave"``, ``"WaveAfterSource"``,
            ``"WaveAfterChannel"``, and ``"WaveAfterProbe"``.
        clock_tics : list, optional
            List with clock tics. The default is ``None``, in which case the clock tics from
            the AMI receiver are used.

        Returns
        -------
        list
            Sampled waveform in ``Volts`` at different times in ``seconds``.

        Examples
        --------
        >>> circuit = Circuit()
        >>> circuit.post.sample_ami_waveform(setupname, probe_name, source_name, circuit.available_variations.nominal)

        """
        ...
    


