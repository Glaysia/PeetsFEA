"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

DEFAULT_EXPRESSION = ...
class MonostaticRCSExporter:
    """Class to enable export of radar cross-section (RCS) data from HFSS.

    An instance of this class is returned from the
    :meth:`pyaedt.Hfss.get_monostatic_rcs` method. This class creates a
    ``metadata_file`` that can be passed as argument to instantiate an instance of the
    :class:`pyaedt.generic.rcs_visualization.MonostaticRCSData` class for subsequent analysis and postprocessing.

    Note that this class is derived from the :class:`MonostaticRCSData` class and can be used directly for
    RCS postprocessing, but it remains as a property of the :class:`pyaedt.Hfss` application.

    Parameters
    ----------
    app : :class:`pyaedt.Hfss`
        HFSS application instance.
    setup_name : str, optional
        Name of the setup. Make sure to build a setup string in the form of ``"SetupName : SetupSweep"``.
        The default is ``None``, in which case only the geometry is exported.
    frequencies : list, optional
        Frequency list to export. Specify either a list of strings with units or a list of floats in Hertz units.
        For example, ``["9GHz", 9e9]``. The default is ``None``, in which case only the geometry is exported.
    expression : str, optional
        Monostatic expression name. The default value is ``"ComplexMonostaticRCSTheta"``.
    variations : dict, optional
        Dictionary of all families including the primary sweep. The default value is ``None``.
    overwrite : bool, optional
        Whether to overwrite the existing far field solution data. The default is ``True``.

    Examples
    --------
    >>> import ansys.aedt.core
    >>> app = ansys.aedt.core.Hfss(version="2025.1", design="Antenna")
    >>> setup_name = "Setup1 : LastAdaptive"
    >>> frequencies = [77e9]
    >>> sphere = "3D"
    >>> data = app.get_monostatic_rcs(frequencies, setup_name, sphere)
    >>> data.plot_3d(quantity_format="dB10")
    """
    def __init__(self, app, setup_name=..., frequencies=..., expression=..., variations=..., overwrite=...) -> None:
        ...
    
    @property
    def model_info(self): # -> dict[Any, Any]:
        """List of models."""
        ...
    
    @property
    def rcs_data(self): # -> MonostaticRCSData | None:
        """Monostatic RCS data."""
        ...
    
    @property
    def metadata_file(self): # -> str | Path:
        """Metadata file."""
        ...
    
    @property
    def column_name(self): # -> str:
        """Column name."""
        ...
    
    @column_name.setter
    def column_name(self, value): # -> None:
        """Column name."""
        ...
    
    @pyaedt_function_handler()
    def get_monostatic_rcs(self):
        """Get RCS solution data.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solutions.SolutionData`
            Solution Data object.
        """
        ...
    
    @pyaedt_function_handler()
    def export_rcs(self, name=..., metadata_name=..., only_geometry=...): # -> Path:
        """Export RCS solution data.

        Parameters
        ----------
        name : str, optional
            Name of the RCS data file. The default is ``"rcs_data"``.
        metadata_name : str, optional
            Name of the metadata file. The default is ``"pyaedt_rcs_metadata"``.
        only_geometry : bool, optional
           Export only the geometry. The default is ``False``.

        Returns
        -------
        str
            Metadata file.

        """
        ...
    


