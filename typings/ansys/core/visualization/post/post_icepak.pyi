"""
This type stub file was generated by pyright.
"""

from typing import Literal, Optional, Tuple
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.internal.checks import min_aedt_version
from ansys.aedt.core.visualization.post.post_common_3d import PostProcessor3D

"""
This module contains the `PostProcessor` class.

It contains all advanced postprocessing functionalities that require Python 3.x packages like NumPy and Matplotlib.
"""
class PostProcessorIcepak(PostProcessor3D):
    """Manages the specific Icepak postprocessing functions.

    .. note::
       Some functionalities are available only when AEDT is running in the graphical mode.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_3d.FieldAnalysis3D`
        Inherited parent object. The parent object must provide the members
        `_modeler`, `_desktop`, `_odesign`, and `logger`.

    """
    def __init__(self, app) -> None:
        ...
    
    @pyaedt_function_handler()
    def create_field_summary(self): # -> FieldSummary:
        """
        Create field summary object.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.post.field_summary.FieldSummary`

        """
        ...
    
    @pyaedt_function_handler(timestep="time_step", design_variation="variation")
    def get_fans_operating_point(self, export_file=..., setup_name=..., time_step=..., variation=...): # -> list[Any]:
        """Get the operating point of the fans in the design.

        Parameters
        ----------
        export_file : str, optional
            Name of the file to save the operating point of the fans to. The default is
            ``None``, in which case the filename is automatically generated.
        setup_name : str, optional
            Setup name to determine the operating point of the fans. The default is
            ``None``, in which case the first available setup is used.
        time_step : str, optional
            Time, with units, at which to determine the operating point of the fans. The default
            is ``None``, in which case the first available timestep is used. This parameter is
            only relevant in transient simulations.
        variation : str, optional
            Design variation to determine the operating point of the fans from. The default is
            ``None``, in which case the nominal variation is used.

        Returns
        -------
        list
            First element of the list is the CSV filename. The second and third elements
            are the quantities with units describing the operating point of the fans.
            The fourth element is a dictionary with the names of the fan instances
            as keys and lists with volumetric flow rates and pressure rise floats associated
            with the operating point as values.

        References
        ----------
        >>> oModule.ExportFanOperatingPoint

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> ipk.create_fan()
        >>> filename, vol_flow_name, p_rise_name, op_dict = ipk.get_fans_operating_point()
        """
        ...
    
    @pyaedt_function_handler(faces_list="faces", quantity_name="quantity", design_variation="variation")
    def evaluate_faces_quantity(self, faces, quantity, side=..., setup_name=..., variations=..., ref_temperature=..., time=...): # -> dict[str, Any]:
        """Export the field surface output.

        Parameters
        ----------
        faces : list
            List of faces to apply.
        quantity : str
            Name of the quantity to export.
        side : str, optional
            Which side of the mesh face to use. The default is ``Default``.
            Options are ``"Adjacent"``, ``"Combined"``, and ``"Default"``.
        setup_name : str, optional
            Name of the setup and name of the sweep. For example, ``"IcepakSetup1 : SteatyState"``.
            The default is ``None``, in which case the active setup and active sweep are used.
        variations : dict, optional
            Dictionary of parameters defined for the specific setup with values. The default is ``{}``.
        ref_temperature : str, optional
            Reference temperature to use for heat transfer coefficient computation. The default is ``""``.
        time : str, optional
            Timestep to get the data from. Default is ``"0s"``.

        Returns
        -------
        dict
            Output dictionary, which depending on the quantity chosen, contains one
            of these sets of keys:

            - ``"Min"``, ``"Max"``, ``"Mean"``, ``"Stdev"``, and ``"Unit"``
            - ``"Total"`` and ``"Unit"``

        References
        ----------
        >>> oModule.ExportFieldsSummary
        """
        ...
    
    @pyaedt_function_handler(boundary_name="boundary", quantity_name="quantity", design_variation="variations")
    def evaluate_boundary_quantity(self, boundary, quantity, side=..., volume=..., setup_name=..., variations=..., ref_temperature=..., time=...): # -> dict[str, Any]:
        """Export the field output on a boundary.

        Parameters
        ----------
        boundary : str
            Name of boundary to perform the computation on.
        quantity : str
            Name of the quantity to export.
        side : str, optional
            Side of the mesh face to use. The default is ``"Default"``.
            Options are ``"Adjacent"``, ``"Combined"``, and ``"Default"``.
        volume : bool, optional
            Whether to compute the quantity on the volume or on the surface.
            The default is ``False``, in which case the quantity will be evaluated
            only on the surface .
        setup_name : str, optional
            Name of the setup and name of the sweep. For example, ``"IcepakSetup1 : SteatyState"``.
            The default is ``None``, in which case the active setup and active sweep are used.
        variations : dict, optional
            Dictionary of parameters defined for the specific setup with values. The default is ``{}``.
        ref_temperature : str, optional
            Reference temperature to use for heat transfer coefficient computation. The default is ``""``.
        time : str, optional
            Timestep to get the data from. Default is ``"0s"``.

        Returns
        -------
        dict
            Output dictionary, which depending on the quantity chosen, contains one
            of these sets of keys:
            - ``"Min"``, ``"Max"``, ``"Mean"``, ``"Stdev"``, and ``"Unit"``
            - ``"Total"`` and ``"Unit"``

        References
        ----------
        >>> oModule.ExportFieldsSummary
        """
        ...
    
    @pyaedt_function_handler(monitor_name="monitor", quantity_name="quantity", design_variation="variations")
    @min_aedt_version("2024.1")
    def evaluate_monitor_quantity(self, monitor, quantity, side=..., setup_name=..., variations=..., ref_temperature=..., time=...): # -> dict[str, Any]:
        """Export monitor field output.

        Parameters
        ----------
        monitor : str
            Name of monitor to perform the computation on.
        quantity : str
            Name of the quantity to export.
        side : str, optional
            Side of the mesh face to use. The default is ``"Default"``.
            Options are ``"Adjacent"``, ``"Combined"``, and ``"Default"``.
        setup_name : str, optional
            Name of the setup and name of the sweep. For example, ``"IcepakSetup1 : SteatyState"``.
            The default is ``None``, in which case the active setup and active sweep are used.
        variations : dict, optional
            Dictionary of parameters defined for the specific setup with values. The default is ``{}``.
        ref_temperature : str, optional
            Reference temperature to use for heat transfer coefficient computation. The default is ``""``.
        time : str, optional
            Timestep to get the data from. Default is ``"0s"``.

        Returns
        -------
        dict
            Output dictionary, which depending on the quantity chosen, contains one
            of these sets of keys:

            - ``"Min"``, ``"Max"``, ``"Mean"``, ``"Stdev"``, and ``"Unit"``
            - ``"Total"`` and ``"Unit"``

        References
        ----------
        >>> oModule.ExportFieldsSummary
        """
        ...
    
    @pyaedt_function_handler(design_variation="variations")
    def evaluate_object_quantity(self, object_name, quantity_name, side=..., volume=..., setup_name=..., variations=..., ref_temperature=..., time=...): # -> dict[str, Any]:
        """Export the field output on or in an object.

        Parameters
        ----------
        object_name : str
            Name of object to perform the computation on.
        quantity_name : str
            Name of the quantity to export.
        side : str, optional
            Side of the mesh face to use. The default is ``"Default"``.
            Options are ``"Adjacent"``, ``"Combined"``, and ``"Default"``.
        volume : bool, optional
            Whether to compute the quantity on the volume or on the surface. The default is ``False``.
        setup_name : str, optional
            Name of the setup and name of the sweep. For example, ``"IcepakSetup1 : SteatyState"``.
            The default is ``None``, in which case the active setup and active sweep are used.
        variations : dict, optional
            Dictionary of parameters defined for the specific setup with values. The default is ``{}``.
        ref_temperature : str, optional
            Reference temperature to use for heat transfer coefficient computation. The default is ``""``.
        time : str, optional
            Timestep to get the data from. Default is ``"0s"``.

        Returns
        -------
        dict
            Output dictionary, which depending on the quantity chosen, contains one
            of these sets of keys:

            - ``"Min"``, ``"Max"``, ``"Mean"``, ``"Stdev"``, and ``"Unit"``
            - ``"Total"`` and ``"Unit"``

        References
        ----------
        >>> oModule.ExportFieldsSummary
        """
        ...
    
    def get_temperature_extremum(self, assignment: str, max_min: Literal["Max", "Min"], location: Literal["Surface", "Volume"], setup: Optional[str] = ..., time: Optional[str] = ...) -> Tuple[Tuple[float, float, float], float]:
        """Calculate the position and value of the temperature maximum or minimum.

        Parameters
        ----------
            assignment : str
                The name of the object to calculate the temperature extremum for.
            max_min : Literal["Max", "Min"]
                "Max" for maximum, "Min" for minimum.
            location : Literal["Surface", "Volume"]
                "Surface" for surface, "Volume" for volume.
            time : Optional[str]
                Time at which to retrieve results if setup is transient. Default is `None`.
            setup : Optional[str]
                The name of the setup to use. If `None`, the first available setup is used. Default is `None`.

        Returns
        -------
            Tuple[Tuple[float, float, float], float]
            A tuple containing:

              - A tuple of three floats representing the (x, y, z) coordinates of the maximum point.
              - A float representing the value associated with the maximum point.
        """
        ...
    
    @pyaedt_function_handler()
    def power_budget(self, units=..., temperature=..., output_type=...):
        """Power budget calculation.

        Parameters
        ----------
        units : str, optional
            Output power units. The default is ``"W"``.
        temperature : float, optional
            Temperature to calculate the power. The default is ``22``.
        output_type : str, optional
            Output data presentation. The default is ``"component"``.
            The options are ``"component"``, or ``"boundary"``.
            ``"component"`` returns the power based on each component.
            ``"boundary"`` returns the power based on each boundary.

        Returns
        -------
        dict, float
            Dictionary with the power introduced on each boundary and total power.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    


