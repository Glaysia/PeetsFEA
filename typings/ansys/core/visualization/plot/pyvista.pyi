"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

@pyaedt_function_handler()
def get_structured_mesh(theta, phi, ff_data):
    ...

def is_notebook(): # -> bool:
    """Check if pyaedt is running in Jupyter or not.

    Returns
    -------
    bool
    """
    ...

def is_float(istring): # -> float | Literal[0]:
    """Convert a string to a float.

    Parameters
    ----------
    istring : str
        String to convert to a float.

    Returns
    -------
    float
        Converted float when successful, ``0`` when when failed.
    """
    ...

class ObjClass:
    """Manages mesh files to be plotted in pyvista.

    Parameters
    ----------
    path : str
        Full path to the file.
    color : str or tuple
        Can be a string with color name or a tuple with (r,g,b) values.
    opacity : float
        Value between 0 to 1 of opacity.
    units : str
        Model units.

    """
    def __init__(self, path, color, opacity, units) -> None:
        ...
    
    @property
    def color(self): # -> tuple[Literal[0], Literal[0], Literal[0]] | tuple[Any, ...] | list[Any] | tuple[int, ...]:
        """Color."""
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    


class FieldClass:
    """Class to manage Field data to be plotted in pyvista.

    Parameters
    ----------
    path : str
        Full path to the file.
    log_scale : bool, optional
        Either if the field has to be plotted log or not. The default value is ``True``.
    coordinate_units : str, optional
        Fields coordinates units. The default value is ``"meter"``.
    opacity : float, optional
        Value between 0 to 1 of opacity. The default value is ``1``.
    color_map : str, optional
        Color map of field plot. The default value is ``"rainbow"``.
    label : str, optional
        Name of the field. The default value is ``"Field"``.
    tolerance : float, optional
        Delauny tolerance value used for interpolating points. The default value is ``1e-3``.
    headers : int, optional
        Number of lines to of the file containing header info that has to be removed.
        The default value is ``2``.
    """
    def __init__(self, path, log_scale=..., coordinate_units=..., opacity=..., color_map=..., label=..., tolerance=..., headers=..., show_edge=...) -> None:
        ...
    


class CommonPlotter:
    def __init__(self) -> None:
        ...
    
    @property
    def vector_field_scale(self): # -> int:
        """Field scale.

        Returns
        -------
        float
        """
        ...
    
    @vector_field_scale.setter
    def vector_field_scale(self, value): # -> None:
        ...
    
    @property
    def convert_fields_in_db(self): # -> bool:
        """Either if convert the fields before plotting in dB. Log scale will be disabled.

        Returns
        -------
        bool
        """
        ...
    
    @convert_fields_in_db.setter
    def convert_fields_in_db(self, value): # -> None:
        ...
    
    @property
    def log_multiplier(self): # -> float:
        """Multiply the log value.

        Returns
        -------
        float
        """
        ...
    
    @log_multiplier.setter
    def log_multiplier(self, value): # -> None:
        ...
    
    @property
    def x_scale(self): # -> float:
        """Scale plot on X.

        Returns
        -------
        float
        """
        ...
    
    @x_scale.setter
    def x_scale(self, value): # -> None:
        ...
    
    @property
    def y_scale(self): # -> float:
        """Scale plot on Y.

        Returns
        -------
        float
        """
        ...
    
    @y_scale.setter
    def y_scale(self, value): # -> None:
        ...
    
    @property
    def z_scale(self): # -> float:
        """Scale plot on Z.

        Returns
        -------
        float
        """
        ...
    
    @z_scale.setter
    def z_scale(self, value): # -> None:
        ...
    
    @property
    def isometric_view(self): # -> bool:
        """Enable or disable the default iso view.

        Parameters
        ----------
        value : bool
            Either if iso view is enabled or disabled.

        Returns
        -------
        bool
        """
        ...
    
    @isometric_view.setter
    def isometric_view(self, value=...): # -> None:
        ...
    
    @property
    def view_up(self): # -> tuple[float, float, float] | tuple[Any, ...]:
        """Get/Set the camera view axis. It disables the default iso view.

        Parameters
        ----------
        value : tuple
            Value of camera view position.

        Returns
        -------
        tuple
        """
        ...
    
    @view_up.setter
    def view_up(self, value): # -> None:
        ...
    
    @property
    def focal_point(self): # -> tuple[float, float, float] | tuple[Any, ...]:
        """Get/Set the camera focal point value. It disables the default iso view.

        Parameters
        ----------
        value : tuple
            Value of focal point position.

        Returns
        -------
        tuple
        """
        ...
    
    @focal_point.setter
    def focal_point(self, value): # -> None:
        ...
    
    @property
    def camera_position(self): # -> str | tuple[Any, ...]:
        """Get or set the camera position value. This parameter disables the default iso view.

        Value for the camera position. The value is for ``"xy"``, ``"xz"`` or ``"yz"``.

        Returns
        -------
        str
        """
        ...
    
    @camera_position.setter
    def camera_position(self, value): # -> None:
        ...
    
    @property
    def roll_angle(self): # -> int:
        """Get/Set the roll angle value. It disables the default iso view.

        Parameters
        ----------
        value : float
            Value of roll angle in degrees.

        Returns
        -------
        float
        """
        ...
    
    @roll_angle.setter
    def roll_angle(self, value=...): # -> None:
        ...
    
    @property
    def azimuth_angle(self): # -> int:
        """Get/Set the azimuth angle value. It disables the default iso view.

        Parameters
        ----------
        value : float
            Value of azimuth angle in degrees.

        Returns
        -------
        float
        """
        ...
    
    @azimuth_angle.setter
    def azimuth_angle(self, value=...): # -> None:
        ...
    
    @property
    def elevation_angle(self): # -> int:
        """Get/Set the elevation angle value. It disables the default iso view.

        Parameters
        ----------
        value : float
            Value of elevation angle in degrees.

        Returns
        -------
        float
        """
        ...
    
    @elevation_angle.setter
    def elevation_angle(self, value=...): # -> None:
        ...
    
    @property
    def zoom(self): # -> int:
        """Get/Set the zoom value.

        Parameters
        ----------
        value : float
            Value of zoom in degrees.

        Returns
        -------
        float
        """
        ...
    
    @zoom.setter
    def zoom(self, value=...): # -> None:
        ...
    
    @pyaedt_function_handler()
    def set_orientation(self, camera_position=..., roll_angle=..., azimuth_angle=..., elevation_angle=...): # -> Literal[True]:
        """Change the plot default orientation.

        Parameters
        ----------
        camera_position : str
            Camera view. Default is `"xy"`. Options are `"xz"` and `"yz"`.
        roll_angle : int, float
            Roll camera angle on the specified the camera_position.
        azimuth_angle : int, float
            Azimuth angle of camera on the specified the camera_position.
        elevation_angle : int, float
            Elevation camera angle on the specified the camera_position.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def background_color(self): # -> tuple[Literal[255], Literal[255], Literal[255]] | tuple[Any, ...] | list[Any] | tuple[int, ...]:
        """Background color.

        It can be a tuple of (r,g,b)  or color name.
        """
        ...
    
    @background_color.setter
    def background_color(self, value): # -> None:
        ...
    
    @property
    def background_image(self): # -> None:
        """Background image.

        Returns
        -------
        str
        """
        ...
    
    @background_image.setter
    def background_image(self, value): # -> None:
        ...
    


class ModelPlotter(CommonPlotter):
    """Manages the data to be plotted with ``pyvista``.

    Examples
    --------
    This Class can be instantiated within Pyaedt (with plot_model_object or different field plots
    and standalone).
    Here an example of standalone project

    >>> model = ModelPlotter()
    >>> model.add_object(r"D:\\Simulation\\antenna.obj", (200, 20, 255), 0.6, "in")
    >>> model.add_object(r"D:\\Simulation\\helix.obj", (0, 255, 0), 0.5, "in")
    >>> model.add_field_from_file(r"D:\\Simulation\\helic_antenna.csv", True, "meter", 1)
    >>> model.background_color = (0, 0, 0)
    >>> model.plot()

    And here an example of animation:

    >>> model = ModelPlotter()
    >>> model.add_object(r"D:\\Simulation\\antenna.obj", (200, 20, 255), 0.6, "in")
    >>> model.add_object(r"D:\\Simulation\\helix.obj", (0, 255, 0), 0.5, "in")
    >>> frames = [
    ...     r"D:\\Simulation\\helic_antenna.csv",
    ...     r"D:\\Simulation\\helic_antenna_10.fld",
    ...     r"D:\\Simulation\\helic_antenna_20.fld",
    ...     r"D:\\Simulation\\helic_antenna_30.fld",
    ...     r"D:\\Simulation\\helic_antenna_40.fld",
    ... ]
    >>> model.gif_file = r"D:\\Simulation\\animation.gif"
    >>> model.animate()
    """
    def __init__(self) -> None:
        ...
    
    @property
    def fields(self): # -> list[Any]:
        """List of fields object.

        Returns
        -------
        list[:class:`ansys.aedt.core.visualization.plot.FieldClass`]
        """
        ...
    
    @property
    def frames(self): # -> list[Any]:
        """Frames list for animation.

        Returns
        -------
        list[:class:`ansys.aedt.core.visualization.plot.FieldClass`]
        """
        ...
    
    @property
    def objects(self): # -> list[Any]:
        """List of class objects.

        Returns
        -------
        list[:class:`ansys.aedt.core.visualization.plot.pyvista.ObjClass`]
        """
        ...
    
    @pyaedt_function_handler()
    def add_object(self, cad_path, cad_color=..., opacity=..., units=...): # -> Literal[True]:
        """Add a mesh file to the scenario.

        The mesh file can be an object or any of the PyVista supported files.

        Parameters
        ----------
        cad_path : str
            Full path to the file.
        cad_color : str or tuple
            Can be a string with color name or a tuple with (r,g,b) values.
            The default value is ``"dodgerblue"``.
        opacity : float
            Value between 0 to 1 of opacity. The default value is ``1``.
        units : str
            Model units. The default value is ``"mm"``.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def add_field_from_file(self, field_path, log_scale=..., coordinate_units=..., opacity=..., color_map=..., label_name=..., surface_mapping_tolerance=..., header_lines=..., show_edges=...): # -> None:
        """Add a field file to the scenario.

        It can be aedtplt, fld or csv file or any txt file with 4 column [x,y,z,field].
        If text file they have to be space separated column.

        Parameters
        ----------
        field_path : str
            Full path to the file.
        log_scale : bool
            Either if the field has to be plotted log or not.
        coordinate_units : str
            Fields coordinates units.
        opacity : float
            Value between 0 to 1 of opacity.
        color_map : str
            Color map of field plot. Default rainbow.
        label_name : str, optional
            Name of the field.
        surface_mapping_tolerance : float, optional
            Delauny tolerance value used for interpolating points.
        header_lines : int
            Number of lines to of the file containing header info that has to be removed.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def add_frames_from_file(self, field_files, log_scale=..., coordinate_units=..., opacity=..., color_map=..., label_name=..., surface_mapping_tolerance=..., header_lines=...): # -> None:
        """Add a field file to the scenario. It can be aedtplt, fld or csv file.

        Parameters
        ----------
        field_files : list
            List of full path to frame file.
        log_scale : bool
            Either if the field has to be plotted log or not.
        coordinate_units : str
            Fields coordinates units.
        opacity : float
            Value between 0 to 1 of opacity.
        color_map : str
            Color map of field plot. Default rainbow.
        label_name : str, optional
            Name of the field.
        surface_mapping_tolerance : float, optional
            Delauny tolerance value used for interpolating points.
        header_lines : int
            Number of lines to of the file containing header info that has to be removed.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def add_field_from_data(self, coordinates, fields_data, log_scale=..., coordinate_units=..., opacity=..., color_map=..., label_name=..., surface_mapping_tolerance=..., show_edges=...): # -> None:
        """Add field data to the scenario.

        Parameters
        ----------
        coordinates : list of list
            List of list [x,y,z] coordinates.
        fields_data : list
            List of list Fields Value.
        log_scale : bool
            Either if the field has to be plotted log or not.
        coordinate_units : str
            Fields coordinates units.
        opacity : float
            Value between 0 to 1 of opacity.
        color_map : str
            Color map of field plot. Default rainbow.
        label_name : str, optional
            Name of the field.
        surface_mapping_tolerance : float, optional
            Delauny tolerance value used for interpolating points.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def populate_pyvista_object(self): # -> None:
        """Populate pyvista object with geometry and fields added to the model plotter."""
        ...
    
    @pyaedt_function_handler()
    def plot(self, export_image_path=..., show=...): # -> Literal[True]:
        """Plot the current available Data. With `s` key a screenshot is saved in export_image_path or in tempdir.

        Parameters
        ----------
        export_image_path : str, optional
            Path to image to save. Default is None
        show : bool, optional
            Whether to display the pyvista plot.
            When False, a :class::pyvista.Plotter object is created
            and assigned to the pv property so that it can be
            modified further. Default is True.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def clean_cache_and_files(self, remove_objs=..., remove_fields=..., clean_cache=...): # -> Literal[True]:
        """Clean downloaded files, and, on demand, also the cached meshes.

        Parameters
        ----------
        remove_objs : bool
        remove_fields : bool
        clean_cache : bool

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def animate(self): # -> Literal[True]:
        """Animate the current field plot.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def generate_geometry_mesh(self): # -> None:
        """Generate mesh for objects only.

        Returns
        -------
        Mesh
        """
        ...
    
    @pyaedt_function_handler()
    def point_cloud(self, points: int = ...) -> dict:
        """Generate point cloud with available objects.

        Parameters
        ----------
        points : int, optional
            Number of points to generate. The default is ``10``.

        Returns
        -------
        dict
            Dictionary containing the point cloud for each object. Each entry has the object name as the key and a list
            with two elements: the path to the output ``.pts`` file and the ``pyvista.PolyData`` object.
        """
        ...
    
    def close(self): # -> None:
        """Close the render window."""
        ...
    


