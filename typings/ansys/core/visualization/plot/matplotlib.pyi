"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

def is_notebook(): # -> bool:
    """Check if pyaedt is running in Jupyter or not.

    Returns
    -------
    bool
    """
    ...

def is_ipython(): # -> bool:
    """Check if pyaedt is running in Jupyter or not.

    Returns
    -------
    bool
    """
    ...

class Note:
    def __init__(self) -> None:
        ...
    
    @property
    def text(self): # -> str:
        """Note text.

        Returns
        -------
        str
        """
        ...
    
    @text.setter
    def text(self, value): # -> None:
        ...
    
    @property
    def background_color(self): # -> None:
        """Note color.

        Returns
        -------
        tuple or list
        """
        ...
    
    @background_color.setter
    def background_color(self, value): # -> None:
        ...
    
    @property
    def background_visibility(self): # -> None:
        """Note background visibility.

        Returns
        -------
        bool
        """
        ...
    
    @background_visibility.setter
    def background_visibility(self, value): # -> None:
        ...
    
    @property
    def border_visibility(self): # -> None:
        """Note border visibility.

        Returns
        -------
        bool
        """
        ...
    
    @border_visibility.setter
    def border_visibility(self, value): # -> None:
        ...
    
    @property
    def border_width(self): # -> None:
        """Note border width.

        Returns
        -------
        float
        """
        ...
    
    @border_width.setter
    def border_width(self, value): # -> None:
        ...
    
    @property
    def font(self): # -> str:
        """Note font.

        Returns
        -------
        str
        """
        ...
    
    @font.setter
    def font(self, value): # -> None:
        ...
    
    @property
    def font_size(self): # -> int:
        """Note font size.

        Returns
        -------
        bool
        """
        ...
    
    @font_size.setter
    def font_size(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> tuple[Literal[0], Literal[0], Literal[0]]:
        """Note font color.

        Returns
        -------
        list
        """
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def bold(self): # -> bool:
        """Note font bold.

        Returns
        -------
        bool
        """
        ...
    
    @bold.setter
    def bold(self, value): # -> None:
        ...
    
    @property
    def italic(self): # -> bool:
        """Note font italic.

        Returns
        -------
        bool
        """
        ...
    
    @italic.setter
    def italic(self, value): # -> None:
        ...
    


class Trace:
    """Trace class."""
    def __init__(self) -> None:
        ...
    
    @property
    def trace_style(self): # -> str:
        """Matplotlib trace style.

        Returns
        -------
        str
        """
        ...
    
    @property
    def trace_width(self): # -> float:
        """Trace width.

        Returns
        -------
        float
        """
        ...
    
    @property
    def trace_color(self): # -> None:
        """Matplotlib trace color. It can be a tuple or a string of allowed colors.

        Returns
        -------
        str, list
        """
        ...
    
    @property
    def symbol_style(self): # -> str:
        """Matplotlib symbol style.

        Returns
        -------
        str
        """
        ...
    
    @property
    def fill_symbol(self): # -> bool:
        """Fill symbol.

        Returns
        -------
        bool
        """
        ...
    
    @trace_style.setter
    def trace_style(self, val): # -> None:
        ...
    
    @trace_width.setter
    def trace_width(self, val): # -> None:
        ...
    
    @trace_color.setter
    def trace_color(self, val): # -> None:
        ...
    
    @symbol_style.setter
    def symbol_style(self, val): # -> None:
        ...
    
    @fill_symbol.setter
    def fill_symbol(self, val): # -> None:
        ...
    
    @property
    def cartesian_data(self): # -> list[NDArray[Any]] | None:
        """Cartesian data [x,y,z].

        Returns
        -------
        list[:class:`numpy.array`]
            List of data.
        """
        ...
    
    @cartesian_data.setter
    def cartesian_data(self, val): # -> None:
        ...
    
    @property
    def spherical_data(self): # -> list[Any] | None:
        """Spherical data [r, theta, phi]. Angles are in degrees.

        Returns
        -------
        list[:class:`numpy.array`]
            List of data.
        """
        ...
    
    @spherical_data.setter
    def spherical_data(self, rthetaphi): # -> None:
        ...
    
    @pyaedt_function_handler()
    def car2polar(self, x, y, is_degree=...): # -> list[Any]:
        """Convert cartesian data to polar.

        Parameters
        ----------
        x : list
            X data.
        y : list
            Y data.
        is_degree : bool, optional
            Whether to return data in degree or radians.

        Returns
        -------
        list, list
            R and theta.
        """
        ...
    
    @pyaedt_function_handler()
    def car2spherical(self): # -> None:
        """Convert cartesian data to spherical and assigns to property spherical data."""
        ...
    
    @pyaedt_function_handler()
    def spherical2car(self): # -> None:
        """Convert spherical data to cartesian data and assign to cartesian data property."""
        ...
    
    @pyaedt_function_handler()
    def polar2car(self, r, theta): # -> list[NDArray[Any]]:
        """Convert polar data to cartesian data.

        Parameters
        ----------
        r : list
        theta : list

        Returns
        -------
        list
            List of [x,y].
        """
        ...
    


class LimitLine(Trace):
    """Limit Line class."""
    def __init__(self) -> None:
        ...
    


class ReportPlotter:
    """Matplotlib Report manager."""
    def __init__(self) -> None:
        ...
    
    @property
    def traces(self): # -> dict[Any, Any]:
        """Traces.

        Returns
        -------
         dict[str, :class:`ansys.aedt.core.visualization.plot.matplotlib.Trace`]
        """
        ...
    
    @property
    def traces_by_index(self): # -> list[Any]:
        """Traces.

        Returns
        -------
         list[:class:`ansys.aedt.core.visualization.plot.matplotlib.Trace`]
        """
        ...
    
    @property
    def trace_names(self): # -> list[Any]:
        """Trace names.

        Returns
        -------
        list
        """
        ...
    
    @property
    def limit_lines(self): # -> dict[Any, Any]:
        """Limit Lines.

        Returns
        -------
         dict[str, :class:`ansys.aedt.core.visualization.plot.matplotlib.LimitLine`]
        """
        ...
    
    @pyaedt_function_handler()
    def apply_style(self, style_name): # -> Literal[True]:
        """Apply a custom matplotlib style (eg. background_dark).

        Parameters
        ----------
        style_name : str
            Matplotlib style name.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def grid_style(self): # -> str:
        """Grid style.

        Returns
        -------
        str
        """
        ...
    
    @grid_style.setter
    def grid_style(self, val): # -> None:
        ...
    
    @property
    def grid_enable_major_x(self): # -> bool:
        """Enable the major grid on x axis.

        Returns
        -------
        bool
        """
        ...
    
    @grid_enable_major_x.setter
    def grid_enable_major_x(self, val): # -> None:
        ...
    
    @property
    def grid_enable_major_y(self): # -> bool:
        """Enable the major grid on y axis.

        Returns
        -------
        bool
        """
        ...
    
    @grid_enable_major_y.setter
    def grid_enable_major_y(self, val): # -> None:
        ...
    
    @property
    def grid_enable_minor_x(self): # -> bool:
        """Enable the minor grid on x axis.

        Returns
        -------
        bool
        """
        ...
    
    @grid_enable_minor_x.setter
    def grid_enable_minor_x(self, val): # -> None:
        ...
    
    @property
    def grid_enable_minor_y(self): # -> bool:
        """Enable the minor grid on y axis.

        Returns
        -------
        bool
        """
        ...
    
    @grid_enable_minor_y.setter
    def grid_enable_minor_y(self, val): # -> None:
        ...
    
    @property
    def grid_color(self): # -> tuple[float, float, float] | list[Any] | tuple[Any, ...]:
        """Grid color.

        Returns
        -------
        str, list
            Grid color tuple.
        """
        ...
    
    @grid_color.setter
    def grid_color(self, val): # -> None:
        ...
    
    @property
    def general_back_color(self): # -> tuple[Literal[1], Literal[1], Literal[1]] | list[Any] | tuple[Any, ...]:
        """General background color.

        Returns
        -------
        str, list
        """
        ...
    
    @general_back_color.setter
    def general_back_color(self, val): # -> None:
        ...
    
    @property
    def general_plot_color(self): # -> tuple[Literal[1], Literal[1], Literal[1]] | list[Any] | tuple[Any, ...]:
        """General plot color.

        Returns
        -------
        str, list
        """
        ...
    
    @general_plot_color.setter
    def general_plot_color(self, val): # -> None:
        ...
    
    @property
    def y_scale(self): # -> str:
        """Y axis scale. It can be linear or log.

        Returns
        -------
        str
        """
        ...
    
    @y_scale.setter
    def y_scale(self, val): # -> None:
        ...
    
    @property
    def x_scale(self): # -> str:
        """X axis scale. It can be linear or log.

        Returns
        -------
        str
        """
        ...
    
    @x_scale.setter
    def x_scale(self, val): # -> None:
        ...
    
    @property
    def interactive(self): # -> bool:
        """Enable interactive mode.

        Returns
        -------
        bool
        """
        ...
    
    @interactive.setter
    def interactive(self, val): # -> None:
        ...
    
    def add_note(self, text, position=..., back_color=..., background_visibility=..., border_width=..., font=..., font_size=..., italic=..., bold=..., color=...): # -> None:
        """Add a note to the report.

        Parameters
        ----------
        text : str
        position : list, optional
        back_color : list, optional
        background_visibility : bool, optional
        border_width : float, optional
        font : str, optional
        font_size : float, optional
        italic : bool, optional
        bold : bool, optional
        color : list, optional

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def add_limit_line(self, plot_data, hatch_above=..., properties=..., name=...): # -> Literal[True]:
        """Add a new limit_line to the chart.

        Parameters
        ----------
        plot_data : list
            Data to be inserted. Data has to be cartesian with x and y.
        properties : dict, optional
            Properties of the trace.
            {x_label:prop,
            y_label:prop,
            trace_style : "-",
            trace_width : 1.5,
            trace_color : None,
            symbol_style : 'v',
            fill_symbol : None,
            symbol_color : "C0"
            }
        name : str
            Line name.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def add_trace(self, plot_data, data_type=..., properties=..., name=...): # -> Literal[True]:
        """Add a new trace to the chart.

        Parameters
        ----------
        plot_data : list
            Data to be inserted.
        data_type : int, optional
            Data format. ``0`` for cartesian, ``1`` for spherical data.
        properties : dict, optional
            Properties of the trace.
            {x_label:prop,
            y_label:prop,
            z_label:prop,
            trace_style : "-",
            trace_width : 1.5,
            trace_color : None,
            symbol_style : 'v',
            fill_symbol : None,
            symbol_color : "C0"
            }
        name : str
            Trace name.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def size(self): # -> list[Any]:
        """Figure size.

        Returns
        -------
        list
        """
        ...
    
    @size.setter
    def size(self, val, is_pixel=...): # -> None:
        ...
    
    @pyaedt_function_handler()
    def plot_polar(self, traces=..., to_polar=..., snapshot_path=..., show=..., is_degree=..., figure=...): # -> Figure | Literal[False]:
        """Create a Matplotlib polar plot based on a list of data.

        Parameters
        ----------
        traces : int, str, list, optional
            Trace or traces to be plotted. It can be the trace name, the trace id or a list of those.
        to_polar : bool, optional
            Whether if cartesian data has to be converted to polar before the plot or can be used as is.
        snapshot_path : str
            Full path to the image file if a snapshot is needed.
        show : bool, optional
            Whether to render the figure. The default is ``True``. If ``False``, the
            figure is not drawn.
        is_degree : bool, optional
            Whether if data source are in degree or not. Default is ``True``.
        figure : :class:`matplotlib.pyplot.Figure`, optional
            An existing Matplotlib `Figure` to which the plot is added.
            If not provided, a new `Figure` and `Axes` object are created.

        Returns
        -------
        :class:`matplotlib.pyplot.Figure`
            Matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_3d(self, trace=..., snapshot_path=..., show=..., color_map_limits=..., is_polar=...): # -> Figure | Literal[False]:
        """Create a Matplotlib 3D plot based on a list of data.

        Parameters
        ----------
        trace : int, str optional
            Trace index or name on which create the 3D Plot.
        snapshot_path : str, optional
            Full path to image file if a snapshot is needed.
        show : bool, optional
            Whether to show the plot or return the matplotlib object. Default is `True`.
        color_map_limits : list, optional
            Color map minimum and maximum values.
        is_polar : bool, optional
            Whether if the plot will be polar or not. Polar plot will hide axes and grids. Default is ``True``.

        Returns
        -------
        :class:`matplotlib.pyplot.Figure`
            Matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_2d(self, traces=..., snapshot_path=..., show=..., figure=...): # -> Figure | Literal[False]:
        """Create a Matplotlib figure based on a list of data.

        Parameters
        ----------
        traces : int, str, list, optional
            Trace or traces to be plotted. It can be the trace name, the trace id or a list of those.
        snapshot_path : str, optional
            Full path to image file if a snapshot is needed.
            The default value is ``None``.
        show : bool, optional
            Whether to show the plot or return the matplotlib object. Default is `True`.
        figure : :class:`matplotlib.pyplot.Figure`, optional
            An existing Matplotlib `Figure` to which the plot is added.
            If not provided, a new `Figure` and `Axes` object are created.

        Returns
        -------
        :class:`matplotlib.pyplot.Figure`
            Matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def animate_2d(self, traces=..., snapshot_path=..., show=..., figure=...): # -> FuncAnimation | Literal[False]:
        """Create an animated Matplotlib figure based on a list of data.

        Parameters
        ----------
        traces : int, str, list, optional
            Trace or traces to be plotted. It can be the trace name, the trace id or a list of those.
        snapshot_path : str, optional
            Full path to image file if a snapshot is needed.
            The default value is ``None``.
        show : bool, optional
            Whether to show the plot or return the matplotlib object. Default is `True`.
        figure : :class:`matplotlib.pyplot.Figure`, optional
            An existing Matplotlib `Figure` to which the plot is added.
            If not provided, a new `Figure` and `Axes` object are created.

        Returns
        -------
        :class:`matplotlib.pyplot.Figure`
            Matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_contour(self, trace=..., polar=..., levels=..., max_theta=..., min_theta=..., color_bar=..., snapshot_path=..., show=..., figure=..., is_spherical=..., normalize=...): # -> Figure | Literal[False]:
        """Create a Matplotlib figure contour based on a list of data.

        Parameters
        ----------
        trace : int, str, optional
            Trace index on which create the 3D Plot.
        polar : bool, optional
            Generate the plot in polar coordinates. The default is ``True``. If ``False``, the plot
            generated is rectangular.
        levels : int, optional
            Color map levels. The default is ``64``.
        max_theta : float or int, optional
            Maximum theta angle for plotting. It applies only for polar plots.
            The default is ``180``, which plots the data for all angles.
            Setting ``max_theta`` to 90 limits the displayed data to the upper
            hemisphere, that is (0 < theta < 90).
        min_theta : float or int, optional
            Minimum theta angle for plotting. It applies only for polar plots. The default is ``0``.
        color_bar : str, optional
            Color bar title. The default is ``None`` in which case the color bar is not included.
        snapshot_path : str, optional
            Full path to image file if a snapshot is needed.
            The default value is ``None``.
        show : bool, optional
            Whether to show the plot or return the matplotlib object. Default is ``True``.
        figure : :class:`matplotlib.pyplot.Figure`, optional
            An existing Matplotlib `Figure` to which the plot is added.
            If not provided, a new `Figure` and `Axes` object are created.
        is_spherical : bool, optional
            Whether to use spherical or cartesian data.
        normalize : list, optional
            Normalize the color scale using the provided ``[vmin, vmax]`` values.
            If not provided or invalid, automatic normalization is applied.

        Returns
        -------
        :class:`matplotlib.pyplot.Figure`
            Matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def plot_pcolor(self, trace=..., color_bar=..., snapshot_path=..., show=..., figure=...): # -> Figure | Literal[False]:
        """Create a Matplotlib figure pseudo color plot with a non-regular rectangular grid based on a list of data.

        Parameters
        ----------
        trace : int, str, optional
            Trace index on which create the 3D Plot.
        color_bar : str, optional
            Color bar title. The default is ``None`` in which case the color bar is not included.
        snapshot_path : str, optional
            Full path to image file if a snapshot is needed.
            The default value is ``None``.
        show : bool, optional
            Whether to show the plot or return the matplotlib object. Default is ``True``.
        figure : :class:`matplotlib.pyplot.Figure`, optional
            An existing Matplotlib `Figure` to which the plot is added.
            If not provided, a new `Figure` and `Axes` object are created.

        Returns
        -------
        :class:`matplotlib.pyplot.Figure`
            Matplotlib figure object.
        """
        ...
    
    @pyaedt_function_handler()
    def animate_contour(self, trace=..., polar=..., levels=..., max_theta=..., min_theta=..., color_bar=..., snapshot_path=..., show=..., figure=..., is_spherical=..., normalize=...): # -> FuncAnimation | Literal[False]:
        """Create an animated Matplotlib figure contour based on a list of data.

        Parameters
        ----------
        trace : int, str, optional
            Trace index on which create the 3D Plot.
        polar : bool, optional
            Generate the plot in polar coordinates. The default is ``True``. If ``False``, the plot
            generated is rectangular.
        levels : int, optional
            Color map levels. The default is ``64``.
        max_theta : float or int, optional
            Maximum theta angle for plotting. It applies only for polar plots.
            The default is ``180``, which plots the data for all angles.
            Setting ``max_theta`` to 90 limits the displayed data to the upper
            hemisphere, that is (0 < theta < 90).
        min_theta : float or int, optional
            Minimum theta angle for plotting. It applies only for polar plots. The default is ``0``.
        color_bar : str, optional
            Color bar title. The default is ``None`` in which case the color bar is not included.
        snapshot_path : str, optional
            Full path to image file if a snapshot is needed.
            The default value is ``None``.
        show : bool, optional
            Whether to show the plot or return the matplotlib object. Default is ``True``.
        figure : :class:`matplotlib.pyplot.Figure`, optional
            An existing Matplotlib `Figure` to which the plot is added.
            If not provided, a new `Figure` and `Axes` object are created.
        is_spherical : bool, optional
            Whether to use spherical or cartesian data.
        normalize : list, optional
            Normalize the color scale using the provided ``[vmin, vmax]`` values.
            If not provided or invalid, automatic normalization is applied.

        Returns
        -------
        :class:`matplotlib.pyplot.Figure`
            Matplotlib figure object.
        """
        ...
    


@pyaedt_function_handler()
def plot_polar_chart(plot_data, size=..., show_legend=..., xlabel=..., ylabel=..., title=..., snapshot_path=..., show=...): # -> ReportPlotter:
    """Create a Matplotlib polar plot based on a list of data.

    .. deprecated:: 0.11.1
        Use :class:`ReportPlotter` instead.

    Parameters
    ----------
    plot_data : list of list
        List of plot data. Every item has to be in the following format
        ``[x points, y points, label]``.
    size : tuple, optional
        Image size in pixel (width, height).
    show_legend : bool
        Either to show legend or not.
    xlabel : str
        Plot X label.
    ylabel : str
        Plot Y label.
    title : str
        Plot title label.
    snapshot_path : str
        Full path to the image file if a snapshot is needed.
    show : bool, optional
        Whether to render the figure. The default is ``True``. If ``False``, the
        figure is not drawn.

    Returns
    -------
    :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
        Matplotlib class object.
    """
    ...

@pyaedt_function_handler()
def plot_3d_chart(plot_data, size=..., xlabel=..., ylabel=..., title=..., snapshot_path=..., show=...): # -> ReportPlotter:
    """Create a Matplotlib 3D plot based on a list of data.

    .. deprecated:: 0.11.1
        Use :class:`ReportPlotter` instead.

    Parameters
    ----------
    plot_data : list of list
        List of plot data. Every item has to be in the following format
        ``[x points, y points, z points, label]``.
    size : tuple, optional
        Image size in pixel (width, height).
    xlabel : str, optional
        Plot X label.
    ylabel : str, optional
        Plot Y label.
    title : str, optional
        Plot Title label.
    snapshot_path : str, optional
        Full path to image file if a snapshot is needed.
    show : bool, optional
        Whether to show the plot or return the matplotlib object. Default is `True`.

    Returns
    -------
    :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
        Matplotlib class object.
    """
    ...

@pyaedt_function_handler()
def plot_2d_chart(plot_data, size=..., show_legend=..., xlabel=..., ylabel=..., title=..., snapshot_path=..., show=...): # -> ReportPlotter:
    """Create a Matplotlib figure based on a list of data.

    .. deprecated:: 0.11.1
        Use :class:`ReportPlotter` instead.

    Parameters
    ----------
    plot_data : list of list
        List of plot data. Every item has to be in the following format
        `[x points, y points, label]`.
    size : tuple, optional
        Image size in pixel (width, height). The default is `(1920,1440)`.
    show_legend : bool, optional
        Either to show legend or not. The default value is ``True``.
    xlabel : str, optional
        Plot X label. The default value is ``""``.
    ylabel : str, optional
        Plot Y label. The default value is ``""``.
    title : str, optional
        Plot Title label. The default value is ``""``.
    snapshot_path : str, optional
        Full path to image file if a snapshot is needed.
        The default value is ``None``.
    show : bool, optional
        Whether to show the plot or return the matplotlib object. Default is `True`.

    Returns
    -------
    :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
        Matplotlib class object.
    """
    ...

@pyaedt_function_handler()
def plot_matplotlib(plot_data, size=..., show_legend=..., xlabel=..., ylabel=..., title=..., snapshot_path=..., x_limits=..., y_limits=..., axis_equal=..., annotations=..., show=...): # -> Figure:
    """Create a matplotlib plot based on a list of data.

    Parameters
    ----------
    plot_data : list of list
        List of plot data. Every item has to be in the following format
        For type ``fill``: `[x points, y points, color, label, alpha, type=="fill"]`.
        For type ``path``: `[vertices, codes, color, label, alpha, type=="path"]`.
        For type ``contour``: `[vertices, codes, color, label, alpha, line_width, type=="contour"]`.
    size : tuple, optional
        Image size in pixel (width, height). Default is `(1920, 1440)`.
    show_legend : bool, optional
        Either to show legend or not. Default is `True`.
    xlabel : str, optional
        Plot X label. Default is `""`.
    ylabel : str, optional
        Plot Y label. Default is `""`.
    title : str, optional
        Plot Title label. Default is `""`.
    snapshot_path : str, optional
        Full path to image file if a snapshot is needed. Default is `None`.
    x_limits : list, optional
        List of x limits (left and right). Default is `None`.
    y_limits : list, optional
        List of y limits (bottom and top). Default is `None`.
    axis_equal : bool, optional
         Whether to show the same scale on both axis or have a different scale based on plot size.
        Default is `False`.
    annotations : list, optional
        List of annotations to add to the plot. The format is [x, y, string, dictionary of font options].
        Default is `None`.
    show : bool, optional
        Whether to show the plot or return the matplotlib object. Default is `True`.

    Returns
    -------
    :class:`matplotlib.pyplot.Figure`
        Matplotlib figure object.
    """
    ...

@pyaedt_function_handler()
def plot_contour(plot_data, size=..., xlabel=..., ylabel=..., title=..., polar=..., levels=..., max_theta=..., color_bar=..., snapshot_path=..., show=...): # -> ReportPlotter:
    """Create a Matplotlib figure contour based on a list of data.

    .. deprecated:: 0.11.1
        Use :class:`ReportPlotter` instead.

    Parameters
    ----------
    plot_data : list of np.ndarray
        List of plot data. Each item of the list a numpy array. The list has the following format:
        ``[data, x points, y points]``.
    size : tuple, list, optional
        Image size in pixel (width, height). The default is ``(2000,1600)``.
    xlabel : str, optional
        Plot X label. The default value is ``""``.
    ylabel : str, optional
        Plot Y label. The default value is ``""``.
    title : str, optional
        Plot Title label. The default value is ``""``.
    polar : bool, optional
        Generate the plot in polar coordinates. The default is ``True``. If ``False``, the plot
        generated is rectangular.
    levels : int, optional
        Color map levels. The default is ``64``.
    max_theta : float or int, optional
        Maximum theta angle for plotting. It applies only for polar plots.
        The default is ``180``, which plots the data for all angles.
        Setting ``max_theta`` to 90 limits the displayed data to the upper
        hemisphere, that is (0 < theta < 90).
    color_bar : str, optional
        Color bar title. The default is ``None`` in which case the color bar is not included.
    snapshot_path : str, optional
        Full path to image file if a snapshot is needed.
        The default value is ``None``.
    show : bool, optional
        Whether to show the plot or return the matplotlib object. Default is ``True``.

    Returns
    -------
    :class:`ansys.aedt.core.visualization.plot.matplotlib.ReportPlotter`
        Matplotlib class object.
    """
    ...

