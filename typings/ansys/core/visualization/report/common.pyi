"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.elements_3d import BinaryTreeNode

class LimitLine(BinaryTreeNode):
    """Line Limit Management Class."""
    def __init__(self, post, trace_name, oo=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def set_line_properties(self, style=..., width=..., hatch_above=..., violation_emphasis=..., hatch_pixels=..., color=...): # -> Literal[True]:
        """Set trace properties.

        Parameters
        ----------
        style : str, optional
            Style for the limit line. The default is ``None``. You can also use
            the ``LIFESTYLE`` property.
        width : int, optional
            Width of the limit line. The default is ``None``.
        hatch_above : bool
           Whether the hatch is above the limit line. The default is ``None``.
        violation_emphasis : bool
            Whether to add violation emphasis. The default is ``None``.
        hatch_pixels : int
            Number of pixels for the hatch. The default is ``None``.
        color : tuple, list
            Trace color as a tuple (R,G,B) or a list of integers [0,255].
            The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


class Note(BinaryTreeNode):
    """Note Management Class."""
    def __init__(self, post, plot_note_name, oo=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def set_note_properties(self, text=..., back_color=..., background_visibility=..., border_color=..., border_visibility=..., border_width=..., font=..., font_size=..., italic=..., bold=..., color=...): # -> Literal[True]:
        """Set note properties.

        Parameters
        ----------
        text : str, optional
            Style for the limit line. The default is ``None``. You can also use
            the ``LIFESTYLE`` property.
        back_color : int
            Background color specified as a tuple (R,G,B) or a list of integers [0,255].
            The default is ``None``.
        background_visibility : bool
            Whether to view background. The default is ``None``.
        border_color : int
            Trace color specified as a tuple (R,G,B) or a list of integers [0,255].
            The default is ``None``.
        border_visibility : bool
            Whether to view text border. The default is ``None``.
            The default is ``None``.
        border_width : int
            Text boarder width.
            The default is ``None``.
        font : str, optional
            The default is ``None``.
        font_size : int, optional
            The default is ``None``.
        italic : bool
            Whether the text is italic.
            The default is ``None``.
        bold : bool
            Whether the text is bold.
            The default is ``None``.
        color : int =(0, 0, 0)
            Trace color specified as a tuple (R,G,B) or a list of integers [0,255].
            The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


class Trace(BinaryTreeNode):
    """Provides trace management."""
    def __init__(self, post, aedt_name, trace_name, oo=...) -> None:
        ...
    
    @property
    def curve_properties(self): # -> dict[Any, Any]:
        """All curve graphical properties. It includes colors, trace and symbol settings.

        Returns
        -------
            :class:`ansys.aedt.core.modeler.cad.elements_3d.BinaryTree` when successful,
            ``False`` when failed.

        """
        ...
    
    @property
    def name(self): # -> Any:
        """Trace name.

        Returns
        -------
        str
            Trace name.
        """
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @pyaedt_function_handler(trace_style="style")
    def set_trace_properties(self, style=..., width=..., trace_type=..., color=...): # -> Literal[True]:
        """Set trace properties.

        Parameters
        ----------
        style : str, optional
            Style for the trace line. The default is ``None``. You can also use
            the ``LINESTYLE`` property.
        width : int, optional
            Width of the trace line. The default is ``None``.
        trace_type : str
            Type of the trace line. The default is ``None``. You can also use the ``TRACETYPE``
            property.
        color : tuple, list
            Trace line color specified as a tuple (R,G,B) or a list of integers [0,255].
            The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def set_symbol_properties(self, show=..., style=..., show_arrows=..., fill=..., color=...): # -> Literal[True]:
        """Set symbol properties.

        Parameters
        ----------
        show : bool, optional
            Whether to show the symbol. The default is ``True``.
        style : str, optional
           Style of the style. The default is ``None``. You can also use the ``SYMBOLSTYLE``
           property.
        show_arrows : bool, optional
            Whether to show arrows. The default is ``None``.
        fill : bool, optional
            Whether to fill the symbol with a color. The default is ``None``.
        color : tuple, list
            Symbol fill color specified as a tuple (R,G,B) or a list of integers [0,255].
            The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


class CommonReport(BinaryTreeNode):
    """Provides common reports."""
    def __init__(self, app, report_category, setup_name, expressions=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete current report."""
        ...
    
    @property
    def differential_pairs(self):
        """Differential pairs flag.

        Returns
        -------
        bool
            ``True`` when differential pairs is enabled, ``False`` otherwise.
        """
        ...
    
    @differential_pairs.setter
    def differential_pairs(self, value): # -> None:
        ...
    
    @property
    def matrix(self):
        """Maxwell 2D/3D or Q2D/Q3D matrix name.

        Returns
        -------
        str
            Matrix name.
        """
        ...
    
    @matrix.setter
    def matrix(self, value): # -> None:
        ...
    
    @property
    def reduced_matrix(self):
        """Maxwell 2D/3D reduced matrix name for eddy current solvers.

        Returns
        -------
        str
            Reduced matrix name.
        """
        ...
    
    @reduced_matrix.setter
    def reduced_matrix(self, value): # -> None:
        ...
    
    @property
    def polyline(self):
        """Polyline name for the field report.

        Returns
        -------
        str
            Polyline name.
        """
        ...
    
    @polyline.setter
    def polyline(self, value): # -> None:
        ...
    
    @property
    def expressions(self): # -> list[Any]:
        """Expressions.

        Returns
        -------
        list
            Expressions.
        """
        ...
    
    @expressions.setter
    def expressions(self, value): # -> None:
        ...
    
    @property
    def report_category(self):
        """Report category.

        Returns
        -------
        str
            Report category.
        """
        ...
    
    @report_category.setter
    def report_category(self, value): # -> None:
        ...
    
    @property
    def report_type(self):
        """Report type. Options are ``"3D Polar Plot"``, ``"3D Spherical Plot"``,
        ``"Radiation Pattern"``, ``"Rectangular Plot"``, ``"Data Table"``,
        ``"Smith Chart"``, and ``"Rectangular Contour Plot"``.

        Returns
        -------
        str
            Report type.
        """
        ...
    
    @report_type.setter
    def report_type(self, report): # -> None:
        ...
    
    @property
    def traces(self): # -> list[Any]:
        """List of available traces in the report.

        .. note::
            This property works in version 2022 R1 and later. However, it works only in
            non-graphical mode in version 2022 R2 and later.

        Returns
        -------
        List of :class:`ansys.aedt.core.modules.report_templates.Trace`
        """
        ...
    
    @property
    def limit_lines(self): # -> list[Any]:
        """List of available limit lines in the report.

        .. note::
            This property works in version 2022 R1 and later. However, it works only in
            non-graphical mode in version 2022 R2 and later.

        Returns
        -------
        List of :class:`ansys.aedt.core.modules.report_templates.LimitLine`
        """
        ...
    
    @property
    def notes(self): # -> list[Any]:
        """List of available notes in the report.

        .. note::
            This property works in version 2022 R1 and later. However, it works only in
            non-graphical mode in version 2022 R2 and later.

        Returns
        -------
        List of :class:`ansys.aedt.core.modules.report_templates.Note`
        """
        ...
    
    @property
    def plot_name(self):
        """Plot name.

        Returns
        -------
        str
            Plot name.
        """
        ...
    
    @plot_name.setter
    def plot_name(self, name): # -> None:
        ...
    
    @property
    def variations(self): # -> HistoryProps:
        """Variations.

        Returns
        -------
        str
            Variations.
        """
        ...
    
    @variations.setter
    def variations(self, value): # -> None:
        ...
    
    @property
    def primary_sweep(self):
        """Primary sweep report.

        Returns
        -------
        str
            Primary sweep.
        """
        ...
    
    @primary_sweep.setter
    def primary_sweep(self, value): # -> None:
        ...
    
    @property
    def secondary_sweep(self): # -> None:
        """Secondary sweep report.

        Returns
        -------
        str
            Secondary sweep.
        """
        ...
    
    @secondary_sweep.setter
    def secondary_sweep(self, value): # -> None:
        ...
    
    @property
    def primary_sweep_range(self):
        """Primary sweep range report.

        Returns
        -------
        str
            Primary sweep range.
        """
        ...
    
    @primary_sweep_range.setter
    def primary_sweep_range(self, value): # -> None:
        ...
    
    @property
    def secondary_sweep_range(self):
        """Secondary sweep range report.

        Returns
        -------
        str
            Secondary sweep range.
        """
        ...
    
    @secondary_sweep_range.setter
    def secondary_sweep_range(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def update_expressions_with_defaults(self, quantities_category=...): # -> None:
        """Update the list of expressions by taking all quantities from a given category.

        Parameters
        ----------
        quantities_category : str, optional
            Quantities category to use. The default is ``None``, in which case the default
            category for the specified report is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @property
    def domain(self):
        """Plot domain.

        Returns
        -------
        str
            Plot domain.
        """
        ...
    
    @domain.setter
    def domain(self, domain): # -> None:
        ...
    
    @property
    def use_pulse_in_tdr(self):
        """Defines if the TDR should use a pulse or step.

        Returns
        -------
        bool
            ``True`` when option is enabled, ``False`` otherwise.
        """
        ...
    
    @use_pulse_in_tdr.setter
    def use_pulse_in_tdr(self, val): # -> None:
        ...
    
    @pyaedt_function_handler(plot_name="name")
    def create(self, name=...): # -> bool:
        """Create a report.

        Parameters
        ----------
        name : str, optional
            Name for the plot. The default is ``None``, in which case the
            default name is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def export_config(self, output_file): # -> bool:
        """Generate a configuration file from active report.

        Parameters
        ----------
        output_file : str
            Full path to json file.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def get_solution_data(self): # -> Literal[False]:
        """Get the report solution data.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solutions.SolutionData`
            Solution data object.
        """
        ...
    
    @pyaedt_function_handler()
    def add_limit_line_from_points(self, x_list, y_list, x_units=..., y_units=..., y_axis=...): # -> bool:
        """Add a Cartesian limit line from point lists. This method works only in graphical mode.

        Parameters
        ----------
        x_list : list
            List of float inputs.
        y_list : list
            List of float y values.
        x_units : str, optional
            Units for the ``x_list`` parameter. The default is ``""``.
        y_units : str, optional
            Units for the ``y_list`` parameter. The default is ``""``.
        y_axis : int, optional
            Y axis. The default is `"Y1"`.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def add_limit_line_from_equation(self, start_x, stop_x, step, equation=..., units=..., y_axis=...): # -> bool:
        """Add a Cartesian limit line from point lists. This method works only in graphical mode.

        Parameters
        ----------
        start_x : float
            Start X value.
        stop_x : float
            Stop X value.
        step : float
            X step value.
        equation : str, optional
            Y equation to apply. The default is Y=X.
        units : str
            Units for the X axis. The default is ``"GHz"``.
        y_axis : str, int, optional
            Y axis. The default is ``1``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def add_note(self, text, x_position=..., y_position=...): # -> bool:
        """Add a note at a position.

        Parameters
        ----------
        text : string
            Text of the note.
        x_position : float, optional
            x position of the note. The default is ``0.0``.
        y_position : float, optional
            y position of the note. The default is ``0.0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(val="value")
    def add_cartesian_x_marker(self, value, name=...): # -> str:
        """Add a cartesian X marker.

        .. note::
           This method only works in graphical mode.

        Parameters
        ----------
        value : str
            Value to apply with units.
        name : str, optional
            Marker name. The default is ``None``.

        Returns
        -------
        str
            Marker name if created.
        """
        ...
    
    @pyaedt_function_handler(val="value")
    def add_cartesian_y_marker(self, value, name=..., y_axis=...): # -> str:
        """Add a cartesian Y marker.

        .. note::
           This method only works in graphical mode.

        Parameters
        ----------
        value : str, float
            Value to apply with units.
        name : str, optional
            Marker name. The default is ``None``.
        y_axis : str, optional
            Y axis. The default is ``"Y1"``.

        Returns
        -------
        str
            Marker name if created.
        """
        ...
    
    @pyaedt_function_handler()
    def edit_grid(self, minor_x=..., minor_y=..., major_x=..., major_y=..., style_minor=..., style_major=..., minor_color=..., major_color=...): # -> bool:
        """Edit the grid settings for the plot.

        Parameters
        ----------
        minor_x : bool, optional
            Whether to enable the minor X grid. The default is ``True``.
        minor_y : bool, optional
            Whether to enable the minor Y grid. The default is ``True``.
        major_x : bool, optional
            Whether to enable the major X grid. The default is ``True``.
        major_y : bool, optional
            Whether to enable the major Y grid. The default is ``True``.
        style_minor : str, optional
            Minor grid style. The default is ``"Solid"``.
        style_major : str, optional
            Major grid style. The default is ``"Solid"``.
        minor_color : tuple, optional
            Minor grid (R, G, B) color. The default is ``(0, 0, 0)``.
            Each color value must be an integer in a range from 0 to 255.
        major_color : tuple, optional
            Major grid (R, G, B) color. The default is ``(0, 0, 0)``.
            Each color value must be an integer in a range from 0 to 255.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def edit_x_axis(self, font=..., font_size=..., italic=..., bold=..., color=..., label=..., display_units=...): # -> bool:
        """Edit the X-axis settings.

        Parameters
        ----------
        font : str, optional
            Font name. The default is ``"Arial"``.
        font_size : int, optional
            Font size. The default is ``12``.
        italic : bool, optional
            Whether to use italic type. The default is ``False``.
        bold : bool, optional
            Whether to use bold type. The default is ``False``.
        color : tuple, optional
            Font (R, G, B) color. The default is ``(0, 0, 0)``. Each color value
            must be an integer in a range from 0 to 255.
        label : str, optional
            Label for the Y axis. The default is ``None``.
        display_units : bool, optional
            Whether to display units. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def edit_x_axis_scaling(self, linear_scaling=..., min_scale=..., max_scale=..., minor_tick_divs=..., min_spacing=..., units=...): # -> bool:
        """Edit the X-axis scaling settings.

        Parameters
        ----------
        linear_scaling : bool, optional
            Whether to use the linear scale. The default is ``True``.
            When ``False``, the log scale is used.
        min_scale : str, optional
            Minimum scale value with units. The default is ``None``.
        max_scale : str, optional
            Maximum scale value with units. The default is ``None``.
        minor_tick_divs : int, optional
            Minor tick division. The default is ``5``.
        min_spacing : str, optional
            Minimum spacing with units. The default is ``None``.
        units : str, optional
            Units in the plot. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def edit_legend(self, show_solution_name=..., show_variation_key=..., show_trace_name=..., back_color=..., font_color=...): # -> bool:
        """Edit the plot legend.

        Parameters
        ----------
        show_solution_name : bool, optional
            Whether to show the solution name. The default is ``True``.
        show_variation_key : bool, optional
            Whether to show the variation key. The default is ``True``.
        show_trace_name : bool, optional
            Whether to show the trace name. The default is ``True``.
        back_color : tuple, optional
            Background (R, G, B) color. The default is ``(255, 255, 255)``. Each color value
            must be an integer in a range from 0 to 255.
        font_color : tuple, optional
            Legend font (R, G, B) color. The default is ``(0, 0, 0)``. Each color value
            must be an integer in a range from 0 to 255.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(font_height="font_size")
    def hide_legend(self, solution_name=..., trace_name=..., variation_key=..., font_size=...): # -> bool:
        """Hide the Legend.

        Parameters
        ----------
        solution_name : bool, optional
            Whether to show or hide the solution name. Default is ``True``.
        trace_name : bool, optional
            Whether to show or hide the trace name. Default is ``True``.
        variation_key : bool, optional
            Whether to show or hide the variations. Default is ``True``.
        font_size : int
            Font size. The default is ``1``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(axis_name="name")
    def edit_y_axis(self, name=..., font=..., font_size=..., italic=..., bold=..., color=..., label=..., display_units=...): # -> bool:
        """Edit the Y-axis settings.

        Parameters
        ----------
        name : str, optional
            Name for the main Y axis. The default is ``"Y1"``.
        font : str, optional
            Font name. The default is ``"Arial"``.
        font_size : int, optional
            Font size. The default is ``12``.
        italic : bool, optional
            Whether to use italic type. The default is ``False``.
        bold : bool, optional
            Whether to use bold type. The default is ``False``.
        color : tuple, optional
            Font (R, G, B) color. The default is ``(0, 0, 0)``. Each color value
            must be an integer in a range from 0 to 255.
        label : str, optional
            Label for the Y axis. The default is ``None``.
        display_units : bool, optional
            Whether to display units. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(axis_name="name")
    def edit_y_axis_scaling(self, name=..., linear_scaling=..., min_scale=..., max_scale=..., minor_tick_divs=..., min_spacing=..., units=...): # -> bool:
        """Edit the Y-axis scaling settings.

        Parameters
        ----------
        axis name : str, optional
            Axis name. The default is ``Y``.
        linear_scaling : bool, optional
            Whether to use the linear scale. The default is ``True``.
            When ``False``, the log scale is used.
        min_scale : str, optional
            Minimum scale value with units. The default is ``None``.
        max_scale : str, optional
            Maximum scale value with units. The default is ``None``.
        minor_tick_divs : int, optional
            Minor tick division. The default is ``5``.
        min_spacing : str, optional
            Minimum spacing with units. The default is ``None``.
        units : str, optional
            Units in the plot. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def edit_general_settings(self, background_color=..., plot_color=..., enable_y_stripes=..., field_width=..., precision=..., use_scientific_notation=...): # -> bool:
        """Edit general settings for the plot.

        Parameters
        ----------
        background_color : tuple, optional
            Backgoround (R, G, B) color. The default is ``(255, 255, 255)``. Each color value
            must be an integer in a range from 0 to 255.
        plot_color : tuple, optional
            Plot (R, G, B) color. The default is ``(255, 255, 255)``. Each color value
            must be an integer in a range from 0 to 255.
        enable_y_stripes : bool, optional
            Whether to enable Y stripes. The default is ``True``.
        field_width : int, optional
            Field width. The default is ``4``.
        precision : int, optional
            Field precision. The default is ``4``.
        use_scientific_notation : bool, optional
            Whether to enable scientific notation. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def edit_header(self, company_name=..., show_design_name=..., font=..., title_size=..., subtitle_size=..., italic=..., bold=..., color=...): # -> bool:
        """Edit the plot header.

        Parameters
        ----------
        company_name : str, optional
            Company name. The default is ``PyAEDT``.
        show_design_name : bool, optional
            Whether to show the design name in the plot. The default is ``True``.
        font : str, optional
            Font name. The default is ``"Arial"``.
        title_size : int, optional
            Title font size. The default is ``12``.
        subtitle_size : int, optional
            Subtitle font size. The default is ``12``.
        italic : bool, optional
            Whether to use italic type. The default is ``False``.
        bold : bool, optional
            Whether to use bold type. The default is ``False``.
        color : tuple, optional
            Title (R, G, B) color. The default is ``(0, 0, 0)``.
            Each color value must be an integer in a range from 0 to 255.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(file_path="input_file")
    def import_traces(self, input_file, plot_name): # -> bool:
        """Import report data from a file into a specified report.

        Parameters
        ----------
        input_file : str
            Path for the file to import. The extensions supported are ``".csv"``,
            ``".tab"``, ``".dat"``, and ``".rdat"``.
        plot_name : str
            Name of the plot to import the file data into.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def delete_traces(self, plot_name, traces_list): # -> bool:
        """Delete an existing trace or traces.

        Parameters
        ----------
        plot_name : str
            Plot name.
        traces_list : list
            List of one or more traces to delete.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def add_trace_to_report(self, traces, setup_name=..., variations=..., context=...): # -> bool:
        """Add a trace to a specific report.

        Parameters
        ----------
        traces : list
            List of traces to add.
        setup_name : str, optional
            Name of the setup. The default is ``None`` which automatically take ``nominal_adaptive`` setup.
            Please make sure to build a setup string in the form of ``"SetupName : SetupSweep"``
            where ``SetupSweep`` is the Sweep name to use in the export or ``LastAdaptive``.
        variations : dict, optional
            Dictionary of variations. The default is ``None``.
        context : list, optional
            List of solution context.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def update_trace_in_report(self, traces, setup_name=..., variations=..., context=...): # -> bool:
        """Update a trace in a specific report.

        Parameters
        ----------
        traces : list
            List of traces to add.
        setup_name : str, optional
            Name of the setup. The default is ``None``.
        variations : dict, optional
            Dictionary of variations. The default is ``None``.
        context : list, optional
            List of solution context.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def apply_report_template(self, input_file, property_type=...): # -> bool:
        """Apply report template.

        .. note::
            This method works in only in graphical mode.

        Parameters
        ----------
        input_file : str
            Path for the file to import. The extension supported is ``".rpt"``.
        property_type : str, optional
            Property types to apply. Options are ``"Graphical"``, ``"Data"``, and ``"All"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.ApplyReportTemplate
        """
        ...
    
    @pyaedt_function_handler(trace_name="name")
    def add_trace_characteristics(self, name, arguments=..., solution_range=...): # -> Literal[True]:
        """Add a trace characteristic to the plot.

        Parameters
        ----------
        name : str
            Name of the trace characteristic.
        arguments : list, optional
            Arguments if any. The default is ``None``.
        solution_range : list, optional
            Output range. The default is ``None``, in which case
            the full range is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def export_table_to_file(self, plot_name, output_file, table_type=...): # -> Literal[True]:
        """Export a marker table or a legend (with trace characteristics result) from a report to a file.

        Parameters
        ----------
        plot_name : str
            Plot name.
        output_file : str
            Full path of the outputted file.
            Valid extensions for the output file are: ``.tab``, ``.csv``
        table_type : str
            Valid table types are: ``Marker``, ``DeltaMarker``, ``Legend``.
            Default table_type is ``Marker``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.ExportTableToFile
        """
        ...
    


