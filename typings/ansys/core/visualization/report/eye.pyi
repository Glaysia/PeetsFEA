"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.visualization.report.common import CommonReport

"""
This module contains these classes: `AMIConturEyeDiagram`, `AMIEyeDiagram`, and `EyeDiagram`.

This module provides all functionalities for creating and editing reports.

"""
class AMIConturEyeDiagram(CommonReport):
    """Provides for managing eye contour diagram reports in AMI analysis."""
    def __init__(self, app, report_category, setup_name, expressions=...) -> None:
        ...
    
    @property
    def expressions(self): # -> list[Any]:
        """Expressions.

        Returns
        -------
        list
            Expressions.
        """
        ...
    
    @expressions.setter
    def expressions(self, value): # -> None:
        ...
    
    @property
    def quantity_type(self):
        """Quantity type used in the AMI analysis plot.

        Returns
        -------
        int
            Quantity type.
        """
        ...
    
    @quantity_type.setter
    def quantity_type(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self, name=...): # -> Literal[True]:
        """Create an eye diagram report.

        Parameters
        ----------
        name : str, optional
            Plot name. The default is ``None``, in which case
            the default name is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(xunits="x_units", yunits="y_units", xoffset="x_offset", yoffset="y_offset")
    def eye_mask(self, points, x_units=..., y_units=..., enable_limits=..., upper_limit=..., lower_limit=..., color=..., x_offset=..., y_offset=..., transparency=...): # -> Literal[True]:
        """Create an eye diagram in the plot.

        Parameters
        ----------
        points : list
            Points of the eye mask in the format ``[[x1,y1,],[x2,y2],...]``.
        x_units : str, optional
            X points units. The default is ``"ns"``.
        y_units : str, optional
            Y points units. The default is ``"mV"``.
        enable_limits : bool, optional
            Whether to enable the upper and lower limits. The default is ``False``.
        upper_limit : float, optional
            Upper limit if limits are enabled. The default is ``500``.
        lower_limit : str, optional
            Lower limit if limits are enabled. The default is ``-500``.
        color : tuple, optional
            Mask in (R, G, B) color. The default is ``(0, 255, 0)``.
            Each color value must be an integer in a range from 0 to 255.
        x_offset : str, optional
            Mask time offset with units. The default is ``"0ns"``.
        y_offset : str, optional
            Mask value offset with units. The default is ``"0V"``.
        transparency : float, optional
            Mask transparency. The default is ``0.3``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(value="enable")
    def rectangular_plot(self, enable=...): # -> Literal[True]:
        """Enable or disable the rectangular plot on the chart.

        Parameters
        ----------
        enable : bool
            Whether to enable the rectangular plot. The default is ``True``. If
            ``False``, the rectangular plot is disabled.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def add_all_eye_measurements(self): # -> Literal[True]:
        """Add all eye measurements to the plot.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def clear_all_eye_measurements(self): # -> Literal[True]:
        """Clear all eye measurements from the plot.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(out_file="output_file")
    def export_mask_violation(self, output_file=...): # -> str:
        """Export the eye diagram mask violations to a TAB file.

        Parameters
        ----------
        output_file : str, optional
            Full path to the TAB file. The default is ``None``, in which case
            the violations are exported to a TAB file in the working directory.

        Returns
        -------
        str
            Output file path if a TAB file is created.
        """
        ...
    


class AMIEyeDiagram(CommonReport):
    """Provides for managing eye diagram reports."""
    def __init__(self, app, report_category, setup_name, expressions=...) -> None:
        ...
    
    @property
    def expressions(self): # -> list[Any]:
        """Expressions.

        Returns
        -------
        list
            Expressions.
        """
        ...
    
    @property
    def quantity_type(self):
        """Quantity type used in the AMI analysis plot.

        Returns
        -------
        int
            Quantity type.
        """
        ...
    
    @quantity_type.setter
    def quantity_type(self, value): # -> None:
        ...
    
    @property
    def report_category(self):
        """Report category.

        Returns
        -------
        str
            Report category.
        """
        ...
    
    @report_category.setter
    def report_category(self, value): # -> None:
        ...
    
    @property
    def unit_interval(self):
        """Unit interval value.

        Returns
        -------
        str
            Unit interval.
        """
        ...
    
    @unit_interval.setter
    def unit_interval(self, value): # -> None:
        ...
    
    @property
    def offset(self):
        """Offset value.

        Returns
        -------
        str
            Offset value.
        """
        ...
    
    @offset.setter
    def offset(self, value): # -> None:
        ...
    
    @property
    def auto_delay(self):
        """Auto-delay flag.

        Returns
        -------
        bool
            ``True`` if auto-delay is enabled, ``False`` otherwise.
        """
        ...
    
    @auto_delay.setter
    def auto_delay(self, value): # -> None:
        ...
    
    @property
    def manual_delay(self):
        """Manual delay value when ``auto_delay=False``.

        Returns
        -------
        str
            ``True`` if manual-delay is enabled, ``False`` otherwise.
        """
        ...
    
    @manual_delay.setter
    def manual_delay(self, value): # -> None:
        ...
    
    @property
    def auto_cross_amplitude(self):
        """Auto-cross amplitude flag.

        Returns
        -------
        bool
            ``True`` if auto-cross amplitude is enabled, ``False`` otherwise.
        """
        ...
    
    @auto_cross_amplitude.setter
    def auto_cross_amplitude(self, value): # -> None:
        ...
    
    @property
    def cross_amplitude(self):
        """Cross-amplitude value when ``auto_cross_amplitude=False``.

        Returns
        -------
        str
            Cross-amplitude.
        """
        ...
    
    @cross_amplitude.setter
    def cross_amplitude(self, value): # -> None:
        ...
    
    @property
    def auto_compute_eye_meas(self):
        """Flag for automatically computing eye measurements.

        Returns
        -------
        bool
            ``True`` to compute eye measurements, ``False`` otherwise.
        """
        ...
    
    @auto_compute_eye_meas.setter
    def auto_compute_eye_meas(self, value): # -> None:
        ...
    
    @property
    def eye_measurement_point(self):
        """Eye measurement point.

        Returns
        -------
        str
            Eye measurement point.
        """
        ...
    
    @eye_measurement_point.setter
    def eye_measurement_point(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self, name=...): # -> Literal[True]:
        """Create an eye diagram report.

        Parameters
        ----------
        name : str, optional
            Plot name. The default is ``None``, in which case
            the default name is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(xunits="x_units", yunits="y_units", xoffset="x_offset", yoffset="y_offset")
    def eye_mask(self, points, x_units=..., y_units=..., enable_limits=..., upper_limit=..., lower_limit=..., color=..., x_offset=..., y_offset=..., transparency=...): # -> Literal[True]:
        """Create an eye diagram in the plot.

        Parameters
        ----------
        points : list
            Points of the eye mask in the format ``[[x1,y1,],[x2,y2],...]``.
        x_units : str, optional
            X points units. The default is ``"ns"``.
        y_units : str, optional
            Y points units. The default is ``"mV"``.
        enable_limits : bool, optional
            Whether to enable the upper and lower limits. The default is ``False``.
        upper_limit : float, optional
            Upper limit if limits are enabled. The default is ``500``.
        lower_limit : str, optional
            Lower limit if limits are enabled. The default is ``-500``.
        color : tuple, optional
            Mask in (R, G, B) color. The default is ``(0, 255, 0)``.
            Each color value must be an integer in a range from 0 to 255.
        x_offset : str, optional
            Mask time offset with units. The default is ``"0ns"``.
        y_offset : str, optional
            Mask value offset with units. The default is ``"0V"``.
        transparency : float, optional
            Mask transparency. The default is ``0.3``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(value="enable")
    def rectangular_plot(self, enable=...): # -> Literal[True]:
        """Enable or disable the rectangular plot on the chart.

        Parameters
        ----------
        enable : bool
            Whether to enable the rectangular plot. The default is ``True``. When
            ``False``, the rectangular plot is disabled.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def add_all_eye_measurements(self): # -> Literal[True]:
        """Add all eye measurements to the plot.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def clear_all_eye_measurements(self): # -> Literal[True]:
        """Clear all eye measurements from the plot.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(out_file="output_file")
    def export_mask_violation(self, output_file=...): # -> str:
        """Export the eye diagram mask violations to a TAB file.

        Parameters
        ----------
        output_file : str, optional
            Full path to the TAB file. The default is ``None``, in which case
            the violations are exported to a TAB file in the working directory.

        Returns
        -------
        str
            Output file path if a TAB file is created.
        """
        ...
    


class EyeDiagram(AMIEyeDiagram):
    """Provides for managing eye diagram reports."""
    def __init__(self, app, report_category, setup_name, expressions=...) -> None:
        ...
    
    @property
    def expressions(self): # -> list[Any]:
        """Expressions.

        Returns
        -------
        list
            Expressions.
        """
        ...
    
    @expressions.setter
    def expressions(self, value): # -> None:
        ...
    
    @property
    def time_start(self):
        """Time start value.

        Returns
        -------
        str
            Time start.
        """
        ...
    
    @time_start.setter
    def time_start(self, value): # -> None:
        ...
    
    @property
    def time_stop(self):
        """Time stop value.

        Returns
        -------
        str
            Time stop.
        """
        ...
    
    @time_stop.setter
    def time_stop(self, value): # -> None:
        ...
    
    @property
    def thinning(self):
        """Thinning flag.

        Returns
        -------
        bool
            ``True`` if thinning is enabled, ``False`` otherwise.
        """
        ...
    
    @thinning.setter
    def thinning(self, value): # -> None:
        ...
    
    @property
    def dy_dx_tolerance(self):
        """DY DX tolerance.

        Returns
        -------
        float
            DY DX tolerance.
        """
        ...
    
    @dy_dx_tolerance.setter
    def dy_dx_tolerance(self, value): # -> None:
        ...
    
    @property
    def thinning_points(self):
        """Number of thinning points.

        Returns
        -------
        int
            Number of thinning points.
        """
        ...
    
    @thinning_points.setter
    def thinning_points(self, value): # -> None:
        ...
    


