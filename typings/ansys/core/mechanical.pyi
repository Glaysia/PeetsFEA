"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.application.analysis_3d import FieldAnalysis3D
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.mixins import CreateBoundaryMixin

"""This module contains the ``Mechanical`` class."""
class Mechanical(FieldAnalysis3D, CreateBoundaryMixin):
    """Provides the Mechanical application interface.

    Parameters
    ----------
    project : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open.  The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    design : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    setup : str, optional
        Name of the setup to use as the nominal. The default is
        ``None``, in which case the active setup is used or
        nothing is used.
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case
        the active version or latest installed version is used.
        This parameter is ignored when a script is launched within AEDT.
        Examples of input values are ``251``, ``25.1``, ``2025.1``, ``"2025.1"``.
    non_graphical : bool, optional
        Whether to launch AEDT in the non-graphical mode. The default
        is ``False``, in which case AEDT is launched in the graphical mode.
        This parameter is ignored when a script is launched within AEDT.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine. The default is ``False``. This parameter is ignored when
        a script is launched within AEDT.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to open the AEDT student version. The default is ``False``.
        This parameter is ignored when a script is launched within AEDT.
    machine : str, optional
        Machine name to connect the oDesktop session to. Works only in 2022R2 and
        later. The remote server must be up and running with the command
        `"ansysedt.exe -grpcsrv portnum"`. If the machine is `"localhost"`,
        the server also starts if not present.
    port : int, optional
        Port number on which to start the oDesktop communication on an already existing server.
        This parameter is ignored when creating a new server. It works only in 2022 R2 or
        later. The remote server must be up and running with the command `"ansysedt.exe -grpcsrv portnum"`.
    aedt_process_id : int, optional
        Process ID for the instance of AEDT to point PyAEDT at. The default is
        ``None``. This parameter is only used when ``new_desktop = False``.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.

    Examples
    --------
    Create an instance of Mechanical and connect to an existing
    HFSS design or create a new HFSS design if one does not exist.

    >>> from ansys.aedt.core import Mechanical
    >>> aedtapp = Mechanical()

    Create an instance of Mechanical and link to a project named
    ``"projectname"``. If this project does not exist, create one with
    this name.

    >>> aedtapp = Mechanical(projectname)

    Create an instance of Mechanical and link to a design named
    ``"designname"`` in a project named ``"projectname"``.

    >>> aedtapp = Mechanical(projectname, designame)

    Create an instance of Mechanical and open the specified
    project, which is named ``"myfile.aedt"``.

    >>> aedtapp = Mechanical("myfile.aedt")

    Create a ``Desktop on 2025 R1`` object and then create an
    ``Mechanical`` object and open the specified project, which is
    named ``"myfile.aedt"``.

    >>> aedtapp = Mechanical(version=25.1, project="myfile.aedt")

    """
    @pyaedt_function_handler(designname="design", projectname="project", specified_version="version", setup_name="setup", new_desktop_session="new_desktop")
    def __init__(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @pyaedt_function_handler(designname="design", setupname="setup", sweepname="sweep", paramlist="parameters", object_list="assignment")
    def assign_em_losses(self, design=..., setup=..., sweep=..., map_frequency=..., surface_objects=..., source_project_name=..., parameters=..., assignment=...): # -> BoundaryObject:
        """Map EM losses to a Mechanical design.

        Parameters
        ----------
        design : str, optional
            Name of the design of the source mapping. The default is ``"HFSSDesign1"``.
        setup : str, optional
            Name of the EM setup. The default is ``"Setup1"``.
        sweep : str, optional
            Name of the EM sweep to use for the mapping. The default is ``"LastAdaptive"``.
        map_frequency : str, optional
            Frequency to map. The default is ``None``. The value must be ``None`` for
            Eigenmode analysis.
        surface_objects : list, optional
            List objects in the source that are metals. The default is ``None``.
        source_project_name : str, optional
            Name of the source project. The default is ``None``, in which case
            the source from the same project is used.
        parameters : list, optional
            List of all parameters in the EM to map. The default is ``None``.
        assignment : list, optional
             The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`

        References
        ----------
        >>> oModule.AssignEMLoss
        """
        ...
    
    @pyaedt_function_handler(designname="design", setupname="setup", sweepname="sweep", paramlist="parameters", object_list="assignment")
    def assign_thermal_map(self, assignment, design=..., setup=..., sweep=..., source_project_name=..., parameters=...): # -> BoundaryObject:
        """Map thermal losses to a Mechanical design.

        .. note::
           This method works in 2021 R2 only when coupled with Icepak.

        Parameters
        ----------
        assignment : list

        design : str, optional
            Name of the design with the source mapping. The default is ``"IcepakDesign1"``.
        setup : str, optional
            Name of the EM setup. The default is ``"Setup1"``.
        sweep : str, optional
            Name of the EM sweep to use for the mapping. The default is ``"SteadyState"``.
        source_project_name : str, optional
            Name of the source project. The default is ``None``, in which case the
            source from the same project is used.
        parameters : list, optional
            List of all parameters in the EM to map. The default is ``None``.

        Returns
        -------
        :class:`aedt.modules.boundary.Boundary object`
            Boundary object.

        References
        ----------
        >>> oModule.AssignThermalCondition
        """
        ...
    
    @pyaedt_function_handler(objects_list="assignment", boundary_name="name")
    def assign_uniform_convection(self, assignment, convection_value=..., convection_unit=..., temperature=..., name=...): # -> BoundaryObject:
        """Assign a uniform convection to the face list.

        Parameters
        ----------
        assignment : list
            List of objects, faces, or both.
        convection_value : float, optional
            Convection value. The default is ``"1.0"``.
        convection_unit : str, optional
            Units for the convection value. The default is ``"w_per_m2kel"``.
        temperature : str, optional
            Temperature. The default is ``"AmbientTemp"``.
        name : str, optional
            Name of the boundary. The default is ``""``, in which case the default
            name is used.

        Returns
        -------
        :class:`aedt.modules.boundary.Boundary object`
            Boundary object.

        References
        ----------
        >>> oModule.AssignConvection
        """
        ...
    
    @pyaedt_function_handler(objects_list="assignment", boundary_name="name")
    def assign_uniform_temperature(self, assignment, temperature=..., name=...): # -> BoundaryObject:
        """Assign a uniform temperature boundary.

        .. note::
            This method works only in a Mechanical Thermal analysis.

        Parameters
        ----------
        assignment : list
            List of objects, faces, or both.
        temperature : str, optional.
            Type of the temperature. The default is ``"AmbientTemp"``.
        name : str, optional
            Name of the boundary. The default is ``""``.

        Returns
        -------
        :class:`aedt.modules.boundary.Boundary object`
            Boundary object.

        References
        ----------
        >>> oModule.AssignTemperature
        """
        ...
    
    @pyaedt_function_handler(objects_list="assignment", boundary_name="name")
    def assign_frictionless_support(self, assignment, name=...): # -> BoundaryObject:
        """Assign a Mechanical frictionless support.

        .. note::
            This method works only in a Mechanical Structural analysis.

        Parameters
        ----------
        assignment : list
            List of faces to apply to the frictionless support.
        name : str, optional
            Name of the boundary. The default is ``""``, in which case the
            default name is used.

        Returns
        -------
        :class:`aedt.modules.boundary.Boundary object`
            Boundary object.

        References
        ----------
        >>> oModule.AssignFrictionlessSupport
        """
        ...
    
    @pyaedt_function_handler(objects_list="assignment", boundary_name="name")
    def assign_fixed_support(self, assignment, name=...): # -> BoundaryObject:
        """Assign a Mechanical fixed support.

        .. note::
           This method works only in a Mechanical Structural analysis.

        Parameters
        ----------
        assignment : list
            List of faces to apply to the fixed support.
        name : str, optional
            Name of the boundary. The default is ``""``, in which case
            the default name is used.

        Returns
        -------
        aedt.modules.boundary.Boundary
            Boundary object.

        References
        ----------
        >>> oModule.AssignFixedSupport
        """
        ...
    
    @property
    def existing_analysis_sweeps(self): # -> list[Any]:
        """Existing analysis sweeps in the design.

        Returns
        -------
        list
            List of existing analysis sweeps.

        References
        ----------
        >>> oModule.GetSetups
        """
        ...
    
    @pyaedt_function_handler(objects_list="assignment", boundary_name="name")
    def assign_heat_flux(self, assignment, heat_flux_type, value, name=...): # -> BoundaryObject:
        """Assign heat flux boundary condition to an object or face list.

        Parameters
        ----------
        assignment : list
            List of objects, faces, or both.
        heat_flux_type : str
            Type of the heat flux. Options are ``"Total Power"`` or ``"Surface Flux"``.
        value : str
            Value of heat flux with units.
        name : str, optional
            Name of the boundary. The default is ``""``, in which case the default
            name is used.

        Returns
        -------
        :class:`aedt.modules.boundary.Boundary object`
            Boundary object.

        References
        ----------
        >>> oModule.AssignHeatFlux
        """
        ...
    
    @pyaedt_function_handler(objects_list="assignment", boundary_name="name")
    def assign_heat_generation(self, assignment, value, name=...): # -> BoundaryObject:
        """Assign a heat generation boundary condition to an object list.

        Parameters
        ----------
        assignment : list
            List of objects.
        value : str
            Value of heat generation with units.
        name : str, optional
            Name of the boundary. The default is ``""``, in which case the default
            name is used.

        Returns
        -------
        :class:`aedt.modules.boundary.Boundary object`
            Boundary object.

        References
        ----------
        >>> oModule.AssignHeatGeneration
        """
        ...
    
    @pyaedt_function_handler()
    def assign_2way_coupling(self, setup=..., number_of_iterations=...): # -> bool:
        """Assign two-way coupling to a setup.

        Parameters
        ----------
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the active setup is used.
        number_of_iterations : int, optional
            Number of iterations. The default is ``2``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AddTwoWayCoupling

        Examples
        --------
        >>> from ansys.aedt.core import Mechanical
        >>> mech = Mechanical()
        >>> setup = mech.create_setup()
        >>> mech.assign_2way_coupling(setup.name, 1)
        >>> mech.release_desktop()

        """
        ...
    
    @pyaedt_function_handler(setupname="name", setuptype="setup_type")
    def create_setup(self, name=..., setup_type=..., **kwargs): # -> SetupHFSSAuto | SetupSBR | SetupMaxwell | SetupQ3D | SetupIcepak | SetupHFSS:
        """Create an analysis setup for Mechanical.

        Optional arguments are passed along with ``setup_type`` and ``name``. Keyword
        names correspond to the ``setup_type`` corresponding to the native AEDT API.  The list of
        keywords here is not exhaustive.

        Parameters
        ----------
        name : str, optional
            Name of the setup. The default is ``"Setup1"``.
        setup_type : int, str, optional
            Type of the setup. Options are  ``"IcepakSteadyState"`` and
            ``"IcepakTransient"``. The default is ``"IcepakSteadyState"``.
        **kwargs : dict, optional
            Available keys depend on the setup chosen.
            For more information, see :doc:`../SetupTemplatesMechanical`.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.SetupHFSS`
            Solver Setup object.

        References
        ----------
        >>> oModule.InsertSetup

        Examples
        --------

        >>> from ansys.aedt.core import Mechanical
        >>> app = Mechanical()
        >>> app.create_setup(name="Setup1", MaxModes=6)

        """
        ...
    


