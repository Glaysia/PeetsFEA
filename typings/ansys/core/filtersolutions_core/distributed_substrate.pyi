"""
This type stub file was generated by pyright.
"""

from typing import Union
from ansys.aedt.core.filtersolutions_core.export_to_aedt import SubstrateEr, SubstrateResistivity, SubstrateType

class DistributedSubstrate:
    """Defines substrate parameters of distributed filters.

    This class allows you to define and modify the substrate parameters of distributed filters.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def substrate_type(self) -> SubstrateType:
        """Substrate type of the filter.

        The ``SubstrateType`` enum provides a list of all substrate types.

        Returns
        -------
        :enum:`SubstrateType`
        """
        ...
    
    @substrate_type.setter
    def substrate_type(self, substrate_type: SubstrateType): # -> None:
        ...
    
    @property
    def substrate_er(self) -> Union[SubstrateType, str]:
        """Substrate's relative permittivity ``Er``.

        The value can be either a string or an instance of the ``SubstrateEr`` enum.
        The default is ``9.8`` for ``SubstrateEr.ALUMINA``.

        Returns
        -------
        Union[SubstrateEr, str]

        """
        ...
    
    @substrate_er.setter
    def substrate_er(self, substrate_input): # -> None:
        ...
    
    @property
    def substrate_resistivity(self) -> Union[SubstrateResistivity, str]:
        """Substrate's resistivity.

        The value can be either a string or an instance of the ``SubstrateResistivity`` enum.
        The default is ``1.43`` for ``SubstrateResistivity.GOLD``.

        Returns
        -------
        Union[SubstrateResistivity, str]
        """
        ...
    
    @substrate_resistivity.setter
    def substrate_resistivity(self, substrate_input): # -> None:
        ...
    
    @property
    def substrate_loss_tangent(self) -> Union[SubstrateEr, str]:
        """Substrate's loss tangent.

        The value can be either a string or an instance of the ``SubstrateEr`` enum.
        The default is ``0.0005`` for ``SubstrateEr.ALUMINA``.

        Returns
        -------
        Union[SubstrateEr, str]
        """
        ...
    
    @substrate_loss_tangent.setter
    def substrate_loss_tangent(self, substrate_input): # -> None:
        ...
    
    @property
    def substrate_conductor_thickness(self) -> str:
        """Substrate's conductor thickness.

        The default is ``2.54 um``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_conductor_thickness.setter
    def substrate_conductor_thickness(self, substrate_conductor_thickness_string): # -> None:
        ...
    
    @property
    def substrate_dielectric_height(self) -> str:
        """Substrate's dielectric height.

        The default is ``1.27 mm``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_dielectric_height.setter
    def substrate_dielectric_height(self, substrate_dielectric_height_string): # -> None:
        ...
    
    @property
    def substrate_unbalanced_lower_dielectric_height(self) -> str:
        """Substrate's lower dielectric height for unbalanced stripline substrate type.

        The default is ``1.27 mm``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_unbalanced_lower_dielectric_height.setter
    def substrate_unbalanced_lower_dielectric_height(self, substrate_unbalanced_lower_dielectric_height_string): # -> None:
        ...
    
    @property
    def substrate_suspend_dielectric_height(self) -> str:
        """Substrate's suspend dielectric height above ground plane for suspend and inverted substrate types.

        The default is ``1.27 mm``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_suspend_dielectric_height.setter
    def substrate_suspend_dielectric_height(self, substrate_suspend_dielectric_height_string): # -> None:
        ...
    
    @property
    def substrate_cover_height(self) -> str:
        """Substrate's cover height for microstrip, suspend, and inverted substrate types.
        The default is ``6.35 mm``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_cover_height.setter
    def substrate_cover_height(self, substrate_cover_height_string): # -> None:
        ...
    
    @property
    def substrate_unbalanced_stripline_enabled(self) -> bool:
        """Flag indicating if the substrate unbalanced stripline is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @substrate_unbalanced_stripline_enabled.setter
    def substrate_unbalanced_stripline_enabled(self, substrate_unbalanced_stripline_enabled: bool): # -> None:
        ...
    
    @property
    def substrate_cover_height_enabled(self) -> bool:
        """Flag indicating if the substrate cover height is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @substrate_cover_height_enabled.setter
    def substrate_cover_height_enabled(self, substrate_cover_height_enabled: bool): # -> None:
        ...
    


