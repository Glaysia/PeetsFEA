"""
This type stub file was generated by pyright.
"""

class DistributedRadial:
    """Defines radial parameters of distributed filters.

    This class allows you to define and modify the radial and delta stub parameters of distributed filters.
    These parameter changes are applicable exclusively to low-pass filters that include stub resonators.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def radial_stubs(self) -> bool:
        """Flag indicating if the distributed radial stubs is enabled.
        If true, radial stubs are used for open lines.

        Returns
        -------
        bool
        """
        ...
    
    @radial_stubs.setter
    def radial_stubs(self, radial_stubs: bool): # -> None:
        ...
    
    @property
    def fixed_angle_enabled(self) -> bool:
        """Flag indicating if the fixed angle for all radial or delta stubs is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @fixed_angle_enabled.setter
    def fixed_angle_enabled(self, fixed_angle_enabled: bool): # -> None:
        ...
    
    @property
    def fixed_angle(self) -> str:
        """Fixed angle in degrees for all radial or delta stubs. The default is ``90``.

        Returns
        -------
        str
        """
        ...
    
    @fixed_angle.setter
    def fixed_angle(self, fixed_angle_string: str): # -> None:
        ...
    
    @property
    def delta_stubs(self) -> bool:
        """Flag indicating if the distributed delta stubs is enabled.
        If true, delta stubs are used for open lines.

        Returns
        -------
        bool
        """
        ...
    
    @delta_stubs.setter
    def delta_stubs(self, delta_stubs: bool): # -> None:
        ...
    
    @property
    def split_wide_angle_enabled(self) -> bool:
        """Flag indicating if the splitting of the wide radial or delta stubs is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @split_wide_angle_enabled.setter
    def split_wide_angle_enabled(self, split_wide_angle_enabled: bool): # -> None:
        ...
    
    @property
    def split_wide_angle(self) -> str:
        """Angle in degrees that triggers the splitting of the wide radial or delta stubs.

        This parameter controls the splitting of wide stubs into upper and lower sections,
        which helps reduce the overall stub thickness.
        Stubs wider than the specified angle will be split.
        A default value of ``0`` ensures that all stubs are split.

        Returns
        -------
        str
        """
        ...
    
    @split_wide_angle.setter
    def split_wide_angle(self, split_wide_angle_string: str): # -> None:
        ...
    
    @property
    def offset_from_feedline_enabled(self) -> bool:
        """Flag indicating if the distance from the radial or delta stub base to the feedline is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @offset_from_feedline_enabled.setter
    def offset_from_feedline_enabled(self, offset_from_feedline_enabled: bool): # -> None:
        ...
    
    @property
    def offset_from_feedline(self) -> str:
        """Distance from radial or delta stub base to feedline. The default is ``200 um``.

        Returns
        -------
        str
        """
        ...
    
    @offset_from_feedline.setter
    def offset_from_feedline(self, offset_from_feedline_string: str): # -> None:
        ...
    
    @property
    def alternate_radial_delta_orientation(self) -> bool:
        """Flag indicating if the alternate vertical orientation of radial or delta stubs is enabled.
        The orintation alternates between up and down to minimize interference between adjacent stubs.
        Returns
        -------
        bool
        """
        ...
    
    @alternate_radial_delta_orientation.setter
    def alternate_radial_delta_orientation(self, alternate_radial_delta_orientation: bool): # -> None:
        ...
    
    @property
    def adjust_width_max(self) -> bool:
        """Flag indicating if the adjustment of radial or delta width to the upper angle limit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @adjust_width_max.setter
    def adjust_width_max(self, adjust_width_max: bool): # -> None:
        ...
    
    @property
    def max_radial_delta_angle(self) -> str:
        """Maximum angle of radial or delta stubs.

        Returns
        -------
        str
        """
        ...
    
    @max_radial_delta_angle.setter
    def max_radial_delta_angle(self, max_radial_delta_angle_string: str): # -> None:
        ...
    
    @property
    def adjust_length_max(self) -> bool:
        """Flag indicating if the adjustment of radial or delta length to the upper angle limit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @adjust_length_max.setter
    def adjust_length_max(self, adjust_length_max: bool): # -> None:
        ...
    
    @property
    def min_radial_delta_angle(self) -> str:
        """Minimum angle of radial or delta stubs.

        Returns
        -------
        str
        """
        ...
    
    @min_radial_delta_angle.setter
    def min_radial_delta_angle(self, min_radial_delta_angle_string: str): # -> None:
        ...
    
    @property
    def apply_limits_radial_delta(self) -> bool:
        """Flag indicating if the radial or delta minimum and maximum angle limits are applied.

        Returns
        -------
        bool
        """
        ...
    
    @apply_limits_radial_delta.setter
    def apply_limits_radial_delta(self, apply_limits_radial_delta: bool): # -> None:
        ...
    


