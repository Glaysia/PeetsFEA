"""
This type stub file was generated by pyright.
"""

class LumpedTopology:
    """Defines topology parameters of lumped filters.

    This class allows you to define and modify the topology parameters of lumped filters.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def source_resistance(self) -> str:
        """Generator resistor. The default is ``50``.

        Returns
        -------
        str
        """
        ...
    
    @source_resistance.setter
    def source_resistance(self, source_resistance_string): # -> None:
        ...
    
    @property
    def load_resistance(self) -> str:
        """Load resistor. The default is ``50``.

        Returns
        -------
        str
        """
        ...
    
    @load_resistance.setter
    def load_resistance(self, load_resistance_string): # -> None:
        ...
    
    @property
    def current_source(self) -> bool:
        """Flag indicating if the current source in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @current_source.setter
    def current_source(self, current_source: bool): # -> None:
        ...
    
    @property
    def first_shunt(self) -> bool:
        """Flag indicating if shunt elements are first in the synthesized circuit.

        If ``False``, series elements are first.

        Returns
        -------
        bool
        """
        ...
    
    @first_shunt.setter
    def first_shunt(self, first_shunt: bool): # -> None:
        ...
    
    @property
    def bridge_t(self) -> bool:
        """Flag indicating if the bridgeT topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @bridge_t.setter
    def bridge_t(self, bridge_t: bool): # -> None:
        ...
    
    @property
    def bridge_t_low(self) -> bool:
        """Flag indicating if the bridgeT topology for the lower frequency band in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @bridge_t_low.setter
    def bridge_t_low(self, bridge_t_low: bool): # -> None:
        ...
    
    @property
    def bridge_t_high(self) -> bool:
        """Flag indicating if the bridgeT topology for the higher frequency band in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @bridge_t_high.setter
    def bridge_t_high(self, bridge_t_high: bool): # -> None:
        ...
    
    @property
    def equal_inductors(self) -> bool:
        """Flag indicating if the equal inductors topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @equal_inductors.setter
    def equal_inductors(self, equal_inductors: bool): # -> None:
        ...
    
    @property
    def equal_capacitors(self) -> bool:
        """Flag indicating if the equal capacitors topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @equal_capacitors.setter
    def equal_capacitors(self, equal_capacitors: bool): # -> None:
        ...
    
    @property
    def equal_legs(self) -> bool:
        """Flag indicating if the equal pairs shunt or series legs topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @equal_legs.setter
    def equal_legs(self, equal_legs: bool): # -> None:
        ...
    
    @property
    def high_low_pass(self) -> bool:
        """Flag indicating if the high and low pass topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @high_low_pass.setter
    def high_low_pass(self, high_low_pass: bool): # -> None:
        ...
    
    @property
    def high_low_pass_min_ind(self) -> bool:
        """Flag indicating if the high and low pass topology with minimum inductors
        in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @high_low_pass_min_ind.setter
    def high_low_pass_min_ind(self, high_low_pass_min_ind: bool): # -> None:
        ...
    
    @property
    def zig_zag(self) -> bool:
        """Flag indicating if the zig-zag topology with minimum inductors in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @zig_zag.setter
    def zig_zag(self, zig_zag: bool): # -> None:
        ...
    
    @property
    def min_ind(self) -> bool:
        """Flag indicating if the minimum inductors topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @min_ind.setter
    def min_ind(self, min_ind: bool): # -> None:
        ...
    
    @property
    def min_cap(self) -> bool:
        """Flag indicating if the minimum capacitors topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @min_cap.setter
    def min_cap(self, min_cap: bool): # -> None:
        ...
    
    @property
    def set_source_res(self) -> bool:
        """Flag indicating if the matched source resistor for zig-zag topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @set_source_res.setter
    def set_source_res(self, set_source_res: bool): # -> None:
        ...
    
    @property
    def trap_topology(self) -> bool:
        """Flag indicating if the trap topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @trap_topology.setter
    def trap_topology(self, trap_topology: bool): # -> None:
        ...
    
    @property
    def node_cap_ground(self) -> bool:
        """Flag indicating if the parasitic capacitors to ground topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @node_cap_ground.setter
    def node_cap_ground(self, node_cap_ground: bool): # -> None:
        ...
    
    @property
    def match_impedance(self) -> bool:
        """Flag indicating if the automatic matched impedance topology in the synthesized circuit is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @match_impedance.setter
    def match_impedance(self, match_impedance: bool): # -> None:
        ...
    
    @property
    def complex_termination(self) -> bool:
        """Flag indicating if the lumped filter complex termination is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @complex_termination.setter
    def complex_termination(self, complex_termination: bool): # -> None:
        ...
    
    @property
    def complex_element_tune_enabled(self) -> bool:
        """Flag indicating if the element tune option is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @complex_element_tune_enabled.setter
    def complex_element_tune_enabled(self, complex_element_tune_enabled: bool): # -> None:
        ...
    
    def netlist(self):
        """Execute real filter synthesis"""
        ...
    


