"""
This type stub file was generated by pyright.
"""

class DistributedParasitics:
    """Defines parasitic parameters of distributed filters.

    This class allows you to define and modify the layout parasitics parameters of distributed filters.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def capacitor_q(self) -> str:
        """Q factor value of non-ideal capacitors in the synthesized circuit.
        The default is ``infinite``.

        Returns
        -------
        str
        """
        ...
    
    @capacitor_q.setter
    def capacitor_q(self, capacitor_q_string): # -> None:
        ...
    
    @property
    def capacitor_rs(self) -> str:
        """Series resistor value of non-ideal capacitors in the synthesized circuit.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @capacitor_rs.setter
    def capacitor_rs(self, capacitor_rs_string): # -> None:
        ...
    
    @property
    def capacitor_rp(self) -> str:
        """Shunt resistor value of non-ideal capacitors in the synthesized circuit.
        The default is ``infinite``.

        Returns
        -------
        str
        """
        ...
    
    @capacitor_rp.setter
    def capacitor_rp(self, capacitor_rp_string): # -> None:
        ...
    
    @property
    def capacitor_ls(self) -> str:
        """Series inductance value of non-ideal capacitors in the synthesized circuit.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @capacitor_ls.setter
    def capacitor_ls(self, capacitor_ls_string): # -> None:
        ...
    
    @property
    def inductor_q(self) -> str:
        """Q factor value of non-ideal inductors in the synthesized circuit.
        The default is ``infinite``.

        Returns
        -------
        str
        """
        ...
    
    @inductor_q.setter
    def inductor_q(self, inductor_q_string): # -> None:
        ...
    
    @property
    def inductor_rs(self) -> str:
        """Series resistor value of non-ideal inductors in the synthesized circuit.
        The default is` ``0``.

        Returns
        -------
        str
        """
        ...
    
    @inductor_rs.setter
    def inductor_rs(self, inductor_rs_string): # -> None:
        ...
    
    @property
    def inductor_rp(self) -> str:
        """Shunt resistor value of non-ideal inductors in the synthesized circuit.
        The default is ``infinite``.

        Returns
        -------
        str
        """
        ...
    
    @inductor_rp.setter
    def inductor_rp(self, inductor_rp_string): # -> None:
        ...
    
    @property
    def inductor_cp(self) -> str:
        """Shunt capacitor value of non-ideal inductors in the synthesized circuit.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @inductor_cp.setter
    def inductor_cp(self, inductor_cp_string): # -> None:
        ...
    
    @property
    def line_odd_resistance(self) -> str:
        """Odd-mode conductor resistance value of the line per unit length.
        This parameter is defined for standard ``RLGC`` transmission line model substrate types.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @line_odd_resistance.setter
    def line_odd_resistance(self, odd_resistance_string): # -> None:
        ...
    
    @property
    def line_even_resistance(self) -> str:
        """Even-mode conductor resistance value of the line per unit length.
        This parameter is defined for standard ``RLGC`` transmission line model substrate types.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @line_even_resistance.setter
    def line_even_resistance(self, even_resistance_string): # -> None:
        ...
    
    @property
    def line_odd_conductance(self) -> str:
        """Odd-mode dielectric conductance of the line per unit length.
        This parameter is defined for standard ``RLGC`` transmission line model substrate types.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @line_odd_conductance.setter
    def line_odd_conductance(self, odd_conductance_string): # -> None:
        ...
    
    @property
    def line_even_conductance(self) -> str:
        """Even-mode dielectric conductance of the line per unit length.
        This parameter is defined for standard ``RLGC`` transmission line model substrate types.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @line_even_conductance.setter
    def line_even_conductance(self, even_conductance_string): # -> None:
        ...
    
    @property
    def line_min_segment_lengths(self) -> str:
        """Default value for the minimum segment lengths between stubs.
        This parameter is defined for standard ``RLGC`` transmission line model substrate types.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @line_min_segment_lengths.setter
    def line_min_segment_lengths(self, line_min_segment_length_string): # -> None:
        ...
    


