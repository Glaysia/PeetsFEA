"""
This type stub file was generated by pyright.
"""

from enum import Enum

class OptimizationGoalParameter(Enum):
    """Enumeration of optimization goals parameters table.

    **Attributes:**

    - LOWER_FREQUENCY: Represents the lower frequency parameter, positioned
    as the first value in the optimization goal table.
    - UPPER_FREQUENCY: Represents the upper frequency parameter, positioned
    as the second value in the optimization goal table.
    - GOAL_VALUE: Represents the goal value parameter, positioned
    as the third value in the optimization goal table.
    - CONDITION: Represents the condition parameter, positioned
    as the fourth value in the optimization goal table.
    - PARAMETER_NAME: Represents the name of the parameter, positioned
    as the fifth value in the optimization goal table.
    - WEIGHT: Represents the weight parameter, positioned
    as the sixth value in the optimization goal table.
    - ENABLED: Represents the status of using the goal parameters, positioned
    as the seventh value in the optimization goal table.
    """
    LOWER_FREQUENCY = ...
    UPPER_FREQUENCY = ...
    GOAL_VALUE = ...
    CONDITION = ...
    PARAMETER_NAME = ...
    WEIGHT = ...
    ENABLED = ...


class OptimizationGoalsTable:
    """Provides management of optimization goals within a table structure.

    This class offers functionality to add, update, or delete entries in the optimization goals table,
    facilitating the manipulation of optimization parameters for simulation tasks.
    Each entry in the table can specify a range of parameters including lower and upper frequency limits,
    a target value for the optimization goal, a condition that defines how the goal is evaluated,
    the name of the parameter to optimize, the weight of the goal in the overall optimization process,
    and whether the goal is active or not.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def row_count(self) -> int:
        """Number of goals in the optimization goals table.

        The default is `0`.

        Returns
        -------
        int
        """
        ...
    
    def row(self, row_index) -> list:
        """Get the values for one row of the optimization goals table.

        The values are returned as a list: [value1, value2, ..., value7].

        Parameters
        ----------
        row_index: int
            Index of the row. Valid values range from ``0`` to ``49``, inclusive.

        Returns
        -------
        list
            A list of strings representing the row parameters.
        """
        ...
    
    def update_row(self, row_index, lower_frequency=..., upper_frequency=..., goal_value=..., condition=..., parameter_name=..., weight=..., enabled=...): # -> None:
        """Update the row parameters for an existing row in the optimization goals table.

        Parameters
        ----------
        row_index: int
            Index of the row. Valid values range from ``0`` to ``49``, inclusive.
        lower_frequency: str, optional
            New lower frequency value to set.
            If no value is specified, the value remains unchanged.
        upper_frequency: str, optional
            New upper frequency value to set.
            If no value is specified, the value remains unchanged.
        goal_value: str, optional
            New goal value to set.
            If no value is specified, the value remains unchanged.
        condition: str, optional
            New condition value to set.
            If no value is specified, the value remains unchanged.
        parameter_name: str, optional
            New parameter name value to set.
            If no value is specified, the value remains unchanged.
        weight: str, optional
            New weight value to set.
            If no value is specified, the value remains unchanged.
        enabled: str, optional
            New enabled value to set.
            If no value is specified, the value remains unchanged.
        """
        ...
    
    def append_row(self, lower_frequency=..., upper_frequency=..., goal_value=..., condition=..., parameter_name=..., weight=..., enabled=...): # -> None:
        """Append a new row of parameters to the optimization goals table,
        ensuring the total does not exceed 50 entries.

        Parameters
        ----------
        lower_frequency: str
            Lower frequency value to set.
        upper_frequency: str
            Upper frequency value to set.
        goal_value: str
            Goal value to set.
        condition: str
            Condition value to set.
        parameter_name: str
            Parameter name value to set.
        weight: str
            Weight value to set.
        enabled: str
            Enabled value to set.
        """
        ...
    
    def insert_row(self, row_index, lower_frequency=..., upper_frequency=..., goal_value=..., condition=..., parameter_name=..., weight=..., enabled=...): # -> None:
        """Insert a new row of parameters to the optimization goals table,
        ensuring the total does not exceed 50 entries.

        Parameters
        ----------
        row_index: int
            Index of the row. Valid values range from ``0`` to ``49``, inclusive.
        lower_frequency: str
            Lower frequency value.
        upper_frequency: str
            Upper frequency value.
        goal_value: str
            Goal value.
        condition: str
            Condition value.
        parameter_name: str
            Parameter name.
        weight: str
            Weight value.
        enabled: str
            Enabled value.
        """
        ...
    
    def remove_row(self, row_index): # -> None:
        """Remove a row from the optimization goals table.

        Parameters
        ----------
        row_index: int
            Index of the row. Valid values range from ``0`` to ``49``, inclusive.
        """
        ...
    
    def restore_design_goals(self): # -> None:
        """Configure the optimization goal table according to the recommended goals for the current design."""
        ...
    
    def save_goals(self, file_path) -> str:
        """Save the optimization goals from a design's optimization goals table to a config file.

        Parameters
        ----------
        file_path: The path to the config file where the goals will be saved.
        """
        ...
    
    def load_goals(self, file_path) -> str:
        """Load optimization goals from a config file into this optimization goals table.

        Parameters
        ----------
        file_path: str
            The path to the config file from which the goals will be loaded.
        """
        ...
    
    def adjust_goal_frequency(self, adjust_goal_frequency_string): # -> None:
        """Adjust all goal frequencies in the table by the adjusting
        frequency value which can be positive or negative."""
        ...
    
    def clear_goal_entries(self): # -> None:
        """Clear the goal entries from optimization goals table."""
        ...
    


