"""
This type stub file was generated by pyright.
"""

from enum import Enum

class TopologyType(Enum):
    """Provides an enum of distributed topologies.

    **Attributes:**

    - LUMPED_TRANSLATION: Represents lumped translation topology.
    - INDUCTOR_TRANSLATION: Represents inductor translation topology.
    - STEPPED_IMPEDANCE: Represents stepped impedance topology.
    - COUPLED_SEGMENTS: Represents coupled segments topology.
    - SPACED_STUBS: Represents spaced stubs topology.
    - SHUNT_STUB_RESONATORS: Represents shunt stub resonators topology.
    - OPEN_STUB_RESONATORS: Represents open stub resonators topology.
    - PARALLEL_EDGE_COUPLED: Represents parallel edge coupled topology.
    - HAIRPIN: Represents hairpin topology.
    - MINIATURE_HAIRPIN: Represents miniature hairpin topology.
    - RING_RESONATORS: Represents ring resonators topology.
    - INTERDIGITAL: Represents interdigital topology.
    - COMBLINE: Represents combline topology.
    - DUAL_RESONATORS: Represents dual resonators topology.
    - SPACED_DUAL_RESONATORS: Represents spaced dual resonators topology.
    - NOTCH_RESONATORs: Represents notch resonators topology.
    """
    LUMPED_TRANSLATION = ...
    INDUCTOR_TRANSLATION = ...
    STEPPED_IMPEDANCE = ...
    COUPLED_SEGMENTS = ...
    SPACED_STUBS = ...
    SHUNT_STUB_RESONATORS = ...
    OPEN_STUB_RESONATORS = ...
    PARALLEL_EDGE_COUPLED = ...
    HAIRPIN = ...
    MINIATURE_HAIRPIN = ...
    RING_RESONATOR = ...
    INTERDIGITAL = ...
    COMBLINE = ...
    DUAL_RESONATORS = ...
    SPACED_DUAL_RESONATORS = ...
    NOTCH_RESONATORS = ...


class TapPosition(Enum):
    """Provides an enum of position of tap points of ``Miniature Hairpin`` and ``Ring Resonator`` topologies.

    **Attributes:**

    - AUTO: Represents an automatic tap position.
    - BACK: Represents a tap position at the back of the ending resonator.
    - SIDES: Represents tap positions at the sides of the ending resonator.
    - CORNER: Represents tap positions at the corners of the ending resonator.
    """
    AUTO = ...
    BACK = ...
    SIDES = ...
    CORNER = ...


class DistributedTopology:
    """Defines topology parameters of distributed filters.

    This class allows you to define and modify the topology parameters of distributed filters.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def topology_type(self) -> TopologyType:
        """Topology type of the distributed filter. The default is ``LUMPED_TRANSLATION``.
        The ``TopologyType`` enum provides a list of all classes.

        Returns
        -------
        :enum:`TopologyType`
        """
        ...
    
    @topology_type.setter
    def topology_type(self, topology_type: TopologyType): # -> None:
        ...
    
    @property
    def source_resistance(self) -> str:
        """Source resistance. The default is ``50``.

        Returns
        -------
        str
        """
        ...
    
    @source_resistance.setter
    def source_resistance(self, source_resistance_string): # -> None:
        ...
    
    @property
    def load_resistance(self) -> str:
        """Load resistance. The default is ``50``.

        Returns
        -------
        str
        """
        ...
    
    @load_resistance.setter
    def load_resistance(self, load_resistance_string): # -> None:
        ...
    
    @property
    def first_shunt(self) -> bool:
        """Flag indicating if shunt elements are first in the synthesized circuit.
        This parameter is applicable for the ``Lumped Translation``, ``Inductor Translation``,
        and ``Coupled Segments`` topologies. If ``False``, series elements are first.

        Returns
        -------
        bool
        """
        ...
    
    @first_shunt.setter
    def first_shunt(self, first_shunt: bool): # -> None:
        ...
    
    @property
    def first_fat(self) -> bool:
        """Flag indicating if fat segments are first in the synthesized circuit.
        This parameter is applicable for the ``Stepped Impedance`` topology.
        If ``False``, thin segments are first.

        Returns
        -------
        bool
        """
        ...
    
    @first_fat.setter
    def first_fat(self, first_fat: bool): # -> None:
        ...
    
    @property
    def use_series_caps(self) -> bool:
        """Flag indicating if lumped capacitors and inductor segments are implemented as series LC segments.
        Series capacitors enable capacitive coupling between resonators, which can be achieved through either
        series capacitors or coupled transmission lines.
        This parameter is applicable for the ``Lumped Translation``and ``Inductor Translation`` topologies
        of band pass and high pass filters, and ``Dual Resonator`` topology of band pass filters.

        Returns
        -------
        bool
        """
        ...
    
    @use_series_caps.setter
    def use_series_caps(self, use_series_caps: bool): # -> None:
        ...
    
    @property
    def combine_stubs(self) -> bool:
        """Flag indicating if resonators are created with only one stub.
        This parameter is applicable for the ``Lumped Translation``and ``Inductor Translation`` topologies
        of band pass and band stop filters, and ``Dual Resonator`` and ``Spaced Dual Resonator`` topologies
        of band pass filters.

        Returns
        -------
        bool
        """
        ...
    
    @combine_stubs.setter
    def combine_stubs(self, combine_stubs: bool): # -> None:
        ...
    
    @property
    def use_coupled_lines(self) -> bool:
        """Flag indicating if coupled segments are used between stubs to enable capacitive coupling between resonators,
        which can be achieved through either series capacitors or coupled transmission lines.
        This parameter is applicable for the ``Lumped Translation``, ``Inductor Translation``, and ``Dual Resonator``
        topologies of band pass filters.

        Returns
        -------
        bool
        """
        ...
    
    @use_coupled_lines.setter
    def use_coupled_lines(self, use_coupled_lines: bool): # -> None:
        ...
    
    @property
    def equal_width_approx(self) -> bool:
        """Flag indicating if all stubs are set to equal width.
        This parameter is applicable for the ``Interdigital``, ``Combline`` topologies of
        band pass filters, and ``Notch Resonators`` topology of band stop filters.

        Returns
        -------
        bool
        """
        ...
    
    @equal_width_approx.setter
    def equal_width_approx(self, equal_width_approx: bool): # -> None:
        ...
    
    @property
    def open_stub_ground(self) -> bool:
        """Flag indicating if quarter length open stubs are implemented to simulate ground.
        This parameter is applicable for the ``Notch Resonators`` topology of band stop filters.

        Returns
        -------
        bool
        """
        ...
    
    @open_stub_ground.setter
    def open_stub_ground(self, open_stub_ground: bool): # -> None:
        ...
    
    @property
    def left_ground_side(self) -> bool:
        """Flag indicating if grounded pins are placed on left side.
        This parameter is applicable for the ``Notch Resonators`` topology of band stop filters.
        If ``False``, right side is selected.

        Returns
        -------
        bool
        """
        ...
    
    @left_ground_side.setter
    def left_ground_side(self, left_ground_side: bool): # -> None:
        ...
    
    @property
    def equal_stub_widths(self) -> bool:
        """Flag indicating if all stubs widths are set with equal.
        This parameter is applicable for the ``Shunt Stub Resonators`` and
        ``Open Stub Resonators`` topologies of band pass filters.

        Returns
        -------
        bool
        """
        ...
    
    @equal_stub_widths.setter
    def equal_stub_widths(self, equal_stub_widths: bool): # -> None:
        ...
    
    @property
    def center_z0_impedance_enabled(self) -> bool:
        """Flag indicating if set center impedance is enabled.
        If ``True`` the center impedance value is applied to the internal resonators and couplers.

        Returns
        -------
        bool
        """
        ...
    
    @center_z0_impedance_enabled.setter
    def center_z0_impedance_enabled(self, center_z0_impedance_enabled: bool): # -> None:
        ...
    
    @property
    def center_z0_impedance(self) -> str:
        """Resonator internal impedance. The default is ``75``.

        This parameter is applicable for the ``Interdigital``, ``Combline``, ``Parallel Edge Coupled``,
        ``Shunt Stub Resonators``, and  ``Open Stub Resonators`` topologies of band pass filters.

        This property is not applicable for ``Shunt Stub Resonators``, and  ``Open Stub Resonators`` topologies
        when the ``equal_stub_widths`` option is enabled.

        This property is not applicable for ``Parallel Edge Coupled`` topology
        when the ``equal_width_conductors`` option is enabled.


        Returns
        -------
        str
        """
        ...
    
    @center_z0_impedance.setter
    def center_z0_impedance(self, center_z0_impedance_string): # -> None:
        ...
    
    @property
    def equal_width_conductors(self) -> bool:
        """Flag indicating if all stubs are set to equal width.
        This parameter is applicable for the ``Parallel Edge Coupled`` topology of band pass filters.

        Returns
        -------
        bool
        """
        ...
    
    @equal_width_conductors.setter
    def equal_width_conductors(self, equal_width_conductors: bool): # -> None:
        ...
    
    @property
    def tapped(self) -> bool:
        """Flag indicating if the outer couplers are removed and the remaining outer couplers are tapped.
        This parameter is applicable for the ``Interdigital``, ``Combline``, and ``Parallel Edge Coupled``
        topologies of band pass filters.

        This property is disabled when the ``pinned`` option is enabled for the ``Parallel Edge Coupled`` topology.

        This property is disabled when the ``wide_band`` option is enabled for the ``Interdigital`` topology.

        Returns
        -------
        bool
        """
        ...
    
    @tapped.setter
    def tapped(self, tapped: bool): # -> None:
        ...
    
    @property
    def pinned(self) -> bool:
        """Flag indicating if the outer couplers are replaced with hairpin resonators.
        This parameter is applicable for the ``Interdigital``, and ``Parallel Edge Coupled``
        topologies of band pass filters.

        This property is disabled when the ``tapped`` option is enabled for the ``Parallel Edge Coupled`` topology.

        This property is only available  when the ``wide_band`` option is enabled for the ``Interdigital`` topology.

        Returns
        -------
        bool
        """
        ...
    
    @pinned.setter
    def pinned(self, pinned: bool): # -> None:
        ...
    
    @property
    def stub_taps(self) -> bool:
        """Flag indicating if vertical stubs are implemented at the tap points.
        This parameter is applicable for the ``Parallel Edge Coupled`` topology.

        This property is when only available ``equal_width_conductors`` option is
        enabled and ``pinned`` option is disabled.

        Returns
        -------
        bool
        """
        ...
    
    @stub_taps.setter
    def stub_taps(self, stub_taps: bool): # -> None:
        ...
    
    @property
    def via_ends(self) -> bool:
        """Flag indicating if resonators are terminated with vias instead of open ends.
        This parameter is applicable for the ``Parallel Edge Coupled`` topology of band pass filters.

        This property is disabled when the ``equal_width_conductors`` option is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @via_ends.setter
    def via_ends(self, via_ends: bool): # -> None:
        ...
    
    @property
    def resonator_line_width_enabled(self) -> bool:
        """Flag indicating if resonator line width is enabled.
        If ``True`` the resonator line width value is applied to the internal resonators and couplers.

        Returns
        -------
        bool
        """
        ...
    
    @resonator_line_width_enabled.setter
    def resonator_line_width_enabled(self, resonator_line_width_enabled: bool): # -> None:
        ...
    
    @property
    def resonator_line_width(self) -> str:
        """Line width to set in ``Hairpin``, ``Miniature Hairpin``, and ``Ring Resonator`` topologies
        of band pass filters. The default is ``1.27 mm``.

        Returns
        -------
        str
        """
        ...
    
    @resonator_line_width.setter
    def resonator_line_width(self, resonator_line_width_string): # -> None:
        ...
    
    @property
    def resonator_rotation_angle_enabled(self) -> bool:
        """Flag indicating if resonator rotation angle is enabled.
        If ``True`` the resonator rotation angle value is applied to the layout.

        Returns
        -------
        bool
        """
        ...
    
    @resonator_rotation_angle_enabled.setter
    def resonator_rotation_angle_enabled(self, resonator_rotation_angle_enabled: bool): # -> None:
        ...
    
    @property
    def resonator_rotation_angle(self) -> str:
        """Net filter rotation angle for the ``Parallel Edge Coupled`` topology of band pass filters in degrees.
        The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @resonator_rotation_angle.setter
    def resonator_rotation_angle(self, resonator_rotation_angle_string): # -> None:
        ...
    
    @property
    def mitered_corners(self) -> bool:
        """Flag indicating if mitered corners are implemented.
        This parameter is applicable for the ``Hairpin``, ``Miniature Hairpin``, and ``Ring Resonator`` topologies
        of band pass filters.

        Returns
        -------
        bool
        """
        ...
    
    @mitered_corners.setter
    def mitered_corners(self, mitered_corners: bool): # -> None:
        ...
    
    @property
    def hairpin_gap_width_enabled(self) -> bool:
        """Flag indicating if hairpin gap width is enabled.
        If ``True`` the hairpin gap width value is applied to the ``Hairpin`` legs.

        Returns
        -------
        bool
        """
        ...
    
    @hairpin_gap_width_enabled.setter
    def hairpin_gap_width_enabled(self, hairpin_gap_width_enabled: bool): # -> None:
        ...
    
    @property
    def hairpin_gap_width(self) -> str:
        """Gap width to set in ``Hairpin`` topology of band pass filters. The default is ``2.54 mm``.

        Returns
        -------
        str
        """
        ...
    
    @hairpin_gap_width.setter
    def hairpin_gap_width(self, hairpin_gap_width_string): # -> None:
        ...
    
    @property
    def miniature_hairpin_gap_width_enabled(self) -> bool:
        """Flag indicating if ``Miniature Hairpin`` or ``Ring Resonator`` gap width is enabled.
        If ``True`` the miniature hairpin or ring resonator gap width value is applied to the
        ``Miniature Hairpin``  or ``Ring Resonator`` legs.

        Returns
        -------
        bool
        """
        ...
    
    @miniature_hairpin_gap_width_enabled.setter
    def miniature_hairpin_gap_width_enabled(self, miniature_hairpin_gap_width_enabled: bool): # -> None:
        ...
    
    @property
    def miniature_hairpin_gap_width(self) -> str:
        """Gap width to set in ``Miniature Hairpin`` topology of band pass filters. The default is ``635 um``.

        Returns
        -------
        str
        """
        ...
    
    @miniature_hairpin_gap_width.setter
    def miniature_hairpin_gap_width(self, miniature_hairpin_gap_width_string): # -> None:
        ...
    
    @property
    def ring_resonator_gap_width(self) -> str:
        """Gap width to set in ``Ring Resonator`` topology of band pass filters. The default is ``635 um``.

        Returns
        -------
        str
        """
        ...
    
    @ring_resonator_gap_width.setter
    def ring_resonator_gap_width(self, ring_resonator_gap_width_string): # -> None:
        ...
    
    @property
    def hairpin_extension_length(self) -> str:
        """Extension length to set in ``Hairpin`` topology of band pass filters for tuning purpose.
        The default is ``0 mm``.

        Returns
        -------
        str
        """
        ...
    
    @hairpin_extension_length.setter
    def hairpin_extension_length(self, hairpin_extension_length_string): # -> None:
        ...
    
    @property
    def miniature_hairpin_end_curl_extension(self) -> str:
        """End curl extension length to set in ``Miniature Hairpin`` topology of band pass filters for tuning purpose.
        The default is ``0 mm``.

        Returns
        -------
        str
        """
        ...
    
    @miniature_hairpin_end_curl_extension.setter
    def miniature_hairpin_end_curl_extension(self, miniature_hairpin_end_curl_extension_string): # -> None:
        ...
    
    @property
    def ring_resonator_end_gap_extension(self) -> str:
        """End gap extension length to set in ``Ring Resonator`` topology of band pass filters for tuning purpose.
        The default is ``0 mm``.

        Returns
        -------
        str
        """
        ...
    
    @ring_resonator_end_gap_extension.setter
    def ring_resonator_end_gap_extension(self, ring_resonator_end_gap_extension_string): # -> None:
        ...
    
    @property
    def tuning_type_1(self) -> bool:
        """Flag indicating if both legs of the outer hairpins are set for tuning in ``Hairpin``
        topology of band pass filters. If ``False``, only the outer legs of the outer hairpins are set.

        Returns
        -------
        bool
        """
        ...
    
    @tuning_type_1.setter
    def tuning_type_1(self, tuning_type_1: bool): # -> None:
        ...
    
    @property
    def tap_position(self) -> TapPosition:
        """Tap position of the tap points in ``Miniature Hairpin`` and ``Ring Resonator``
        topologies of band pass filters. The default is ``AUTO``.
        The ``TapPosition`` enum provides a list of all types.

        Returns
        -------
        :enum:`TapPosition`
        """
        ...
    
    @tap_position.setter
    def tap_position(self, tap_position: TapPosition): # -> None:
        ...
    
    @property
    def wide_band(self) -> bool:
        """Flag indicating if ``Interdigital`` topology of band pass filters are optimized for wideband applications.

        Returns
        -------
        bool
        """
        ...
    
    @wide_band.setter
    def wide_band(self, wide_band: bool): # -> None:
        ...
    
    @property
    def open_ends(self) -> bool:
        """Flag indicating if resonators are terminated with open ends instead of vias.
        This parameter is applicable for the ``Interdigital`` topology of band pass filters.

        This property is disabled when the ``wide_band`` option is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @open_ends.setter
    def open_ends(self, open_ends: bool): # -> None:
        ...
    
    @property
    def combline_half_length_frequency(self) -> str:
        """Half length frequency in ``Combline`` topology of band pass filters where open remains open.
        The default is ``4G``.

        Returns
        -------
        str
        """
        ...
    
    @combline_half_length_frequency.setter
    def combline_half_length_frequency(self, combline_half_length_frequency_string): # -> None:
        ...
    
    @property
    def coupled_segments_quarter_length_frequency_enabled(self) -> bool:
        """Flag indicating if quarter length frequency is enabled.
        If ``True`` the quarter length frequency value is applied to the layout.

        Returns
        -------
        bool
        """
        ...
    
    @coupled_segments_quarter_length_frequency_enabled.setter
    def coupled_segments_quarter_length_frequency_enabled(self, coupled_segments_quarter_length_frequency_enabled: bool): # -> None:
        ...
    
    @property
    def coupled_segments_quarter_length_frequency(self) -> str:
        """Quarter length frequency in ``Coupled Segments`` topology of band pass filters where open becomes ground.
        The default is ``4G``.

        Returns
        -------
        str
        """
        ...
    
    @coupled_segments_quarter_length_frequency.setter
    def coupled_segments_quarter_length_frequency(self, coupled_segments_quarter_length_frequency_string): # -> None:
        ...
    
    def netlist(self):
        """Calculate and generate spice netlist of the synthesized circuit"""
        ...
    
    @property
    def quick_optimize(self) -> bool:
        """Flag indicating if the quick optimization of the synthesized circuit is enabled.
        This option provides a more accurate solution than raw synthesis alone.

        Returns
        -------
        bool
        """
        ...
    
    @quick_optimize.setter
    def quick_optimize(self, quick_optimize: bool): # -> None:
        ...
    
    @property
    def resonator_length_extension(self) -> bool:
        """Flag indicating if the resonator length extension for optimization of the synthesized circuit is enabled.
        This parameter is applicable for the ``Interdigital`` topology of band pass filters.

        Returns
        -------
        bool
        """
        ...
    
    @resonator_length_extension.setter
    def resonator_length_extension(self, resonator_length_extension: bool): # -> None:
        ...
    


