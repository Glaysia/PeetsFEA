"""
This type stub file was generated by pyright.
"""

from enum import Enum

class FrequencyResponseColumn(Enum):
    """Provides an enum of frequency response parameters.

    **Attributes:**

    - MAGNITUDE_DB: Represents the frequency response magnitude in dB.
    - PHASE_DEG: Represents the frequency response phase in degree.
    - GROUP_DELAY: Represents the frequency response group delay.
    - PHASE_RAD: Represents the frequency response phase in radian.
    - MAGNITUDE_ARITH: Represents the frequency response magnitude.
    - MAGNITUDE_REAL: Represents the real part of frequency response magnitude.
    - MAGNITUDE_IMAG: Represents the imaginary part of frequency response magnitude.
    - PHASE_DEV_DEG: Represents the frequency response phase deviation in degrees.
    - PHASE_DEV_RAD: Represents the frequency response phase deviation in radian.
    - FREQUENCY: Represents frequency parameter of the frequency response .
    """
    MAGNITUDE_DB = ...
    PHASE_DEG = ...
    GROUP_DELAY = ...
    PHASE_RAD = ...
    MAGNITUDE_ARITH = ...
    MAGNITUDE_REAL = ...
    MAGNITUDE_IMAG = ...
    PHASE_DEV_DEG = ...
    PHASE_DEV_RAD = ...
    FREQUENCY = ...


class TimeResponseColumn(Enum):
    """Provides an enum of time response parameters.

    **Attributes:**

    - STEP_RESPONSE: Represents the step time response.
    - RAMP_RESPONSE: Represents the ramp time response.
    - IMPULSE_RESPONSE: Represents the impulse time response.
    - STEP_RESPONSE_DB: Represents the step time response in dB.
    - RAMP_RESPONSE_DB: Represents the ramp time response in dB.
    - IMPULSE_RESPONSE_DB: Represents the impulse time response in dB.
    - TIME: Represents time parameter of the time response .
    """
    STEP_RESPONSE = ...
    RAMP_RESPONSE = ...
    IMPULSE_RESPONSE = ...
    STEP_RESPONSE_DB = ...
    RAMP_RESPONSE_DB = ...
    IMPULSE_RESPONSE_DB = ...
    TIME = ...


class SParametersResponseColumn(Enum):
    """Provides an enum of S parameters.

    **Attributes:**

    - S21_DB: Represents the S21 parameter in dB.
    - S11_DB: Represents the S11 parameter in dB.
    - S21_ARITH: Represents the S21 parameter.
    - S11_ARITH: Represents the S11 parameter.
    - FREQUENCY: Represents the S parameters' frequency parameter.
    """
    S21_DB = ...
    S11_DB = ...
    S21_ARITH = ...
    S11_ARITH = ...
    FREQUENCY = ...


class PoleZerosResponseColumn(Enum):
    """Provides an enum of pole zero x and y coordinates of transmission (TX) or reflection (RX) zeros.

    **Attributes:**

    - TX_ZERO_DEN_X: Represents the x coordinate of the filter transmission zero denominator.
    - TX_ZERO_DEN_Y: Represents the y coordinate of the filter transmission zero denominator.
    - PROTO_TX_ZERO_DEN_X: Represents the x coordinate of the prototype filter transmission zero denominator.
    - PROTO_TX_ZERO_DEN_Y: Represents the y coordinate of the prototype filter transmission zero denominator.
    - TX_ZERO_NUM_X: Represents the x coordinate of the filter transmission zero numerator.
    - TX_ZERO_NUM_Y: Represents the y coordinate of the filter transmission zero numerator.
    - PROTO_TX_ZERO_NUM_X: Represents the x coordinate of the prototype filter transmission zero numerator.
    - PROTO_TX_ZERO_NUM_Y: Represents the y coordinate of the prototype filter transmission zero numerator.
    - RX_ZERO_DEN_X: Represents the x coordinate of the filter reflection zero denominator.
    - RX_ZERO_DEN_Y: Represents the y coordinate of the filter reflection zero denominator.
    - PROTO_RX_ZERO_DEN_X: Represents the x coordinate of the prototype filter reflection zero denominator.
    - PROTO_RX_ZERO_DEN_Y: Represents the y coordinate of the prototype filter reflection zero denominator.
    - RX_ZERO_NUM_X: Represents the x coordinate of the filter reflection zero numerator.
    - RX_ZERO_NUM_Y: Represents the y coordinate of the filter reflection zero numerator.
    - PROTO_RX_ZERO_NUM_X: Represents the x coordinate of the prototype filter reflection zero numerator.
    - PROTO_RX_ZERO_NUM_Y: Represents the y coordinate of the prototype filter reflection zero numerator.
    """
    TX_ZERO_DEN_X = ...
    TX_ZERO_DEN_Y = ...
    PROTO_TX_ZERO_DEN_X = ...
    PROTO_TX_ZERO_DEN_Y = ...
    TX_ZERO_NUM_X = ...
    TX_ZERO_NUM_Y = ...
    PROTO_TX_ZERO_NUM_X = ...
    PROTO_TX_ZERO_NUM_Y = ...
    RX_ZERO_DEN_X = ...
    RX_ZERO_DEN_Y = ...
    PROTO_RX_ZERO_DEN_X = ...
    PROTO_RX_ZERO_DEN_Y = ...
    RX_ZERO_NUM_X = ...
    RX_ZERO_NUM_Y = ...
    PROTO_RX_ZERO_NUM_X = ...
    PROTO_RX_ZERO_NUM_Y = ...


class IdealResponse:
    """Returns the data for available ideal filter responses.

    Types of responses Include ``frequency``, ``time``, ``S parameters``, ``transfer function``,
    and ``pole zero location``.

    This class allows you to define and modify the ideal response parameters for the designed filter.
    """
    def __init__(self) -> None:
        ...
    
    def transfer_function_response(self):
        """Get the ideal filter transfer function's parameters.

        Returns
        -------
        str
            Requested parameter array.

            str
                Multi-line string where each line contains a coefficient from
                the numerator and/or the denominator of the transfer function.
                The coefficient for the highest-order term is first, and the terms are in decreasing order.
        """
        ...
    
    @property
    def vsg_analysis_enabled(self) -> bool:
        """Flag indicating if the offset due to source resistor in frequency and time responses is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @vsg_analysis_enabled.setter
    def vsg_analysis_enabled(self, filter_vsg_analysis_enabled: bool): # -> None:
        ...
    
    def frequency_response(self, y_axis_parameter=..., minimum_frequency=..., maximum_frequency=..., vsg_analysis_enabled=...): # -> tuple[list[Any], list[float]]:
        """Get the ideal filter frequency response for the given parameters.

        Parameters
        ----------
        y_axis_parameter: `FrequencyResponseColumn`, optional
             Frequency response column to return. The default is the frequency response magnitude in dB.
        minimum_frequency: str, optional
            Minimum frequency to set for the frequency response.
            If the minimum frequency is not given, the existing minimum frequency of the graph is used.
        maximum_frequency: str, optional
            Maximum frequency to set for the frequency response.
            If the maximum frequency is not given, the existing maximum frequency of the graph is used.
        vsg_analysis_enabled: bool, optional
            The default is ``False``.

        Returns
        -------
        tuple
            The tuple contains two lists of strings. The first is a list
            of the defined frequency ranges, and the second is a
            list of the requested parameters.
        """
        ...
    
    def time_response(self, y_axis_parameter=..., minimum_time=..., maximum_time=..., vsg_analysis_enabled=...): # -> tuple[list[float], list[float]]:
        """Get the ideal filter time response for the given parameters.

        Parameters
        ----------
        y_axis_parameter: `TimeResponseColumn`, optional
            Time response column to get. The default is the step time response.
        minimum_time: str, optional
            Minimum time to set for the time response.
            If the minimum time is not given, the existing minimum time of the graph is used.
        maximum_time: str, optional
            Maximum time to set for the time response.
            If the maximum time is not given, the existing maximum time of the graph is used.
        vsg_analysis_enabled: bool, optional
            The default is ``False``.

        Returns
        -------
        tuple
            The tuple contains two lists of strings. The first is a list
            of the defined time ranges, and the second is a
            list of the requested parameters.
        """
        ...
    
    def s_parameters(self, y_axis_parameter=..., minimum_frequency=..., maximum_frequency=...): # -> tuple[list[Any], list[float]]:
        """Get the ideal filter S parameters response for the given parameters.

        Parameters
        ----------
        y_axis_parameter: `SParametersResponseColumn`, optional
            S parameter's response column to get. The default is the S21 parameter response in dB.
        minimum_frequency: str, optional
            Minimum frequency to set for the S parameters response.
            If the minimum frequency is not given, the existing minimum frequency of the graph is used.
        maximum_frequency: str, optional
            Maximum frequency to set for the S parameters response.
            If the maximum frequency is not given, the existing maximum frequency of the graph is used.
        vsg_analysis_enabled: bool, optional
            The default is ``False``.

        Returns
        -------
        tuple
            The tuple contains two lists of strings. The first is a list
            of the defined frequency ranges, and the second is a
            list of the requested parameters.
        """
        ...
    
    def pole_zero_locations(self, x_axis_parameter=..., y_axis_parameter=...): # -> tuple[list[float], list[float]]:
        """Get the ideal pole zero location for the given parameters.

        Parameters
        ----------
        x_axis_parameter: `PoleZerosResponseColumn`, optional
            X axis parameter of the pole zeros response column to get. The default is the x coordinate
            of the filter transmission zero denominator.
        y_axis_parameter: `PoleZerosResponseColumn`, optional
            Y axis parameter of the pole zeros response column to get. The default is the y coordinate
            of the filter transmission zero denominator.

        Returns
        -------
        tuple
            The tuple contains two lists of strings. The first is a list
            of the x coordinates of the requested parameter, and the second is a
            list of the y coordinates of the requested parameter.
        """
        ...
    


