"""
This type stub file was generated by pyright.
"""

class MultipleBandsTable:
    """Manipulates access to the entries of multiple bands table.

    This class allows you to enter, edit, or remove entries in the multiple bands table.
    The table includes the lower and upper frequencies of the bands.
    To access the multiple bands table, use the ``multiple_bands_table`` attribute of the ``FilterSolutions`` class.
    A valid multiple bands table must include both lower and upper frequencies for each band.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def row_count(self) -> int:
        """Total number of rows present in the multiple bands table.

        The default is ``2``.

        Returns
        -------
        int
            Current number of rows in the multiple bands table.
        """
        ...
    
    def row(self, row_index): # -> tuple[Any, Any]:
        """Get the lower and upper frequency values for a row in the multiple bands table.

        Parameters
        ----------
        row_index: int
            Index of the row from to get the frequency values from.
            Valid values range from ``0`` to ``6``, inclusive.

        Returns
        -------
            tuple
                The tuple contains three strings.The first is the lower frequency value,
                and the second is the upper frequency value.

        """
        ...
    
    def update_row(self, row_index, lower_frequency=..., upper_frequency=...): # -> None:
        """Update lower and upper frequency values for a row in the multiple bands table.

        Parameters
        ----------
        row_index: int
            Index of the row to update. Valid values range from ``0`` to ``6``, inclusive.
        lower_frequency: str, optional
            New lower frequency value to set for the row.
            If this value is not provided, the row's lower frequency remains unchanged.
        upper_frequency: str, optional
            New upper frequency value to set for the row.
            If this value is not provided, the row's upper frequency remains unchanged.
        """
        ...
    
    def append_row(self, lower_frequency=..., upper_frequency=...): # -> None:
        """Append a new row with specified lower and upper frequency values to the end of the multiple bands table.

        Parameters
        ----------
        lower_frequency: str
            Lower frequency value for the new row.
        upper_frequency: str
            Upper frequency value for the new row.
        """
        ...
    
    def insert_row(self, row_index, lower_frequency=..., upper_frequency=...): # -> None:
        """Insert lower and upper frequencies in a given row.

        Parameters
        ----------
        row_index: int
            Index of the row. Valid values range from ``0`` to ``6``, inclusive.
        lower_frequency: str
            Lower frequency value to insert.
        upper_frequency: str
            Upper frequency value to insert.
        """
        ...
    
    def remove_row(self, row_index): # -> None:
        """Remove a row specified by its index from the multiple bands table.

        Parameters
        ----------
        row_index: int
            The index of the row to be removed from the multiple bands table.
            Valid values range from ``0``to ``6``, inclusive.
        """
        ...
    
    def clear_table(self): # -> None:
        """Remove all rows from the multiple bands table."""
        ...
    


