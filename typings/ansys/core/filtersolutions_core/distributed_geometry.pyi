"""
This type stub file was generated by pyright.
"""

class DistributedGeometry:
    """Defines geometry parameters of distributed filters.

    This class allows you to define and modify the layout geometry parameters of distributed filters.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def fixed_width_to_height_ratio_capacitor_sections_enabled(self) -> bool:
        """Flag indicating if the fixed width-to-substrate height ratios for all segments and stubs in the
        translated lumped capacitor sections are enabled.

        Returns
        -------
        bool
        """
        ...
    
    @fixed_width_to_height_ratio_capacitor_sections_enabled.setter
    def fixed_width_to_height_ratio_capacitor_sections_enabled(self, fixed_width_to_height_ratio_capacitor_sections_enabled: bool): # -> None:
        ...
    
    @property
    def fixed_width_to_height_ratio_capacitor_sections(self) -> str:
        """Fixed width-to-substrate height ratios for all segments and stubs in the
        translated lumped capacitor sections.
        All sections are set to the same width. The default is ``4``.

        Returns
        -------
        str
        """
        ...
    
    @fixed_width_to_height_ratio_capacitor_sections.setter
    def fixed_width_to_height_ratio_capacitor_sections(self, fixed_width_to_height_ratio_capacitor_sections_string): # -> None:
        ...
    
    @property
    def fixed_width_to_height_ratio_inductor_sections_enabled(self) -> bool:
        """Flag indicating if the fixed width-to-substrate height ratios for all segments and stubs in the
        translated lumped inductor sections are enabled.

        Returns
        -------
        bool
        """
        ...
    
    @fixed_width_to_height_ratio_inductor_sections_enabled.setter
    def fixed_width_to_height_ratio_inductor_sections_enabled(self, fixed_width_to_height_ratio_inductor_sections_enabled: bool): # -> None:
        ...
    
    @property
    def fixed_width_to_height_ratio_inductor_sections(self) -> str:
        """Fixed width-to-substrate height ratios for all segments and stubs in the
        translated lumped inductor sections.
        All sections are set to the same width. The default is ``0.25``.

        Returns
        -------
        str
        """
        ...
    
    @fixed_width_to_height_ratio_inductor_sections.setter
    def fixed_width_to_height_ratio_inductor_sections(self, fixed_width_to_height_ratio_inductor_sections_string): # -> None:
        ...
    
    @property
    def split_wide_stubs_enabled(self) -> bool:
        """Flag indicating if the wide stubs width into two thinner parallel stubs is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @split_wide_stubs_enabled.setter
    def split_wide_stubs_enabled(self, split_wide_stubs_enabled: bool): # -> None:
        ...
    
    @property
    def wide_stubs_width_to_substrate_height_ratio(self) -> str:
        """Stub width to substrate height ratio of stubs to be split into thinner stubs.
        All stubs wider than this ratio will be split.
        This property is not effective for radial and delta stubs. The default is ``0``.

        Returns
        -------
        str
        """
        ...
    
    @wide_stubs_width_to_substrate_height_ratio.setter
    def wide_stubs_width_to_substrate_height_ratio(self, wide_stubs_width_to_substrate_height_ratio_string): # -> None:
        ...
    
    @property
    def alternate_stub_orientation(self) -> bool:
        """Flag indicating if the alternate vertical orientation of stubs is enabled.
        The orientation alternates between up and down to minimize interference between adjacent stubs.

        Returns
        -------
        bool
        """
        ...
    
    @alternate_stub_orientation.setter
    def alternate_stub_orientation(self, alternate_stub_orientation: bool): # -> None:
        ...
    
    @property
    def max_width(self) -> str:
        """Maximum conductor width of the geometry. The default is ``6.35 mm``.

        Returns
        -------
        str
        """
        ...
    
    @max_width.setter
    def max_width(self, max_width_string): # -> None:
        ...
    
    @property
    def min_width(self) -> str:
        """Minimum conductor width of the geometry. The default is ``50 um``.

        Returns
        -------
        str
        """
        ...
    
    @min_width.setter
    def min_width(self, min_width_string): # -> None:
        ...
    
    @property
    def max_gap(self) -> str:
        """Maximum conductor gap width between conductors of the geometry. The default is ``6.35 mm``.

        Returns
        -------
        str
        """
        ...
    
    @max_gap.setter
    def max_gap(self, max_gap_string): # -> None:
        ...
    
    @property
    def min_gap(self) -> str:
        """Minimum conductor gap width between conductors of the geometry. The default is ``50 um``.

        Returns
        -------
        str
        """
        ...
    
    @min_gap.setter
    def min_gap(self, min_gap_string): # -> None:
        ...
    
    @property
    def apply_limits(self) -> bool:
        """Flag indicating if the given geometry minimum and maximum widths and gaps limits are applied.

        Returns
        -------
        bool
        """
        ...
    
    @apply_limits.setter
    def apply_limits(self, apply_limits: bool): # -> None:
        ...
    
    @property
    def adjust_length_on_limit(self) -> bool:
        """Flag indicating if the length of all limited stubs and segments are adjusted to maintain
        the desired lumped element impedance. This adjustment is effective for sections simulating
        translated lumped elements.

        Returns
        -------
        bool
        """
        ...
    
    @adjust_length_on_limit.setter
    def adjust_length_on_limit(self, adjust_length_on_limit: bool): # -> None:
        ...
    


