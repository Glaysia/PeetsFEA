"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Union

class ExportFormat(Enum):
    """Provides an enum of export format types.

    **Attributes:**

    - DIRECT_TO_AEDT: Represents a direct export to ``AEDT``.
    - PYTHON: Represents a Python scripted export.
    """
    DIRECT_TO_AEDT = ...
    PYTHON_SCRIPT = ...


class ExportCreationMode(Enum):
    """Provides an enum of export creation modes.

    **Attributes:**

    - OVERWRITE: Represents export to ``AEDT`` and overwrite to existing design.
    - APPEND: Represents export to ``AEDT`` and append to existing design.
    """
    OVERWRITE = ...
    APPEND = ...


class PartLibraries(Enum):
    """Provides an enum of export format types.

    **Attributes:**

    - LUMPED = Represents a lumped part library.
    - INTERCONNECT_ONLY = Represents an interconnect only part library.
    - MODELITHICS = Represents a ``Modelithics`` part library.
    """
    LUMPED = ...
    INTERCONNECT = ...
    MODELITHICS = ...


class SubstrateType(Enum):
    """Provides an enum of substrate types for various materials.

    **Attributes:**

    - RGLC = Represents a RGLC substrate type.
    - STRIPLINE = Represents a stripline substrate type.
    - MICROSTRIP = Represents a microstrip substrate type.
    - SUSPEND = Represents a suspended substrate type.
    - INVERTED = Represents an inverted substrate type.
    """
    RGLC = ...
    STRIPLINE = ...
    MICROSTRIP = ...
    SUSPEND = ...
    INVERTED = ...


class SubstrateEr(Enum):
    """Provides an enum of substrate relative permitivity (``Er``) for various materials.

    The enum values represent common materials used in substrates and their associated ``Er`` value.

    **Attributes:**

    - AIR = Represents air substrate with an ``Er`` of ``1.00``.
    - ALUMINA = Represents alumina substrate with an ``Er`` of ``9.8``.
    - GA_AS = Represents Gallium Arsenide substrate with an ``Er`` of ``12.9``.
    - GERMANIUM = Represents Germanium substrate with an ``Er`` of ``16.0``.
    - INDIUM_PHOSPHATE = Represents Indium Phosphate substrate with an ``Er`` of ``12.4``.
    - SILICON = Represents Silicon substrate with an ``Er`` of ``11.7``.
    - QUARTZ = Represents Quartz substrate with an ``Er`` of ``3.78``.
    - RT_DUROID_5880 = Represents RT Duroid 5880 substrate with an ``Er`` of ``2.2``.
    - RT_DUROID_5870 = Represents RT Duroid 5870 substrate with an ``Er`` of ``2.33``.
    - RT_DUROID_6006 = Represents RT Duroid 6006 substrate with an ``Er`` of ``6.15``.
    - G_10_LOW_RESIN = Represents G-10 Low Resin substrate with an ``Er`` of ``4.8``.
    - G_10_HIGH_RESIN = Represents G-10 High Resin substrate with an ``Er`` of ``3.5``.
    - PAPER_PHONELIC = Represents Paper Phenolic substrate with an ``Er`` of ``4.5``.
    - POLYTHYLENE = Represents Polyethylene substrate with an ``Er`` of ``2.25``.
    - POLYSTYRENE = Represents Polystyrene substrate with an ``Er`` of ``2.56``.
    - CORNING_GLASS_7059 = Represents Corning Glass 7059 substrate with an ``Er`` of ``7.9``.
    - BERYLIUM_OXIDE = Represents Beryllium Oxide substrate with an ``Er`` of ``6.7``.
    """
    AIR = ...
    ALUMINA = ...
    GA_AS = ...
    GERMANIUM = ...
    INDIUM_PHOSPHATE = ...
    SILICON = ...
    QUARTZ = ...
    RT_DUROID_5880 = ...
    RT_DUROID_5870 = ...
    RT_DUROID_6006 = ...
    G_10_LOW_RESIN = ...
    G_10_HIGH_RESIN = ...
    PAPER_PHONELIC = ...
    POLYTHYLENE = ...
    POLYSTYRENE = ...
    CORNING_GLASS_7059 = ...
    BERYLIUM_OXIDE = ...


class SubstrateResistivity(Enum):
    """Provides an enum of substrate resistivity types for various materials.

    The enum values represent common materials used in substrates and their associated resistivity index.

    **Attributes:**

    - IDEAL: Represents an ideal, perfect conductor, ``0`` with respect to copper resistivity.
    - SILVER: Represents Silver resitivity, ``0.95`` with respect to copper resistivity.
    - COPPER: Represents Copper, ``1.00`` as referernce resistivity.
    - GOLD: Represents Gold, ``1.43`` with respect to copper resistivity.
    - ALUMINUM: Represents Aluminum, ``1.67`` with respect to copper resistivity.
    - MAGNESIUM: Represents Magnesium, ``2.67`` with respect to copper resistivity.
    - TUNGSTEN: Represents Tungsten, ``3.23`` with respect to copper resistivity.
    - ZINC: Represents Zinc, ``3.56`` with respect to copper resistivity.
    - NICKEL: Represents Nickel, ``4.00`` with respect to copper resistivity.
    - IRON: Represents Iron, ``5.80`` with respect to copper resistivity.
    - PLATINUM: Represents Platinum, ``6.34`` with respect to copper resistivity.
    """
    IDEAL = ...
    SILVER = ...
    COPPER = ...
    GOLD = ...
    ALUMINUM = ...
    MAGNESIUM = ...
    TUNGSTEN = ...
    ZINC = ...
    NICKEL = ...
    IRON = ...
    PLATINUM = ...


class ExportToAedt:
    """Defines attributes and parameters for exporting filter .

    This class allows you to define and modify the parameters for exporting a designed filter to ``AEDT``.
    """
    def __init__(self) -> None:
        ...
    
    def define_export_to_desktop_distributed_dll_functions(self): # -> None:
        """Define C++ API DLL functions for distributed filter."""
        ...
    
    @property
    def schematic_name(self) -> str:
        """Name of the exported schematic in ``AEDT``, displayed as the project and design names.

        The default name is ``FilterSolutions`` if not specified.

        Returns
        -------
        str
        """
        ...
    
    @schematic_name.setter
    def schematic_name(self, schematic_name_string): # -> None:
        ...
    
    @property
    def simulate_after_export_enabled(self) -> bool:
        """Flag indicating if the simulation will be initiated upon export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @simulate_after_export_enabled.setter
    def simulate_after_export_enabled(self, simulate_after_export_enabled: bool): # -> None:
        ...
    
    @property
    def include_group_delay_enabled(self) -> bool:
        """Flag indicating if the group delay report will be created upon export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @include_group_delay_enabled.setter
    def include_group_delay_enabled(self, include_group_delay_enabled: bool): # -> None:
        ...
    
    @property
    def include_gt_gain_enabled(self) -> bool:
        """Flag indicating if the total voltage gain report will be created upon export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @include_gt_gain_enabled.setter
    def include_gt_gain_enabled(self, include_gt_gain_enabled: bool): # -> None:
        ...
    
    @property
    def include_vgsl_enabled(self) -> bool:
        """Flag indicating if the voltage gain source load report will be created upon export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @include_vgsl_enabled.setter
    def include_vgsl_enabled(self, include_vgsl_enabled: bool): # -> None:
        ...
    
    @property
    def include_vgin_enabled(self) -> bool:
        """Flag indicating if the voltage gain insertion report will be created upon export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @include_vgin_enabled.setter
    def include_vgin_enabled(self, include_vgin_enabled: bool): # -> None:
        ...
    
    @property
    def include_input_return_loss_s11_enabled(self) -> bool:
        """Flag indicating if the input return loss report will be created upon
        export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @include_input_return_loss_s11_enabled.setter
    def include_input_return_loss_s11_enabled(self, include_input_return_loss_s11_enabled: bool): # -> None:
        ...
    
    @property
    def include_forward_transfer_s21_enabled(self) -> bool:
        """Flag indicating if the forward transfer gain report will be created upon export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @include_forward_transfer_s21_enabled.setter
    def include_forward_transfer_s21_enabled(self, include_forward_transfer_s21_enabled: bool): # -> None:
        ...
    
    @property
    def include_reverse_transfer_s12_enabled(self) -> bool:
        """Flag indicating if the reverse transfer gain report will be created upon export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @include_reverse_transfer_s12_enabled.setter
    def include_reverse_transfer_s12_enabled(self, include_reverse_transfer_s12_enabled: bool): # -> None:
        ...
    
    @property
    def include_output_return_loss_s22_enabled(self) -> bool:
        """Flag indicating if the output return loss report will be created upon export to ``AEDT``.

        Returns
        -------
        bool
        """
        ...
    
    @include_output_return_loss_s22_enabled.setter
    def include_output_return_loss_s22_enabled(self, include_output_return_loss_s22_enabled: bool): # -> None:
        ...
    
    @property
    def db_format_enabled(self) -> bool:
        """Flag indicating if the report format in dB in the exported filter to ``AEDT`` is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @db_format_enabled.setter
    def db_format_enabled(self, db_format_enabled: bool): # -> None:
        ...
    
    @property
    def rectangular_plot_enabled(self) -> bool:
        """Flag indicating if the rectangular report format in the
         exported filter to ``AEDT`` is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @rectangular_plot_enabled.setter
    def rectangular_plot_enabled(self, rectangular_plot_enabled: bool): # -> None:
        ...
    
    @property
    def smith_plot_enabled(self) -> bool:
        """Flag indicating if the ``Smith Chart`` report format in the
         exported filter to ``AEDT`` is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @smith_plot_enabled.setter
    def smith_plot_enabled(self, smith_plot_enabled: bool): # -> None:
        ...
    
    @property
    def polar_plot_enabled(self) -> bool:
        """Flag indicating if the polar report format in the exported filter to ``AEDT`` is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @polar_plot_enabled.setter
    def polar_plot_enabled(self, polar_plot_enabled: bool): # -> None:
        ...
    
    @property
    def table_data_enabled(self) -> bool:
        """Flag indicating if the table data format in the exported filter to ``AEDT`` is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @table_data_enabled.setter
    def table_data_enabled(self, table_data_enabled: bool): # -> None:
        ...
    
    @property
    def optimitrics_enabled(self) -> bool:
        """Flag indicating if the optimitric parameters in the exported filter to ``AEDT`` is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @optimitrics_enabled.setter
    def optimitrics_enabled(self, optimitrics_enabled: bool): # -> None:
        ...
    
    @property
    def optimize_after_export_enabled(self) -> bool:
        """Flag indicating if the optimization after exporting to ``AEDT`` is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @optimize_after_export_enabled.setter
    def optimize_after_export_enabled(self, optimize_after_export_enabled: bool): # -> None:
        ...
    
    def export_design(self, export_format=..., export_creation_mode=..., export_path=...): # -> None:
        """Export the design directly to ``AEDT`` or generate a ``Python`` script for exporting.

        When exporting to ``AEDT``, the design can either be appended to an existing project or overwrite it.
        When generating a Python script, the script is created and saved to the specified file location.

        Returns the design object for an exported design when ``export_format``
        is set to ``ExportFormat.DIRECT_TO_AEDT``.

        The returned object type is one of ``Circuit``, ``Hfss``, or ``Hfss3dLayout``.

        Returns ``None`` if ``export_format`` is set to ``ExportFormat.PYTHON_SCRIPT``.

        Parameters
        ----------
        export_format : `ExportFormat`
            The export format type.
            The default is ``None``.
        design_creation_mode : `ExportCreationMode`
            The design creation mode.
            The default is ``None``.
        export_path : str
            The export path for Python script.
            The default is ``None``.

        Returns
        -------
        :class: ``AEDT`` design object
        """
        ...
    
    def load_library_parts_config(self, load_library_parts_config_string): # -> None:
        ...
    
    def save_library_parts_config(self, save_library_parts_config_string): # -> None:
        ...
    
    def import_tuned_variables(self):
        """Imported ``AEDT`` tuned parameter variables back into the ``FilterSolutions`` project."""
        ...
    
    @property
    def part_libraries(self) -> PartLibraries:
        """Part libraries selection. The default is ``LUMPED`` if not specified.

        The ``PartLibraries`` enum provides a list of all options.

        Returns
        -------
        :enum:`PartLibraries`
        """
        ...
    
    @part_libraries.setter
    def part_libraries(self, library_type: PartLibraries): # -> None:
        ...
    
    @property
    def interconnect_length_to_width_ratio(self) -> str:
        """Length to width ratio of interconnect line.

        The length to width ratio is a measure of the proportion between the length and width of the interconnect line.
        This ratio is important for determining the electrical characteristics of the interconnect, such as impedance
        and signal integrity.
        The default is ``2``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_length_to_width_ratio.setter
    def interconnect_length_to_width_ratio(self, interconnect_length_to_width_ratio_string): # -> None:
        ...
    
    @property
    def interconnect_minimum_length_to_width_ratio(self) -> str:
        """Minimum length to width ratio of interconnect line.

        The minimum length to width ratio is a measure of the smallest proportion between the length and width
        of the interconnect line that is allowed. This parameter is used to determine the minimum dimensions of
        interconnect lines for optimization purposes.
        The default is ``0.5``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_minimum_length_to_width_ratio.setter
    def interconnect_minimum_length_to_width_ratio(self, interconnect_minimum_length_to_width_ratio_string): # -> None:
        ...
    
    @property
    def interconnect_maximum_length_to_width_ratio(self) -> str:
        """Maximum length to width ratio of interconnect line.

        The maximum length to width ratio is a measure of the largest proportion between the length and width
        of the interconnect line that is allowed. This parameter is used to determine the maximum dimensions of
        interconnect lines for optimization purposes.
        The default is ``2``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_maximum_length_to_width_ratio.setter
    def interconnect_maximum_length_to_width_ratio(self, interconnect_maximum_length_to_width_ratio_string): # -> None:
        ...
    
    @property
    def interconnect_line_to_termination_width_ratio(self) -> str:
        """Line width to termination width ratio of interconnect line.

        The line width to termination width ratio is a measure of the proportion between the width of the
        interconnect line and the width of its termination. This ratio is crucial for ensuring proper
        impedance matching and signal integrity at the points where the interconnect line connects to
        other components or circuits.
        The default is ``1``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_line_to_termination_width_ratio.setter
    def interconnect_line_to_termination_width_ratio(self, interconnect_line_to_termination_width_ratio_string): # -> None:
        ...
    
    @property
    def interconnect_minimum_line_to_termination_width_ratio(self) -> str:
        """Minimum line width to termination width ratio of interconnect line.

        The minimum line width to termination width ratio is a measure of the smallest proportion between the
        width of the interconnect line and the width of its termination that is allowed. This parameter is used
        to determine the minimum dimensions of interconnect lines for optimization purposes.
        The default is ``0.5``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_minimum_line_to_termination_width_ratio.setter
    def interconnect_minimum_line_to_termination_width_ratio(self, interconnect_minimum_line_to_termination_width_ratio_string): # -> None:
        ...
    
    @property
    def interconnect_maximum_line_to_termination_width_ratio(self) -> str:
        """Maximum line width to termination width ratio of interconnect line.

        The maximum line width to termination width ratio is a measure of the largest proportion between the
        width of the interconnect line and the width of its termination that is allowed. This parameter is used
        to determine the maximum dimensions of interconnect lines for optimization purposes.
        The default is ``2``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_maximum_line_to_termination_width_ratio.setter
    def interconnect_maximum_line_to_termination_width_ratio(self, interconnect_maximum_line_to_termination_width_ratio_string): # -> None:
        ...
    
    @property
    def interconnect_length_value(self) -> str:
        """Interconnect physical length value.

        The interconnect physical length value represents the actual length of the interconnect line in the design.
        This value is crucial for determining the electrical characteristics of the interconnect, such as signal delay,
        impedance, and potential signal loss. Accurate length measurements are essential for ensuring that the
        interconnect performsas expected in high-frequency and high-speed applications.
        The default is ``2.54 mm``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_length_value.setter
    def interconnect_length_value(self, interconnect_length_value_string): # -> None:
        ...
    
    @property
    def interconnect_minimum_length_value(self) -> str:
        """Minimum value of interconnect physical length.

        The minimum value of the interconnect physical length represents the smallest length that the interconnect
        line can have in the design. This value is used to determine the minimum dimensions of interconnect lines
        for optimization purposes.
        The default is ``1.27 mm``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_minimum_length_value.setter
    def interconnect_minimum_length_value(self, interconnect_minimum_length_value_string): # -> None:
        ...
    
    @property
    def interconnect_maximum_length_value(self) -> str:
        """Maximum value of interconnect physical length.
        The maximum value of the interconnect physical length represents the largest length that the interconnect
        line can have in the design. This value is used to determine the maximum dimensions of interconnect lines
        for optimization purposes.
        The default is ``5.08 mm``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_maximum_length_value.setter
    def interconnect_maximum_length_value(self, interconnect_maximum_length_value_string): # -> None:
        ...
    
    @property
    def interconnect_line_width_value(self) -> str:
        """Interconnect conductor width value.

        The interconnect conductor width value represents the actual width of the interconnect line in the design.
        This value is crucial for determining the electrical characteristics of the interconnect, such as impedance,
        signal integrity, and potential signal loss. Accurate width measurements are essential for ensuring that the
        interconnect performs as expected in high-frequency and high-speed applications.
        The default is ``1.27 mm``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_line_width_value.setter
    def interconnect_line_width_value(self, interconnect_line_width_value_string): # -> None:
        ...
    
    @property
    def interconnect_minimum_width_value(self) -> str:
        """Minimum value of interconnect conductor width.

        The minimum value of the interconnect conductor width represents the smallest width that the interconnect
        line can have in the design. This value is used to determine the minimum dimensions of interconnect lines
        for optimization purposes.
        The default is ``635 um``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_minimum_width_value.setter
    def interconnect_minimum_width_value(self, interconnect_minimum_width_value_string): # -> None:
        ...
    
    @property
    def interconnect_maximum_width_value(self) -> str:
        """Maximum value of interconnect conductor width.

        The maximum value of the interconnect conductor width represents the largest width that the interconnect
        line can have in the design. This value is used to determine the maximum dimensions of interconnect lines
        for optimization purposes.
        The default is ``2.54 mm``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_maximum_width_value.setter
    def interconnect_maximum_width_value(self, interconnect_maximum_width_value_string): # -> None:
        ...
    
    @property
    def interconnect_inductor_tolerance_value(self) -> str:
        """Tolerance value of interconnect inductor in ``%``.

        The default is ``1``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_inductor_tolerance_value.setter
    def interconnect_inductor_tolerance_value(self, interconnect_inductor_tolerance_value_string): # -> None:
        ...
    
    @property
    def interconnect_capacitor_tolerance_value(self) -> str:
        """Tolerance value of interconnect capacitor in ``%``.

        The default is ``1``.

        Returns
        -------
        str
        """
        ...
    
    @interconnect_capacitor_tolerance_value.setter
    def interconnect_capacitor_tolerance_value(self, interconnect_capacitor_tolerance_value_string): # -> None:
        ...
    
    @property
    def interconnect_geometry_optimization_enabled(self) -> bool:
        """Flag indicating if the interconnect geometry optimization is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @interconnect_geometry_optimization_enabled.setter
    def interconnect_geometry_optimization_enabled(self, interconnect_geometry_optimization_enabled: bool): # -> None:
        ...
    
    def update_interconncet_parameters(self): # -> None:
        """Update interconnect geometry equations with entered and selected parameters"""
        ...
    
    def update_inductor_capacitor_tolerances(self): # -> None:
        """Update interconnect inductor and capacitor tolerances with entered values"""
        ...
    
    @property
    def substrate_type(self) -> SubstrateType:
        """Substrate type of the filter. The default is ``MICROSTRIP`` if not specified.

        The ``SubstrateType`` enum provides a list of all substrate types.

        Returns
        -------
        :enum:`SubstrateType`
        """
        ...
    
    @substrate_type.setter
    def substrate_type(self, substrate_type: SubstrateType): # -> None:
        ...
    
    @property
    def substrate_er(self) -> Union[SubstrateType, str]:
        """Substrate's relative permittivity ``Er``.

        The value can be either a string or an instance of the ``SubstrateEr`` enum.
        The default is ``9.8`` for ``SubstrateEr.ALUMINA``.

        Returns
        -------
        Union[SubstrateEr, str]

        """
        ...
    
    @substrate_er.setter
    def substrate_er(self, substrate_input): # -> None:
        ...
    
    @property
    def substrate_resistivity(self) -> Union[SubstrateResistivity, str]:
        """Substrate's resistivity.

        The value can be either a string or an instance of the ``SubstrateResistivity`` enum.
        The default is ``1.43`` for ``SubstrateResistivity.GOLD``.

        Returns
        -------
        Union[SubstrateResistivity, str]
        """
        ...
    
    @substrate_resistivity.setter
    def substrate_resistivity(self, substrate_input): # -> None:
        ...
    
    @property
    def substrate_loss_tangent(self) -> Union[SubstrateEr, str]:
        """Substrate's loss tangent.

        The value can be either a string or an instance of the ``SubstrateEr`` enum.
        The default is ``0.0005`` for ``SubstrateEr.ALUMINA``.

        Returns
        -------
        Union[SubstrateEr, str]
        """
        ...
    
    @substrate_loss_tangent.setter
    def substrate_loss_tangent(self, substrate_input): # -> None:
        ...
    
    @property
    def substrate_conductor_thickness(self) -> str:
        """Substrate's conductor thickness.

        The default is ``2.54 um``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_conductor_thickness.setter
    def substrate_conductor_thickness(self, substrate_conductor_thickness_string): # -> None:
        ...
    
    @property
    def substrate_dielectric_height(self) -> str:
        """Substrate's dielectric height.

        The default is ``1.27 mm``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_dielectric_height.setter
    def substrate_dielectric_height(self, substrate_dielectric_height_string): # -> None:
        ...
    
    @property
    def substrate_unbalanced_lower_dielectric_height(self) -> str:
        """Substrate's lower dielectric height for unbalanced stripline substrate type.

        The default is ``6.35 mm``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_unbalanced_lower_dielectric_height.setter
    def substrate_unbalanced_lower_dielectric_height(self, substrate_unbalanced_lower_dielectric_height_string): # -> None:
        ...
    
    @property
    def substrate_suspend_dielectric_height(self) -> str:
        """Substrate's suspend dielectric height above ground plane for suspend and inverted substrate types.

        The default is ``1.27 mm``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_suspend_dielectric_height.setter
    def substrate_suspend_dielectric_height(self, substrate_suspend_dielectric_height_string): # -> None:
        ...
    
    @property
    def substrate_cover_height(self) -> str:
        """Substrate's cover height for microstrip, suspend, and inverted substrate types.
        The default is ``6.35 mm``.

        Returns
        -------
        str
        """
        ...
    
    @substrate_cover_height.setter
    def substrate_cover_height(self, substrate_cover_height_string): # -> None:
        ...
    
    @property
    def substrate_unbalanced_stripline_enabled(self) -> bool:
        """Flag indicating if the substrate unbalanced stripline is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @substrate_unbalanced_stripline_enabled.setter
    def substrate_unbalanced_stripline_enabled(self, substrate_unbalanced_stripline_enabled: bool): # -> None:
        ...
    
    @property
    def substrate_cover_height_enabled(self) -> bool:
        """Flag indicating if the substrate cover height is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @substrate_cover_height_enabled.setter
    def substrate_cover_height_enabled(self, substrate_cover_height_enabled: bool): # -> None:
        ...
    
    def load_modelithics_models(self): # -> None:
        """Load ``Modelithics`` models from ``AEDT``."""
        ...
    
    @property
    def modelithics_include_interconnect_enabled(self) -> bool:
        """Flag indicating if the inclusion of interconnects is enabled for ``Modelithics`` export.

        Returns
        -------
        bool
        """
        ...
    
    @modelithics_include_interconnect_enabled.setter
    def modelithics_include_interconnect_enabled(self, modelithics_include_interconnect_enabled: bool): # -> None:
        ...
    
    @property
    def modelithics_inductor_list_count(self) -> int:
        """Total count of ``Modelithics`` inductor families that have been loaded into the current design.

        Returns
        -------
        int
        """
        ...
    
    def modelithics_inductor_list(self, row_index) -> str:
        """Get the name of the ``Modelithics`` inductor family model from the loaded list based
        on the specified index."""
        ...
    
    @property
    def modelithics_inductor_selection(self) -> str:
        """Selected ``Modelithics`` inductor family from the loaded list.

        The Modelithics inductor family selection allows you to choose a specific inductor model from the
        Modelithics library.

        Returns
        -------
        str
        """
        ...
    
    @modelithics_inductor_selection.setter
    def modelithics_inductor_selection(self, modelithics_inductor_selection_string): # -> None:
        ...
    
    @property
    def modelithics_inductor_family_list_count(self) -> int:
        """Total count of ``Modelithics`` family inductors added to the inductor family list.

        Returns
        -------
        int
        """
        ...
    
    def modelithics_inductor_family_list(self, index) -> str:
        """Get the name of ``Modelithics`` inductor family from the inductor family list based on the specified index.

        Parameters
        ----------
        index : int
            Index of the inductor family list.

        Returns
        -------
        str
        """
        ...
    
    def modelithics_inductor_add_family(self, modelithics_inductor) -> str:
        """Add a specified ``Modelithics`` inductor family to the inductor family list.

        Parameters
        ----------
        modelithics_inductor : str
            Name of the inductor family.
        """
        ...
    
    def modelithics_inductor_remove_family(self, modelithics_inductor) -> str:
        """Remove a specified ``Modelithics`` inductor family from the inductor family list.

        Parameters
        ----------
        modelithics_inductor : str
            Name of the inductor family.
        """
        ...
    
    @property
    def modelithics_capacitor_list_count(self) -> int:
        """Total count of ``Modelithics`` capacitor families that have been loaded into the current design.

        Returns
        -------
        int
        """
        ...
    
    def modelithics_capacitor_list(self, row_index) -> str:
        """Get the name of the ``Modelithics`` capacitor family model from the loaded list based on
        the specified index."""
        ...
    
    @property
    def modelithics_capacitor_selection(self) -> str:
        """Selected ``Modelithics`` capacitor family from the loaded list.

        The Modelithics capacitor family selection allows you to choose a specific capacitor model from the
        Modelithics library.

        Returns
        -------
        str
        """
        ...
    
    @modelithics_capacitor_selection.setter
    def modelithics_capacitor_selection(self, modelithics_capacitor_selection_string): # -> None:
        ...
    
    @property
    def modelithics_capacitor_family_list_count(self) -> int:
        """Total count of ``Modelithics`` family capacitors added to the capacitor family list.

        Returns
        -------
        int
        """
        ...
    
    def modelithics_capacitor_family_list(self, index) -> str:
        """Get the name of ``Modelithics`` capacitor family from the capacitor family list based on the specified index.

        Parameters
        ----------
        index : int
            Index of the capacitor family list.

        Returns
        -------
        str
        """
        ...
    
    def modelithics_capacitor_add_family(self, modelithics_capacitor) -> str:
        """Add a specified ``Modelithics`` capacitor family to the capacitor family list.

        Parameters
        ----------
        modelithics_capacitor : str
            Name of the capacitor family.
        """
        ...
    
    def modelithics_capacitor_remove_family(self, modelithics_capacitor) -> str:
        """Remove a specified ``Modelithics`` capacitor family from the capacitor family list.

        Parameters
        ----------
        modelithics_capacitor : str
            Name of the capacitor family.
        """
        ...
    
    @property
    def modelithics_resistor_list_count(self) -> int:
        """Total count of ``Modelithics`` resistor families that have been loaded into the current design.

        Returns
        -------
        int
        """
        ...
    
    def modelithics_resistor_list(self, row_index) -> str:
        """Get the name of the ``Modelithics`` resistor family model from the loaded list based on the
        specified index."""
        ...
    
    @property
    def modelithics_resistor_selection(self) -> str:
        """Selected ``Modelithics`` resistor family from the loaded list.

        The Modelithics resistor family selection allows you to choose a specific resistor model from the
        Modelithics library.

        Returns
        -------
        str
        """
        ...
    
    @modelithics_resistor_selection.setter
    def modelithics_resistor_selection(self, modelithics_resistor_selection_string): # -> None:
        ...
    
    @property
    def modelithics_resistor_family_list_count(self) -> int:
        """Total count of ``Modelithics`` family resistors added to the resistor family list.

        Returns
        -------
        int
        """
        ...
    
    def modelithics_resistor_family_list(self, index) -> str:
        """Get the name of ``Modelithics`` resistor family from the resistor family list based on
        the specified index.

        Parameters
        ----------
        index : int
            Index of the resistor family list.

        Returns
        -------
        str
        """
        ...
    
    def modelithics_resistor_add_family(self, modelithics_resistor) -> str:
        """Add a specified ``Modelithics`` resistor family to the resistor family list.

        Parameters
        ----------
        modelithics_resistor : str
            Name of the resistor family.
        """
        ...
    
    def modelithics_resistor_remove_family(self, modelithics_resistor) -> str:
        """Remove a specified ``Modelithics`` resistor family from the resistor family list.

        Parameters
        ----------
        modelithics_resistor : str
            Name of the resistor family.
        """
        ...
    
    @property
    def insert_circuit_design(self) -> bool:
        """Flag indicating if the filter is inserted as an ``AEDT Circuit Design``.

        Returns
        -------
        bool
        """
        ...
    
    @insert_circuit_design.setter
    def insert_circuit_design(self, insert_circuit_design: bool): # -> None:
        ...
    
    @property
    def insert_hfss_design(self) -> bool:
        """Flag indicating if the filter is inserted as an ``AEDT HFSS Design``.

        Returns
        -------
        bool
        """
        ...
    
    @insert_hfss_design.setter
    def insert_hfss_design(self, insert_hfss_design: bool): # -> None:
        ...
    
    @property
    def insert_hfss_3dl_design(self) -> bool:
        """Flag indicating if the filter is inserted as an ``AEDT HFSS 3D Layout Design``.

        Returns
        -------
        bool
        """
        ...
    
    @insert_hfss_3dl_design.setter
    def insert_hfss_3dl_design(self, insert_hfss_3dl_design: bool): # -> None:
        ...
    
    @property
    def full_parametrization_enabled(self) -> bool:
        """Flag indicating if the parameter equations are used to define layout geometries for
        tuning and optimizating purpose in ``HFSS``.

        Returns
        -------
        bool
        """
        ...
    
    @full_parametrization_enabled.setter
    def full_parametrization_enabled(self, full_parametrization_enabled: bool): # -> None:
        ...
    
    @property
    def ports_always_on_sides_enabled(self) -> bool:
        """Flag indicating if the ports are always placed on the side walls.

        Returns
        -------
        bool
        """
        ...
    
    @ports_always_on_sides_enabled.setter
    def ports_always_on_sides_enabled(self, ports_always_on_sides_enabled: bool): # -> None:
        ...
    
    @property
    def reverse_x_axis_enabled(self) -> bool:
        """Flag indicating if the layout is mirrored along the x-axis.

        Returns
        -------
        bool
        """
        ...
    
    @reverse_x_axis_enabled.setter
    def reverse_x_axis_enabled(self, reverse_x_axis_enabled: bool): # -> None:
        ...
    
    @property
    def reverse_y_axis_enabled(self) -> bool:
        """Flag indicating if the layout is mirrored along the y-axis.

        Returns
        -------
        bool
        """
        ...
    
    @reverse_y_axis_enabled.setter
    def reverse_y_axis_enabled(self, reverse_y_axis_enabled: bool): # -> None:
        ...
    
    @property
    def export_with_tuning_port_format_enabled(self) -> bool:
        """Flag indicating if the export with tuning port format is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @export_with_tuning_port_format_enabled.setter
    def export_with_tuning_port_format_enabled(self, export_with_tuning_port_format_enabled: bool): # -> None:
        ...
    
    @property
    def use_series_horizontal_ports_enabled(self) -> bool:
        """Flag indicating if  horizontal ports are used for series element only cases.

        Returns
        -------
        bool
        """
        ...
    
    @use_series_horizontal_ports_enabled.setter
    def use_series_horizontal_ports_enabled(self, use_series_horizontal_ports_enabled: bool): # -> None:
        ...
    
    def import_tuned_variables_port_tuning(self): # -> None:
        """Import tuned variables from the port tuning project."""
        ...
    
    def import_and_reexport_over_port_tuning(self): # -> None:
        """Import tuned variables and export back over the port tuning project."""
        ...
    
    def simulate_full_port_tuning(self): # -> None:
        """Simulate the port tuning project and the linked circuits schematic."""
        ...
    
    def simulate_tuning_circuit_port_tuning(self): # -> None:
        """Simulate only the linked circuits schematic of the port tuning project."""
        ...
    
    def optimize_port_tuning(self): # -> None:
        """Simulate the ``HFSS Design`` or ``HFSS 3D Layout Design`` of the port tuning project."""
        ...
    


