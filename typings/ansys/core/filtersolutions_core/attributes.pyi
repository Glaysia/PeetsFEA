"""
This type stub file was generated by pyright.
"""

from enum import Enum

class FilterType(Enum):
    """Provides an enum of filter types with associated mathematical formulations.

    **Attributes:**

    - GAUSSIAN: Represents a Gaussian filter.
    - BESSEL: Represents a Bessel filter.
    - BUTTERWORTH: Represents a Butterworth filter.
    - LEGENDRE: Represents a Legendre filter.
    - CHEBYSHEV_I: Represents a Chevyshev type I filter.
    - CHEBYSHEV_II: Represents a Chevyshev type II filter.
    - HOURGLASS: Represents an hourglass filter.
    - ELLIPTIC: Represents an elliptic filter.
    - DELAY: Represents a delay filter.
    - RAISED_COS: Represents a raised cosine filter.

    Custom and matched filter types are not available in this release.
    """
    GAUSSIAN = ...
    BESSEL = ...
    BUTTERWORTH = ...
    LEGENDRE = ...
    CHEBYSHEV_I = ...
    CHEBYSHEV_II = ...
    HOURGLASS = ...
    ELLIPTIC = ...
    DELAY = ...
    RAISED_COS = ...


class FilterClass(Enum):
    """Provides an enum of filter types for single-band and multiple-bands filters.

    **Attributes:**

    - LOW_PASS: Represents a low-pass filter.
    - HIGH_PASS: Represents a high-pass filter.
    - DIPLEXER_1: Represents a first group of diplexer filter.
    - BAND_PASS: Represents a band-pass filter.
    - BAND_STOP: Represents a band-stop filter.
    - DIPLEXER_2: Represents a second group of diplexer filter.
    - LOW_BAND: Represents a combined low-pass and multi-band filter.
    - BAND_HIGH: Represents a combined high-pass and multi-band filter.
    - BAND_BAND: Represents a multi-band pass filter.
    - STOP_STOP: Represents a multi-band stop filter.
    """
    LOW_PASS = ...
    HIGH_PASS = ...
    DIPLEXER_1 = ...
    BAND_PASS = ...
    BAND_STOP = ...
    DIPLEXER_2 = ...
    LOW_BAND = ...
    BAND_HIGH = ...
    BAND_BAND = ...
    STOP_STOP = ...


class DiplexerType(Enum):
    """Provides an enum of diplexer and triplexer types.

    **Attributes:**

    - HI_LO: Represents a high-pass, low-pass diplexer type.
    - BP_1: Represents a band-pass, band-pass diplexer type.
    - BP_2: Represents a band-pass, band-pass diplexer type.
    - BP_BS: Represents a band-pass, band-stop diplexer type.
    - TRIPLEXER_1: Represents a low-pass, band-pass, and high-pass triplexer type.
    - TRIPLEXER_2: Represents a low-pass, band-pass, and high-pass triplexer type.
    """
    HI_LO = ...
    BP_1 = ...
    BP_2 = ...
    BP_BS = ...
    TRIPLEXER_1 = ...
    TRIPLEXER_2 = ...


class RaisedCosineAlphaPercentage(Enum):
    """Provides an enum of alpha percentage for raised, root raised, or data transmission filters.

    **Attributes:**

    - FIFTEEN: 15%
    - TWENTY: 20%
    - TWENTY_FIVE: 25%
    - THIRTY: 30%
    - THIRTY_FIVE: 35%
    - FORTY: 40%
    - FORTY_FIVE: 45%
    - FIFTY: 50%
    - SEVENTY_FIVE: 75%
    - HUNDRED: 100%
    """
    FIFTEEN = ...
    FORTY = ...
    TWENTY = ...
    FORTY_FIVE = ...
    TWENTY_FIVE = ...
    FIFTY = ...
    THIRTY = ...
    SEVENTY_FIVE = ...
    THIRTY_FIVE = ...
    HUNDRED = ...


class BesselRipplePercentage(Enum):
    """Provides an enum of peak-to-peak group delay ripple magnitudes as percents of averages for Bessel filters.

    **Attributes:**

    - ZERO: 0%
    - HALF: 0.5%
    - ONE: 1%
    - TWO: 2%
    - FIVE: 5%
    - TEN: 10%
    """
    ZERO = ...
    HALF = ...
    ONE = ...
    TWO = ...
    FIVE = ...
    TEN = ...


class GaussianTransition(Enum):
    """Provides an enum of transition attenuations in dB for Gaussian filters to improve group delay response.

    **Attributes:**

    - TRANSITION_NONE: 0dB
    - TRANSITION_3_DB: 3dB
    - TRANSITION_6_DB: 6dB
    - TRANSITION_9_DB: 9dB
    - TRANSITION_12_DB: 12dB
    - TRANSITION_15_DB: 15dB
    """
    TRANSITION_NONE = ...
    TRANSITION_3_DB = ...
    TRANSITION_6_DB = ...
    TRANSITION_9_DB = ...
    TRANSITION_12_DB = ...
    TRANSITION_15_DB = ...


class GaussianBesselReflection(Enum):
    """Provides an enum of synthesis methods for Gaussian and Bessel filters.

    **Attributes:**

    - OPTION_1: The first method for filter synthesis.
    - OPTION_2: The second method for filter synthesis.
    - OPTION_3: The third method for filter synthesis.
    """
    OPTION_1 = ...
    OPTION_2 = ...
    OPTION_3 = ...


class RippleConstrictionBandSelect(Enum):
    """Provides an enum of the bands to apply constrict the ripple parameter.

    **Attributes:**

    - STOP: Stop band
    - PASS: Pass band
    - BOTH: Stop and pass bands
    """
    STOP = ...
    PASS = ...
    BOTH = ...


class SinglePointRippleInfZeros(Enum):
    """Provides an enum for either one or three non-infinite zeros at the single frequency point to confine the ripple.

    **Attributes:**

    - RIPPLE_INF_ZEROS_1: One zero
    - RIPPLE_INF_ZEROS_3: Three zeros
    """
    RIPPLE_INF_ZEROS_1 = ...
    RIPPLE_INF_ZEROS_3 = ...


class PassbandDefinition(Enum):
    """Provides an enum to get either center frequency and bandwidth or corner frequencies.

    **Attributes:**

    - CENTER_FREQUENCY: Define the passband by the center frequency and bandwidth.
    - CORNER_FREQUENCIES: Define the passband by the corner frequencies.
    """
    CENTER_FREQUENCY = ...
    CORNER_FREQUENCIES = ...


class StopbandDefinition(Enum):
    """Provides an enum for comparing the stop band parameter to the pass band parameter.

    **Attributes:**

    - RATIO: Ratio between the stop band and pass band frequencies.
    - FREQUENCY: Explicit frequency.
    - ATTENUATION_DB: Attenuation in decibels.
    """
    RATIO = ...
    FREQUENCY = ...
    ATTENUATION_DB = ...


class Attributes:
    """Defines attributes and parameters of filters.

    This class lets you construct all the necessary attributes for the ``FilterDesign`` class.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def filter_type(self) -> FilterType:
        """Type (mathematical formulation) of the filter. The default is ``BUTTERWORTH``.

        The ``FilterType`` enum provides a list of all types.

        Returns
        -------
        :enum:`FilterType`
        """
        ...
    
    @filter_type.setter
    def filter_type(self, filter_type: FilterType): # -> None:
        ...
    
    @property
    def filter_class(self) -> FilterClass:
        """Class (band definition) of the filter. The default is ``LOW_PASS``.

        The ``FilterClass`` enum provides a list of all classes.

        Returns
        -------
        :enum:`FilterClass`
        """
        ...
    
    @filter_class.setter
    def filter_class(self, filter_class: FilterClass): # -> None:
        ...
    
    @property
    def diplexer_type(self) -> DiplexerType:
        """Type of diplexer topology. This property is only applicable to lumped filters.

        - The default is ``HI_LO`` for the ``DIPLEXER_1`` filter class.

        - The default is ``BP_BS`` for the ``DIPLEXER_2`` filter class.

        The ``DiplexerType`` enum provides a full list of diplexer types.

        Returns
        -------
        :enum:`DiplexerType`
        """
        ...
    
    @diplexer_type.setter
    def diplexer_type(self, diplexer_type: DiplexerType): # -> None:
        ...
    
    @property
    def filter_multiple_bands_enabled(self) -> bool:
        """Flag indicating if the multiple bands table is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @filter_multiple_bands_enabled.setter
    def filter_multiple_bands_enabled(self, filter_multiple_bands_enabled: bool): # -> None:
        ...
    
    @property
    def filter_multiple_bands_low_pass_frequency(self) -> str:
        """Multiple bands low-pass frequency of combined low-pass and band-pass filters. The default is ``1GHz``.

        Returns
        -------
        str
        """
        ...
    
    @filter_multiple_bands_low_pass_frequency.setter
    def filter_multiple_bands_low_pass_frequency(self, filter_multiple_bands_low_pass_freq_string): # -> None:
        ...
    
    @property
    def filter_multiple_bands_high_pass_frequency(self) -> str:
        """Multiple bands high-pass frequency of combined high-pass and band-pass filters. The default is ``1GHz``.

        Returns
        -------
        str
        """
        ...
    
    @filter_multiple_bands_high_pass_frequency.setter
    def filter_multiple_bands_high_pass_frequency(self, filter_multiple_bands_high_pass_freq_string): # -> None:
        ...
    
    @property
    def filter_order(self) -> int:
        """Order of the filter. The default is ``5``.

        Returns
        -------
        int
        """
        ...
    
    @filter_order.setter
    def filter_order(self, filter_order: int): # -> None:
        ...
    
    @property
    def minimum_order_stop_band_attenuation_db(self) -> str:
        """Filter stop band attenuation in dB for calculation of the filter minimum order.

        The default is ``50``.

        Returns
        -------
        str
        """
        ...
    
    @minimum_order_stop_band_attenuation_db.setter
    def minimum_order_stop_band_attenuation_db(self, minimum_order_stop_band_attenuation_db_string): # -> None:
        ...
    
    @property
    def minimum_order_stop_band_frequency(self) -> str:
        """Filter stop band frequency for calculation of the filter minimum order.

        The default is ``10 GHz``.

        Returns
        -------
        str
        """
        ...
    
    @minimum_order_stop_band_frequency.setter
    def minimum_order_stop_band_frequency(self, minimum_order_stop_band_frequency_string): # -> None:
        ...
    
    @property
    def minimum_order_group_delay_error_percent(self) -> str:
        """Filter maximum group delay in % for calculation of the filter minimum order.

        The default is ``5``.

        Returns
        -------
        str
        """
        ...
    
    @minimum_order_group_delay_error_percent.setter
    def minimum_order_group_delay_error_percent(self, minimum_order_group_delay_error_percent): # -> None:
        ...
    
    @property
    def minimum_order_group_delay_cutoff(self) -> str:
        """Filter group delay cutoff frequency for calculation of the filter minimum order.

        The default is ``10 GHz``.

        Returns
        -------
        str
        """
        ...
    
    @minimum_order_group_delay_cutoff.setter
    def minimum_order_group_delay_cutoff(self, minimum_order_group_delay_cutoff_string): # -> None:
        ...
    
    @property
    def ideal_minimum_order(self) -> int:
        """Filter minimum order for the defined stop band frequency and attenuation parameters.

        Returns
        -------
        int
        """
        ...
    
    @property
    def delay_time(self) -> str:
        """Filter delay time.

        The default is ``1 ns``.

        Returns
        -------
        str
        """
        ...
    
    @delay_time.setter
    def delay_time(self, delay_time_string): # -> None:
        ...
    
    @property
    def pass_band_definition(self) -> PassbandDefinition:
        """Pass band frequency entry options.

        The default is ``CENTER_FREQUENCY``.

        Returns
        -------
        :enum:`PassbandDefinition`
        """
        ...
    
    @pass_band_definition.setter
    def pass_band_definition(self, column: PassbandDefinition): # -> None:
        ...
    
    @property
    def pass_band_center_frequency(self) -> str:
        """Filter pass band or center frequency.

        The default is ``1 GHz``.

        Returns
        -------
        str
        """
        ...
    
    @pass_band_center_frequency.setter
    def pass_band_center_frequency(self, center_freq_string): # -> None:
        ...
    
    @property
    def pass_band_width_frequency(self) -> str:
        """Pass band width frequency for band pass or band stop filters.
        The default is ``200 MHz``.

        Returns
        -------
        str
        """
        ...
    
    @pass_band_width_frequency.setter
    def pass_band_width_frequency(self, pass_band_freq_string): # -> None:
        ...
    
    @property
    def lower_frequency(self) -> str:
        """Filter lower corner frequency.

        The default is ``905 MHz``.

        Returns
        -------
        str
        """
        ...
    
    @lower_frequency.setter
    def lower_frequency(self, lower_freq_string): # -> None:
        ...
    
    @property
    def upper_frequency(self) -> str:
        """Filter upper corner frequency.

        The default is ``1.105 MHz``.

        Returns
        -------
        str
        """
        ...
    
    @upper_frequency.setter
    def upper_frequency(self, upper_freq_string): # -> None:
        ...
    
    @property
    def diplexer_inner_band_width(self) -> str:
        """Diplexer inner band width for ``BP1`` and ``Triplexer1`` diplexer types.

        The default is ``200 MHz``.

        Returns
        -------
        str
        """
        ...
    
    @diplexer_inner_band_width.setter
    def diplexer_inner_band_width(self, diplexer_inner_band_width_string): # -> None:
        ...
    
    @property
    def diplexer_outer_band_width(self) -> str:
        """Diplexer outer band width for ``BP1`` and ``Triplexer1`` diplexer types.

        The default is ``2 GHz``.

        Returns
        -------
        str
        """
        ...
    
    @diplexer_outer_band_width.setter
    def diplexer_outer_band_width(self, diplexer_outer_band_width_string): # -> None:
        ...
    
    @property
    def diplexer_lower_center_frequency(self) -> str:
        """Diplexer lower center frequency for ``BP2`` and ``Triplexer2`` diplexer types.

        The default is ``500 MHz``.

        Returns
        -------
        str
        """
        ...
    
    @diplexer_lower_center_frequency.setter
    def diplexer_lower_center_frequency(self, diplexer_lower_center_frequency_string): # -> None:
        ...
    
    @property
    def diplexer_upper_center_frequency(self) -> str:
        """Diplexer upper center frequency for ``BP2`` and ``Triplexer2`` diplexer types.

        The default is ``2 GHz``.

        Returns
        -------
        str
        """
        ...
    
    @diplexer_upper_center_frequency.setter
    def diplexer_upper_center_frequency(self, diplexer_upper_center_frequency_string): # -> None:
        ...
    
    @property
    def diplexer_lower_band_width(self) -> str:
        """Diplexer lower band width for ``BP2`` and ``Triplexer2`` diplexer types.

        The default is ``500 MHz``.

        Returns
        -------
        str
        """
        ...
    
    @diplexer_lower_band_width.setter
    def diplexer_lower_band_width(self, diplexer_lower_band_width_string): # -> None:
        ...
    
    @property
    def diplexer_upper_band_width(self) -> str:
        """Diplexer upper band width for ``BP2`` and ``Triplexer2`` diplexer types.

        The default is ``2 GHz``.

        Returns
        -------
        str
        """
        ...
    
    @diplexer_upper_band_width.setter
    def diplexer_upper_band_width(self, diplexer_upper_band_width_string): # -> None:
        ...
    
    @property
    def stop_band_definition(self) -> StopbandDefinition:
        """Stop band parameter entry option.

        The default is ``RATIO``.

        Returns
        -------
        :enum:`StopbandDefinition`
        """
        ...
    
    @stop_band_definition.setter
    def stop_band_definition(self, column: StopbandDefinition): # -> None:
        ...
    
    @property
    def stop_band_ratio(self) -> str:
        """Filter stop band ratio.

        The default is ``1.2``.

        Returns
        -------
        str
        """
        ...
    
    @stop_band_ratio.setter
    def stop_band_ratio(self, stop_band_ratio_string): # -> None:
        ...
    
    @property
    def stop_band_frequency(self) -> str:
        """Filter stop band frequency.

        The default is ``1.2 GHz``.

        Returns
        -------
        str
        """
        ...
    
    @stop_band_frequency.setter
    def stop_band_frequency(self, stop_band_frequency_string): # -> None:
        ...
    
    @property
    def stop_band_attenuation_db(self) -> str:
        """Filter stop band attenuation in dB.

        The default is ``60 dB``.

        Returns
        -------
        str
        """
        ...
    
    @stop_band_attenuation_db.setter
    def stop_band_attenuation_db(self, stop_band_attenuation_db_string): # -> None:
        ...
    
    @property
    def standard_pass_band_attenuation(self) -> bool:
        """Flag indicating if the standard cut is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @standard_pass_band_attenuation.setter
    def standard_pass_band_attenuation(self, standard_pass_band_attenuation: bool): # -> None:
        ...
    
    @property
    def root_raised_cosine(self) -> bool:
        """Flag indicating if the root raised cosine is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @root_raised_cosine.setter
    def root_raised_cosine(self, root_raised_cosine: bool): # -> None:
        ...
    
    @property
    def data_transmission_filter(self) -> bool:
        """Flag indicating if the data transmission filter is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @data_transmission_filter.setter
    def data_transmission_filter(self, data_transmission_filter: bool): # -> None:
        ...
    
    @property
    def raised_cosine_alpha_percentage(self) -> RaisedCosineAlphaPercentage:
        """Raised cosine alpha percentage.

        The default is ''FORTY''.

        Returns
        -------
        :enum:`RaisedCosineAlphaPercentage`
        """
        ...
    
    @raised_cosine_alpha_percentage.setter
    def raised_cosine_alpha_percentage(self, column: RaisedCosineAlphaPercentage): # -> None:
        ...
    
    @property
    def equiripple_delay_enabled(self) -> bool:
        """Flag indicating if the equiripple delay is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @equiripple_delay_enabled.setter
    def equiripple_delay_enabled(self, equiripple_delay_enabled: bool): # -> None:
        ...
    
    @property
    def group_delay_ripple_period(self) -> str:
        """Filter approximate normalized group delay ripple period.

        The default is ''2''.

        Returns
        -------
        str
        """
        ...
    
    @group_delay_ripple_period.setter
    def group_delay_ripple_period(self, group_delay_ripple_period_string): # -> None:
        ...
    
    @property
    def normalized_group_delay_percentage(self) -> int:
        """Normalized group delay percentage.

        The default is ''0''.

        Returns
        -------
        int
        """
        ...
    
    @normalized_group_delay_percentage.setter
    def normalized_group_delay_percentage(self, column: BesselRipplePercentage): # -> None:
        ...
    
    @property
    def standard_pass_band_attenuation_value_db(self) -> str:
        """Filter cut off attenuation in dB.

        The default is ''3.01 dB''.

        Returns
        -------
        str
        """
        ...
    
    @standard_pass_band_attenuation_value_db.setter
    def standard_pass_band_attenuation_value_db(self, standard_pass_band_attenuation_value_db_string): # -> None:
        ...
    
    @property
    def bessel_normalized_delay_enabled(self) -> bool:
        """Flag indicating if the normalized delay is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @bessel_normalized_delay_enabled.setter
    def bessel_normalized_delay_enabled(self, bessel_normalized_delay_enabled: bool): # -> None:
        ...
    
    @property
    def bessel_normalized_delay_period(self) -> str:
        """Bessel filter normalized delay period.

        The default is ''2''.

        Returns
        -------
        str
        """
        ...
    
    @bessel_normalized_delay_period.setter
    def bessel_normalized_delay_period(self, bessel_normalized_delay_period_string): # -> None:
        ...
    
    @property
    def bessel_normalized_delay_percentage(self) -> int:
        """Bessel filter ripple percentage.

        The default is ''0''.

        Returns
        -------
        int
        """
        ...
    
    @bessel_normalized_delay_percentage.setter
    def bessel_normalized_delay_percentage(self, column: BesselRipplePercentage): # -> None:
        ...
    
    @property
    def pass_band_ripple(self) -> str:
        """Filter pass band ripple in dB.

        The default is ''0.05 dB''.

        Returns
        -------
        str
        """
        ...
    
    @pass_band_ripple.setter
    def pass_band_ripple(self, pass_band_ripple_string): # -> None:
        ...
    
    @property
    def arith_symmetry(self) -> bool:
        """Flag indicating if the arithmetic symmetry is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @arith_symmetry.setter
    def arith_symmetry(self, arith_symmetry: bool): # -> None:
        ...
    
    @property
    def asymmetric(self) -> bool:
        """Flag indicating if the asymmetric is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @asymmetric.setter
    def asymmetric(self, asymmetric: bool): # -> None:
        ...
    
    @property
    def asymmetric_low_order(self) -> int:
        """Order for low side of an asymmetric filter.

        The default is ''5''.

        Returns
        -------
        int
        """
        ...
    
    @asymmetric_low_order.setter
    def asymmetric_low_order(self, asymmetric_low_order: int): # -> None:
        ...
    
    @property
    def asymmetric_high_order(self) -> int:
        """Order for high side of an asymmetric filter.

        The default is ''5''.

        Returns
        -------
        int
        """
        ...
    
    @asymmetric_high_order.setter
    def asymmetric_high_order(self, asymmetric_high_order: int): # -> None:
        ...
    
    @property
    def asymmetric_low_stop_band_ratio(self) -> str:
        """Stop-band ratio for low side of an asymmetric filter.

        The default is ''1.2''.

        Returns
        -------
        str
        """
        ...
    
    @asymmetric_low_stop_band_ratio.setter
    def asymmetric_low_stop_band_ratio(self, asymmetric_low_stop_band_ratio_string): # -> None:
        ...
    
    @property
    def asymmetric_high_stop_band_ratio(self) -> str:
        """Stop-band ratio for high side of an asymmetric filter.

        The default is ''1.2''.

        Returns
        -------
        str
        """
        ...
    
    @asymmetric_high_stop_band_ratio.setter
    def asymmetric_high_stop_band_ratio(self, asymmetric_high_stop_band_ratio_string): # -> None:
        ...
    
    @property
    def asymmetric_low_stop_band_attenuation_db(self) -> str:
        """Stop-band attenuation for low side of an asymmetric filter.

        The default is ''60 dB''.

        Returns
        -------
        str
        """
        ...
    
    @asymmetric_low_stop_band_attenuation_db.setter
    def asymmetric_low_stop_band_attenuation_db(self, asymmetric_low_stop_band_attenuation_db_string): # -> None:
        ...
    
    @property
    def asymmetric_high_stop_band_attenuation_db(self) -> str:
        """Stop-band attenuation for high side of an asymmetric filter.

        The default is ''60 dB''.

        Returns
        -------
        str
        """
        ...
    
    @asymmetric_high_stop_band_attenuation_db.setter
    def asymmetric_high_stop_band_attenuation_db(self, asymmetric_high_stop_band_attenuation_db_string): # -> None:
        ...
    
    @property
    def gaussian_transition(self) -> GaussianTransition:
        """Gaussian filter transition option.

        The default is ''TRANSITION_NONE''.

        Returns
        -------
        :enum:`GaussianTransition`
        """
        ...
    
    @gaussian_transition.setter
    def gaussian_transition(self, gaussian_transition: GaussianTransition): # -> None:
        ...
    
    @property
    def gaussian_bessel_reflection(self) -> GaussianBesselReflection:
        """Gaussian or Bessel filter reflection option.
        The default is ''OPTION_1''.

        Returns
        -------
        :enum:`GaussianBesselReflection`
        """
        ...
    
    @gaussian_bessel_reflection.setter
    def gaussian_bessel_reflection(self, column: GaussianBesselReflection): # -> None:
        ...
    
    @property
    def even_order(self) -> bool:
        """Flag indicating if the even order mode for a filter with even orders is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @even_order.setter
    def even_order(self, even_order: bool): # -> None:
        ...
    
    @property
    def even_order_refl_zero(self) -> bool:
        """Flag indicating if the even order reflection zeros translation to 0 is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @even_order_refl_zero.setter
    def even_order_refl_zero(self, even_order_refl_zero: bool): # -> None:
        ...
    
    @property
    def even_order_trn_zero(self) -> bool:
        """Flag indicating if the even order reflection zeros translation to infinite is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @even_order_trn_zero.setter
    def even_order_trn_zero(self, even_order_trn_zero: bool): # -> None:
        ...
    
    @property
    def constrict_ripple(self) -> bool:
        """Flag indicating if the equiripple constriction is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @constrict_ripple.setter
    def constrict_ripple(self, constrict_ripple: bool): # -> None:
        ...
    
    @property
    def single_point_ripple(self) -> bool:
        """Flag indicating if the ripple confinement to a single frequency point is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @single_point_ripple.setter
    def single_point_ripple(self, single_point_ripple: bool): # -> None:
        ...
    
    @property
    def half_band_ripple(self) -> bool:
        """Flag indicating if the ripple with half of the zeros in the given band is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @half_band_ripple.setter
    def half_band_ripple(self, half_band_ripple: bool): # -> None:
        ...
    
    @property
    def constrict_ripple_percent(self) -> str:
        """Filter ripple constriction percentage.

        The default is ''50%''.

        Returns
        -------
        str
        """
        ...
    
    @constrict_ripple_percent.setter
    def constrict_ripple_percent(self, constrict_ripple_percent_string): # -> None:
        ...
    
    @property
    def ripple_constriction_band(self) -> RippleConstrictionBandSelect:
        """Filter ripple constriction band option.

        The default is ''STOP''.

        Returns
        -------
        :enum:`RippleConstrictionBandSelect`
        """
        ...
    
    @ripple_constriction_band.setter
    def ripple_constriction_band(self, ripple_constriction_band: RippleConstrictionBandSelect): # -> None:
        ...
    
    @property
    def single_point_ripple_inf_zeros(self) -> SinglePointRippleInfZeros:
        """Filter number of single point ripple infinite zeros.

        The default is ''RIPPLE_INF_ZEROS_1''.

        Returns
        -------
        :enum:`SinglePointRippleInfZeros`
        """
        ...
    
    @single_point_ripple_inf_zeros.setter
    def single_point_ripple_inf_zeros(self, single_point_ripple_inf_zeros: SinglePointRippleInfZeros): # -> None:
        ...
    
    @property
    def delay_equalizer(self) -> bool:
        """Flag indicating if the delay equalizer is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @delay_equalizer.setter
    def delay_equalizer(self, delay_equalizer: bool): # -> None:
        ...
    
    @property
    def delay_equalizer_order(self) -> int:
        """Filter delay equalizer order.

        The default is ''2''.

        Returns
        -------
        int
        """
        ...
    
    @delay_equalizer_order.setter
    def delay_equalizer_order(self, delay_equalizer_order: int): # -> None:
        ...
    
    @property
    def standard_delay_equ_pass_band_attenuation(self) -> bool:
        """Flag indicating if the standard delay equalizer attenuation is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @standard_delay_equ_pass_band_attenuation.setter
    def standard_delay_equ_pass_band_attenuation(self, standard_delay_equ_pass_band_attenuation: bool): # -> None:
        ...
    
    @property
    def standard_delay_equ_pass_band_attenuation_value_db(self) -> str:
        """Filter standard delay equalizer cut off attenuation in dB.

        The default is ''3.01 dB''.

        Returns
        -------
        str
        """
        ...
    
    @standard_delay_equ_pass_band_attenuation_value_db.setter
    def standard_delay_equ_pass_band_attenuation_value_db(self, standard_delay_equ_pass_band_attenuation_value_db_string): # -> None:
        ...
    


