"""
This type stub file was generated by pyright.
"""

from enum import Enum

class TableFormat(Enum):
    """Enumeration of transmission zeros table.

    **Attributes:**

    - RATIO: Represents transmission zeros ratio.
    - BANDWIDTH: Represents transmission zeros bandwidth.
    """
    RATIO = ...
    BANDWIDTH = ...


class TransmissionZeros:
    """Manipulates access to ratio and bandwidth entries in the tranmsission zeros table.

    This class lets you to enter, edit, or remove ratio and bandwidth entries
    in the tranmsission zeros table.
    The table includes the ratio or bandwidth and the position of the element creating
    the transmission zero in the associated circuit.
    The position of the transmission zero is the position of the element in
    the associated circuit that creates the transmission zero.
    The position is defined automatically if no value is provided.
    """
    def __init__(self, table_format) -> None:
        ...
    
    def table_format_to_bool(self): # -> bool:
        """Check if the entry format of the transmission zeros tables is ratio.
        If ``False``, the entry format is bandwidth.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def row_count(self) -> int:
        """Number of transmission zeros in the transmission zeros table.

        The default is ``2``.

        Returns
        -------
        int
        """
        ...
    
    def row(self, row_index): # -> tuple[Any, Any]:
        """Get the transmission zero ratio or bandwidth and the position of the element
        causing the transmission zero from a row in the transmission zeros table.

        Parameters
        ----------
        row_index: int
            Index of the row. Valid values range from ``0`` to ``9``, inclusive.

        Returns
        -------
        tuple
            The tuple contains two strings.The first is the transmission zero ratio or bandwidth value,
            and the second is the position of the element causing the transmission zero.
        """
        ...
    
    def update_row(self, row_index, zero=..., position=...): # -> None:
        """Update the transmission zero ratio or bandwidth and its position for a row in the transmission zeros table.

        Parameters
        ----------
        row_index: int
            Index of the row. Valid values range from ``0`` to ``9``, inclusive.
        zero: str, optional
            New transmission zero ratio or bandwidth value to set.
            If no value is specified, the value remains unchanged.
        position: str, optional
            New position of the element causing the transmission zero in the circuit.
            If no value is specified, the value remains unchanged.
        """
        ...
    
    def append_row(self, zero=..., position=...): # -> None:
        """Append a new row that includes the ratio or bandwidth and position.

        Parameters
        ----------
        zero: str
            Transmission zero ratio or bandwidth value.
        position: str
            Position of the element creating transmission zero in the associated circuit.
        """
        ...
    
    def insert_row(self, row_index, zero=..., position=...): # -> None:
        """Insert a new row that includes the ratio or bandwidth and the position.

        Parameters
        ----------
        row_index: int
            Index for the new row in the transmission zeros table. Valid values range from ``0`` to ``9``, inclusive.
        zero: str
            Transmission zero ratio or bandwidth value.
        position: str
            Position of the element creating transmission zero in the associated circuit.
        """
        ...
    
    def remove_row(self, row_index): # -> None:
        """Remove a row, including the ratio or bandwidth and the position.

        Parameters
        ----------
        row_index: int
            Row index in the transmission zeros table. Valid values range from ``0`` to ``9``, inclusive.
        """
        ...
    
    def clear_table(self): # -> None:
        """Clear all entries in the transmission zeros table."""
        ...
    
    def restore_default_positions(self): # -> None:
        """Restore default positions of transmissison zeros."""
        ...
    


