"""
This type stub file was generated by pyright.
"""

from enum import Enum

class ComplexTerminationDefinition(Enum):
    """Selects type of complex presentation.

    **Attributes:**

    - POLAR: Represents polar definition.
    - CARTESIAN: Represents Cartesian definition.
    - PARALLEL: Represents parallel definition with real entry parallel to imaginary entry.
    - REAL: Represents only real impedance definition.
    """
    POLAR = ...
    CARTESIAN = ...
    PARALLEL = ...
    REAL = ...


class ComplexReactanceType(Enum):
    """Selects type of complex impedance as reactance, equivalent inductance, or equivalent capacitance.

    **Attributes:**

    - REAC: Represents pure reactance of complex impedance.
    - IND: Represents equivalent inductance in henries.
    - CAP: Represents equivalent capacitance in farads.
    """
    REAC = ...
    IND = ...
    CAP = ...


class TerminationType(Enum):
    """Selects either source or load complex impedance table.

    **Attributes:**

    - SOURCE: Represents source impedenace table.
    - LOAD: Represents load impedenace table.
    """
    SOURCE = ...
    LOAD = ...


class LumpedTerminationImpedance:
    """Manipulates access to the entries of source and load complex impedance table.

    This class allows you to enter, edit, or remove the entries of source and load complex impedance table.
    """
    def __init__(self, table_type) -> None:
        ...
    
    def table_type_to_bool(self): # -> bool | None:
        """Set a flag to recognize source and load complex table.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def row_count(self) -> int:
        """Count of the accumulated complex impedances in the complex impedances's table.

        The default is ``3``.

        Returns
        -------
        int
        """
        ...
    
    def row(self, row_index): # -> tuple[Any, Any, Any]:
        """Get frequency and complex impedance values from a row in the complex impedance table.

        Parameters
        ----------
        row_index: int
            Row index on complex impedance table, starting at ``0`` and with a maximum value of ``149``.

        Returns
        -------
        tuple
            The tuple contains three strings. The first is the frequency value,
            the second is the real part of the complex impedance,
            and the third is the imaginary part of the complex impedance.
        """
        ...
    
    def update_row(self, row_index, frequency=..., real=..., imag=...): # -> None:
        """Update frequency and complex impedance at a specified index in the complex impedance table.

        Parameters
        ----------
        row_index: int
            Row index on complex impedance table, starting at ``0`` and with a maximum value of ``149``.
        frequency: str, optional
            The frequency value to update. If not specified, it remains unchanged.
        real: str, optional
            The real part of the complex impedance to update. If not specified, it remains unchanged.
        imag: str, optional
            The imaginary part of the complex impedance to update. If not specified, it remains unchanged.
        """
        ...
    
    def append_row(self, frequency=..., real=..., imag=...): # -> None:
        """Append frequency and complex impedance values to the last row of
        both the source and load complex impedance table.


        Parameters
        ----------
        frequency: str
            The frequency value to append.
        real: str
            The real part of the complex impedance to append.
        imag: str
            The imaginary part of the complex impedance to append.
        """
        ...
    
    def insert_row(self, row_index, frequency=..., real=..., imag=...): # -> None:
        """Insert frequency and complex impedance values at a specified index in the complex impedance table.

        Parameters
        ----------
        row_index : int
            Row index in the complex impedance table, starting at ``0`` and with a maximum value of ``149``.
        frequency : str
            The frequency value to insert.
        real : str
            The real part of the complex impedance to insert.
        imag : str
            The imaginary part of the complex impedance to insert.
        """
        ...
    
    def remove_row(self, row_index): # -> None:
        """Remove frequency and complex impedance at a specified index from the complex impedance table.

        Parameters
        ----------
        row_index : int
            Row index in the complex impedance table, starting at ``0`` and with a maximum value of ``149``.
        """
        ...
    
    @property
    def complex_definition(self) -> ComplexTerminationDefinition:
        """Definition type of complex impedance in the complex impedance table.
        The default is ``Cartesian``.

        Returns
        -------
        :enum:`ComplexTerminationDefinition`
        """
        ...
    
    @complex_definition.setter
    def complex_definition(self, complex_definition: ComplexTerminationDefinition): # -> None:
        ...
    
    @property
    def reactance_type(self) -> ComplexReactanceType:
        """Reactance type of complex impedance in the complex impedance table.

        The default is ``reactance``.

        Returns
        -------
        :enum:`ComplexReactanceType`
        """
        ...
    
    @reactance_type.setter
    def reactance_type(self, reactance_type: ComplexReactanceType): # -> None:
        ...
    
    @property
    def element_tune_enabled(self) -> bool:
        """Flag indicating if the element tune is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @element_tune_enabled.setter
    def element_tune_enabled(self, element_tune_enabled): # -> None:
        ...
    
    @property
    def compensation_enabled(self) -> bool:
        """Flag indicating if the impedance compensation is enabled.

        Returns
        -------
        bool
        """
        ...
    
    @compensation_enabled.setter
    def compensation_enabled(self, compensation_enabled: bool): # -> None:
        ...
    
    @property
    def compensation_order(self) -> int:
        """Order of impedance compensation.

        The default is` ``2``.

        Returns
        -------
        int
        """
        ...
    
    @compensation_order.setter
    def compensation_order(self, compensation_order: int): # -> None:
        ...
    


