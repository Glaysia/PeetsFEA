"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Union
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.internal.checks import min_aedt_version

"""This module contains the ``Desktop`` class.

This module is used to initialize AEDT and the message manager for managing AEDT.
You can initialize this module before launching an app or
have the app automatically initialize it to the latest installed AEDT version.
"""
pathname = ...
pyaedtversion = ...
modules = ...
def grpc_server_on(channel, timeout_sec=...) -> bool:
    ...

@pyaedt_function_handler()
def launch_aedt(full_path: Union[str, Path], non_graphical: bool, port: int, student_version: bool, first_run: bool = ...): # -> tuple[Literal[False], _RetAddress] | tuple[Literal[True], int]:
    """Launch AEDT in gRPC mode.

    .. warning::

        Do not execute this function with untrusted function argument, environment
        variables or pyaedt global settings.
        See the :ref:`security guide<security_launch_aedt>` for details.
    """
    ...

@pyaedt_function_handler()
def launch_aedt_in_lsf(non_graphical, port): # -> tuple[Literal[False], str] | tuple[Literal[True], str | Any] | tuple[Literal[False], Any | str]:
    """Launch AEDT in LSF in gRPC mode.

    .. warning::

        Do not execute this function with untrusted input parameters.
        See the :ref:`security guide<security_launch_aedt>` for details.
    """
    ...

def exception_to_desktop(ex_value, tb_data): # -> None:
    """Write the trace stack to AEDT when a Python error occurs.

    The message is added to the AEDT global logger and to the log file (if present).

    Parameters
    ----------
    ex_value : str
        Type of the exception.
    tb_data : str
        Traceback data.

    """
    ...

def is_student_version(oDesktop): # -> bool:
    ...

class Desktop:
    """Provides the Ansys Electronics Desktop (AEDT) interface.

    Parameters
    ----------
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case the
        active setup or latest installed version is used.
        Examples of input values are ``251``, ``25.1``,``2025.1``,``"2025.1"``.
    non_graphical : bool, optional
        Whether to launch AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT is launched in graphical mode.
        This parameter is ignored when a script is launched within AEDT.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the machine.
        The default is ``True``.
    close_on_exit : bool, optional
        Whether to close AEDT on exit. The default is ``True``.
        This option is used only when Desktop is used in a context manager (``with`` statement).
        If Desktop is used outside a context manager, see the ``release_desktop`` arguments.
    student_version : bool, optional
        Whether to open the AEDT student version. The default is
        ``False``.
    machine : str, optional
        Machine name to connect the oDesktop session to. This parameter works only in 2022 R2
        and later. The remote server must be up and running with the command
        ``"ansysedt.exe -grpcsrv portnum"``. If the machine is `"localhost"`, the server also
        starts if not present.
    port : int, optional
        Port number on which to start the oDesktop communication on the already existing server.
        This parameter is ignored when creating a new server. It works only in 2022 R2 and
        later. The remote server must be up and running with the command `"ansysedt.exe -grpcsrv portnum"`.
    aedt_process_id : int, optional
        Process ID for the instance of AEDT to point PyAEDT at. The default is
        ``None``. This parameter is only used when ``new_desktop = False``.

    Examples
    --------
    Launch AEDT 2025 R1 in non-graphical mode and initialize HFSS.

    >>> import ansys.aedt.core
    >>> desktop = ansys.aedt.core.Desktop(version="2025.1", non_graphical=False)
    PyAEDT INFO: pyaedt v...
    PyAEDT INFO: Python version ...
    >>> hfss = ansys.aedt.core.Hfss(design="HFSSDesign1")
    PyAEDT INFO: Project...
    PyAEDT INFO: Added design 'HFSSDesign1' of type HFSS.

    Launch AEDT 2025 R1 in graphical mode and initialize HFSS.

    >>> desktop = Desktop(251)
    PyAEDT INFO: pyaedt v...
    PyAEDT INFO: Python version ...
    >>> hfss = ansys.aedt.core.Hfss(design="HFSSDesign1")
    PyAEDT INFO: No project is defined. Project...
    """
    _invoked_from_design = ...
    def __new__(cls, *args, **kwargs):
        ...
    
    @pyaedt_function_handler(specified_version="version", new_desktop_session="new_desktop")
    def __init__(self, version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=...) -> None:
        """Initialize desktop."""
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, ex_type, ex_value, ex_traceback): # -> None:
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, project_design_name): # -> None:
        """Get the application interface object (Hfss, Icepak, Maxwell3D...) for a given project name and design name.

        Parameters
        ----------
        project_design_name : List
            Project and design name.

        Returns
        -------
        :class:Application interface
            Returns None if project and design name are not found.

        """
        ...
    
    @property
    @min_aedt_version("2023.2")
    def are_there_simulations_running(self): # -> Any:
        """Check if there are simulation running.

        Returns
        -------
        float

        """
        ...
    
    @property
    def current_version(self): # -> str:
        """Current AEDT version."""
        ...
    
    @property
    def current_student_version(self): # -> str:
        """Current AEDT student  version."""
        ...
    
    @property
    def installed_versions(self): # -> dict[Any, Any]:
        """Dictionary of AEDT versions installed on the system and their installation paths."""
        ...
    
    @property
    def install_path(self):
        """Installation path for AEDT."""
        ...
    
    @pyaedt_function_handler()
    def get_example(self, example_name, folder_name=...): # -> str | None:
        """Retrieve the path to a built-in example project.

        Parameters
        ----------
        example_name : str
            Name of the example for which the full path is desired.
        folder_name : str, optional
            Name of the example for which the full path is desired.

        Returns
        -------
        str
            Return the full path and name of the example file if found, otherwise ``None``.
        """
        ...
    
    @property
    def logger(self): # -> AedtLogger:
        """AEDT logger."""
        ...
    
    @property
    def odesktop(self): # -> Any | None:
        """AEDT instance containing all projects and designs.

        Examples
        --------
        Get the COM object representing the desktop.

        >>> from ansys.aedt.core import Desktop
        >>> d = Desktop()
        >>> d.odesktop
        """
        ...
    
    @odesktop.setter
    def odesktop(self, val): # -> None:
        ...
    
    @property
    def messenger(self): # -> AedtLogger:
        """Messenger manager for the AEDT logger."""
        ...
    
    @property
    def personallib(self): # -> Any:
        """PersonalLib directory.

        Returns
        -------
        str
            Full absolute path for the ``PersonalLib`` directory.

        """
        ...
    
    @property
    def src_dir(self): # -> Path:
        """Python source directory.

        Returns
        -------
        str
            Full absolute path for the ``python`` directory.

        """
        ...
    
    @property
    def syslib(self): # -> Any:
        """SysLib directory.

        Returns
        -------
        str
            Full absolute path for the ``SysLib`` directory.

        """
        ...
    
    @property
    def pyaedt_dir(self): # -> Path:
        """PyAEDT directory.

        Returns
        -------
        str
           Full absolute path for the ``pyaedt`` directory.

        """
        ...
    
    @property
    def userlib(self): # -> Any:
        """UserLib directory.

        Returns
        -------
        str
            Full absolute path for the ``UserLib`` directory.

        """
        ...
    
    @pyaedt_function_handler()
    def active_design(self, project_object=..., name=..., design_type=...): # -> Any | None:
        """Get the active design.

        Parameters
        ----------
        project_object : optional
            AEDT project object. The default is ``None``, in which case the active project is used.

        name : str, optional
            Name of the design to make active.
            The default is ``None``, in which case the active design is returned.

        design_type : str, optional
            Name of the active design to make active.
            The default is ``None``, in which case the active design is returned.

        References
        ----------
        >>> oProject.GetActiveDesign
        >>> oProject.SetActiveDesign
        """
        ...
    
    @pyaedt_function_handler()
    def active_project(self, name=...): # -> Any | None:
        """Get the active project.

        Parameters
        ----------
        name : str, optional
            Name of the active project to make active.
            The default is ``None``, in which case the active project is returned.

        References
        ----------
        >>> oDesktop.GetActiveProject
        >>> oDesktop.SetActiveProject
        """
        ...
    
    @pyaedt_function_handler()
    def close_windows(self): # -> Literal[True]:
        """Close all windows.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.CloseAllWindows
        """
        ...
    
    @pyaedt_function_handler()
    def project_list(self): # -> list[Any]:
        """Get a list of projects.

        Returns
        -------
        List
            List of projects.

        """
        ...
    
    @pyaedt_function_handler()
    def analyze_all(self, project=..., design=...): # -> Literal[True]:
        """Analyze all setups in a project.

        Parameters
        ----------
        project : str, optional
            Project name. The default is ``None``, in which case the active project
            is used.
        design : str, optional
            Design name. The default is ``None``, in which case all designs in
            the project are analyzed.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def clear_messages(self): # -> Literal[True]:
        """Clear all AEDT messages.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def save_project(self, project_name=..., project_path=...): # -> Literal[True]:
        """Save the project.

        Parameters
        ----------
        project_name : str, optional
            Project name. The default is ``None``, in which case the active project
            is used.
        project_path : str, optional
            Full path to the project. The default is ``None``. If a path is
            provided, ``save as`` is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def copy_design(self, project_name=..., design_name=..., target_project=...): # -> bool | None:
        """Copy a design and paste it in an existing project or new project.

        .. deprecated:: 0.6.31
           Use :func:`copy_design_from` instead.

        Parameters
        ----------
        project_name : str, optional
            Project name. The default is ``None``, in which case the active project
            is used.
        design_name : str, optional
            Design name. The default is ``None``.
        target_project : str, optional
            Target project. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def project_path(self, project_name=...): # -> Any | None:
        """Get the path to the project.

        Parameters
        ----------
        project_name : str, optional
            Project name. The default is ``None``, in which case the active
            project is used.

        Returns
        -------
        str
            Path to the project.

        """
        ...
    
    @pyaedt_function_handler()
    def design_list(self, project=...): # -> list[Any]:
        """Get a list of the designs.

        Parameters
        ----------
        project : str, optional
            Project name. The default is ``None``, in which case the active
            project is used.

        Returns
        -------
        List
            List of the designs.
        """
        ...
    
    @pyaedt_function_handler()
    def design_type(self, project_name=..., design_name=...): # -> Any | Literal['']:
        """Get the type of design.

        Parameters
        ----------
        project_name : str, optional
            Project name. The default is ``None``, in which case the active
            project is used.
        design_name : str, optional
            Design name. The default is ``None``, in which case the active
            design is used.

        Returns
        -------
        str
            Design type.
        """
        ...
    
    @pyaedt_function_handler()
    def load_project(self, project_file, design_name=...): # -> bool | None:
        """Open an AEDT project based on a project and optional design.

        Parameters
        ----------
        project_file : str
            Full path and name for the project.
        design_name : str, optional
            Design name. The default is ``None``.

        Returns
        -------
        :def :`ansys.aedt.core.Hfss`
            Any of the PyAEDT App initialized.

        References
        ----------
        >>> oDesktop.OpenProject

        """
        ...
    
    @pyaedt_function_handler()
    def release_desktop(self, close_projects=..., close_on_exit=...): # -> Literal[False]:
        """Release AEDT.

        Parameters
        ----------
        close_projects : bool, optional
            Whether to close the AEDT projects that are open in the session.
            The default is ``True``.
        close_on_exit : bool, optional
            Whether to close the active AEDT session on exiting AEDT.
            The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> import ansys.aedt.core
        >>> desktop = ansys.aedt.core.Desktop("2025.1")
        PyAEDT INFO: pyaedt v...
        PyAEDT INFO: Python version ...
        >>> desktop.release_desktop(close_projects=False, close_on_exit=False)  # doctest: +SKIP

        """
        ...
    
    def close_desktop(self): # -> Literal[False] | None:
        """Close all projects and shut down AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> import ansys.aedt.core
        >>> desktop = ansys.aedt.core.Desktop("2025.1")
        PyAEDT INFO: pyaedt v...
        PyAEDT INFO: Python version ...
        >>> desktop.close_desktop()  # doctest: +SKIP

        """
        ...
    
    def enable_autosave(self): # -> None:
        """Enable the autosave option.

        Examples
        --------
        >>> import ansys.aedt.core
        >>> desktop = ansys.aedt.core.Desktop("2025.1")
        PyAEDT INFO: pyaedt v...
        PyAEDT INFO: Python version ...
        >>> desktop.enable_autosave()

        """
        ...
    
    def disable_autosave(self): # -> None:
        """Disable the autosave option.

        Examples
        --------
        >>> import ansys.aedt.core
        >>> desktop = ansys.aedt.core.Desktop("2025.1")
        PyAEDT INFO: pyaedt v...
        PyAEDT INFO: Python version ...
        >>> desktop.disable_autosave()

        """
        ...
    
    def change_license_type(self, license_type=...): # -> bool:
        """Change the license type.

        Parameters
        ----------
        license_type : str, optional
            Type of the license. The options are ``"Pack"`` and ``"Pool"``.
            The default is ``"Pool"``.

        Returns
        -------
        bool
           ``True``.

            .. note::
               Because of an API limitation, this method returns ``True`` even when the key is wrong.

        """
        ...
    
    def enable_optimetrics(self): # -> bool:
        """Enable optimetrics.

        Returns
        -------
        bool
           ``True`` when successful, ``False`` when failed.

        """
        ...
    
    def disable_optimetrics(self): # -> bool:
        """Disable optimetrics.

        Returns
        -------
        bool
           ``True`` when successful, ``False`` when failed.

        """
        ...
    
    def change_registry_key(self, key_full_name, key_value): # -> bool:
        """Change an AEDT registry key to a new value.

        Parameters
        ----------
        key_full_name : str
            Full name of the AEDT registry key.
        key_value : str, int
            Value for the AEDT registry key.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    def change_active_dso_config_name(self, product_name=..., config_name=...): # -> bool:
        """Change a specific registry key to a new value.

        Parameters
        ----------
        product_name : str, optional
            Name of the tool to apply the active configuration to. The default is
            ``"HFSS"``.
        config_name : str, optional
            Name of the configuration to apply. The default is ``"Local"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    def change_registry_from_file(self, registry_file, make_active=...): # -> bool:
        """Apply desktop registry settings from an ACF file.

        One way to get an ACF file is to export a configuration from the AEDT UI and then edit and reuse it.

        Parameters
        ----------
        registry_file : str
            Full path to the ACF file.
        make_active : bool, optional
            Whether to set the imported configuration as active. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @staticmethod
    @pyaedt_function_handler()
    def get_available_toolkits(): # -> list[Any]:
        """Get toolkit ready for installation.

        Returns
        -------
        list
            List of toolkit names.
        """
        ...
    
    @pyaedt_function_handler()
    def submit_job(self, project_file, clustername, aedt_full_exe_path=..., numnodes=..., numcores=..., wait_for_license=..., setting_file=...): # -> Any | Literal[False]:
        """Submit a job to be solved on a cluster.

        Parameters
        ----------
        project_file : str
            Full path to the project. The path should be visible from the server where the
            simulation will run.
            If the client path is used then the
            mapping between the client and server path must be specified in the `setting_file``.
        clustername : str
            Name of the cluster to submit the job to.
        aedt_full_exe_path : str, optional
            Full path to the AEDT executable file on the server. The default is ``None``, in which
            case ``"/clustername/AnsysEM/AnsysEM2x.x/Win64/ansysedt.exe"`` is used. On linux
            this path should point to the Linux executable ``"ansysedt"``.
        numnodes : int, optional
            Number of nodes. The default is ``1``.
        numcores : int, optional
            Number of cores. The default is ``32``.
        wait_for_license : bool, optional
             Whether to wait for a license to become available. The default is ``True``.
        setting_file : str, optional
            Name of the "*.areg" file to use as a template. The default value
            is ``None`` in which case a default template will be used.
            If ``setting_file`` is passed it can be located either on the client or server.
            If the "*.areg" file is on the client information from ``numcores`` and ``numnodes``
            will be added. If the "*.areg" file is on the server it
            will be applied without modifications.

        Returns
        -------
        int
            ID of the job.

        References
        ----------
        >>> oDesktop.SubmitJob
        """
        ...
    
    @pyaedt_function_handler()
    def submit_ansys_cloud_job(self, project_file, config_name, region, numnodes=..., numcores=..., wait_for_license=..., setting_file=..., job_name=...): # -> tuple[Any, str | Any] | tuple[Literal[''], Literal['']]:
        """Submit a job to be solved on a cluster.

        Parameters
        ----------
        project_file : str
            Full path to the project.
        config_name : str
            Name of the Ansys Cloud machine configuration selected.
        region : str
            Name of Ansys Cloud location region.
            Available regions are: ``"westeurope"``, ``"eastus"``, ``"northcentralus"``, ``"southcentralus"``,
            ``"northeurope"``, ``"japaneast"``, ``"westus2"``, ``"centralindia"``.
        numnodes : int, optional
            Number of nodes. The default is ``1``.
        numcores : int, optional
            Number of cores. The default is ``32``.
        wait_for_license : bool, optional
             Whether to wait for the license to be validated. The default is ``True``.
        setting_file : str, optional
            Name of the file to use as a template. The default value is ``None``.

        Returns
        -------
        str, str
            Job ID, job name.

        References
        ----------
        >>> oDesktop.SubmitJob

        Examples
        --------
        >>> from ansys.aedt.core import Desktop

        >>> d = Desktop(version="2025.1", new_desktop=False)
        >>> d.select_scheduler("Ansys Cloud")
        >>> out = d.get_available_cloud_config()
        >>> job_id, job_name = d.submit_ansys_cloud_job(
        ...     "via_gsg.aedt", list(out.keys())[0], region="westeurope", job_name="MyJob"
        ... )
        >>> o1 = d.get_ansyscloud_job_info(job_id=job_id)
        >>> o2 = d.get_ansyscloud_job_info(job_name=job_name)
        >>> d.download_job_results(job_id=job_id, project_path="via_gsg.aedt", results_folder="via_gsg_results")
        >>> d.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler()
    def get_ansyscloud_job_info(self, job_id=..., job_name=...): # -> dict[Any, Any]:
        """Monitor a job submitted to Ansys Cloud.

        .. warning::

            Do not execute this function with untrusted function argument, environment
            variables or pyaedt global settings.
            See the :ref:`security guide<security_ansys_cloud>` for details.

        Parameters
        ----------
        job_id : str, optional
            Job Id.  The default value is ``None`` if job name is used.
        job_name : str, optional
            Job name.  The default value is ``None`` if job id is used.

        Returns
        -------
        dict

        Examples
        --------
        >>> from ansys.aedt.core import Desktop

        >>> d = Desktop(version="2025.1", new_desktop=False)
        >>> d.select_scheduler("Ansys Cloud")
        >>> out = d.get_available_cloud_config()
        >>> job_id, job_name = d.submit_ansys_cloud_job(
        ...     "via_gsg.aedt", list(out.keys())[0], region="westeurope", job_name="MyJob"
        ... )
        >>> o1 = d.get_ansyscloud_job_info(job_id=job_id)
        >>> o2 = d.get_ansyscloud_job_info(job_name=job_name)
        >>> d.download_job_results(job_id=job_id, project_path="via_gsg.aedt", results_folder="via_gsg_results")
        >>> d.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler()
    def select_scheduler(self, scheduler_type, address=..., username=..., force_password_entry=...): # -> Any:
        """Select a scheduler to submit the job.

        Parameters
        ----------
        scheduler_type : str
            Name of the scheduler.
            Options are `"RSM"``, `""Windows HPC"``, `""LSF``, `""SGE"``, `""PBS"``, `""Ansys Cloud"``.
        address : str, optional
            String specifying the IP address or hostname of the head node or for the
            remote host running the RSM service.
        username : str, optional
            Username string to use for remote RSM service (or blank to use username
            stored in current submission host user settings). If the (non-blank) username doesn't match the
            username stored in current submission host user
            settings, then the Select Scheduler dialog is displayed to allow for password entry prior to job submission.
        force_password_entry : bool, optional
            Boolean used to force display of the Select Scheduler GUI to allow for
             password entry prior to job submission.


        Returns
        -------
        str
            The selected scheduler (if selection was successful, this string should match the input option string,
            although it could differ in upper/lowercase).

                Examples
        --------
        >>> from ansys.aedt.core import Desktop

        >>> d = Desktop(version="2025.1", new_desktop=False)
        >>> d.select_scheduler("Ansys Cloud")
        >>> out = d.get_available_cloud_config()
        >>> job_id, job_name = d.submit_ansys_cloud_job(
        ...     "via_gsg.aedt", list(out.keys())[0], region="westeurope", job_name="MyJob"
        ... )
        >>> o1 = d.get_ansyscloud_job_info(job_id=job_id)
        >>> o2 = d.get_ansyscloud_job_info(job_name=job_name)
        >>> d.download_job_results(job_id=job_id, project_path="via_gsg.aedt", results_folder="via_gsg_results")
        >>> d.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler()
    def get_available_cloud_config(self, region=...): # -> dict[Any, Any]:
        """Get available Ansys Cloud machines configuration.

        .. warning::

            Do not execute this function with untrusted function argument, environment
            variables or pyaedt global settings.
            See the :ref:`security guide<security_ansys_cloud>` for details.

        Parameters
        ----------
        region : str
            Name of Ansys Cloud location region.
            Available regions are: ``"westeurope"``, ``"eastus"``, ``"northcentralus"``, ``"southcentralus"``,
            ``"northeurope"``, ``"japaneast"``, ``"westus2"``, ``"centralindia"``.

        Returns
        -------
        dict
            Dictionary containing the config name and config details.

        Examples
        --------
        >>> from ansys.aedt.core import Desktop

        >>> d = Desktop(version="2025.1", new_desktop=False)
        >>> d.select_scheduler("Ansys Cloud")
        >>> out = d.get_available_cloud_config()
        >>> job_id, job_name = d.submit_ansys_cloud_job(
        ...     "via_gsg.aedt", list(out.keys())[0], region="westeurope", job_name="MyJob"
        ... )
        >>> o1 = d.get_ansyscloud_job_info(job_id=job_id)
        >>> o2 = d.get_ansyscloud_job_info(job_name=job_name)
        >>> d.download_job_results(job_id=job_id, project_path="via_gsg.aedt", results_folder="via_gsg_results")
        >>> d.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler()
    def download_job_results(self, job_id, project_path, results_folder, filter=...): # -> bool:
        """Download job results to a specific folder from Ansys Cloud.

        Parameters
        ----------
        job_id : str
            Job Id of solved project.
        project_path : str
            Project path to aedt file. The ".q" file will be created there to monitor download status.
        results_folder : str
            Folder where the simulation results will be downloaded.
        filter : str, optional
            A string containing filters to download. The delimiter of file types is ";". If no filter
            specified, the default filter "*" will be applied, which requests all files for download

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    @min_aedt_version("2023.2")
    def get_monitor_data(self): # -> dict[str, int]:
        """Check and get monitor data of an existing analysis.

        Returns
        -------
        dict

        """
        ...
    
    @pyaedt_function_handler()
    @min_aedt_version("2023.2")
    def stop_simulations(self, clean_stop=...): # -> Any:
        """Check if there are simulation running and stops them.

        Returns
        -------
        str

        """
        ...
    


