"""
This type stub file was generated by pyright.
"""

def HFSS3DLayout_AdaptiveFrequencyData(freq): # -> dict[str, Any | str | int | list[Any]]:
    """Update HFSS 3D adaptive frequency data.

    Parameters
    ----------
    freq : float
        Adaptive frequency value.


    Returns
    -------
    list
        List of frequency data.

    """
    ...

meshlink = ...
autosweep = ...
autosweeps = ...
multifreq = ...
sweepsbr = ...
sweepssbr = ...
muoption = ...
transientelectrostatic = ...
transienthfss = ...
HFSSDrivenAuto = ...
HFSSDrivenDefault = ...
HFSSEigen = ...
HFSSTransient = ...
HFSSSBR = ...
MaxwellTransient = ...
Magnetostatic = ...
DCConduction = ...
ElectroDCConduction = ...
ACConduction = ...
Electrostatic = ...
SweepEddyCurrent = ...
EddyCurrent = ...
DCBiasedEddyCurrent = ...
ElectricTransient = ...
SteadyTemperatureAndFlow = ...
SteadyTemperatureOnly = ...
SteadyFlowOnly = ...
Q3DCond = ...
Q3DMult = ...
Q3DDC = ...
Q3DCap = ...
Q3DAC = ...
Matrix = ...
OutputQuantities = ...
NoiseOutputQuantities = ...
SweepDefinition = ...
NexximLNA = ...
NexximDC = ...
NexximTransient = ...
NexximQuickEye = ...
NexximVerifEye = ...
NexximAMI = ...
NexximOscillatorRSF = ...
NexximOscillator1T = ...
NexximOscillatorNT = ...
NexximHarmonicBalance1T = ...
NexximHarmonicBalanceNT = ...
NexximSystem = ...
NexximTVNoise = ...
HSPICE = ...
HFSS3DLayout_Properties = ...
HFSS3DLayout_AdvancedSettings = ...
HFSS3DLayout_CurveApproximation = ...
HFSS3DLayout_Q3D_DCSettings = ...
CGDataBlock = ...
RLDataBlock = ...
Open = ...
Close = ...
TransientTemperatureAndFlow = ...
TransientTemperatureOnly = ...
TransientFlowOnly = ...
HFSS3DLayout_SingleFrequencyDataList = ...
HFSS3DLayout_BroadbandFrequencyDataList = ...
HFSS3DLayout_MultiFrequencyDataList = ...
HFSS3DLayout_AdaptiveSettings = ...
HFSS3DLayout = ...
HFSS3DLayout_v231 = ...
HFSS3DLayout_SweepDataList = ...
HFSS3DLayout_SIWAdvancedSettings = ...
HFSS3DLayout_SIWDCSettings = ...
HFSS3DLayout_SIWDCAdvancedSettings = ...
HFSS3DLayout_SIWDCIRSettings = ...
HFSS3DLayout_SimulationSettings = ...
HFSS3DLayout_ACSimulationSettings = ...
SiwaveAC3DLayout = ...
SiwaveDC3DLayout = ...
HFSS3DLayout_LNASimulationSettings = ...
LNA_Sweep = ...
HFSS3DLayout_LNAData = ...
LNA3DLayout = ...
MechTerm = ...
MechTransientThermal = ...
MechModal = ...
MechStructural = ...
RmxprtDefault = ...
GRM = ...
DFIG = ...
TPIM = ...
SPIM = ...
TPSM = ...
NSSM = ...
SRM = ...
LSSM = ...
UNIM = ...
DCM = ...
CPSM = ...
TR = ...
SweepQ3D = ...
SweepHfss3D = ...
enabled = ...
Sweep3DLayout = ...
SweepSiwave = ...
icepak_newkeys_241 = ...
SteadyTemperatureOnly_241 = ...
SteadyFlowOnly_241 = ...
SteadyTemperatureAndFlow_241 = ...
TransientTemperatureOnly_241 = ...
TransientTemperatureAndFlow_241 = ...
TransientFlowOnly_241 = ...
list_modules = ...
icepak_forced_convection_update = ...
icepak_natural_convection_update = ...
class SetupKeys:
    """Provides setup keys."""
    SetupNames = ...
    SetupTemplates = ...
    SetupTemplates_231 = ...
    SetupTemplates_232 = ...
    SetupTemplates_241 = ...
    SetupTemplates_251 = ...
    SetupTemplates_252 = ...
    @staticmethod
    def get_setup_templates(): # -> dict[int, Any]:
        ...
    
    def get_default_icepak_template(self, default_type): # -> dict[str, Any]:
        """
        Update the setup based on the class arguments or a dictionary.

        Parameters
        ----------
        default_type : str
            Which default template to use. Available options are ``"Default"``,
            ``"Forced Convection"``, ``"Mixed Convection"``
            and ``"Natural Convection"``.

        Returns
        -------
        dict
            Dictionary containing the Icepak default setup for the chosen simulation type.


        """
        ...
    


