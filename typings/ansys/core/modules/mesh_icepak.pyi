"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.elements_3d import BinaryTreeNode

class CommonRegion:
    def __init__(self, app, name) -> None:
        ...
    
    @property
    def padding_types(self): # -> list[Any] | None:
        """Get a list of strings containing the padding types used.

        One for each direction in the following order:
        +X, -X, +Y, -Y, +Z, -Z.

        Returns
        -------
        List[str]
        """
        ...
    
    @property
    def padding_values(self): # -> list[Any] | None:
        """Get a list of padding values (string or float) used.

        Get one for each direction, in the following order:
        +X, -X, +Y, -Y, +Z, -Z.

        Returns
        -------
        List[Union[str, float]]
        """
        ...
    
    @property
    def positive_x_padding_type(self):
        """
        Get a string with the padding type used in the +X direction.

        Returns
        -------
        str
        """
        ...
    
    @property
    def negative_x_padding_type(self):
        """
        Get a string with the padding type used in the -X direction.

        Returns
        -------
        str
        """
        ...
    
    @property
    def positive_y_padding_type(self):
        """
        Get a string with the padding type used in the +Y direction.

        Returns
        -------
        str
        """
        ...
    
    @property
    def negative_y_padding_type(self):
        """
        Get a string with the padding type used in the -Y direction.

        Returns
        -------
        str
        """
        ...
    
    @property
    def positive_z_padding_type(self):
        """
        Get a string with the padding type used in the +Z direction.

        Returns
        -------
        str
        """
        ...
    
    @property
    def negative_z_padding_type(self):
        """
        Get a string with the padding type used in the -Z direction.

        Returns
        -------
        str
        """
        ...
    
    @property
    def positive_x_padding(self):
        """
        Get a string with the padding value used in the +X direction.

        Returns
        -------
        float
        """
        ...
    
    @property
    def negative_x_padding(self):
        """
        Get a string with the padding value used in the -X direction.

        Returns
        -------
        float
        """
        ...
    
    @property
    def positive_y_padding(self):
        """
        Get a string with the padding value used in the +Y direction.

        Returns
        -------
        float
        """
        ...
    
    @property
    def negative_y_padding(self):
        """
        Get a string with the padding value used in the -Y direction.

        Returns
        -------
        float
        """
        ...
    
    @property
    def positive_z_padding(self):
        """
        Get a string with the padding value used in the +Z direction.

        Returns
        -------
        float
        """
        ...
    
    @property
    def negative_z_padding(self):
        """
        Get a string with the padding value used in the -Z direction.

        Returns
        -------
        float
        """
        ...
    
    @padding_types.setter
    def padding_types(self, values): # -> None:
        ...
    
    @padding_values.setter
    def padding_values(self, values): # -> None:
        ...
    
    @positive_x_padding_type.setter
    def positive_x_padding_type(self, value): # -> None:
        ...
    
    @negative_x_padding_type.setter
    def negative_x_padding_type(self, value): # -> None:
        ...
    
    @positive_y_padding_type.setter
    def positive_y_padding_type(self, value): # -> None:
        ...
    
    @negative_y_padding_type.setter
    def negative_y_padding_type(self, value): # -> None:
        ...
    
    @positive_z_padding_type.setter
    def positive_z_padding_type(self, value): # -> None:
        ...
    
    @negative_z_padding_type.setter
    def negative_z_padding_type(self, value): # -> None:
        ...
    
    @positive_x_padding.setter
    def positive_x_padding(self, value): # -> None:
        ...
    
    @negative_x_padding.setter
    def negative_x_padding(self, value): # -> None:
        ...
    
    @positive_y_padding.setter
    def positive_y_padding(self, value): # -> None:
        ...
    
    @negative_y_padding.setter
    def negative_y_padding(self, value): # -> None:
        ...
    
    @positive_z_padding.setter
    def positive_z_padding(self, value): # -> None:
        ...
    
    @negative_z_padding.setter
    def negative_z_padding(self, value): # -> None:
        ...
    
    @property
    def object(self): # -> None:
        """
        Get the subregion modeler object.

        Returns
        -------
        ::class::modeler.cad.object_3d.Object3d
        """
        ...
    
    @property
    def name(self):
        """
        Get the subregion name.

        Returns
        -------
        str
        """
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    


class Region(CommonRegion):
    """Provides Icepak global mesh region properties and methods."""
    def __init__(self, app) -> None:
        ...
    


class SubRegion(CommonRegion):
    """Provides Icepak mesh subregions properties and methods."""
    def __init__(self, app, parts, name=...) -> None:
        ...
    
    def create(self, padding_values, padding_types, region_name, parts): # -> bool:
        """
        Create subregion object.

        Parameters
        ----------
        padding_values : list of str or float
            List of padding values to apply in each direction, in the following order:
            +X, -X, +Y, -Y, +Z, -Z.
        padding_types : list of str
            List of padding types to apply in each direction, in the following order:
            +X, -X, +Y, -Y, +Z, -Z.
        region_name : str
            Name to assign to the subregion.
        parts : list of str
            Parts to be included in the subregion.

         Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    def delete(self): # -> bool:
        """
        Delete the subregion object.

        Returns
        -------
        bool
           ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @property
    def parts(self): # -> dict[Any, Any]:
        """
        Parts included in the subregion.

        Returns
        -------
        dict
            Dictionary with the part names as keys and ::class::modeler.cad.object_3d.Object3d as values.
        """
        ...
    
    @parts.setter
    def parts(self, parts): # -> None:
        """Parts included in the subregion.

        Parameters
        ----------
        parts : List[str]
            List of strings containing all the parts that must be included in the subregion.
        """
        ...
    


class MeshSettings:
    """Manages mesh settings.

    It can be used like a dictionary. Available keys change according
    to the type of settings chosen (manual or automatic).
    """
    _automatic_mesh_settings = ...
    _common_mesh_settings = ...
    _manual_mesh_settings = ...
    _aedt_20212_args = ...
    def __init__(self, mesh_class, app) -> None:
        ...
    
    def parse_settings_as_args(self): # -> list[Any]:
        """Parse mesh region settings.

        Returns
        -------
        List
            Arguments to pass to native APIs.
        """
        ...
    
    def parse_settings_as_dictionary(self): # -> dict[Any, Any]:
        """Parse mesh region settings.

        Returns
        -------
        dict
            Settings of the subregion.
        """
        ...
    
    def keys(self): # -> set[str]:
        """Get mesh region settings keys.

        Returns
        -------
        dict_keys
            Available settings keys.
        """
        ...
    
    def values(self): # -> dict_values[Any, Any]:
        """Get mesh region settings values.

        Returns
        -------
        dict_values
            Settings values.
        """
        ...
    
    def items(self): # -> dict_items[Any, Any]:
        """
        Get mesh region settings items.

        Returns
        -------
        dict_items
            Settings items.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __getitem__(self, key): # -> bool:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __iter__(self): # -> Iterator[str]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __contains__(self, x): # -> bool:
        ...
    


class MeshRegionCommon(BinaryTreeNode):
    """
    Manages Icepak mesh region settings.

    Attributes:
        name : str
            Name of the mesh region.
        manual_settings : bool
            Whether to use manual settings. If ``False``, automatic settings are used.
        settings : :class:`modules.mesh_icepak.MeshSettings`
            Dictionary-like object to handle settings.
    """
    def __init__(self, units, app, name) -> None:
        ...
    
    @abstractmethod
    def update(self): # -> None:
        """Update the mesh region object."""
        ...
    
    @abstractmethod
    def delete(self): # -> None:
        """Delete the mesh region object."""
        ...
    
    @abstractmethod
    def create(self): # -> None:
        """Create the mesh region object."""
        ...
    
    def __getattr__(self, name): # -> Any | None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    


class GlobalMeshRegion(MeshRegionCommon):
    """Provides Icepak global mesh properties and methods."""
    def __init__(self, app) -> None:
        ...
    
    @property
    def name(self): # -> Literal['Global']:
        """Mesh region name."""
        ...
    
    @pyaedt_function_handler
    def update(self): # -> bool:
        """Update mesh region settings with the settings in the object variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditGlobalMeshRegion
        """
        ...
    
    @property
    def Objects(self):
        """Get the region object from the modeler."""
        ...
    
    def delete(self): # -> None:
        """Delete the region object in the modeler."""
        ...
    
    def create(self): # -> bool:
        """Create the region object in the modeler."""
        ...
    


class MeshRegion(MeshRegionCommon):
    """Provides Icepak subregions mesh properties and methods."""
    def __init__(self, app, objects=..., name=..., **kwargs) -> None:
        ...
    
    @property
    def name(self): # -> str:
        """
        Name of the mesh region.

        Returns
        -------
        str
        """
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @pyaedt_function_handler
    def update(self): # -> bool:
        """Update mesh region settings with the settings in the object variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditMeshRegion
        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the mesh region.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.DeleteMeshRegions()
        """
        ...
    
    @property
    def assignment(self): # -> SubRegion | list[Any] | list[Any | None]:
        """
        List of objects included in mesh region.

        Returns
        -------
        list
        """
        ...
    
    @assignment.setter
    def assignment(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> bool:
        """Create a mesh region.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignMeshRegion
        """
        ...
    
    @property
    def Enable(self): # -> bool:
        """
        Get whether the mesh region is enabled.

        Returns
        -------
        book
        """
        ...
    
    @Enable.setter
    def Enable(self, val): # -> None:
        ...
    
    @property
    def Objects(self): # -> SubRegion | list[Any] | list[Any | None]:
        """
        List of objects included in mesh region.

        Returns
        -------
        list
        """
        ...
    
    @Objects.setter
    def Objects(self, objects): # -> None:
        ...
    
    @property
    def Submodels(self): # -> SubRegion | list[Any] | list[Any | None]:
        """
        List of objects included in mesh region.

        Returns
        -------
        list
        """
        ...
    
    @Submodels.setter
    def Submodels(self, objects): # -> None:
        ...
    


class IcepakMesh:
    """Manages Icepak meshes.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_3d.FieldAnalysis3D`
    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def meshregions_dict(self): # -> dict[Any, Any]:
        """
        Get mesh regions in the design.

        Returns
        -------
        dict
            Dictionary with mesh region names as keys and mesh region objects as values.
        """
        ...
    
    @property
    def omeshmodule(self):
        """Icepak Mesh Module.

        References
        ----------
        >>> oDesign.GetModule("MeshRegion")
        """
        ...
    
    @property
    def boundingdimension(self):
        """Bounding dimension."""
        ...
    
    @pyaedt_function_handler(meshop_name="name")
    def assign_mesh_level(self, mesh_order, name=...): # -> list[Any]:
        """Assign a mesh level to objects.

        Parameters
        ----------
        mesh_order : dict
            Dictionary where the key is the object name and the value is
            the mesh level.
        name :  str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        list[:class:`ansys.aedt.core.modules.mesh.MeshOperation`]
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignMeshOperation
        """
        ...
    
    @pyaedt_function_handler(objects="assignment", filename="file_name", meshop_name="name")
    def assign_mesh_from_file(self, assignment, file_name, name=...): # -> MeshOperation | Literal[False]:
        """Assign a mesh from a file to objects.

        Parameters
        ----------
        assignment : list
            List of objects to apply the mesh file to.
        file_name :  str
            Full path to the mesh (MSH) file.
        name :  str, optional
            Name of the mesh operations. Default is ``None``.

        Returns
        -------
         :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh Operation object. ``False`` when failed.

        References
        ----------
        >>> oModule.AssignMeshOperation
        """
        ...
    
    @pyaedt_function_handler()
    def automatic_mesh_pcb(self, accuracy=...): # -> Literal[True]:
        """Create a custom mesh tailored on a PCB design.

        .. deprecated:: 0.8.14

        Parameters
        ----------
        accuracy : int, optional
            Type of the mesh. Options are ``1``, ``2``, and ``3``, which represent
            respectively a coarse, standard, or very accurate mesh. The default is ``2``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditMeshOperation
        """
        ...
    
    @pyaedt_function_handler(accuracy2="accuracy", stairStep="enable_stair_step")
    def automatic_mesh_3D(self, accuracy, enable_stair_step=...): # -> Literal[True]:
        """Create a generic custom mesh.

        .. deprecated:: 0.13.0

        Parameters
        ----------
        accuracy : int
            Type of the mesh. Options are ``1``, ``2``, and ``3``, which represent respectively
            a coarse, standard, or very accurate mesh.
        enable_stair_step : bool, optional
            Whether to enable a stair step. The default is ``True``.

        Returns
        -------
         bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditMeshOperation
        """
        ...
    
    @pyaedt_function_handler()
    def assign_priorities(self, assignment): # -> Literal[True]:
        """Set objects priorities.

        Parameters
        ----------
        assignment : List[List[Union[Object3d, UserDefinedComponent, str]
            List of lists of objects. Each list corresponds to one priority level from low to high.
            This means that the first list has the lowest priority while the last list
            has the highest priority. Objects not explicitly passed in the lists are assigned
            to a priority level lower than the objects in the first list.

        Returns
        -------
        bool
            ``True`` when successful, "False" when failed.

        References
        ----------
        >>> oEditor.UpdatePriorityList

        Examples
        --------
        >>> ipk.mesh.assign_priorities([["Box1", "Rectangle1"], ["Box2", "Fan1_1"], ["Heatsink1_1"]])
        """
        ...
    
    @pyaedt_function_handler(obj_list="assignment", comp_name="component")
    def add_priority(self, entity_type, assignment=..., component=..., priority=...): # -> bool:
        """Add priority to objects.

        .. deprecated:: 0.9.1
        Use :func:`assign_priorities` function instead.

        Parameters
        ----------
        entity_type : int
            Type of the entity. Options are ``1`` and ``2``, which represent respectively
            an object and a component.
        assignment : list
            List of 3D objects, which can include conductors and dielectrics.
            If a non-3D object is passed, it is excluded.
        component : str, optional
            Name of the component. The default is ``None``.
        priority : int, optional
            Level of priority. The default is ``3``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.UpdatePriorityList

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> app = Icepak()
        >>> app.mesh.add_priority(entity_type=1, assignment=app.modeler.object_names, priority=3)
        >>> app.mesh.add_priority(entity_type=2, component=app.modeler.user_defined_component_names[0], priority=2)
        """
        ...
    
    @pyaedt_function_handler(objectlist="assignment")
    def assign_mesh_region(self, assignment=..., level=..., name=..., **kwargs): # -> MeshRegion | Literal[False]:
        """Assign a predefined surface mesh level to an object.

        Parameters
        ----------
        assignment : list, optional
            List of objects to apply the mesh region to. The default
            is ``None``, in which case all objects are selected.
        level : int, optional
            Level of the surface mesh. Options are ``1`` through ``5``. The default
            is ``5``.
        name : str, optional
            Name of the mesh region. The default is ``"MeshRegion1"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh_icepak.IcepakMesh.MeshRegion`

        References
        ----------
        >>> oModule.AssignMeshRegion
        """
        ...
    
    @pyaedt_function_handler()
    def generate_mesh(self, name=...):
        """Generate the mesh for a given setup name.

        Parameters
        ----------
        name : str, optional
            Name of the design to mesh. Default is ``None`` in which case the first available setup will be selected.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.GenerateMesh
        """
        ...
    
    @pyaedt_function_handler(groupName="group_name", localMeshParamEn="enable_local_mesh_parameters", localMeshParameters="local_mesh_parameters", meshop_name="name")
    def assign_mesh_level_to_group(self, mesh_level, group_name, enable_local_mesh_parameters=..., local_mesh_parameters=..., name=...): # -> MeshOperation:
        """Assign a mesh level to a group.

        Parameters
        ----------
        mesh_level : int
            Level of mesh to assign. Options are ``1`` through ``5``.
        group_name : str
            Name of the group.
        enable_local_mesh_parameters : bool, optional
            The default is ``False``.
        local_mesh_parameters : str, optional
            The default is ``"No Local Mesh Parameters"``.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`

        References
        ----------
        >>> oModule.AssignMeshOperation
        """
        ...
    
    def assign_mesh_reuse(self, assignment, mesh_file, name=...): # -> MeshOperation | Literal[False]:
        """Assign a mesh file to objects.

        Parameters
        ----------
        assignment : str or list
            Names of objects to which the mesh file is assignment.
        mesh_file : str
            Path to the mesh file.
        name : str, optional
            Name of the mesh operation. The default is ``None``, in which case it will be
            generated automatically.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`

        References
        ----------
        >>> oModule.AssignMeshOperation
        """
        ...
    


