"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

"""Module containing the `Materials` class."""
class Materials:
    """Contains the AEDT materials database and all methods for creating and editing materials.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_3d.FieldAnalysis3D`
        Inherited parent object.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> app = Hfss()
    >>> materials = app.materials
    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def odefinition_manager(self):
        """Definition Manager from AEDT."""
        ...
    
    @property
    def omaterial_manager(self):
        """Material Manager from AEDT."""
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __getitem__(self, item): # -> Material | None:
        ...
    
    @property
    def surface_material_keys(self): # -> dict[Any, Any]:
        """Dictionary of Surface Material in the project.

        Returns
        -------
        dict of :class:`ansys.aedt.core.modules.material.Material`
        """
        ...
    
    @property
    def liquids(self): # -> list[Any]:
        """Return the liquids materials. A liquid is a fluid with density greater or equal to 100Kg/m3.

        Returns
        -------
        list
            List of fluid materials.
        """
        ...
    
    @property
    def gases(self): # -> list[Any]:
        """Return the gas materials. A gas is a fluid with density lower than 100Kg/m3.

        Returns
        -------
        list
            List of all Gas materials.
        """
        ...
    
    @property
    def mat_names_aedt(self): # -> list[Any]:
        """List material names."""
        ...
    
    @property
    def mat_names_aedt_lower(self): # -> list[Any]:
        """List material names with lower case."""
        ...
    
    @pyaedt_function_handler(mat="material")
    def checkifmaterialexists(self, material): # -> Material | Literal[False]:
        """Check if a material exists in AEDT or PyAEDT Definitions.

        .. deprecated:: 0.11.4
           Use :func:`exists_material` method instead.

        Parameters
        ----------
        material : str
            Name of the material. If the material exists and is not in the materials database,
            it is added to this database.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.Material`
            Material object if present, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.GetProjectMaterialNames
        >>> oMaterialManager.GetData
        """
        ...
    
    @pyaedt_function_handler()
    def exists_material(self, material): # -> Material | Literal[False]:
        """Check if a material exists in AEDT or PyAEDT Definitions.

        Parameters
        ----------
        material : str
            Name of the material. If the material exists and is not in the materials database,
            it is added to this database.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.Material`
            Material object if present, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.GetProjectMaterialNames
        >>> oMaterialManager.GetData
        """
        ...
    
    @pyaedt_function_handler(mat="material")
    def check_thermal_modifier(self, material): # -> bool:
        """Check a material to see if it has any thermal modifiers.

        Parameters
        ----------
        material : str
            Name of the material. All properties for this material are checked
            for thermal modifiers.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(materialname="name", props="properties")
    def add_material(self, name, properties=...): # -> Literal[False]:
        """Add a material with default values.

        When the added material object is returned, you can customize
        the material. This method does not update the material.

        Parameters
        ----------
        name : str
            Name of the material.
        properties : dict, optional
            Material property dictionary. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.Material`

        References
        ----------
        >>> oDefinitionManager.AddMaterial

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> mat = hfss.materials.add_material("MyMaterial")
        >>> print(mat.conductivity.value)

        >>> oDefinitionManager.GetProjectMaterialNames
        >>> oMaterialManager.GetData

        """
        ...
    
    @pyaedt_function_handler(material_name="name")
    def add_surface_material(self, name, emissivity=...):
        """Add a surface material.

        In AEDT, base properties are loaded from the XML database file ``amat.xml``
        or from the emissivity.

        Parameters
        ----------
        name : str
            Name of the surface material.
        emissivity : float, optional
            Emissivity value.

        Returns
        -------
        :class:`ansys.aedt.core.modules.SurfaceMaterial`

        References
        ----------
        >>> oDefinitionManager.AddSurfaceMaterial

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> mat = hfss.materials.add_surface_material("Steel", 0.85)
        >>> print(mat.emissivity.value)

        """
        ...
    
    @pyaedt_function_handler(materials_list="assignment", material_name="name")
    def add_material_sweep(self, assignment, name):
        """Create a sweep material made of an array of materials.

        Parameters
        ----------
        assignment : list
            List of materials to merge into a single sweep material.
        name : str
            Name of the sweep material.

        Returns
        -------
        int
            Index of the project variable.

        References
        ----------
        >>> oDefinitionManager.AddMaterial

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.materials.add_material("MyMaterial")
        >>> hfss.materials.add_material("MyMaterial2")
        >>> hfss.materials.add_material_sweep(["MyMaterial", "MyMaterial2"], "Sweep_copper")
        """
        ...
    
    @pyaedt_function_handler(material_name="material", new_name="name", props="properties")
    def duplicate_material(self, material, name=..., properties=...): # -> Material | Literal[False]:
        """Duplicate a material.

        Parameters
        ----------
        material : str
            Name of the material.
        name : str
            Name for the copy of the material. If a new name is not specified,
            the new material name is ``material_name`` plusa  "_clone"`` suffix.
        properties : list
            List of properties to parameterize when the material is duplicated.
            Parameterized properties have project scope. Options are:

            - `'permittivity'`
            - `'permeability'`
            - `'conductivity'`
            - '`dielectric_loss_tan'`
            - '`magnetic_loss_tan'`


        Returns
        -------
        :class:`ansys.aedt.core.modules.material.Material`

        References
        ----------
        >>> oDefinitionManager.AddMaterial

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.materials.add_material("MyMaterial")
        >>> hfss.materials.duplicate_material("MyMaterial", "MyMaterial2")

        """
        ...
    
    @pyaedt_function_handler(new_name="name")
    def duplicate_surface_material(self, material, name=...): # -> SurfaceMaterial | Literal[False]:
        """Duplicate a surface material.

        Parameters
        ----------
         material : str
            Name of the surface material.
        name : str
            Name for the copy of the surface material.

        Returns
        -------
        :class:`ansys.aedt.core.modules.SurfaceMaterial`

        References
        ----------
        >>> oDefinitionManager.AddSurfaceMaterial

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.materials.add_surface_material("MyMaterial")
        >>> hfss.materials.duplicate_surface_material("MyMaterial", "MyMaterial2")
        """
        ...
    
    @pyaedt_function_handler()
    def remove_material(self, material, library=...): # -> bool:
        """Remove a material.

        Parameters
        ----------
        material : str
            Name of the material.
        library : str, optional
            Name of the library containing this material.
            The default is ``"Project"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.RemoveMaterial

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.materials.add_material("MyMaterial")
        >>> hfss.materials.remove_material("MyMaterial")

        """
        ...
    
    @property
    def conductors(self): # -> list[Any]:
        """Conductors in the material database.

        Returns
        -------
        list
            List of conductors in the material database.

        """
        ...
    
    @property
    def dielectrics(self): # -> list[Any]:
        """Dielectrics in the material database.

        Returns
        -------
        list
            List of dielectrics in the material database.

        """
        ...
    
    @pyaedt_function_handler(full_json_path="output_file")
    def export_materials_to_file(self, output_file): # -> bool:
        """Export all materials to a JSON or TOML file.

        Parameters
        ----------
        output_file : str
            Full path and name of the JSON file to export to.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(full_path="input_file")
    def import_materials_from_file(self, input_file=..., **kwargs): # -> list[Any] | Literal[False]:
        """Import and create materials from a JSON or AMAT file.

        Parameters
        ----------
        input_file : str
            Full path and name for the JSON or AMAT file.

        Returns
        -------
        List of :class:`ansys.aedt.core.modules.material.Material`
        """
        ...
    
    @pyaedt_function_handler(material_file="input_file")
    def import_materials_from_excel(self, input_file): # -> list[Any] | Literal[False]:
        """Import and create materials from a csv or excel file.

        Parameters
        ----------
        input_file : str
            Full path and name for the csv or xlsx file.

        Returns
        -------
        List of :class:`ansys.aedt.core.modules.material.Material`

        """
        ...
    
    @pyaedt_function_handler
    def get_used_project_material_names(self):
        """Get list of material names in current project.

        Returns
        -------
        List of str
            List of material names used in the current project.

        References
        ----------
        >>> oDefinitionManager.GetInUseProjectMaterialNames
        """
        ...
    
    @pyaedt_function_handler
    def import_materials_from_workbench(self, input_file, name_suffix=...): # -> Literal[False]:
        """Import and create materials from Workbench Engineering Data XML file.

        Parameters
        ----------
        input_file : str
            Full path and name for the XML file.

        name_suffix : str, None, optional
            String containing the suffix to be applied to the imported material names.
            The default is ``None``, in which case "_wb" is used.
            Set it to ``""`` to maintain in AEDT the same name as in Workbench.

        Returns
        -------
        List of :class:`ansys.aedt.core.modules.material.Material`

        """
        ...
    


