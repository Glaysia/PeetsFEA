"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.elements_3d import BinaryTreeNode

"""This module contains the `Mesh` class."""
meshers = ...
mesh_props = ...
class MeshProps(dict):
    """AEDT Mesh Component Internal Parameters."""
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __init__(self, mesh_object, props) -> None:
        ...
    


class MeshOperation(BinaryTreeNode):
    """MeshOperation class.

    Parameters
    ----------
    mesh : class:`ansys.aedt.core.modules.mesh.Mesh or :class:`ansys.aedt.core.modules.mesh_icepak.MeshIcepak`

    """
    def __init__(self, mesh, name, props, meshoptype) -> None:
        ...
    
    @property
    def type(self): # -> Any | None:
        ...
    
    @property
    def props(self): # -> MeshProps:
        """Properties of the mesh operation."""
        ...
    
    @property
    def name(self): # -> str | Any:
        """Name of the mesh operation.

        Returns
        -------
        str
           Name of the mesh operation.

        """
        ...
    
    @name.setter
    def name(self, meshop_name): # -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> bool:
        """Create a mesh.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def update(self, key_name=..., value=...):
        """Update the mesh.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditTrueSurfOp
        >>> oModule.EditModelResolutionOp
        >>> oModule.EditSurfPriorityForTauOp
        >>> oModule.EditLengthOp
        >>> oModule.EditApplyCurvlinearElementsOp
        >>> oModule.EditRotationalLayerOp
        >>> oModule.EditDensityControlOp
        >>> oModule.EditMeshOperation
        >>> oModule.EditSBRCurvatureExtractionOp
        """
        ...
    
    @pyaedt_function_handler()
    def update_assignment(self): # -> bool:
        """Update the boundary assignment.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the mesh.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.DeleteOp
        """
        ...
    


class Mesh:
    """Manages AEDT mesh functions for 2D and 3D solvers (HFSS, Maxwell, and Q3D).

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_3d.FieldAnalysis3D`

    Examples
    --------
    Basic usage demonstrated with an HFSS design:

    >>> from ansys.aedt.core import Hfss
    >>> hfss = Hfss()
    >>> cylinder = hfss.modeler.create_cylinder(0, [0, 0, 0], 3, 20, 0)
    >>> model_resolution = hfss.mesh.assign_model_resolution(cylinder, 1e-4, "ModelRes1")
    """
    def __init__(self, app) -> None:
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, part_id): # -> None:
        """Get the object ``Mesh`` for a given mesh operation name.

        Parameters
        ----------
        part_id : str
            Mesh operation name.

        Returns
        -------
        :class:`ansys.aedt.core.mesh.meshoperations`
            Returns None if the part ID or the object name is not found.

        Examples
        --------
        Basic usage demonstrated with an HFSS design:

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> cylinder = hfss.modeler.create_cylinder(0, [0, 0, 0], 3, 20, 0)
        >>> mr1 = hfss.mesh.assign_model_resolution(cylinder, 1e-4, "ModelRes1")
        >>> mr2 = hfss.mesh[mr1.name]
        """
        ...
    
    @property
    def meshoperations(self): # -> list[Any]:
        """Return the available mesh operations.

        Returns
        -------
        list[:class:`ansys.aedt.core.modules.mesh.MeshOperation`]
            List of mesh operation object.

        Examples
        --------
        Basic usage demonstrated with an HFSS design:

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> o = hfss.modeler.create_cylinder(0, [0, 0, 0], 3, 20, 0)
        >>> mr1 = hfss.mesh.assign_model_resolution(o, 1e-4, "ModelRes1")
        >>> mesh_operations_list = hfss.mesh.meshoperations
        """
        ...
    
    @property
    def meshoperation_names(self): # -> list[Any]:
        """Return the available mesh operation names.

        Returns
        -------
        List
            List of mesh operation names.

        Examples
        --------
        Basic usage demonstrated with an HFSS design:

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> o = hfss.modeler.create_cylinder(0, [0, 0, 0], 3, 20, 0)
        >>> mr1 = hfss.mesh.assign_model_resolution(o, 1e-4, "ModelRes1")
        >>> mr2 = hfss.mesh.assign_model_resolution(o, 1e-2, "ModelRes2")
        >>> mesh_operations_names = hfss.mesh.meshoperation_names
        """
        ...
    
    @property
    def initial_mesh_settings(self): # -> MeshOperation | dict[Any, Any]:
        """Return the global mesh object.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.InitialMeshSettings
        """
        ...
    
    @property
    def omeshmodule(self):
        """Aedt Mesh Module.

        References
        ----------
        >>> oDesign.GetModule("MeshSetup")
        """
        ...
    
    @pyaedt_function_handler(names="assignment", meshop_name="name")
    def assign_surface_mesh(self, assignment, level, name=...): # -> MeshOperation:
        """Assign a surface mesh level to one or more objects.

        Parameters
        ----------
        assignment : list
            One or more names of the objects.
        level : int
            Level of the surface mesh. Options are ``1`` through ``10``
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignTrueSurfOp

        Examples
        --------
        Basic usage demonstrated with an HFSS design:

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> o = hfss.modeler.create_cylinder(0, [0, 0, 0], 3, 20, 0)
        >>> surface = hfss.mesh.assign_surface_mesh(o.id, 3, "Surface")
        """
        ...
    
    @pyaedt_function_handler(names="assignment", surf_dev="surface_deviation", meshop_name="name")
    def assign_surface_mesh_manual(self, assignment, surface_deviation=..., normal_dev=..., aspect_ratio=..., name=...): # -> MeshOperation:
        """Assign a surface mesh to a list of faces.

        Parameters
        ----------
        assignment : list or str or :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`
            List of faces to apply the surface mesh to.
        surface_deviation : float or str, optional
            Surface deviation. The default is ``None``. You can specify a float value, a number with units, or `"inf"`.
        normal_dev : float or str, optional
            Normal deviation. The default is ``None``.
        aspect_ratio : int, optional
            Aspect ratio. The default is ``None``.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignTrueSurfOp

        Examples
        --------
        Basic usage demonstrated with an HFSS design:

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> o = hfss.modeler.create_cylinder(0, [0, 0, 0], 3, 20, 0)
        >>> surface = hfss.mesh.assign_surface_mesh_manual(o.id, 1e-6, aspect_ratio=3, name="Surface_Manual")
        """
        ...
    
    @pyaedt_function_handler(names="assignment", meshop_name="name")
    def assign_model_resolution(self, assignment, defeature_length=..., name=...): # -> MeshOperation | Literal[False]:
        """Assign the model resolution.

        Parameters
        ----------
        assignment : list
            List of objects to defeature.
        defeature_length : float, optional
            Defeaturing length in millimeters. The default is ``None``, in which case
            automatic defeaturing is used.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignModelResolutionOp

        Examples
        --------
        Basic usage demonstrated with an HFSS design:

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> o = hfss.modeler.create_cylinder(0, [0, 0, 0], 3, 20, 0)
        >>> surface = hfss.mesh.assign_model_resolution(o, 1e-4, "ModelRes1")
        """
        ...
    
    @pyaedt_function_handler(usedynamicsurface="dynamic_surface", useflexmesh="flex_mesh", applycurvilinear="curvilinear", usefallback="fallback", usephi="phi", automodelresolution="auto_model_resolution", modelresolutionlength="model_resolution_length")
    def assign_initial_mesh_from_slider(self, level=..., method=..., dynamic_surface=..., flex_mesh=..., curvilinear=..., fallback=..., phi=..., auto_model_resolution=..., model_resolution_length=...): # -> Literal[True]:
        """Assign a surface mesh level to an object.

        Parameters
        ----------
        level : int, optional
            Level of the surface mesh. Options are ``1`` through ``10``. The default is ``5``.
        method : str, optional
            Meshing method. Options are ``"Auto"``, ``"AnsoftTAU"``, and ``"AnsoftClassic"``
            The default is ``"Auto"``.
        dynamic_surface : bool, optional
            Whether to use dynamic surface resolution. The default is ``True``.
        flex_mesh : bool, optional
            Whether to use flexible mesh for TAU volume mesh. The default is ``False``.
        curvilinear : bool, optional
            Whether to apply curvilinear elements. The default is ``False``.
        fallback : bool, optional
            Whether to retain as a fallback. The default is ``True``.
        phi : bool, optional
            Whether to use the Phi mesher for layered geometry.
            The default is ``True``.
        auto_model_resolution : bool, optional
            Whether to automatically calculate the resolution length
            based on each object's effective thickness. The default is ``True``.
        model_resolution_length : float, optional
             Resolution thickness with units if ``automodelresolution=False``.
             The default ``"0.0001mm"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.InitialMeshSettings
        """
        ...
    
    @pyaedt_function_handler()
    def assign_initial_mesh(self, method=..., surface_deviation=..., normal_deviation=..., aspect_ratio=..., flex_mesh=..., curvilinear=..., fallback=..., phi=..., auto_model_resolution=..., model_resolution_length=...): # -> Literal[True]:
        """Assign a surface mesh level to an object.

        Parameters
        ----------
        method : str, optional
            Meshing method. Options are ``"Auto"``, ``"AnsoftTAU"``, and ``"AnsoftClassic"``
            The default is ``"Auto"``.
        surface_deviation : float or str, optional
             Surface deviation.
             The default is ``None``, in which case the default value is assigned.
        normal_deviation : float or str, optional
             Normal deviation.
             The default is ``None``, in which case the default value is assigned.
        aspect_ratio : float or str, optional
             Aspect ratio.
             The default is ``None``, in which case the default value is assigned.
        flex_mesh : bool, optional
            Whether to use flexible mesh for TAU volume mesh. The default is ``False``.
        curvilinear : bool, optional
            Whether to apply curvilinear elements. The default is ``False``.
        fallback : bool, optional
            Whether to retain as a fallback. The default is ``True``.
        phi : bool, optional
            Whether to use the Phi mesher for layered geometry.
            The default is ``True``.
        auto_model_resolution : bool, optional
            Whether to automatically calculate the resolution length
            based on each object's effective thickness. The default is ``True``.
        model_resolution_length : float or str, optional
             Resolution thickness with units if ``automodelresolution=False``.
             The default ``"0.0001mm"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.InitialMeshSettings
        """
        ...
    
    @pyaedt_function_handler(object_lists="assignment", surfpriority="surface_priority")
    def assign_surf_priority_for_tau(self, assignment, surface_priority=...): # -> MeshOperation:
        """Assign a surface representation priority for the TAU mesh.

        Parameters
        ----------
        assignment : list
            List of objects to apply a surface representation
            priority to.
        surface_priority : int, optional
            Surface representation priority. The default is ``0``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignSurfPriorityForTauOp
        """
        ...
    
    @pyaedt_function_handler()
    def generate_mesh(self, name):
        """Generate the mesh for a design.

        Parameters
        ----------
        name : str
            Name of the simulation setup.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.GenerateMesh

        Examples
        --------

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> m3d.create_setup(setupname="Setup1")
        >>> m3d.mesh.assign_length_mesh(maxlength=5, maxel="None")
        >>> m3d.mesh.generate_mesh("Setup1")

        """
        ...
    
    @pyaedt_function_handler()
    def delete_mesh_operations(self, mesh_type=...): # -> Literal[True]:
        """Remove mesh operations from a design.

        Parameters
        ----------
        mesh_type : optional
           Type of the mesh operation to delete. The default is ``None``, in which
           case all mesh operations are deleted.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.DeleteOp
        """
        ...
    
    @pyaedt_function_handler(names="assignment", isinside="inside_selection", maxlength="maximum_length", maxel="maximum_elements", meshop_name="name")
    def assign_length_mesh(self, assignment, inside_selection=..., maximum_length=..., maximum_elements=..., name=...): # -> MeshOperation | None:
        """Assign a length for the model resolution.

        Parameters
        ----------
        assignment : list, str
            List of object names or face IDs.
        inside_selection : bool, optional
            Whether the length mesh is inside the selection. The default is ``True``.
        maximum_length : str, float, optional
            Maximum element length. The default is ``1``. When ``None``,
            this parameter is disabled.
        maximum_elements : int, optional
            Maximum number of elements. The default is ``1000``. When ``None``, this parameter
            is disabled.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignLengthOp
        """
        ...
    
    @pyaedt_function_handler(names="assignment", skindepth="skin_depth", maxelements="maximum_elements", numlayers="layers_number", meshop_name="name")
    def assign_skin_depth(self, assignment, skin_depth=..., maximum_elements=..., triangulation_max_length=..., layers_number=..., name=...): # -> MeshOperation:
        """Assign a skin depth for the mesh refinement.

        Parameters
        ----------
        assignment : list
           List of the object names, face IDs or edges IDs for Maxwell 2D design.
        skin_depth : str, float, optional
            Skin depth value.
            It can be either provided as a float or as a string.
            The default is ``"0.2mm"``.
        maximum_elements : int, optional
            Maximum number of elements. The default is ``None``, which means this parameter is disabled.
        triangulation_max_length : str, optional
            Maximum surface triangulation length with units. The default is ``"0.1mm"``.
        layers_number : str, optional
            Number of layers. The default is ``"2"``.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignSkinDepthOp
        """
        ...
    
    @pyaedt_function_handler(names="assignment", meshop_name="name")
    def assign_curvilinear_elements(self, assignment, enable=..., name=...): # -> MeshOperation | None:
        """Assign curvilinear elements.

        Parameters
        ----------
        assignment : list
            List of objects or faces.
        enable : bool, optional
            Whether to apply curvilinear elements. The default is ``True``.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignApplyCurvlinearElementsOp
        """
        ...
    
    @pyaedt_function_handler(names="assignment", disable_for_faceted_surf="disabled_for_faceted", meshoperation_names="name")
    def assign_curvature_extraction(self, assignment, disabled_for_faceted=..., name=...): # -> MeshOperation | None:
        """Assign curvature extraction.

        Parameters
        ----------
        assignment : list
        List of objects or faces.
        disabled_for_faceted : bool, optional
        Whether curvature extraction is enabled for faceted surfaces.
        The default is ``True``.
        name : str, optional
        Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignCurvatureExtractionOp
        """
        ...
    
    @pyaedt_function_handler(names="assignment", num_layers="layers_number", meshop_name="name")
    def assign_rotational_layer(self, assignment, layers_number=..., total_thickness=..., name=...): # -> MeshOperation:
        """Assign a rotational layer mesh.

        Parameters
        ----------
        assignment : list
            List of objects.
        layers_number : int, optional
            Number of layers to create in the radial direction, starting from
            the faces most adjacent to the band. The default is ``3``, which is the maximum.
        total_thickness : str, optional
            Total thickness of all layers with units. The default is ``"1mm"``.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignRotationalLayerOp
        """
        ...
    
    @pyaedt_function_handler(names="assignment", meshop_name="name")
    def assign_edge_cut(self, assignment, layer_thickness=..., name=...): # -> MeshOperation:
        """Assign an edge cut layer mesh.

        Parameters
        ----------
        assignment : list
            List of objects.
        layer_thickness :
            Thickness of the layer with units. The default is ``"1mm"``.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignRotationalLayerOp
        """
        ...
    
    @pyaedt_function_handler(names="assignment", maxelementlength="maximum_element_length", layerNum="layers_number", meshop_name="name")
    def assign_density_control(self, assignment, refine_inside=..., maximum_element_length=..., layers_number=..., name=...): # -> MeshOperation:
        """Assign density control.

        Parameters
        ----------
        assignment : list
            List of objects.
        refine_inside : bool, optional
            Whether to refine inside objects. The default is ``True``.
        maximum_element_length : str, optional
            Maximum element length with units. The default is ``None``,
            which disables this parameter.
        layers_number : int, optional
            Number of layers. The default is ``None``, which disables
            this parameter.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
            Mesh operation object.

        References
        ----------
        >>> oModule.AssignDensityControlOp
        """
        ...
    
    @pyaedt_function_handler(obj="entity", meshop_name="name")
    def assign_cylindrical_gap(self, entity, name=..., band_mapping_angle=..., clone_mesh=..., moving_side_layers=..., static_side_layers=...):
        """Assign a cylindrical gap for a 2D or 3D design to enable a clone mesh and associated band mapping angle.

        Parameters
        ----------
        entity : int or str or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Object to assign cylindrical gap to.
        name : str, optional
            Name of the mesh. The default is ``None``, in which
            case the default name is used.
        clone_mesh : bool, optional
            Whether to clone the mesh. This parameter is valid only for 3D design.
            The default is ``False``. If ``True``, the solid bodies adjacent to the band
            are detected to identify the clone object.
        band_mapping_angle : int, optional
            Band mapping angle in degrees.
            The recommended band mapping angle (the angle the rotor rotates in one time step) typically
            equals the rotational speed multiplied by the time step.
            The band mapping angle must be between 0.0005 and 3 degrees.
            The default is ``None``.

            - For a 2D design, if a value is provided, the option ``Use band mapping angle``
              is automatically enabled.
            - For a 3D design, the ``Clone Mesh`` option has to be enabled first.
        moving_side_layers : int, optional
            Number of mesh layers on the moving side.
            The valid ranges are integers greater or equal to 1.
            This parameter is valid only for a 3D design.
            The default is ``1``.
        static_side_layers : int, optional
            Number of mesh layers on the static side.
            The valid ranges are integers greater than or equal to 1.
            This parameter is valid only for a 3D design.
            The default is ``1``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation` or bool
            Mesh operation object or ``False`` if it fails.

        References
        ----------
        >>> oModule.AssignCylindricalGapOp
        """
        ...
    


