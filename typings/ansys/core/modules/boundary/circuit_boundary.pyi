"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class Sources:
    """Manages sources in Circuit projects."""
    def __init__(self, app, name, source_type=...) -> None:
        ...
    
    @property
    def name(self): # -> Any:
        """Source name.

        Returns
        -------
        str
        """
        ...
    
    @name.setter
    def name(self, source_name): # -> None:
        ...
    
    @pyaedt_function_handler()
    def update(self, original_name=..., new_source=...): # -> Literal[True]:
        """Update the source in AEDT.

        Parameters
        ----------
        original_name : str, optional
            Original name of the source. The default value is ``None``.
        new_source : str, optional
            New name of the source. The default value is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the source in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> Literal[True]:
        """Create a new source in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


class PowerSinSource(Sources):
    """Power Sinusoidal Class."""
    def __init__(self, app, name, source_type=...) -> None:
        ...
    
    @property
    def ac_magnitude(self):
        """AC magnitude value.

        Returns
        -------
        str
        """
        ...
    
    @ac_magnitude.setter
    def ac_magnitude(self, value): # -> None:
        ...
    
    @property
    def ac_phase(self):
        """AC phase value.

        Returns
        -------
        str
        """
        ...
    
    @ac_phase.setter
    def ac_phase(self, value): # -> None:
        ...
    
    @property
    def dc_magnitude(self):
        """DC voltage value.

        Returns
        -------
        str
        """
        ...
    
    @dc_magnitude.setter
    def dc_magnitude(self, value): # -> None:
        ...
    
    @property
    def power_offset(self):
        """Power offset from zero watts.

        Returns
        -------
        str
        """
        ...
    
    @power_offset.setter
    def power_offset(self, value): # -> None:
        ...
    
    @property
    def power_magnitude(self):
        """Available power of the source above power offset.

        Returns
        -------
        str
        """
        ...
    
    @power_magnitude.setter
    def power_magnitude(self, value): # -> None:
        ...
    
    @property
    def frequency(self):
        """Frequency.

        Returns
        -------
        str
        """
        ...
    
    @frequency.setter
    def frequency(self, value): # -> None:
        ...
    
    @property
    def delay(self):
        """Delay to start of sine wave.

        Returns
        -------
        str
        """
        ...
    
    @delay.setter
    def delay(self, value): # -> None:
        ...
    
    @property
    def damping_factor(self):
        """Damping factor.

        Returns
        -------
        str
        """
        ...
    
    @damping_factor.setter
    def damping_factor(self, value): # -> None:
        ...
    
    @property
    def phase_delay(self):
        """Phase delay.

        Returns
        -------
        str
        """
        ...
    
    @phase_delay.setter
    def phase_delay(self, value): # -> None:
        ...
    
    @property
    def tone(self):
        """Frequency to use for harmonic balance.

        Returns
        -------
        str
        """
        ...
    
    @tone.setter
    def tone(self, value): # -> None:
        ...
    


class PowerIQSource(Sources):
    """Power IQ Class."""
    def __init__(self, app, name, source_type=...) -> None:
        ...
    
    @property
    def carrier_frequency(self):
        """Carrier frequency value.

        Returns
        -------
        str
        """
        ...
    
    @carrier_frequency.setter
    def carrier_frequency(self, value): # -> None:
        ...
    
    @property
    def sampling_time(self):
        """Sampling time value.

        Returns
        -------
        str
        """
        ...
    
    @sampling_time.setter
    def sampling_time(self, value): # -> None:
        ...
    
    @property
    def dc_magnitude(self):
        """DC voltage value.

        Returns
        -------
        str
        """
        ...
    
    @dc_magnitude.setter
    def dc_magnitude(self, value): # -> None:
        ...
    
    @property
    def repeat_from(self):
        """Repeat from time.

        Returns
        -------
        str
        """
        ...
    
    @repeat_from.setter
    def repeat_from(self, value): # -> None:
        ...
    
    @property
    def delay(self):
        """Delay to start of sine wave.

        Returns
        -------
        str
        """
        ...
    
    @delay.setter
    def delay(self, value): # -> None:
        ...
    
    @property
    def carrier_amplitude_voltage(self):
        """Carrier amplitude value, voltage-based.

        Returns
        -------
        str
        """
        ...
    
    @carrier_amplitude_voltage.setter
    def carrier_amplitude_voltage(self, value): # -> None:
        ...
    
    @property
    def carrier_amplitude_power(self):
        """Carrier amplitude value, power-based.

        Returns
        -------
        str
        """
        ...
    
    @carrier_amplitude_power.setter
    def carrier_amplitude_power(self, value): # -> None:
        ...
    
    @property
    def carrier_offset(self):
        """Carrier offset.

        Returns
        -------
        str
        """
        ...
    
    @carrier_offset.setter
    def carrier_offset(self, value): # -> None:
        ...
    
    @property
    def real_impedance(self):
        """Real carrier impedance.

        Returns
        -------
        str
        """
        ...
    
    @real_impedance.setter
    def real_impedance(self, value): # -> None:
        ...
    
    @property
    def imaginary_impedance(self):
        """Imaginary carrier impedance.

        Returns
        -------
        str
        """
        ...
    
    @imaginary_impedance.setter
    def imaginary_impedance(self, value): # -> None:
        ...
    
    @property
    def damping_factor(self):
        """Damping factor.

        Returns
        -------
        str
        """
        ...
    
    @damping_factor.setter
    def damping_factor(self, value): # -> None:
        ...
    
    @property
    def phase_delay(self):
        """Phase delay.

        Returns
        -------
        str
        """
        ...
    
    @phase_delay.setter
    def phase_delay(self, value): # -> None:
        ...
    
    @property
    def tone(self):
        """Frequency to use for harmonic balance.

        Returns
        -------
        str
        """
        ...
    
    @tone.setter
    def tone(self, value): # -> None:
        ...
    
    @property
    def i_q_values(self): # -> list[Any]:
        """I and Q value at each timepoint.

        Returns
        -------
        str
        """
        ...
    
    @i_q_values.setter
    def i_q_values(self, value): # -> None:
        ...
    
    @property
    def file(self):
        """File path with I and Q values.

        Returns
        -------
        str
        """
        ...
    
    @file.setter
    def file(self, value): # -> None:
        ...
    


class VoltageFrequencyDependentSource(Sources):
    """Voltage Frequency Dependent Class."""
    def __init__(self, app, name, source_type=...) -> None:
        ...
    
    @property
    def frequencies(self):
        """List of frequencies in ``Hz``.

        Returns
        -------
        list
        """
        ...
    
    @frequencies.setter
    def frequencies(self, value): # -> None:
        ...
    
    @property
    def vmag(self):
        """List of magnitudes in ``V``.

        Returns
        -------
        list
        """
        ...
    
    @vmag.setter
    def vmag(self, value): # -> None:
        ...
    
    @property
    def vang(self):
        """List of angles in ``rad``.

        Returns
        -------
        list
        """
        ...
    
    @vang.setter
    def vang(self, value): # -> None:
        ...
    
    @property
    def vreal(self):
        """List of real values in ``V``.

        Returns
        -------
        list
        """
        ...
    
    @vreal.setter
    def vreal(self, value): # -> None:
        ...
    
    @property
    def vimag(self):
        """List of imaginary values in ``V``.

        Returns
        -------
        list
        """
        ...
    
    @vimag.setter
    def vimag(self, value): # -> None:
        ...
    
    @property
    def magnitude_angle(self):
        """Enable magnitude and angle data.

        Returns
        -------
        bool
        """
        ...
    
    @magnitude_angle.setter
    def magnitude_angle(self, value): # -> None:
        ...
    
    @property
    def fds_filename(self):
        """FDS file path.

        Returns
        -------
        bool
        """
        ...
    
    @fds_filename.setter
    def fds_filename(self, name): # -> None:
        ...
    


class VoltageDCSource(Sources):
    """Power Sinusoidal Class."""
    def __init__(self, app, name, source_type=...) -> None:
        ...
    
    @property
    def ac_magnitude(self):
        """AC magnitude value.

        Returns
        -------
        str
        """
        ...
    
    @ac_magnitude.setter
    def ac_magnitude(self, value): # -> None:
        ...
    
    @property
    def ac_phase(self):
        """AC phase value.

        Returns
        -------
        str
        """
        ...
    
    @ac_phase.setter
    def ac_phase(self, value): # -> None:
        ...
    
    @property
    def dc_magnitude(self):
        """DC voltage value.

        Returns
        -------
        str
        """
        ...
    
    @dc_magnitude.setter
    def dc_magnitude(self, value): # -> None:
        ...
    


class VoltageSinSource(Sources):
    """Power Sinusoidal Class."""
    def __init__(self, app, name, source_type=...) -> None:
        ...
    
    @property
    def ac_magnitude(self):
        """AC magnitude value.

        Returns
        -------
        str
        """
        ...
    
    @ac_magnitude.setter
    def ac_magnitude(self, value): # -> None:
        ...
    
    @property
    def ac_phase(self):
        """AC phase value.

        Returns
        -------
        str
        """
        ...
    
    @ac_phase.setter
    def ac_phase(self, value): # -> None:
        ...
    
    @property
    def dc_magnitude(self):
        """DC voltage value.

        Returns
        -------
        str
        """
        ...
    
    @dc_magnitude.setter
    def dc_magnitude(self, value): # -> None:
        ...
    
    @property
    def voltage_amplitude(self):
        """Voltage amplitude.

        Returns
        -------
        str
        """
        ...
    
    @voltage_amplitude.setter
    def voltage_amplitude(self, value): # -> None:
        ...
    
    @property
    def voltage_offset(self):
        """Voltage offset from zero watts.

        Returns
        -------
        str
        """
        ...
    
    @voltage_offset.setter
    def voltage_offset(self, value): # -> None:
        ...
    
    @property
    def frequency(self):
        """Frequency.

        Returns
        -------
        str
        """
        ...
    
    @frequency.setter
    def frequency(self, value): # -> None:
        ...
    
    @property
    def delay(self):
        """Delay to start of sine wave.

        Returns
        -------
        str
        """
        ...
    
    @delay.setter
    def delay(self, value): # -> None:
        ...
    
    @property
    def damping_factor(self):
        """Damping factor.

        Returns
        -------
        str
        """
        ...
    
    @damping_factor.setter
    def damping_factor(self, value): # -> None:
        ...
    
    @property
    def phase_delay(self):
        """Phase delay.

        Returns
        -------
        str
        """
        ...
    
    @phase_delay.setter
    def phase_delay(self, value): # -> None:
        ...
    
    @property
    def tone(self):
        """Frequency to use for harmonic balance.

        Returns
        -------
        str
        """
        ...
    
    @tone.setter
    def tone(self, value): # -> None:
        ...
    


class CurrentSinSource(Sources):
    """Current Sinusoidal Class."""
    def __init__(self, app, name, source_type=...) -> None:
        ...
    
    @property
    def ac_magnitude(self):
        """AC magnitude value.

        Returns
        -------
        str
        """
        ...
    
    @ac_magnitude.setter
    def ac_magnitude(self, value): # -> None:
        ...
    
    @property
    def ac_phase(self):
        """AC phase value.

        Returns
        -------
        str
        """
        ...
    
    @ac_phase.setter
    def ac_phase(self, value): # -> None:
        ...
    
    @property
    def dc_magnitude(self):
        """DC current value.

        Returns
        -------
        str
        """
        ...
    
    @dc_magnitude.setter
    def dc_magnitude(self, value): # -> None:
        ...
    
    @property
    def current_amplitude(self):
        """Current amplitude.

        Returns
        -------
        str
        """
        ...
    
    @current_amplitude.setter
    def current_amplitude(self, value): # -> None:
        ...
    
    @property
    def current_offset(self):
        """Current offset.

        Returns
        -------
        str
        """
        ...
    
    @current_offset.setter
    def current_offset(self, value): # -> None:
        ...
    
    @property
    def frequency(self):
        """Frequency.

        Returns
        -------
        str
        """
        ...
    
    @frequency.setter
    def frequency(self, value): # -> None:
        ...
    
    @property
    def delay(self):
        """Delay to start of sine wave.

        Returns
        -------
        str
        """
        ...
    
    @delay.setter
    def delay(self, value): # -> None:
        ...
    
    @property
    def damping_factor(self):
        """Damping factor.

        Returns
        -------
        str
        """
        ...
    
    @damping_factor.setter
    def damping_factor(self, value): # -> None:
        ...
    
    @property
    def phase_delay(self):
        """Phase delay.

        Returns
        -------
        str
        """
        ...
    
    @phase_delay.setter
    def phase_delay(self, value): # -> None:
        ...
    
    @property
    def multiplier(self):
        """Multiplier for simulating multiple parallel current sources.

        Returns
        -------
        str
        """
        ...
    
    @multiplier.setter
    def multiplier(self, value): # -> None:
        ...
    
    @property
    def tone(self):
        """Frequency to use for harmonic balance.

        Returns
        -------
        str
        """
        ...
    
    @tone.setter
    def tone(self, value): # -> None:
        ...
    


class Excitations:
    """Manages Excitations in Circuit Projects.

    Examples
    --------

    """
    def __init__(self, app, name) -> None:
        ...
    
    @property
    def name(self): # -> Any:
        """Excitation name.

        Returns
        -------
        str
        """
        ...
    
    @name.setter
    def name(self, port_name): # -> None:
        ...
    
    @property
    def angle(self):
        """Symbol angle.

        Returns
        -------
        float
        """
        ...
    
    @angle.setter
    def angle(self, angle): # -> None:
        ...
    
    @property
    def mirror(self): # -> bool:
        """Enable port mirror.

        Returns
        -------
        bool
        """
        ...
    
    @mirror.setter
    def mirror(self, mirror_value=...): # -> None:
        ...
    
    @property
    def location(self):
        """Port location.

        Returns
        -------
        list
        """
        ...
    
    @location.setter
    def location(self, location_xy): # -> None:
        ...
    
    @property
    def use_symbol_color(self): # -> bool:
        """Use symbol color.

        Returns
        -------
        list
        """
        ...
    
    @use_symbol_color.setter
    def use_symbol_color(self, use_color=...): # -> None:
        ...
    
    @property
    def impedance(self): # -> list[Any]:
        """Port termination.

        Returns
        -------
        list
        """
        ...
    
    @impedance.setter
    def impedance(self, termination=...): # -> None:
        ...
    
    @property
    def enable_noise(self):
        """Enable noise.

        Returns
        -------
        bool
        """
        ...
    
    @enable_noise.setter
    def enable_noise(self, enable=...): # -> None:
        ...
    
    @property
    def noise_temperature(self):
        """Enable noise.

        Returns
        -------
        str
        """
        ...
    
    @noise_temperature.setter
    def noise_temperature(self, noise=...): # -> None:
        ...
    
    @property
    def microwave_symbol(self): # -> bool:
        """Enable microwave symbol.

        Returns
        -------
        bool
        """
        ...
    
    @microwave_symbol.setter
    def microwave_symbol(self, enable=...): # -> None:
        ...
    
    @property
    def reference_node(self): # -> Literal['Ground']:
        """Reference node.

        Returns
        -------
        str
        """
        ...
    
    @reference_node.setter
    def reference_node(self, ref_node=...): # -> None:
        ...
    
    @property
    def enabled_sources(self):
        """Enabled sources.

        Returns
        -------
        list
        """
        ...
    
    @enabled_sources.setter
    def enabled_sources(self, sources=...): # -> None:
        ...
    
    @property
    def enabled_analyses(self):
        """Enabled analyses.

        Returns
        -------
        dict
        """
        ...
    
    @enabled_analyses.setter
    def enabled_analyses(self, analyses=...): # -> None:
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the excitation in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the port in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


