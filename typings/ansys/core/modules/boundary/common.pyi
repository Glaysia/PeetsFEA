"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import PropsManager, pyaedt_function_handler
from ansys.aedt.core.modeler.cad.elements_3d import BinaryTreeNode

"""This module contains these classes: ``BoundaryCommon`` and ``BoundaryObject``."""
class BoundaryProps(dict):
    """AEDT Boundary Component Internal Parameters."""
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __init__(self, boundary, props) -> None:
        ...
    


class BoundaryCommon(PropsManager):
    """ """
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the boundary.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


def disable_auto_update(func): # -> Callable[..., Any]:
    """Decorator used to disable automatic update."""
    ...

class BoundaryObject(BoundaryCommon, BinaryTreeNode):
    """Manages boundary data and execution.

    Parameters
    ----------
    app : object
        An AEDT application from ``ansys.aedt.core.application``.
    name : str
        Name of the boundary.
    props : dict, optional
        Properties of the boundary.
    boundarytype : str, optional
        Type of the boundary.

    Examples
    --------

    Create a cylinder at the XY working plane and assign a copper coating of 0.2 mm to it. The Coating is a boundary
    operation and coat will return a ``ansys.aedt.core.modules.boundary.common.BoundaryObject``

    >>> from ansys.aedt.core import Hfss
    >>> hfss = Hfss()
    >>> origin = hfss.modeler.Position(0, 0, 0)
    >>> inner = hfss.modeler.create_cylinder(hfss.PLANE.XY, origin, 3, 200, 0, "inner")
    >>> inner_id = hfss.modeler.get_obj_id(
    ...     "inner",
    ... )
    >>> coat = hfss.assign_finite_conductivity([inner_id], "copper", use_thickness=True, thickness="0.2mm")
    """
    def __init__(self, app, name, props=..., boundarytype=..., auto_update=...) -> None:
        ...
    
    @property
    def props(self): # -> BoundaryProps | dict[Any, Any] | None:
        """Boundary data.

        Returns
        -------
        :class:BoundaryProps
        """
        ...
    
    @property
    def type(self): # -> Literal['SourceIcepak'] | None:
        """Boundary type.

        Returns
        -------
        str
            Returns the type of the boundary.
        """
        ...
    
    @type.setter
    def type(self, value): # -> None:
        ...
    
    @property
    def name(self): # -> str | Any:
        """Boundary Name."""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> bool:
        """Create a boundary.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> bool:
        """Update the boundary.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def update_assignment(self): # -> bool:
        """Update the boundary assignment.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


