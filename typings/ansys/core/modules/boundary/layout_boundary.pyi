"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.elements_3d import BinaryTreeNode
from ansys.aedt.core.modules.boundary.common import BoundaryCommon, disable_auto_update

class NativeComponentObject(BoundaryCommon, BinaryTreeNode):
    """Manages Native Component data and execution.

    Parameters
    ----------
    app : object
        An AEDT application from ``ansys.aedt.core.application``.
    component_type : str
        Type of the component.
    component_name : str
        Name of the component.
    props : dict
        Properties of the boundary.

    Examples
    --------
    This example the par_beam returned object is a
    :class:`ansys.aedt.core.modules.boundary.layout_boundary.NativeComponentObject`.

    >>> from ansys.aedt.core import Hfss
    >>> hfss = Hfss(solution_type="SBR+")
    >>> ffd_file = "path/to/ffdfile.ffd"
    >>> par_beam = hfss.create_sbr_file_based_antenna(ffd_file)
    >>> par_beam.native_properties["Size"] = "0.1mm"
    >>> par_beam.update()
    >>> par_beam.delete()
    """
    def __init__(self, app, component_type, component_name, props) -> None:
        ...
    
    @property
    def props(self): # -> BoundaryProps:
        ...
    
    @property
    def name(self): # -> str | Any:
        """Boundary Name."""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @property
    def definition_name(self): # -> None:
        """Definition name of the native component.

        Returns
        -------
        str
           Name of the native component.

        """
        ...
    
    @property
    def targetcs(self): # -> Literal['Global']:
        """Native Component Coordinate System.

        Returns
        -------
        str
            Native Component Coordinate System.
        """
        ...
    
    @targetcs.setter
    def targetcs(self, cs): # -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> bool:
        """Create a Native Component in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the Native Component in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the Native Component in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


class BoundaryObject3dLayout(BoundaryCommon, BinaryTreeNode):
    """Manages boundary data and execution for Hfss3dLayout.

    Parameters
    ----------
    app : object
        An AEDT application from ``ansys.aedt.core.application``.
    name : str
        Name of the boundary.
    props : dict, optional
        Properties of the boundary.
    boundarytype : str
        Type of the boundary.
    """
    def __init__(self, app, name, props=..., boundarytype=...) -> None:
        ...
    
    @property
    def name(self): # -> Any:
        """Boundary Name."""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @property
    def props(self): # -> BoundaryProps | None:
        """Excitation data.

        Returns
        -------
        :class:BoundaryProps
        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the boundary.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


class NativeComponentPCB(NativeComponentObject):
    """Manages native component PCB data and execution.

    Parameters
    ----------
    app : object
        AEDT application from the ``pyaedt.application`` class.
    component_type : str
        Type of the component.
    component_name : str
        Name of the component.
    props : dict
        Properties of the boundary.
    """
    def __init__(self, app, component_type, component_name, props) -> None:
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def set_resolution(self, resolution): # -> bool:
        """Set metal fraction mapping resolution.

        Parameters
        -------
        resolution : int
            Resolution level. Accepted variables between 1 and 5.

        Returns
        -------
        bool
            True if successful, else False.
        """
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def set_custom_resolution(self, row, col): # -> Literal[True]:
        """Set custom metal fraction mapping resolution.

        Parameters
        ----------
        row : int
            Resolution level in rows direction.
        col : int
            Resolution level in columns direction.

        Returns
        -------
        bool
            True if successful, else False.
        """
        ...
    
    @property
    def power(self):
        """Power dissipation assigned to the PCB."""
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def set_high_side_radiation(self, enabled, surface_material=..., radiate_to_ref_temperature=..., view_factor=..., ref_temperature=...): # -> Literal[True]:
        """Set high side radiation properties.

        Parameters
        ----------
        enabled : bool
            Whether high side radiation is enabled.
        surface_material : str, optional
            Surface material to apply. Default is ``"Steel-oxidised-surface"``.
        radiate_to_ref_temperature : bool, optional
            Whether to radiate to a reference temperature instead of objects in the model.
            Default is ``False``.
        view_factor : float, optional
            View factor to use for radiation computation if ``radiate_to_ref_temperature``
            is set to ``True``. Default is 1.
        ref_temperature : str, optional
            Reference temperature to use for radiation computation if
            ``radiate_to_ref_temperature`` is set to True. Default is ``"AmbientTemp"``.

        Returns
        -------
        bool
            ``True`` if successful, else ``False``.
        """
        ...
    
    @power.setter
    @disable_auto_update
    def power(self, value): # -> None:
        """Assign power dissipation to the PCB.

        Parameters
        ----------
        value : str
            Power to apply to the PCB.
        """
        ...
    
    @property
    def force_source_solve(self):
        """Force source solution option."""
        ...
    
    @force_source_solve.setter
    @disable_auto_update
    def force_source_solve(self, val): # -> None:
        """Set Whether to force source solution.

        Parameters
        ----------
        value : bool
            Whether to force source solution.
        """
        ...
    
    @property
    def preserve_partner_solution(self):
        """Preserve parner solution option."""
        ...
    
    @preserve_partner_solution.setter
    @disable_auto_update
    def preserve_partner_solution(self, val): # -> None:
        """Set Whether to preserve partner solution.

        Parameters
        ----------
        val : bool
            Whether to preserve partner solution.
        """
        ...
    
    @property
    def included_parts(self): # -> PCBSettingsDeviceParts | PCBSettingsPackageParts | None:
        """Parts options."""
        ...
    
    @included_parts.setter
    @disable_auto_update
    def included_parts(self, value): # -> None:
        """Set PCB parts incusion option.

        Parameters
        ----------
        value : str or int
            Valid options are ``"None"``, ``"Device"``, and ``"Package"`` (or 0, 1, and 2 respectivaly)
        """
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def set_low_side_radiation(self, enabled, surface_material=..., radiate_to_ref_temperature=..., view_factor=..., ref_temperature=...): # -> Literal[True]:
        """Set low side radiation properties.

        Parameters
        ----------
        enabled : bool
            Whether high side radiation is enabled.
        surface_material : str, optional
            Surface material to apply. Default is ``"Steel-oxidised-surface"``.
        radiate_to_ref_temperature : bool, optional
            Whether to radiate to a reference temperature instead of objects in the model.
            Default is ``False``.
        view_factor : float, optional
            View factor to use for radiation computation if ``radiate_to_ref_temperature``
            is set to True. Default is 1.
        ref_temperature : str, optional
            Reference temperature to use for radiation computation if
            ``radiate_to_ref_temperature`` is set to ``True``. Default is ``"AmbientTemp"``.

        Returns
        -------
        bool
            ``True`` if successful, else ``False``.
        """
        ...
    
    @power.setter
    @disable_auto_update
    def power(self, value): # -> None:
        """Assign power dissipation to the PCB.

        Parameters
        ----------
        value : str
            Power to apply to the PCB.
        """
        ...
    
    @force_source_solve.setter
    @disable_auto_update
    def force_source_solve(self, val): # -> None:
        """Set Whether to force source solution.

        Parameters
        ----------
        value : bool
            Whether to force source solution.
        """
        ...
    
    @preserve_partner_solution.setter
    @disable_auto_update
    def preserve_partner_solution(self, val): # -> None:
        """Set Whether to preserve partner solution.

        Parameters
        ----------
        val : bool
            Whether to preserve partner solution.
        """
        ...
    
    @included_parts.setter
    @disable_auto_update
    def included_parts(self, value): # -> None:
        """Set PCB parts incusion option.

        Parameters
        ----------
        value : str or int
            Valid options are ``"None"``, ``"Device"``, and ``"Package"`` (or 0, 1, and 2 respectivaly)
        """
        ...
    
    @pyaedt_function_handler()
    def identify_extent_poly(self): # -> Literal[False]:
        """Get polygon that defines board extent.

        Returns
        -------
        str
            Name of the polygon to include.
        """
        ...
    
    @property
    def board_cutout_material(self):
        """Material applied to cutout regions."""
        ...
    
    @property
    def via_holes_material(self):
        """Material applied to via hole regions."""
        ...
    
    @board_cutout_material.setter
    @disable_auto_update
    def board_cutout_material(self, value): # -> None:
        """Set material to apply to cutout regions.

        Parameters
        ----------
        value : str
            Material to apply to cutout regions.
        """
        ...
    
    @via_holes_material.setter
    @disable_auto_update
    def via_holes_material(self, value): # -> None:
        """Set material to apply to via hole regions.

        Parameters
        ----------
        value : str
            Material to apply to via hole regions.
        """
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def set_board_extents(self, extent_type=..., extent_polygon=...): # -> bool:
        """Set board extent.

        Parameters
        ----------
        extent_type : str, optional
            Extent definition of the PCB. Default is ``None`` in which case the 3D Layout extent
            will be used. Other possible options are: ``"Bounding Box"`` or ``"Polygon"``.
        extent_polygon : str, optional
            Polygon name to use in the extent definition of the PCB. Default is ``None``. This
            argument is mandatory if ``extent_type`` is ``"Polygon"``.

        Returns
        -------
        bool
            ``True`` if successful. ``False`` otherwise.
        """
        ...
    


class PCBSettingsPackageParts:
    """Handle package part settings of the PCB component.

    Parameters
    ----------
    pcb_obj : :class:`ansys.aedt.core.modules.layout_boundary.NativeComponentPCB`
            Inherited pcb object.
    app : :class:`pyaedt.Icepak`
            Inherited application object.
    """
    def __init__(self, pcb_obj, app) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def set_solderballs_modeling(self, modeling=...): # -> Literal[True]:
        """Set how to model solderballs.

        Parameters
        ----------
        modeling : str, optional
            Method for modeling solderballs located below the stackup. The default is
            ``None``, in which case they are not modeled. Options for modeling are
            ``"Boxes"``, ``"Cylinders"``, and ``"Lumped"``.

        Returns
        -------
        bool
            ``True`` if successful, ``False`` otherwise.
        """
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def set_connectors_modeling(self, modeling=..., solderbumps_modeling=..., bondwire_material=..., bondwire_diameter=...): # -> bool:
        """Set how to model connectors.

        Parameters
        ----------
            modeling : str, optional
                Method for modeling connectors located above the stackup. The default is
                ``None``, in which case they are not modeled. Options for modeling are
                ``"Bondwire"`` and ``"Solderbump"``.
            solderbumps_modeling : str, optional
                Method for modeling solderbumps if ``modeling="Solderbump"``.
                The default is ```"Boxes"``. Options are ``"Boxes"``, ``"Cylinders"``,
                and ``"Lumped"``.
            bondwire_material : str, optional
                Bondwire material if ``modeling="Bondwire"``. The default is
                ``"Au-Typical"``.
            bondwire_diameter : str, optional
                Bondwires diameter if ``modeling="Bondwire".
                The default is ``"0.05mm"``.

        Returns
        -------
        bool
            ``True`` if successful, ``False`` otherwise.
        """
        ...
    
    def __repr__(self): # -> Literal['Package']:
        ...
    


class PCBSettingsDeviceParts:
    """Handle device part settings of the PCB component.

    Parameters
    ----------
    pcb_obj : :class:`ansys.aedt.core.modules.layout_boundary.NativeComponentPCB`
            Inherited pcb object.
    app : :class:`pyaedt.Icepak`
            Inherited application object.
    """
    def __init__(self, pcb_obj, app) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __repr__(self): # -> Literal['Device']:
        ...
    
    @property
    @pyaedt_function_handler()
    def simplify_parts(self):
        """Get whether parts are simplified as cuboid."""
        ...
    
    @simplify_parts.setter
    @pyaedt_function_handler()
    def simplify_parts(self, value): # -> None:
        """Set whether parts are simplified as cuboid.

        Parameters
        ----------
        value : bool
            Whether parts are simplified as cuboid.
        """
        ...
    
    @property
    @pyaedt_function_handler()
    def surface_material(self):
        """Surface material to apply to parts."""
        ...
    
    @surface_material.setter
    @pyaedt_function_handler()
    def surface_material(self, value): # -> None:
        """Set surface material to apply to parts.

        Parameters
        ----------
        value : str
            Surface material to apply to parts.
        """
        ...
    
    @property
    @pyaedt_function_handler()
    def footprint_filter(self): # -> bool | None:
        """Minimum component footprint for filtering."""
        ...
    
    @footprint_filter.setter
    @pyaedt_function_handler()
    @disable_auto_update
    def footprint_filter(self, minimum_footprint): # -> None:
        """Set minimum component footprint for filtering.

        Parameters
        ----------
        minimum_footprint : str
            Value with unit of the minimum component footprint for filtering.
        """
        ...
    
    @property
    @pyaedt_function_handler()
    def power_filter(self): # -> bool | None:
        """Minimum component power for filtering."""
        ...
    
    @power_filter.setter
    @pyaedt_function_handler()
    @disable_auto_update
    def power_filter(self, minimum_power): # -> None:
        """Set minimum component power for filtering.

        Parameters
        ----------
        minimum_power : str
            Value with unit of the minimum component power for filtering.
        """
        ...
    
    @property
    @pyaedt_function_handler()
    def type_filters(self): # -> dict[str, bool] | None:
        """Types of component that are filtered."""
        ...
    
    @type_filters.setter
    @pyaedt_function_handler()
    @disable_auto_update
    def type_filters(self, object_type): # -> None:
        """Set types of component to filter.

        Parameters
        ----------
        object_type : str or list
            Types of object to filter. Options are ``"Capacitors"``, ``"Inductors"``, and ``"Resistors"``.
        """
        ...
    
    @property
    @pyaedt_function_handler()
    def height_filter(self): # -> bool | None:
        """Minimum component height for filtering."""
        ...
    
    @height_filter.setter
    @pyaedt_function_handler()
    @disable_auto_update
    def height_filter(self, minimum_height): # -> None:
        """Set minimum component height for filtering and whether to filter 2D objects.

        Parameters
        ----------
        minimum_height : str
            Value with unit of the minimum component power for filtering.
        """
        ...
    
    @property
    @pyaedt_function_handler()
    def objects_2d_filter(self): # -> dict[str, bool] | bool | None:
        """Whether 2d objects are filtered."""
        ...
    
    @objects_2d_filter.setter
    @pyaedt_function_handler(filter="enable")
    @disable_auto_update
    def objects_2d_filter(self, enable): # -> None:
        """Set whether 2d objects are filtered.

        Parameters
        ----------
        enable : bool
            Whether 2d objects are filtered.
        """
        ...
    
    @property
    @pyaedt_function_handler()
    def filters(self): # -> dict[str, dict[str, bool]] | None:
        """All active filters."""
        ...
    
    @property
    @pyaedt_function_handler()
    def overridden_components(self): # -> dict[Any, Any]:
        """All overridden components."""
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def override_definition(self, package, part, filter_component=..., power=..., r_jb=..., r_jc=..., height=...): # -> bool:
        """Set component override.

        Parameters
        ----------
        package : str
            Package name of the definition to override.
        part : str
            Part name of the definition to override.
        filter_component : bool, optional
            Whether to filter out the component. The default is ``False``.
        power : str, optional
            Override component power. Default is ``None``, in which case the power is not overridden.
        r_jb : str, optional
            Override component r_jb value. Default is ``None``, in which case the resistance is not overridden.
        r_jc : str, optional
            Override component r_jc value. Default is ``None``, in which case the resistance is not overridden.
        height : str, optional
            Override component height value. Default is ``None``, in which case the height is not overridden.

        Returns
        -------
        bool
            ``True`` if successful, ``False`` otherwise.
        """
        ...
    
    @pyaedt_function_handler()
    @disable_auto_update
    def override_instance(self, reference_designator, filter_component=..., power=..., r_jb=..., r_jc=..., height=...): # -> Literal[True]:
        """Set instance override.

        Parameters
        ----------
        reference_designator : str
            Reference designator of the instance to override.
        filter_component : bool, optional
            Whether to filter out the component. The default is ``False``.
        power : str, optional
            Override component power. The default is ``None``, in which case the power is not overridden.
        r_jb : str, optional
            Override component r_jb value. The default is ``None``, in which case the resistance is not overridden.
        r_jc : str, optional
            Override component r_jc value. The default is ``None``, in which case the resistance is not overridden.
        height : str, optional
            Override component height value. The default is ``None``, in which case the height is not overridden.

        Returns
        -------
        bool
            ``True`` if successful, ``False`` otherwise.
        """
        ...
    


