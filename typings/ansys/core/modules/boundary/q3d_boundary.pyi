"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class Matrix:
    """Manages Matrix in Q3d and Q2d Projects.

    Examples
    --------


    """
    def __init__(self, app, name, operations=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def sources(self, is_gc_sources=...): # -> list[Any]:
        """List of matrix sources.

        Parameters
        ----------
        is_gc_sources : bool,
            In Q3d, define if to return GC sources or RL sources. Default `True`.

        Returns
        -------
        List
        """
        ...
    
    @pyaedt_function_handler()
    def get_sources_for_plot(self, get_self_terms=..., get_mutual_terms=..., first_element_filter=..., second_element_filter=..., category=...): # -> list[Any]:
        """Return a list of source of specified matrix ready to be used in plot reports.

        Parameters
        ----------
        get_self_terms : bool
            Either if self terms have to be returned or not.
        get_mutual_terms : bool
            Either if mutual terms have to be returned or not.
        first_element_filter : str, optional
            Filter to apply to first element of equation. It accepts `*` and `?` as special characters.
        second_element_filter : str, optional
            Filter to apply to second element of equation. It accepts `*` and `?` as special characters.
        category : str
            Plot category name as in the report. Eg. "C" is category Capacitance.
            Matrix `CATEGORIES` property can be used to map available categories.

        Returns
        -------
        list

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> q3d = Q3d(project_path)
        >>> q3d.matrices[0].get_sources_for_plot(
        ...     first_element_filter="Bo?1", second_element_filter="GND*", category="DCL"
        ... )
        """
        ...
    
    @property
    def operations(self): # -> list[Any]:
        """List of matrix operations.

        Returns
        -------
        List
        """
        ...
    
    @pyaedt_function_handler()
    def create(self, source_names=..., new_net_name=..., new_source_name=..., new_sink_name=...): # -> Literal[True]:
        """Create a new matrix.

        Parameters
        ----------
        source_names : str, list
            List or str containing the content of the matrix reduction (eg. source name).
        new_net_name : str, optional
            Name of the new net. The default is ``None``.
        new_source_name : str, optional
            Name of the new source. The default is ``None``.
        new_sink_name : str, optional
            Name of the new sink. The default is ``None``.

        Returns
        -------
        bool
            `True` if succeeded.
        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete current matrix.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def add_operation(self, operation_type, source_names=..., new_net_name=..., new_source_name=..., new_sink_name=...): # -> Literal[True]:
        """Add a new operation to existing matrix.

        Parameters
        ----------
        operation_type : str
            Operation to perform
        source_names : str, list
            List or str containing the content of the matrix reduction (eg. source name).
        new_net_name : str, optional
            Name of the new net. The default is ``None``.
        new_source_name : str, optional
            Name of the new source. The default is ``None``.
        new_sink_name : str, optional
            Name of the new sink. The default is ``None``.

        Returns
        -------
        bool
            `True` if succeeded.
        """
        ...
    


