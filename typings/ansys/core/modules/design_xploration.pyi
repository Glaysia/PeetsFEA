"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional
from ansys.aedt.core.generic.general_methods import PropsManager, pyaedt_function_handler

class CommonOptimetrics(PropsManager):
    """Creates and sets up optimizations.

    Parameters
    ----------
    p_app : :class:`ansys.aedt.core.application.analysis.Analysis`
        PyAEDT analysis instance.
    name : str
        Optimetrics setup name.
    dictinputs : dict
        Input setup parameters.
    optimtype : str
        Type of the optimization. Available options are: ``"OptiParametric"``, ``"OptiDesignExplorer"`,
        ``"OptiOptimization"``, ``"OptiSensitivity"``, ``"OptiStatistical"``, ``"OptiDXDOE"``, and ``"optiSLang"``.
    """
    def __init__(self, p_app, name, dictinputs, optimtype) -> None:
        ...
    
    @pyaedt_function_handler()
    def update(self, update_dictionary: Optional[Dict[str, Any]] = ...) -> bool:
        """Update the setup based on stored properties.

        Parameters
        ----------
        update_dictionary : dict, optional
            Dictionary to use. The  default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditSetup
        """
        ...
    
    @pyaedt_function_handler()
    def create(self) -> bool:
        """Create a setup.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.InsertSetup
        """
        ...
    
    @pyaedt_function_handler()
    def add_calculation(self, calculation, ranges=..., variables=..., solution=..., context=..., subdesign_id=..., polyline_points=..., report_type=...): # -> bool:
        """Add a calculation to the setup.

        Parameters
        ----------
        calculation : str, optional
            Name of the calculation.
        ranges : dict, optional
            Dictionary of ranges with respective values.
            Values can be: `None` for all values, a List of Discrete Values, a tuple of start and stop range.
            It includes intrinsics like "Freq", "Time", "Theta", "Distance".
            The default is ``None``, to be used e.g. in "Eigenmode" design type.
        solution : str, optional
            Type of the solution. The default is ``None``, in which case the default
            solution is used.
        context : str, optional
            Calculation contexts. It can be a sphere, a matrix or a polyline.
        subdesign_id : int, optional
            Subdesign id for Circuit and HFSS 3D Layout objects.
        polyline_points : int, optional
            Number of points for Polyline context.
        report_type : str, optional
            Override the auto computation of Calculation Type.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditSetup
        """
        ...
    
    @pyaedt_function_handler(num_cores="cores", num_tasks="tasks", num_gpu="gpus")
    def analyze(self, cores: int = ..., tasks: int = ..., gpus: int = ..., acf_file: str = ..., use_auto_settings: bool = ..., solve_in_batch: bool = ..., machine: str = ..., run_in_thread: bool = ..., revert_to_initial_mesh: bool = ..., blocking: bool = ...) -> bool:
        """Solve the active design.

        Parameters
        ----------
        cores : int, optional
            Number of simulation cores. The default is ``1``.
        tasks : int, optional
            Number of simulation tasks. The default is ``1``.
        gpus : int, optional
            Number of simulation graphic processing units to use. The default is ``0``.
        acf_file : str, optional
            Full path to the custom ACF file.
        use_auto_settings : bool, optional
            Set ``True`` to use automatic settings for HPC. The option is only considered for setups
            that support automatic settings.
        solve_in_batch : bool, optional
            Whether to solve the project in batch or not.
            If ``True`` the project will be saved, closed, solved and repened.
        machine : str, optional
            Name of the machine if remote.  The default is ``"localhost"``.
        run_in_thread : bool, optional
            Whether to submit the batch command as a thread. The default is
            ``False``.
        revert_to_initial_mesh : bool, optional
            Whether to revert to initial mesh before solving or not. Default is ``False``.
        blocking : bool, optional
            Whether to block script while analysis is completed or not. It works from AEDT 2023 R2.
            Default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.Analyze
        """
        ...
    


class SetupOpti(CommonOptimetrics):
    """Sets up an optimization in Opimetrics."""
    def __init__(self, app, name, dictinputs=..., optim_type=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete a defined Optimetrics Setup.

        Parameters
        ----------
        name : str
            Name of optimetrics setup to delete.

        Returns
        -------
        bool
            `True` if setup is deleted. `False` if it failed.
        """
        ...
    
    @pyaedt_function_handler()
    def add_goal(self, calculation, ranges, variables=..., solution=..., context=..., subdesign_id=..., polyline_points=..., report_type=..., condition=..., goal_value=..., goal_weight=...): # -> bool:
        """Add a goal to the setup.

        Parameters
        ----------
        calculation : str, optional
            Name of the calculation.
        ranges : dict
            Dictionary of ranges with respective values.
            Values can be: `None` for all values, a List of Discrete Values, a tuple of start and stop range.
            It includes intrinsics like "Freq", "Time", "Theta", "Distance".
        variables : list, optional
            List of variables to include in the optimization.
        condition : string, optional
            The default is ``"<="``.
        goal_value : optional
            Value for the goal. The default is ``1``.
        goal_weight : optional
            Value for the goal weight. The default is ``1``.
        solution : str, optional
            Type of the solution. The default is ``None``, in which case the default
            solution is used.
        context : str, optional
            Calculation contexts. It can be a sphere, a matrix or a polyline.
        subdesign_id : int, optional
            Subdesign id for Circuit and HFSS 3D Layout objects.
        polyline_points : int, optional
            Number of points for Polyline context.
        report_type : str, optional
            Override the auto computation of Calculation Type.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditSetup
        """
        ...
    
    @pyaedt_function_handler()
    def add_variation(self, variable_name, min_value, max_value, starting_point=..., min_step=..., max_step=..., use_manufacturable=..., levels=...): # -> bool:
        """Add a new variable as input for the optimization and defines its ranges.

        Parameters
        ----------
        variable_name : str
            Name of the variable.
        min_value : float
            Minimum Optimization Value for variable_name.
        max_value : float
            Maximum Optimization Value for variable_name.
        starting_point : float, optional
            Starting point for optimization. If None, default will be used.
        min_step : float
            Minimum Step Size for optimization. If None, 1/100 of the range will be used.
        max_step : float
            Maximum Step Size for optimization. If None, 1/10 of the range will be used.
        use_manufacturable : bool
            Either if to use or not the manufacturable values. Default is False.
        levels : list, optional
            List of available manufacturer levels.

        Returns
        -------
        bool
        """
        ...
    


class SetupParam(CommonOptimetrics):
    """Sets up a parametric analysis in Optimetrics."""
    def __init__(self, p_app, name, dictinputs=..., optim_type=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete a defined Optimetrics Setup.

        Returns
        -------
        bool
            ``True`` if setup is deleted. ``False`` if it failed.
        """
        ...
    
    @pyaedt_function_handler(sweep_var="sweep_variable", unit="units")
    def add_variation(self, sweep_variable, start_point, end_point=..., step=..., units=..., variation_type=...): # -> bool:
        """Add a variation to an existing parametric setup.

        Parameters
        ----------
        sweep_variable : str
            Name of the variable.
        start_point : float or int
            Variation Start Point.
        end_point : float or int, optional
            Variation End Point. This parameter is optional if a Single Value is defined.
        step : float or int, optional
            Variation Step or Count depending on variation_type. Default is `100`.
        units : str, optional
            Variation units. Default is `None`.
        variation_type : str, optional
            Variation Type. Admitted values are `"SingleValue", `"LinearCount"`, `"LinearStep"`,
            `"DecadeCount"`, `"OctaveCount"`, `"ExponentialCount"`.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditSetup
        """
        ...
    
    @pyaedt_function_handler()
    def sync_variables(self, variables, sync_n=...): # -> bool:
        """Sync variable variations in an existing parametric setup.
        Setting the sync number to `0` will effectively unsync the variables.

        Parameters
        ----------
        variables : list
            List of variables to sync.
        sync_n : int, optional
            Sync number. Sweep variables with the same Sync number will be synchronizad.
            Default is `1`.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditSetup
        """
        ...
    
    @pyaedt_function_handler(filename="output_file")
    def export_to_csv(self, output_file): # -> Literal[True]:
        """Export the current Parametric Setup to csv.

        Parameters
        ----------
        output_file : str
            Full Path to the csv file.

        Returns
        -------
        bool
            `True` if the export is correctly executed.
        """
        ...
    


class ParametricSetups:
    """Sets up Parametrics analyses. It includes Parametrics, Sensitivity and Statistical Analysis.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> app = Hfss()
    >>> sensitivity_setups = app.parametrics
    """
    def __init__(self, p_app) -> None:
        ...
    
    @property
    def p_app(self): # -> Any:
        """Parent."""
        ...
    
    @property
    def optimodule(self):
        """Optimetrics module.

        Returns
        -------
        :class:`Optimetrics`

        """
        ...
    
    @pyaedt_function_handler(sweep_var="variable", parametricname="name")
    def add(self, variable, start_point, end_point=..., step=..., variation_type=..., solution=..., name=...): # -> SetupParam | Literal[False]:
        """Add a basic sensitivity analysis.
        You can customize all options after the analysis is added.

        Parameters
        ----------
        variable : str
            Name of the variable.
        start_point : float, int or str
            Variation Start Point if a variation is defined or Single Value.
        end_point : float or int, optional
            Variation End Point. This parameter is optional if a Single Value is defined.
        step : float, int, or str
            Variation Step or Count depending on variation_type. The default is ``100``
            for the "LinearCount" variation_type. If a string is passed as an argument, it
            must be a valid expression in the given context. For example, "0.1mm" may be passed
            for a step size when the variation_type is "LinearStep".
        variation_type : str, optional
            Variation Type. Permitted values are `"LinearCount"`, `"LinearStep"`, `"LogScale"`, `"SingleValue"`.
        solution : str, optional
            Type of the solution. The default is ``None``, in which case the default
            solution is used.
        name : str, optional
            Name of the sensitivity analysis. The default is ``None``, in which case
            a default name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modules.design_xploration.SetupParam`
            Optimization Object.

        References
        ----------
        >>> oModule.InsertSetup
        """
        ...
    
    @pyaedt_function_handler(setup_name="name")
    def delete(self, name): # -> bool:
        """Delete a defined Parametric Setup.

        Parameters
        ----------
        name : str
            Name of parametric setup to delete.

        Returns
        -------
        bool
            ``True`` if setup is deleted. ``False`` if it failed.
        """
        ...
    
    @pyaedt_function_handler(filename="input_file", parametricname="name")
    def add_from_file(self, input_file, name=...): # -> Literal[True]:
        """Add a Parametric setup from either a csv or txt file.

        Parameters
        ----------
        input_file : str
            ``.csv`` or ``.txt`` file path.
        name : str, option
            Name of parametric setup.

        Returns
        -------
        bool
            ``True`` if the import is executed correctly. ``False`` if it failed.
        """
        ...
    


class OptimizationSetups:
    """Sets up optimizations. It includes Optimization, DOE and DesignXplorer Analysis.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> app = Hfss()
    >>> optimization_setup = app.optimizations
    """
    def __init__(self, p_app) -> None:
        ...
    
    @property
    def p_app(self): # -> Any:
        """Parent."""
        ...
    
    @property
    def optimodule(self):
        """Optimetrics module.

        Returns
        -------
        :class:`Optimetrics`

        """
        ...
    
    @pyaedt_function_handler(setup_name="name")
    def delete(self, name): # -> bool:
        """Delete a defined Optimetrics Setup.

        Parameters
        ----------
        name : str
            Name of optimetrics setup to delete.

        Returns
        -------
        bool
            ``True`` if setup is deleted. ``False`` if it failed.
        """
        ...
    
    @pyaedt_function_handler(optim_type="optimization_type", parametricname="name")
    def add(self, calculation=..., ranges=..., variables=..., optimization_type=..., condition=..., goal_value=..., goal_weight=..., solution=..., name=..., context=..., subdesign_id=..., polyline_points=..., report_type=...):
        """Add a basic optimization analysis.
        You can customize all options after the analysis is added.

        Parameters
        ----------
        calculation : str, optional
            Name of the calculation.
        ranges : dict, optional
            Dictionary of ranges with respective values.
            Values can be: a list of discrete values, a dict with tuple args of start and stop range.
            It includes intrinsics like "Freq", "Time", "Theta", "Distance".
        variables : list, optional
            List of variables to include in the optimization. By default all variables are included.
        optimization_type : strm optional
            Optimization Type.
            Possible values are `"Optimization"`, `"DXDOE"`,`"DesignExplorer"`,`"Sensitivity"`,`"Statistical"`
            and `"optiSLang"`.
        condition : string, optional
            The default is ``"<="``.
        goal_value : optional
            Value for the goal. The default is ``1``.
        goal_weight : optional
            Value for the goal weight. The default is ``1``.
        solution : str, optional
            Type of the solution. The default is ``None``, in which case the default
            solution is used.
        name : str, optional
            Name of the analysis. The default is ``None``, in which case a
            default name is assigned.
        context : str, optional
            Calculation contexts. It can be a sphere, a matrix or a polyline.
        subdesign_id : int, optional
            Subdesign id for Circuit and HFSS 3D Layout objects.
        polyline_points : int, optional
            Number of points for Polyline context.
        report_type : str, optional
            Override the auto computation of Calculation Type.

        Returns
        -------
        :class:`ansys.aedt.core.modules.design_xploration.SetupOpti`
            Optimization object.

        References
        ----------
        >>> oModule.InsertSetup
        """
        ...
    


