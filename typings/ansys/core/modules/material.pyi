"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

"""
This module contains these data classes for creating a material library:

* `BasicValue`
* `ClosedFormTM`
* `CommonMaterial`
* `Dataset`
* `MatProperties`
* `MatProperty`
* `Material`
* `SurMatProperties`
* `SufaceMaterial`

"""
class MatProperties:
    """Contains a list of constant names for all materials with mappings to their internal XML names.

    Internal names are used in scripts, and XML names are used in the XML syntax.
    """
    aedtname = ...
    defaultvalue = ...
    defaultunit = ...
    diel_order = ...
    cond_order = ...
    workbench_name = ...
    @classmethod
    def wb_to_aedt_name(cls, wb_name): # -> str:
        """Retrieve the corresponding AEDT property name for the specified Workbench property name.

        The Workbench names are specified in ``MatProperties.workbench_name``.
        The AEDT names are specified in ``MatProperties.aedtname``.

        Parameters
        ----------
        wb_name : str
            Workbench name of the property.

        Returns
        -------
        str
            AEDT name of the property.
        """
        ...
    
    @classmethod
    def get_defaultunit(cls, aedtname=...):
        """Retrieve the default unit for a full name or a category name.

        Parameters
        ----------
        aedtname : str, optional
            AEDT full name or category name. The default is ``None``.

        Returns
        -------
        str
            Default unit if it exists.
        """
        ...
    
    @classmethod
    def get_defaultvalue(cls, aedtname):
        """Retrieve the default value for a full name or a category name.

        Parameters
        ----------
        aedtname : str
             AEDT full name or category name. The default is ``None``.

        Returns
        -------
        float
            Default value if it exists.
        """
        ...
    


class SurfMatProperties:
    """Contains a list of constant names for all surface materials with mappings to their internal XML names.

    Internal names are used in scripts, and XML names are used in the XML syntax.
    """
    aedtname = ...
    defaultvalue = ...
    defaultunit = ...
    @classmethod
    def get_defaultunit(cls, aedtname=...):
        """Retrieve the default unit for a full name or a category name.

        Parameters
        ----------
        aedtname : str, optional
            AEDT full name or category name. The default is ``None``.

        Returns
        -------
        str
            Default unit if it exists.

        """
        ...
    
    @classmethod
    def get_defaultvalue(cls, aedtname=...):
        """Get the default value for a full name or a category name.

        Parameters
        ----------
        aedtname : str, optional
            AEDT full name or category name. The default is ``None``.

        Returns
        -------
        float
            Default value if it exists.

        """
        ...
    


class ClosedFormTM:
    """Manages closed-form thermal modifiers."""
    Tref = ...
    C1 = ...
    C2 = ...
    TL = ...
    TU = ...
    autocalculation = ...
    TML = ...
    TMU = ...


class Dataset:
    """Manages datasets."""
    ds = ...
    unitx = ...
    unity = ...
    unitz = ...
    type = ...
    namex = ...
    namey = ...
    namez = ...


class BasicValue:
    """Manages thermal and spatial modifier calculations."""
    def __init__(self) -> None:
        ...
    


class MatProperty:
    """Manages simple, anisotropic, tensor, and non-linear properties.

    Parameters
    ----------
    material : :class:`ansys.aedt.core.modules.material.Material`
        Inherited parent object.
    name : str
        Name of the material property.
    val :
        The default is ``None``.
    thermalmodifier
        The default is ``None``.
    spatialmodifier
        The default is ``None``.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> app = Hfss()
    >>> matproperty = app.materials["copper"].conductivity
    """
    def __init__(self, material, name, val=..., thermalmodifier=..., spatialmodifier=...) -> None:
        ...
    
    @property
    def type(self): # -> str:
        """Type of the material property.

        Parameters
        ----------
        type : str
            Type of properties. Options are ``"simple"``,
            ``"anisotropic"``, ``"tensor"``, ``"vector"``, and ``"nonlinear"``
        """
        ...
    
    @type.setter
    def type(self, type): # -> None:
        ...
    
    @property
    def evaluated_value(self): # -> list[Any]:
        """Evaluated value."""
        ...
    
    @property
    def value(self): # -> list[None] | None:
        """Value for a material property."""
        ...
    
    @value.setter
    def value(self, val): # -> None:
        ...
    
    @property
    def unit(self): # -> list[Any | str] | None:
        """Units for a material property value."""
        ...
    
    @unit.setter
    def unit(self, unit): # -> None:
        ...
    
    @property
    def data_set(self): # -> list[None] | None:
        """Dataset."""
        ...
    
    @property
    def thermalmodifier(self): # -> list[None] | None:
        """Thermal modifier."""
        ...
    
    @thermalmodifier.setter
    def thermalmodifier(self, thermal_value): # -> None:
        """Thermal modifier.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @pyaedt_function_handler()
    def add_thermal_modifier_free_form(self, formula, index=...):
        """Add a thermal modifier to a material property using a free-form formula.

        Parameters
        ----------
        formula : str
            Full formula to apply.
        index : int, optional
            Value for the index. The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.EditMaterial

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(version="2021.2")
        >>> mat1 = hfss.materials.add_material("new_copper2")
        >>> mat1.add_thermal_modifier_free_form("if(Temp > 1000cel, 1, if(Temp < -273.15cel, 1, 1))")
        """
        ...
    
    @pyaedt_function_handler(dataset_name="dataset")
    def add_thermal_modifier_dataset(self, dataset, index=...):
        """Add a thermal modifier to a material property using an existing dataset.

        Parameters
        ----------
        dataset : str
            Name of the project dataset.
        index : int, optional
            Value for the index. The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.


        References
        ----------
        >>> oDefinitionManager.EditMaterial

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(version="2021.2")
        >>> mat1 = hfss.materials.add_material("new_copper2")
        >>> mat1.add_thermal_modifier_dataset("$ds1")
        """
        ...
    
    @pyaedt_function_handler()
    def add_thermal_modifier_closed_form(self, tref=..., c1=..., c2=..., tl=..., tu=..., units=..., auto_calc=..., tml=..., tmu=..., index=...): # -> Literal[False]:
        """Add a thermal modifier to a material property using a closed-form formula.

        Parameters
        ----------
        tref : float, optional
            Reference temperature. The default is ``22``.
        c1 : float, optional
            First coefficient value. The default is ``0.0001``.
        c2 : float, optional
            Second coefficient value. The default is ``1e-6``.
        tl : float, optional
            Lower temperature limit. The default is ``273.15``.
        tu : float, optional
            Upper temperature limit. The default is ``1000``.
        units : str, optional
            Units for the reference temperature. The default
            is ``"cel"``.
        auto_calc : bool, optional
            Whether to calculate the lower and upper
            temperature limits automatically. The default is
            ``True``.
        tml : float, optional
            Lower temperature limit when ``auto_calc=True.``
            The default is ``1000``.
        tmu : float, optional
            Upper temperature limit when ``auto_calc=True.``
            The default is ``1000``.
        index : int, optional
            Value for the index. The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.EditMaterial

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(version="2021.2")
        >>> mat1 = hfss.materials.add_material("new_copper2")
        >>> mat1.permittivity.add_thermal_modifier_closed_form(c1=1e-3)
        """
        ...
    
    @pyaedt_function_handler()
    def set_non_linear(self, x_unit=..., y_unit=...): # -> bool:
        """Enable non-linear material.

         This is a private method, and should not be used directly.

        Parameters
        ----------
        x_unit : str, optional
            X units. Defaults will be used if `None`.
        y_unit : str, optional
            Y units. Defaults will be used if `None`.

        Returns
        -------
        bool
            `True` if succeeded.

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(version="2025.1")
        >>> B_value = [0.0, 0.1, 0.3, 0.4, 0.48, 0.55, 0.6, 0.61, 0.65]
        >>> H_value = [0.0, 500.0, 1000.0, 1500.0, 2000.0, 2500.0, 3500.0, 5000.0, 10000.0]
        >>> mat = hfss.materials.add_material("newMat")
        >>> b_h_dataset = [[b, h] for b, h in zip(B_value, H_value)]
        >>> mat.permeability = b_h_dataset
        """
        ...
    
    @property
    def spatialmodifier(self): # -> list[None] | None:
        """Spatial modifier."""
        ...
    
    @spatialmodifier.setter
    def spatialmodifier(self, spatial_value): # -> None:
        """Spatial modifier.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @pyaedt_function_handler()
    def add_spatial_modifier_free_form(self, formula, index=...):
        """Add a spatial modifier to a material property using a free-form formula.

        Parameters
        ----------
        formula : str
            Full formula to apply.
        index : int, optional
            Value for the index. The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.EditMaterial

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(version="2021.2")
        >>> mat1 = hfss.materials.add_material("new_copper2")
        >>> mat1.add_spatial_modifier_free_form("if(X > 1mm, 1, if(X < 1mm, 2, 1))")
        """
        ...
    
    @pyaedt_function_handler(dataset_name="dataset")
    def add_spatial_modifier_dataset(self, dataset, index=...):
        """Add a spatial modifier to a material property using an existing dataset.

        Parameters
        ----------
        dataset : str
            Name of the project dataset.
        index : int, optional
            Value for the index. The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.


        References
        ----------
        >>> oDefinitionManager.EditMaterial

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(version="2021.2")
        >>> mat1 = hfss.materials.add_material("new_copper2")
        >>> mat1.add_spatial_modifier_dataset("$ds1")
        """
        ...
    


class CommonMaterial:
    """Manages datasets with frequency-dependent materials.

    Parameters
    ----------
    materials : :class:`ansys.aedt.core.modules.material_lib.Materials`
    name : str
    props : dict
        The default is ``None``.
    """
    def __init__(self, materials, name, props=...) -> None:
        ...
    
    @property
    def is_used(self): # -> bool:
        """Checks if a project material is in use."""
        ...
    
    @property
    def coordinate_system(self): # -> str:
        """Material coordinate system."""
        ...
    
    @coordinate_system.setter
    def coordinate_system(self, value): # -> None:
        ...
    


class Material(CommonMaterial):
    """Manages material properties.

    Parameters
    ----------
    materiallib : :class:`ansys.aedt.core.modules.material_lib.Materials`
        Inherited parent object.
    name : str
        Name of the material.
    props :
        The default is ``None``.
    material_update : bool, optional
        The default is ``True``.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> app = Hfss()
    >>> material = app.materials["copper"]
    """
    def __init__(self, materiallib, name, props=..., material_update=...) -> None:
        ...
    
    @property
    def material_appearance(self): # -> list[int]:
        """Material appearance specified as a list.

        The first three items are RGB color and the fourth one is transparency.

        Returns
        -------
        list
            Color of the material in RGB and transparency.
            Color values are in the range ``[0, 255]``.
            Transparency is a float in the range ``[0,1]``.

        Examples
        --------
        Create a material with color ``[0, 153, 153]`` (darker cyan) and transparency ``0.5``.

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss(version="2021.2")
        >>> mat1 = hfss.materials.add_material("new_material")
        >>> appearance_props = mat1.material_appearance
        >>> mat1.material_appearance = [0, 153, 153, 0.5]
        """
        ...
    
    @material_appearance.setter
    def material_appearance(self, appearance_props): # -> None:
        ...
    
    @property
    def permittivity(self):
        """Permittivity.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Permittivity of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @permittivity.setter
    def permittivity(self, value): # -> None:
        ...
    
    @property
    def permeability(self):
        """Permeability.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Permeability of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @permeability.setter
    def permeability(self, value): # -> None:
        ...
    
    @property
    def conductivity(self):
        """Conductivity.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Conductivity of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @conductivity.setter
    def conductivity(self, value): # -> None:
        ...
    
    @property
    def dielectric_loss_tangent(self):
        """Dielectric loss tangent.

        Returns
        -------
        :class:`ansys.aedt.core.modules.MatProperty`
            Dielectric loss tangent of the material.
        """
        ...
    
    @dielectric_loss_tangent.setter
    def dielectric_loss_tangent(self, value): # -> None:
        ...
    
    @property
    def magnetic_loss_tangent(self):
        """Magnetic loss tangent.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Magnetic loss tangent of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @magnetic_loss_tangent.setter
    def magnetic_loss_tangent(self, value): # -> None:
        ...
    
    @property
    def thermal_conductivity(self):
        """Thermal conductivity.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Thermal conductivity of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @thermal_conductivity.setter
    def thermal_conductivity(self, value): # -> None:
        ...
    
    @property
    def mass_density(self):
        """Mass density.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Mass density of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @mass_density.setter
    def mass_density(self, value): # -> None:
        ...
    
    @property
    def specific_heat(self):
        """Specific heat.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Specific heat of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @specific_heat.setter
    def specific_heat(self, value): # -> None:
        ...
    
    @property
    def thermal_expansion_coefficient(self):
        """Thermal expansion coefficient.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Thermal expansion coefficient of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @thermal_expansion_coefficient.setter
    def thermal_expansion_coefficient(self, value): # -> None:
        ...
    
    @property
    def youngs_modulus(self):
        """Young's modulus.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Young's modulus of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @youngs_modulus.setter
    def youngs_modulus(self, value): # -> None:
        ...
    
    @property
    def poissons_ratio(self):
        """Poisson's ratio.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Poisson's ratio of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @poissons_ratio.setter
    def poissons_ratio(self, value): # -> None:
        ...
    
    @property
    def diffusivity(self):
        """Diffusivity.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Diffusivity of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @diffusivity.setter
    def diffusivity(self, value): # -> None:
        ...
    
    @property
    def magnetic_coercivity(self):
        """Magnetic coercivity.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Magnetic coercivity of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @magnetic_coercivity.setter
    def magnetic_coercivity(self, value): # -> None:
        ...
    
    @property
    def molecular_mass(self):
        """Molecular mass.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Molecular mass of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @molecular_mass.setter
    def molecular_mass(self, value): # -> None:
        ...
    
    @property
    def viscosity(self):
        """Viscosity.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Viscosity of the material.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @viscosity.setter
    def viscosity(self, value): # -> None:
        ...
    
    @property
    def stacking_type(self): # -> None:
        """Composition of the wire can either be "Solid", "Lamination" or "Litz Wire".

        Returns
        -------
        string
            Structure of the wire.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @stacking_type.setter
    def stacking_type(self, value): # -> None:
        ...
    
    @property
    def wire_type(self): # -> None:
        """The type of the wire can either be "Round", "Square" or "Rectangular".

        Returns
        -------
        string
            Type of the wire.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @wire_type.setter
    def wire_type(self, value): # -> None:
        ...
    
    @property
    def wire_thickness_direction(self): # -> None:
        """Thickness direction of the wire can either be "V(1)", "V(2)" or "V(3)".

        Returns
        -------
        string
            Thickness direction of the wire.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @wire_thickness_direction.setter
    def wire_thickness_direction(self, value): # -> None:
        ...
    
    @property
    def wire_width_direction(self): # -> None:
        """Width direction of the wire can either be "V(1)", "V(2)" or "V(3)".

        Returns
        -------
        string
            Width direction of the wire.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @wire_width_direction.setter
    def wire_width_direction(self, value): # -> None:
        ...
    
    @property
    def strand_number(self): # -> None:
        """Strand number for litz wire.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Number of strands for the wire.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @strand_number.setter
    def strand_number(self, value): # -> None:
        ...
    
    @property
    def wire_thickness(self): # -> None:
        """Thickness of rectangular litz wire.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Thickness of the litz wire.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @wire_thickness.setter
    def wire_thickness(self, value): # -> None:
        ...
    
    @property
    def wire_diameter(self): # -> None:
        """Diameter of the round litz wire.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Diameter of the litz wire.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @wire_diameter.setter
    def wire_diameter(self, value): # -> None:
        ...
    
    @property
    def wire_width(self): # -> None:
        """Width of the rectangular or square litz wire.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Width of the litz wire.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @wire_width.setter
    def wire_width(self, value): # -> None:
        ...
    
    @property
    def stacking_factor(self): # -> None:
        """Stacking factor for lamination.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Stacking factor.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @stacking_factor.setter
    def stacking_factor(self, value): # -> None:
        ...
    
    @property
    def stacking_direction(self): # -> None:
        """Stacking direction for the lamination can either be "V(1)", "V(2)" or "V(3)".

        Returns
        -------
        string
            Stacking direction for lamination.

        References
        ----------
        >>> oDefinitionManager.EditMaterial
        """
        ...
    
    @stacking_direction.setter
    def stacking_direction(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def set_magnetic_coercitivity(self, value=..., x=..., y=..., z=...): # -> Literal[True]:
        """Set magnetic coercivity for material.

        .. deprecated:: 0.7.0

        Returns
        -------
        bool

        """
        ...
    
    @pyaedt_function_handler()
    def set_magnetic_coercivity(self, value=..., x=..., y=..., z=...): # -> Literal[True]:
        """Set magnetic coercivity for material.

        Parameters
        ----------
        value : float, optional
            Magnitude in A_per_meter. Default value is ``0``.
        x : float, optional
            Vector x component. Default value is ``1``.
        y : float, optional
            Vector y component. Default value is ``0``.
        z : float, optional
            Vector z component. Default value is ``0``.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler(points_list_at_freq="points_at_frequency")
    def get_core_loss_coefficients(self, points_at_frequency, core_loss_model_type=..., thickness=..., conductivity=..., coefficient_setup=...): # -> list[Any]:
        """Get electrical steel or power ferrite core loss coefficients at a given frequency.

        Parameters
        ----------
        points_at_frequency : dict
            Dictionary where keys are the frequencies (in Hz) and values are lists of points (BP curve).
            If the core loss model is calculated at one frequency, this parameter must be provided as a
            dictionary with one key (single frequency in Hz) and values are lists of points at
            that specific frequency (BP curve).
        core_loss_model_type : str, optional
            Core loss model type. The default value is ``"Electrical Steel"``.
            Options are ``"Electrical Steel"`` and ``"Power Ferrite"``.
        thickness : str, optional
            Thickness provided as the value plus the unit.
            The default is ``0.5mm``.
        conductivity : float, optional
            Material conductivity.
            The default is ``0``.
        coefficient_setup : str, optional
            Core loss unit. The default is ``"w_per_cubic_meter"``.
            Options are ``"kw_per_cubic_meter"``, ``"w_per_cubic_meter"``, ``"w_per_kg"``,
            and ``"w_per_lb"``.


        Returns
        -------
        list
            List of core loss coefficients.
            Returns Kh, Kc, and Ke coefficients if the core loss model is ``"Electrical Steel"``.
            Returns Cm, X, and Y if the core loss model is ``"Power Ferrite"``.

        Examples
        --------
        This example shows how to get core loss coefficients for Electrical Steel core loss model.

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> box = m3d.modeler.create_box([-10, -10, 0], [20, 20, 20], "box_to_split")
        >>> box.material = "magnesium"
        >>> coefficients = m3d.materials["magnesium"].get_core_loss_coefficients(
        ...     points_at_frequency={60: [[0, 0], [1, 3], [2, 7]]}, thickness="0.5mm", conductivity=0
        ... )
        >>> print(coefficients)
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(points_list_at_freq="points_at_frequency")
    def set_coreloss_at_frequency(self, points_at_frequency, kdc=..., cut_depth=..., thickness=..., conductivity=..., coefficient_setup=..., core_loss_model_type=...): # -> Literal[True]:
        """Set electrical steel or power ferrite core loss model at one single frequency or at multiple frequencies.

        Parameters
        ----------
        points_at_frequency : dict
            Dictionary where keys are the frequencies (in Hz) and values are lists of points (BP curve).
            If the core loss model is calculated at one frequency, this parameter must be provided as a
            dictionary with one key (single frequency in Hz) and values are lists of points at
            that specific frequency (BP curve).
        kdc : float
            Coefficient considering the DC flux bias effects
        cut_depth : str, optional
            Equivalent cut depth.
            You use this parameter to consider the manufacturing effects on core loss computation.
            The default value is ``"1mm"``.
        thickness : str, optional
            Thickness specified in terms of the value plus the unit.
            The default is ``"0.5mm"``.
        conductivity : float, optional
            Conductivity. The unit is S/m.
            The default is ``"0 S/m"``.
        coefficient_setup : str, optional
            Core loss unit. The default is ``"w_per_cubic_meter"``.
            Options are ``"kw_per_cubic_meter"``, ``"w_per_cubic_meter"``, ``"w_per_kg"``,
            and ``"w_per_lb"``.
        core_loss_model_type : str, optional
            Core loss model type. The default value is ``"Electrical Steel"``.
            Options are ``"Electrical Steel"`` and ``"Power Ferrite"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.EditMaterial

        Examples
        --------
        This example shows how to set a core loss model for a material in case material properties are calculated for
        core losses at one frequency or core losses versus frequencies (core losses multicurve data).
        The first case shows how to set properties for core losses at one frequency:

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> box = m3d.modeler.create_box([-10, -10, 0], [20, 20, 20], "box_to_split")
        >>> box.material = "magnesium"
        >>> m3d.materials["magnesium"].set_coreloss_at_frequency(
                                                    ... points_at_frequency={60 : [[0,0], [1,3.5], [2,7.4]]}
                                                    ... )
        >>> m3d.release_desktop(True, True)

        The second case shows how to set properties for core losses versus frequencies:

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> box = m3d.modeler.create_box([-10, -10, 0], [20, 20, 20], "box_to_split")
        >>> box.material = "magnesium"
        >>> m3d.materials["magnesium"].set_coreloss_at_frequency(
                                                    ... points_at_frequency={60 : [[0,0], [1,3.5], [2,7.4]],
                                                    ...                      100 : [[0,0], [1,8], [2,9]],
                                                    ...                      150 : [[0,0], [1,10], [2,19]]}
                                                    ... )
        >>> m3d.release_desktop(True, True)

        """
        ...
    
    @pyaedt_function_handler()
    def set_electrical_steel_coreloss(self, kh=..., kc=..., ke=..., kdc=..., cut_depth=...): # -> Literal[True]:
        """Set electrical steel core loss.

        Parameters
        ----------
        kh : float, optional
            Hysteresis core loss coefficient.
            The default is ``0``.
        kc : float, optional
            Eddy-current core loss coefficient.
            The default is ``0``.
        ke : float, optional
            Excess core loss coefficient.
            The default is ``0``.
        kdc : float, optional
            Coefficient considering the DC flux bias effects.
            The default is ``0``.
        cut_depth : str, optional
            Equivalent cut depth considering manufacturing effects on core loss computation.
            The default value is ``"1mm"``.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def set_hysteresis_coreloss(self, kdc=..., hci=..., br=..., hkc=..., cut_depth=...): # -> Literal[True]:
        """Set Hysteresis Type Core Loss.

        Parameters
        ----------
        kdc : float
        hci : float
        br : float
        hkc : float
        cut_depth : float

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def set_power_ferrite_coreloss(self, cm=..., x=..., y=..., kdc=..., cut_depth=...): # -> Literal[True]:
        """Set Power Ferrite Type Core Loss.

        Parameters
        ----------
        cm : float
        x : float
        y : float
        kdc : float
        cut_depth : float

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler(point_list="points", punit="units")
    def set_bp_curve_coreloss(self, points, kdc=..., cut_depth=..., units=..., bunit=..., frequency=..., thickness=...): # -> Literal[True]:
        """Set B-P Type Core Loss.

        Parameters
        ----------
        points : list of list
            List of [x,y] points.
        kdc : float
        cut_depth : float
        units : str
            Core loss unit. The default is ``"kw/m^3"``.
        bunit : str
            Magnetic field unit. The default is ``"tesla"``.
        frequency : float
        thickness : str, optional
            Lamination thickness. The default is ``"0.5mm"``.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def get_curve_coreloss_type(self): # -> None:
        """Return the curve core loss type assigned to material.

        Returns
        -------
        str
        """
        ...
    
    @pyaedt_function_handler()
    def get_curve_coreloss_values(self): # -> dict[Any, Any]:
        """Return the curve core values type assigned to material.

        Returns
        -------
        dict
        """
        ...
    
    @pyaedt_function_handler()
    def get_magnetic_coercivity(self): # -> tuple[Any, Any, Any, Any] | Literal[False]:
        """Get the magnetic coercivity values.

        Returns
        -------
        tuple
            Tuple of (Magnitude, x, y, z).
        """
        ...
    
    @pyaedt_function_handler()
    def get_magnetic_coercitivity(self): # -> tuple[Any, Any, Any, Any] | Literal[False]:
        """Get the magnetic coercivity values.

        .. deprecated:: 0.7.0

        Returns
        -------
        bool

        """
        ...
    
    @pyaedt_function_handler()
    def is_conductor(self, threshold=...): # -> bool:
        """Check if the material is a conductor.

        Parameters
        ----------
        threshold : float, optional
            Threshold to define if a material is a conductor. The
            default is ``100000``. If the conductivity is equal to or
            greater than the threshold, the material is
            considered a conductor.

        Returns
        -------
        bool
            ``True`` when the material is a conductor, ``False`` otherwise.

        """
        ...
    
    @pyaedt_function_handler()
    def is_dielectric(self, threshold=...): # -> bool:
        """Check if the material is dielectric.

        Parameters
        ----------
        threshold : float, optional
            Threshold to define if a material is dielectric. The
            default is ``100000``. If the conductivity is equal to or
            greater than the threshold, the material is
            considered dielectric.

        Returns
        -------
        bool
            ``True`` when the material is dielectric, ``False`` otherwise.
        """
        ...
    
    @pyaedt_function_handler(i_freq="frequency")
    def set_djordjevic_sarkar_model(self, dk=..., df=..., frequency=..., sigma_dc=..., freq_hi=...): # -> Literal[True]:
        """Set Djordjevic-Sarkar model.

        Parameters
        ----------
        dk : int, float, str, optional
            Dielectric constant at input frequency.
        df : int, float, str, optional
            Loss tangent at input frequency.
        frequency : int, float, optional.
            Input frequency in Hz.
        sigma_dc : int, float, optional
            Conductivity at DC. The default is ``1e-12``.
        freq_hi : int, float, optional
            High-frequency corner in Hz. The default is ``159.15494e9``.

        Returns
        -------
        bool
            ``True`` if successful, ``False`` otherwise.
        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the material in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.AddMaterial
        >>> oDefinitionManager.EditMaterial
        """
        ...
    


class SurfaceMaterial(CommonMaterial):
    """Manages surface material properties for Icepak only.

    Parameters
    ----------
    materiallib : :class:`ansys.aedt.core.modules.material_lib.Materials`
        Inherited parent object.
    name : str
        Name of the surface material
    props :
        The default is ``None``.
    material_update : bool, optional
        The default is ``True``.
    """
    def __init__(self, materiallib, name, props=..., material_update=...) -> None:
        ...
    
    @property
    def emissivity(self):
        """Emissivity.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Emissivity of the surface material.

        References
        ----------
        >>> oDefinitionManager.EditSurfaceMaterial
        """
        ...
    
    @emissivity.setter
    def emissivity(self, value): # -> None:
        ...
    
    @property
    def surface_diffuse_absorptance(self):
        """Surface diffuse absorptance.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Surface diffuse absorptance of the surface material.

        References
        ----------
        >>> oDefinitionManager.EditSurfaceMaterial
        """
        ...
    
    @surface_diffuse_absorptance.setter
    def surface_diffuse_absorptance(self, value): # -> None:
        ...
    
    @property
    def surface_incident_absorptance(self):
        """Surface incident absorptance.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Surface incident absorptance of the surface material.

        References
        ----------
        >>> oDefinitionManager.EditSurfaceMaterial
        """
        ...
    
    @surface_incident_absorptance.setter
    def surface_incident_absorptance(self, value): # -> None:
        ...
    
    @property
    def surface_roughness(self):
        """Surface roughness.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.MatProperty`
            Surface roughness of the surface material.

        References
        ----------
        >>> oDefinitionManager.EditSurfaceMaterial
        """
        ...
    
    @surface_roughness.setter
    def surface_roughness(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the surface material in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDefinitionManager.DoesSurfaceMaterialExist
        >>> oDefinitionManager.AddSurfaceMaterial
        >>> oDefinitionManager.EditSurfaceMaterial
        """
        ...
    


