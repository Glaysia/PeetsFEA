"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import PropsManager, pyaedt_function_handler

"""
This module contains these classes: `Mesh` and `Mesh3DOperation`.

This module provides all functionalities for creating and editing the mesh in the 3D tools.

"""
class Mesh3DOperation(PropsManager):
    """Mesh3DOperation class.

    Parameters
    ----------
    app :

    hfss_setup_name : str
        Name of the HFSS setup.
    name :

    props : dict
        Dictionary of the properties.

    """
    def __init__(self, app, hfss_setup_name, name, props) -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> Literal[True]:
        """Create a mesh.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AddMeshOperation
        """
        ...
    
    @pyaedt_function_handler()
    def update(self, *args, **kwargs): # -> Literal[True]:
        """Update the mesh.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditMeshOperation
        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the mesh.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.DeleteMeshOperation
        """
        ...
    


class Mesh3d:
    """Manages mesh operations for HFSS 3D Layout.

    Provides the main AEDT mesh functionality. The inherited class
    ``AEDTConfig`` contains all ``_desktop`` hierarchical calls needed by this class.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_3d_layout.FieldAnalysis3DLayout`

    """
    def __init__(self, app) -> None:
        ...
    
    @pyaedt_function_handler()
    def generate_mesh(self, name): # -> Literal[True]:
        """Generate the mesh for a design.

        Parameters
        ----------
        name : str
            Name of the design.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.GenerateMesh
        """
        ...
    
    @property
    def omeshmodule(self):
        """AEDT Mesh Module.

        References
        ----------
        >>> oDesign.GetModule("SolveSetups")
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", mesh_name="name")
    def delete_mesh_operations(self, setup, name): # -> Literal[True]:
        """Remove mesh operations from a setup.

        Parameters
        ----------
        setup : str
            Name of the setup.
        name : str
            Name of the mesh.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.DeleteMeshOperation
        """
        ...
    
    @pyaedt_function_handler(setupname="setup", layer_name="layer", net_name="net", isinside="is_inside", maxlength="maximum_length", maxel="maximum_elements", meshop_name="name")
    def assign_length_mesh(self, setup, layer, net, is_inside=..., maximum_length=..., maximum_elements=..., name=...): # -> Mesh3DOperation | None:
        """Assign mesh length.

        Parameters
        ----------
        setup : str
            Name of the HFSS setup to apply.
        layer : str
           Name of the layer.
        net : str
           Name of the net.
        is_inside : bool, optional
            Whether the mesh length is inside the selection. The default is ``True``.
        maximum_length : float, optional
            Maximum length of the element. The default is ``1`` When ``None``, this
            parameter is disabled.
        maximum_elements : int, optional
            Maximum number of elements. The default is ``1000``. When ``None``, this
            parameter is disabled.
        name : str, optional
            Name of the mesh operation. The default is ``None``.

        Returns
        -------
        type
            Mesh operation object.

        References
        ----------
        >>> oModule.AddMeshOperation
        """
        ...
    
    @pyaedt_function_handler(setupname="setup", layer_name="layer", net_name="net", skindepth="skin_depth", maxelements="maximum_elements", numlayers="layers_number", meshop_name="name")
    def assign_skin_depth(self, setup, layer, net, skin_depth=..., maximum_elements=..., triangulation_max_length=..., layers_number=..., name=...): # -> Mesh3DOperation:
        """Assign skin depth to the mesh.

        Parameters
        ----------
        setup : str
            Name of the setup.
        layer : str
            Name of the layer.
        net : str
            Name of the net.
        skin_depth : int, optional
            Depth of the skin. The default is ``1``.
        maximum_elements : float, optional
            Maximum element length. The default is ``None``, which disables this parameter.
        triangulation_max_length : float, optional
            Maximum surface triangulation length. The default is ``0.1``.
        layers_number : str, optional
            Number of layers. The default is ``"2"``.
        name : str, optional
             Name of the mesh operation. The default is ``None``.

        Returns
        -------
        type
            Mesh operation object.

        References
        ----------
        >>> oModule.AddMeshOperation
        """
        ...
    


