"""
This type stub file was generated by pyright.
"""

safe_attrs = ...
def pyaedt_service_manager(port=..., aedt_version=..., student_version=...): # -> Literal[False] | None:
    """Start the PyAEDT service manager using RPyC server on CPython.

    This method, which must run on a server machine, is used as a service on the
    server machine to listen on a dedicated port for inbound requests to launch
    a new server connection and launch AEDT.

    Parameters
    ----------
    port : int, optional
        Port that the RPyC server is to listen on.
    aedt_version : str, optional
        Version of Aedt to instantiate with server. Default is latest available version installed on the machine.
    student_version : bool, optional
        Either to initialize Student version AEDT or Commercial version.

    Examples
    --------
    >>> from ansys.aedt.core.common_rpc import pyaedt_service_manager
    >>> pyaedt_service_manager()

    """
    ...

def launch_server(port=..., ansysem_path=..., non_graphical=..., threaded=...): # -> Literal[False] | None:
    """Start an RPyC server and listens on a specified port.

    This method must run on a server machine only.

    Parameters
    ----------
    port : int, optional
        Port that the RPyC server is to listen on.
    ansysem_path : str, optional
        Full path to the AEDT installation directory. The default is
        ``None``. This parameter is needed for IronPython on Linux
        connections only.
    non_graphical : bool, optional
        Whether to start AEDT in non-graphical mode. The default is ``False``,
        which means AEDT starts in graphical mode. This parameter is needed
        for IronPython on Linux connections only.
    threaded : bool, optional

    Examples
    --------
    >>> from ansys.aedt.core.common_rpc import launch_server
    >>> launch_server()

    """
    ...

def create_session(server_name, client_port=..., launch_aedt_on_server=..., aedt_port=..., non_graphical=...): # -> Literal[False]:
    """
    Connect to an existing AEDT server session and create a new client session from it.

    Parameters
    ----------
    server_name : str
        Name of the remote machine to connect to.
    client_port : int
        Port that the RPyC server will run.
    launch_aedt_on_server : bool, optional
        Either if the method has to start AEDT after the connection is established or not. Default is  `False`.
    aedt_port : int, optional
        Aedt Grpc port on server.
    non_graphical : bool, optional
        Aedt Non Graphical Flag.

    Returns
    -------
    RPyC client object.
    """
    ...

def connect(server_name, aedt_client_port): # -> Literal[False]:
    """
    Connect to an existing AEDT server session.

    Parameters
    ----------
    server_name : str
        Name of the remote machine to connect to.
    aedt_client_port : int
        Port that the RPyC server is running on inside AEDT.

    Returns
    -------
    RPyC client object.
    """
    ...

