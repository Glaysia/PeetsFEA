"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.application.analysis_r_m_xprt import FieldAnalysisRMxprt
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

"""This module contains these classes: ``RMXprtModule`` and ``Rmxprt``."""
class RMXprtModule:
    """Provides RMxprt module properties."""
    component = ...
    def __init__(self, app) -> None:
        ...
    
    @property
    def properties(self): # -> BinaryTreeNode | Literal[False]:
        """Object parameters.

        Returns
        -------
            :class:`ansys.aedt.core.modeler.cad.elements_3d.BinaryTree` when successful,
            ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def __setitem__(self, parameter_name, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, parameter_name): # -> None:
        ...
    


class Stator(RMXprtModule):
    """Provides stator properties."""
    component = ...


class Rotor(RMXprtModule):
    """Provides rotor properties."""
    component = ...


class Shaft(RMXprtModule):
    """Provides rotor properties."""
    component = ...


class Machine(RMXprtModule):
    """Provides rotor properties."""
    component = ...


class Circuit(RMXprtModule):
    """Provides rotor properties."""
    component = ...


class Rmxprt(FieldAnalysisRMxprt):
    """Provides the RMxprt app interface.

    Parameters
    ----------
    project : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open. The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    design : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    model_units : str, optional
        Model units.
    setup : str, optional
        Name of the setup to use as the nominal. The default is
        ``None``, in which case the active setup is used or
        nothing is used.
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case
        the active setup is used or the latest installed version is
        used.
        Examples of input values are ``251``, ``25.1``, ``2025.1``, ``"2025.1"``.
    non_graphical : bool, optional
        Whether to launch AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT is launched in graphical mode.
        This parameter is ignored when a script is launched within AEDT.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine.  The default is ``False``.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to open the AEDT student version. The default is ``False``.
    machine : str, optional
        Machine name to connect the oDesktop session to. This works only in 2022 R2 or
        later. The remote server must be up and running with the command
        `"ansysedt.exe -grpcsrv portnum"`. If the machine is `"localhost"`, the
        server also starts if not present.
    port : int, optional
        Port number on which to start the oDesktop communication on an already existing server.
        This parameter is ignored when creating a new server. It works only in 2022 R2 or later.
        The remote server must be up and running with the command `"ansysedt.exe -grpcsrv portnum"`.
    aedt_process_id : int, optional
        Process ID for the instance of AEDT to point PyAEDT at. The default is
        ``None``. This parameter is only used when ``new_desktop = False``.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.

    Examples
    --------
    Create an instance of RMxprt and connect to an existing RMxprt
    design or create a new RMxprt design if one does not exist.

    >>> from ansys.aedt.core import Rmxprt
    >>> app = Rmxprt()

    Create an instance of Rmxprt and link to a project named
    ``"projectname"``. If this project does not exist, create one with
    this name.

    >>> app = Rmxprt(projectname)

    Create an instance of RMxprt and link to a design named
    ``"designname"`` in a project named ``"projectname"``.

    >>> app = Rmxprt(projectname, designame)

    Create an instance of RMxprt and open the specified project,
    which is ``"myfile.aedt"``.

    >>> app = Rmxprt("myfile.aedt")
    """
    @pyaedt_function_handler(designname="design", projectname="project", specified_version="version", setup_name="setup", new_desktop_session="new_desktop")
    def __init__(self, project=..., design=..., solution_type=..., model_units=..., setup=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @property
    def design_type(self):
        """Machine design type."""
        ...
    
    @design_type.setter
    def design_type(self, value): # -> None:
        ...
    
    @pyaedt_function_handler(name="name", setuptype="setup_type")
    def create_setup(self, name=..., setup_type=..., **kwargs): # -> SetupHFSSAuto | SetupSBR | SetupMaxwell | SetupQ3D | SetupIcepak | SetupHFSS:
        """Create an analysis setup for RmXport.

        Optional arguments are passed along with the ``setup_type`` and ``name``
        parameters. Keyword names correspond to the ``setup_type``
        corresponding to the native AEDT API.  The list of
        keywords here is not exhaustive.

        Parameters
        ----------
        name : str, optional
            Name of the setup. The default is "Setup1".
        setup_type : int, str, optional
            Type of the setup. Options are "IcepakSteadyState"
            and "IcepakTransient". The default is "IcepakSteadyState".
        **kwargs : dict, optional
            Available keys depend on the setup chosen.
            For more information, see :doc:`../SetupTemplatesRmxprt`.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.SetupHFSS`
            Solver Setup object.

        References
        ----------
        >>> oModule.InsertSetup

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.create_setup(name="Setup1", setup_type="HFSSDriven", Frequency="10GHz")

        """
        ...
    
    @pyaedt_function_handler()
    def export_configuration(self, output_file):
        """Export Rmxprt project to config file.

        Parameters
        ----------
        output_file : str
            Full path to json file to be created.

        Returns
        -------
        str
           Full path to json file created.
        """
        ...
    
    @pyaedt_function_handler()
    def import_configuration(self, input_file): # -> Literal[True]:
        """Parse a json file and assign all the properties to the Rmxprt design.

        Parameters
        ----------
        input_file : str
            Full path to json file to be used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


