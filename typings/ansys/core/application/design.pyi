"""
This type stub file was generated by pyright.
"""

import sys
from abc import abstractmethod
from typing import Any, Dict, List, Optional, Union
from ansys.aedt.core.application.aedt_objects import AedtObjects
from ansys.aedt.core.application.variables import DataSet
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modules.boundary.common import BoundaryObject

"""
This module contains these classes: ``Design``.

This module provides all functionalities for basic project information and objects.
These classes are inherited in the main tool class.

"""
if sys.version_info.major > 2:
    ...
def load_aedt_thread(project_path) -> None:
    """
    Load an AEDT file in a separate thread and update project settings.

    Parameters
    ----------
    project_path : str
        Path to the AEDT project file.
    """
    ...

class Design(AedtObjects):
    """Contains all functions and objects connected to the active project and design.

    This class is inherited in the caller application and is accessible through it for
    example, ``hfss.method_name``.

    Parameters
    ----------
    design_type : str
        Type of the design.
    project_name : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open. The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    design_name : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case
        the active version or latest installed version is used.
    non_graphical : bool, optional
        Whether to run AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT launches in graphical mode.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine. The default is ``False``.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to enable the student version of AEDT. The default
        is ``False``.
    aedt_process_id : int, optional
        Only used when ``new_desktop = False``, specifies by process ID which instance
        of Electronics Desktop to point PyAEDT at.
    ic_mode : bool, optional
        Whether to set the design to IC mode or not. The default is ``None``, which means to retain
        the existing setting. Applicable only to ``Hfss3dLayout``.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.
    """
    def __init__(self, design_type: str, project_name: Optional[str] = ..., design_name: Optional[str] = ..., solution_type: Optional[str] = ..., version: Optional[Union[str, int, float]] = ..., non_graphical: bool = ..., new_desktop: bool = ..., close_on_exit: bool = ..., student_version: bool = ..., machine: str = ..., port: int = ..., aedt_process_id: Optional[int] = ..., ic_mode: Optional[bool] = ..., remove_lock: bool = ...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __exit__(self, ex_type, ex_value, ex_traceback) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, variable_name: str) -> str:
        ...
    
    @pyaedt_function_handler()
    def __setitem__(self, variable_name: str, variable_value: Optional[Union[str, int, float]]) -> bool:
        ...
    
    @property
    def info(self) -> Dict[str, str]:
        """Dictionary of the PyAEDT session information.

        Returns
        -------
        dict
            Dictionary containing session details.
        """
        ...
    
    @property
    def desktop_class(self): # -> Desktop | None:
        """``Desktop`` class.

        Returns
        -------
        :class:`ansys.aedt.core.desktop.Desktop`
        """
        ...
    
    @property
    def project_datasets(self) -> Dict[str, DataSet]:
        """Dictionary of project datasets.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.application.variables.DataSet`]
            Project datasets.
        """
        ...
    
    @property
    def design_datasets(self) -> Dict[str, DataSet]:
        """Dictionary of Design Datasets.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.application.variables.DataSet`]
            Design datasets.
        """
        ...
    
    @property
    def boundaries(self) -> List[BoundaryObject]:
        """Design boundaries and excitations.

        Returns
        -------
        list[:class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`]
            Boundaries available in design.
        """
        ...
    
    @property
    def boundaries_by_type(self) -> Dict[str, List[BoundaryObject]]:
        """Design boundaries by type.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`]
        """
        ...
    
    @property
    def ports(self) -> List[str]:
        """Design excitations.

        Returns
        -------
        list
            Port names.
        """
        ...
    
    @property
    def odesktop(self): # -> Any | None:
        """AEDT instance containing all projects and designs.

        Examples
        --------
        Get the COM object representing the desktop.

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.odesktop
        <class 'win32com.client.CDispatch'>
        """
        ...
    
    @pyaedt_function_handler()
    def __delitem__(self, key: str) -> None:
        """Implement destructor with array name or index."""
        ...
    
    @property
    def settings(self) -> Dict:
        """Settings of the current Python/Pyaedt session."""
        ...
    
    @property
    def logger(self): # -> AedtLogger | Logger:
        """Logger for the design.

        Returns
        -------
        :class:`ansys.aedt.core.aedt_logger.AedtLogger`
        """
        ...
    
    @property
    def project_properties(self) -> Dict[str, dict]:
        """Project properties.

        Returns
        -------
        dict
            Dictionary of the project properties.
        """
        ...
    
    @property
    def design_properties(self) -> Dict[str, dict]:
        """Design properties.

        Returns
        -------
        dict
           Dictionary of the design properties.

        """
        ...
    
    @property
    def aedt_version_id(self) -> str:
        """AEDT version.

        Returns
        -------
        str
            Version of AEDT.

        References
        ----------
        >>> oDesktop.GetVersion()
        """
        ...
    
    @property
    def design_name(self) -> Optional[str]:
        """Design name.

        Returns
        -------
        str
            Name of the parent AEDT design.

        References
        ----------
        >>> oDesign.GetName
        >>> oDesign.RenameDesignInstance

        Examples
        --------
        Set the design name.

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.design_name = "new_design"
        """
        ...
    
    @design_name.setter
    def design_name(self, new_name: str) -> None:
        ...
    
    @property
    def design_list(self) -> List[str]:
        """Design list.

        Returns
        -------
        list
            List of the designs.

        References
        ----------
        >>> oProject.GetTopDesignList()
        """
        ...
    
    @property
    def design_type(self) -> str:
        """Design type.

        Options are ``"Circuit Design"``, ``"Circuit Netlist"``, ``"Emit"``, ``"HFSS"``,
        ``"HFSS 3D Layout Design"``, ``"Icepak"``, ``"Maxwell 2D"``,
        ``"Maxwell 3D"``, ``"Maxwell Circuit"``, ``"Mechanical"``, ``"ModelCreation"``,
        ``"Q2D Extractor"``, ``"Q3D Extractor"``, ``"RMxprtSolution"``,
        and ``"Twin Builder"``.

        Returns
        -------
        str
            Type of the design. See above for a list of possible return values.

        """
        ...
    
    @property
    def project_name(self) -> Optional[str]:
        """Project name.

        Returns
        -------
        str
            Name of the project.

        References
        ----------
        >>> oProject.GetName
        """
        ...
    
    @property
    def project_list(self) -> List[str]:
        """Project list.

        Returns
        -------
        list
            List of projects.

        References
        ----------
        >>> oDesktop.GetProjectList
        """
        ...
    
    @property
    def project_path(self) -> Optional[str]:
        """Project path.

        Returns
        -------
        str
            Path to the project.

        References
        ----------
        >>> oProject.GetPath
        """
        ...
    
    @property
    def project_time_stamp(self) -> Union[int, float]:
        """Return Project time stamp."""
        ...
    
    @property
    def project_timestamp_changed(self) -> bool:
        """Return a bool if time stamp changed or not."""
        ...
    
    @property
    def project_file(self) -> Optional[str]:
        """Project name and path.

        Returns
        -------
        str
            Full absolute name and path for the project.

        """
        ...
    
    @property
    def lock_file(self) -> Optional[str]:
        """Lock file.

        Returns
        -------
        str
            Full absolute name and path for the project's lock file.

        """
        ...
    
    @property
    def results_directory(self) -> Optional[str]:
        """Results directory.

        Returns
        -------
        str
            Full absolute path for the ``aedtresults`` directory.

        """
        ...
    
    @property
    def solution_type(self) -> Optional[str]:
        """Solution type.

        Returns
        -------
        str
            Type of the solution.

        References
        ----------
        >>> oDesign.GetSolutionType
        >>> oDesign.SetSolutionType
        """
        ...
    
    @solution_type.setter
    def solution_type(self, soltype: str) -> None:
        ...
    
    @property
    def valid_design(self) -> bool:
        """Valid design.

        Returns
        -------
        bool
            ``True`` when the project and design exists, ``False`` otherwise.

        """
        ...
    
    @property
    def personallib(self) -> str:
        """PersonalLib directory.

        Returns
        -------
        str
            Full absolute path for the ``PersonalLib`` directory.

        References
        ----------
        >>> oDesktop.GetPersonalLibDirectory
        """
        ...
    
    @property
    def userlib(self) -> str:
        """UserLib directory.

        Returns
        -------
        str
            Full absolute path for the ``UserLib`` directory.

        References
        ----------
        >>> oDesktop.GetUserLibDirectory
        """
        ...
    
    @property
    def syslib(self) -> str:
        """SysLib directory.

        Returns
        -------
        str
            Full absolute path for the ``SysLib`` directory.

        References
        ----------
        >>> oDesktop.GetLibraryDirectory
        """
        ...
    
    @property
    def src_dir(self) -> str:
        """Source directory for Python.

        Returns
        -------
        str
            Full absolute path for the ``python`` directory.

        """
        ...
    
    @property
    def pyaedt_dir(self) -> str:
        """PyAEDT directory.

        Returns
        -------
        str
           Full absolute path for the ``pyaedt`` directory.

        """
        ...
    
    @property
    def library_list(self) -> List[str]:
        """Library list.

        Returns
        -------
        list
            List of libraries: ``[syslib, userlib, personallib]``.

        """
        ...
    
    @property
    def temp_directory(self) -> str:
        """Path to the temporary directory.

        Returns
        -------
        str
            Full absolute path for the ``temp`` directory.

        """
        ...
    
    @property
    def toolkit_directory(self) -> str:
        """Path to the toolkit directory.

        Returns
        -------
        str
            Full absolute path for the ``pyaedt`` directory for this project.
            If this directory does not exist, it is created.
        """
        ...
    
    @property
    def working_directory(self) -> str:
        """Path to the working directory.

        Returns
        -------
        str
             Full absolute path for the project's working directory.
             If this directory does not exist, it is created.

        """
        ...
    
    @property
    def default_solution_type(self) -> str:
        """Default solution type.

        Returns
        -------
        str
           Default for the solution type.

        """
        ...
    
    @property
    def odesign(self): # -> Any | None:
        """Design.

        Returns
        -------
        Design object

        References
        ----------
        >>> oProject.SetActiveDesign
        >>> oProject.InsertDesign
        """
        ...
    
    @odesign.setter
    def odesign(self, des_name) -> None:
        ...
    
    @property
    def oproject(self): # -> Any | None:
        """Project property.

        Returns
        -------
            Project object

        References
        ----------
        >>> oDesktop.GetActiveProject
        >>> oDesktop.SetActiveProject
        >>> oDesktop.NewProject
        """
        ...
    
    @oproject.setter
    def oproject(self, proj_name=...):
        ...
    
    @property
    def desktop_install_dir(self): # -> str | None:
        """AEDT installation directory.

        Returns
        -------
        str
            AEDT installation directory.

        """
        ...
    
    @pyaedt_function_handler()
    def remove_all_unused_definitions(self): # -> Literal[True]:
        """Remove all unused definitions in the project.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def get_profile(self, name=...): # -> dict[Any, Any] | Literal[False]:
        """Get profile information.

        Parameters
        ----------
        name : str
            Setup name. The default is ``None``, in which case all available setups are returned.

        Returns
        -------
        dict of :class:`ansys.aedt.core.modeler.cad.elements_3d.BinaryTree` when successful,
        ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def get_oo_name(self, aedt_object, object_name=...): # -> list[Any]:
        """Return the object-oriented AEDT property names.

        Parameters
        ----------
        aedt_object : object
            AEDT Object on which search for property. It can be any oProperty (ex. oDesign).
        object_name : str, optional
            Path to the object list. Example `"DesignName\\Boundaries"`.

        Returns
        -------
        list
            Values returned by method if any.
        """
        ...
    
    @pyaedt_function_handler()
    def get_oo_object(self, aedt_object, object_name): # -> Literal[False]:
        """Return the Object Oriented AEDT Object.

        Parameters
        ----------
        aedt_object : object
            AEDT Object on which search for property. It can be any oProperty (ex. oDesign).
        object_name : str
            Path to the object list. Example ``"DesignName\\Boundaries"``.

        Returns
        -------
        object
            Aedt Object if Any.
        """
        ...
    
    @pyaedt_function_handler()
    def get_oo_properties(self, aedt_object, object_name): # -> list[Any]:
        """Return the Object Oriented AEDT Object Properties.

        Parameters
        ----------
        aedt_object : object
            AEDT Object on which search for property. It can be any oProperty (ex. oDesign).
        object_name : str
            Path to the object list. Example ``"DesignName\\Boundaries"``.

        Returns
        -------
        list
            Values returned by method if any.
        """
        ...
    
    @pyaedt_function_handler()
    def get_oo_property_value(self, aedt_object, object_name, prop_name): # -> None:
        """Return the Object Oriented AEDT Object Properties.

        Parameters
        ----------
        aedt_object : object
            AEDT Object on which search for property. It can be any oProperty (ex. oDesign).
        object_name : str
            Path to the object list. For example, ``"DesignName\\Boundaries"``.
        prop_name : str
            Property name.

        Returns
        -------
        str, float, bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def set_oo_property_value(self, aedt_object, object_name, prop_name, value): # -> bool:
        """Change the property value of the object-oriented AEDT object.

        Parameters
        ----------
        aedt_object : object
            AEDT object to search for the property on. It can be any oProperty. For example, oDesign.
        object_name : str
            Path to the object list. Example ``"DesignName\\Boundaries"``.
        prop_name : str
            Property name.
        value : str
            Property value.

        Returns
        -------
        bool
            Values returned by method if any.
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", variation_string="variation", file_path="output_file")
    def export_profile(self, setup, variation=..., output_file=...): # -> str:
        """Export a solution profile to a PROF file.

        Parameters
        ----------
        setup : str
            Setup name. For example, ``'Setup1'``.
        variation : str
            Variation string with values. For example, ``'radius=3mm'``.
        output_file : str, optional
            Full path to the PROF file. The default is ``None``, in which case
            the working directory is used.


        Returns
        -------
        str
            File path if created.

        References
        ----------
        >>> oDesign.ExportProfile
        """
        ...
    
    @pyaedt_function_handler(message_text="text", message_type="level")
    def add_info_message(self, text, level=...): # -> Literal[True]:
        """Add a type 0 "Info" message to either the global, active project, or active design
        level of the message manager tree.

        Also add an "Info" message to the logger if the handler is present.

        Parameters
        ----------
        text : str
            Text to display as the info message.
        level : str, optional
            Level to add the "Info" message to. Options are ``"Global"``,
            ``"Project"``, and ``"Design"``. The default is ``None``,
            in which case the "Info" message gets added to the ``"Design"``
            level.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.logger.info("Global info message")
        >>> hfss.logger.project_logger.info("Project info message")
        >>> hfss.logger.design_logger.info("Design info message")
        """
        ...
    
    @pyaedt_function_handler(message_text="text", message_type="level")
    def add_warning_message(self, text, level=...): # -> Literal[True]:
        """Add a type 0 "Warning" message to either the global, active project, or active design
        level of the message manager tree.

        Also add an "Warning" message to the logger if the handler is present.

        Parameters
        ----------
        text : str
            Text to display as the "Warning" message.
        level : str, optional
            Level to add the "Warning" message to. Options are ``"Global"``,
            ``"Project"``, and ``"Design"``. The default is ``None``,
            in which case the "Warning" message gets added to the ``"Design"``
            level.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.logger.warning("Global warning message", "Global")
        >>> hfss.logger.project_logger.warning("Project warning message", "Project")
        >>> hfss.logger.design_logger.warning("Design warning message")
        """
        ...
    
    @pyaedt_function_handler(message_text="text", message_type="level")
    def add_error_message(self, text, level=...): # -> Literal[True]:
        """Add a type 0 "Error" message to either the global, active project, or active design
        level of the message mmanager tree.

        Also add an "Error" message to the logger if the handler is present.

        Parameters
        ----------
        text : str
            Text to display as the "Error" message.
        level : str, optional
            Level to add the "Error" message to. Options are ``"Global"``,
            ``"Project"``, and ``"Design"``. The default is ``None``,
            in which case the "Error" message gets added to the ``"Design"``
            level.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.logger.error("Global error message", "Global")
        >>> hfss.logger.project_logger.error("Project error message", "Project")
        >>> hfss.logger.design_logger.error("Design error message")
        """
        ...
    
    @property
    def variable_manager(self): # -> VariableManager | None:
        """Variable manager for creating and managing project design and postprocessing variables.

        Returns
        -------
        ansys.aedt.core.application.variables.VariableManager

        """
        ...
    
    @pyaedt_function_handler()
    def set_license_type(self, license_type=...): # -> bool:
        """Change the license type between ``"Pack"`` and ``"Pool"``.

        Parameters
        ----------
        license_type : str, optional
            Type of license type, which can be either ``"Pack"`` or ``"Pool"``.

        Returns
        -------
        bool
            ``True``.

            .. note::
               Because of an API limitation, the command returns ``True`` even when the key is wrong.

        References
        ----------
        >>> oDesktop.SetRegistryString
        """
        ...
    
    @pyaedt_function_handler(key_full_name="name", key_value="value")
    def set_registry_key(self, name, value): # -> bool:
        """Change a specific registry key to a new value.

        Parameters
        ----------
        name : str
            Full name of the AEDT registry key.
        value : str, int
            Value for the AEDT registry key.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.SetRegistryString
        >>> oDesktop.SetRegistryInt
        """
        ...
    
    @pyaedt_function_handler(key_full_name="name")
    def get_registry_key_string(self, name): # -> Any:
        """Get the value for the AEDT registry key if one exists.

        Parameters
        ----------
        name : str
            Full name of the AEDT registry key.

        Returns
        -------
        str
          Value for the AEDT registry key, otherwise ``''``.

        References
        ----------
        >>> oDesktop.GetRegistryString
        """
        ...
    
    @pyaedt_function_handler(key_full_name="name")
    def get_registry_key_int(self, name): # -> Any:
        """Get the value for the AEDT registry key if one exists.

        Parameters
        ----------
        name : str
            Full name of the AEDT registry key.

        Returns
        -------
        str
            Value for the AEDT registry key, otherwise ``0``.

        References
        ----------
        >>> oDesktop.GetRegistryInt
        """
        ...
    
    @pyaedt_function_handler(beta_option_name="beta_option")
    def check_beta_option_enabled(self, beta_option): # -> bool:
        """Check if a beta option is enabled.

        Parameters
        ----------
        beta_option : str
            Name of the beta option to check. For example, ``'SF43060_HFSS_PI'``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.GetRegistryString
        """
        ...
    
    @pyaedt_function_handler()
    def set_active_dso_config_name(self, product_name=..., config_name=...): # -> bool:
        """Change a specific registry key to a new value.

        Parameters
        ----------
        product_name : str, optional
            Name of the tool to apply the active configuration to. The default is ``"HFSS"``.
        config_name : str, optional
            Name of the configuration to apply. The default is ``"Local"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.SetRegistryString
        """
        ...
    
    @pyaedt_function_handler()
    def set_registry_from_file(self, registry_file, make_active=...): # -> bool:
        """Apply desktop registry settings from an ACT file.

        One way to get an ACF file is to export a configuration from the AEDT UI and then edit and reuse it.

        Parameters
        ----------
        registry_file : str
            Full path to the ACF file.
        make_active : bool, optional
            Whether to set the imported configuration as active. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.SetRegistryFromFile
        """
        ...
    
    @pyaedt_function_handler(variable_name="name", min_val="minimum", max_val="maximum")
    def activate_variable_statistical(self, name, minimum=..., maximum=..., tolerance=..., probability=..., mean=...): # -> Literal[True]:
        """Activate statitistical analysis for a variable and optionally set up ranges.

        Parameters
        ----------
        name : str
            Name of the variable.
        minimum : optional
            Minimum value for the variable. The default is ``None``.
        maximum : optional
            Maximum value for the variable. The default is ``None``.
        tolerance : optional
            Tolerance value for the variable. The default is ``None``.
        probability : optional
            Probability value for the variable. The default is ``None``.
        mean :
            Mean value for the variable. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(variable_name="name", min_val="minimum", max_val="maximum")
    def activate_variable_optimization(self, name, minimum=..., maximum=...): # -> Literal[True]:
        """Activate optimization analysis for a variable and optionally set up ranges.

        Parameters
        ----------
        name : str
            Name of the variable.
        minimum : optional
            Minimum value for the variable. The default is ``None``.
        maximum : optional
            Maximum value for the variable. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(variable_name="name", min_val="minimum", max_val="maximum")
    def activate_variable_sensitivity(self, name, minimum=..., maximum=...): # -> Literal[True]:
        """Activate sensitivity analysis for a variable and optionally set up ranges.

        Parameters
        ----------
        name : str
            Name of the variable.
        minimum : optional
            Minimum value for the variable. The default is ``None``.
        maximum : optional
            Maximum value for the variable. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(variable_name="name", min_val="minimum", max_val="maximum")
    def activate_variable_tuning(self, name, minimum=..., maximum=...): # -> Literal[True]:
        """Activate tuning analysis for a variable and optionally set up ranges.

        Parameters
        ----------
        name : str
            Name of the variable.
        minimum : optional
            Minimum value for the variable. The default is ``None``.
        maximum : optional
            Maximum value for the variable. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(variable_name="name")
    def deactivate_variable_statistical(self, name): # -> Literal[True]:
        """Deactivate the statistical analysis for a variable.

        Parameters
        ----------
        name : str
            Name of the variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(variable_name="name")
    def deactivate_variable_optimization(self, name): # -> Literal[True]:
        """Deactivate the optimization analysis for a variable.

        Parameters
        ----------
        name : str
            Name of the variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(variable_name="name")
    def deactivate_variable_sensitivity(self, name): # -> Literal[True]:
        """Deactivate the sensitivity analysis for a variable.

        Parameters
        ----------
        name : str
            Name of the variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(variable_name="name")
    def deactivate_variable_tuning(self, name): # -> Literal[True]:
        """Deactivate the tuning analysis for a variable.

        Parameters
        ----------
        name : str
            Name of the variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(variable_name="name")
    def hidden_variable(self, name, value=...): # -> Literal[True]:
        """Set the variable to a hidden or unhidden variable.

        Parameters
        ----------
        name : str or list
            One or more variable names.
        value : bool, optional
            Whether to hide the variable. The default is ``True``, in which case the variable
            is hidden. When ``False,`` the variable is unhidden.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss["my_hidden_leaf"] = "15mm"
        >>> hfss.hidden_variable("my_hidden_leaf", True)
        """
        ...
    
    @pyaedt_function_handler(variable_name="name")
    def read_only_variable(self, name, value=...): # -> Literal[True]:
        """Set the variable to a read-only or not read-only variable.

        Parameters
        ----------
        name : str
            Name of the variable.
        value : bool, optional
            Whether the variable is read-only. The default is ``True``, in which case
            the variable is read-only. When ``False``, the variable is not read-only.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss["my_read_only_variable"] = "15mm"
        >>> hfss.make_read_only_variable("my_read_only_variable")
        """
        ...
    
    @pyaedt_function_handler()
    def close_desktop(self): # -> Literal[True]:
        """Close AEDT and release it.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def autosave_disable(self): # -> Literal[True]:
        """Disable autosave in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.EnableAutoSave
        """
        ...
    
    @pyaedt_function_handler()
    def autosave_enable(self): # -> Literal[True]:
        """Enable autosave in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.EnableAutoSave
        """
        ...
    
    @pyaedt_function_handler()
    def release_desktop(self, close_projects=..., close_desktop=...): # -> Literal[True]:
        """Release AEDT.

        Parameters
        ----------
        close_projects : bool, optional
            Whether to close all projects. The default is ``True``.
        close_desktop : bool, optional
            Whether to close AEDT after releasing it. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(subdir_name="name")
    def generate_temp_project_directory(self, name): # -> str | Literal[False]:
        """Generate a unique directory string to save a project to.

        This method creates a directory for storage of a project in the ``temp`` directory
        of the AEDT installation because this location is guaranteed to exist. If the ``name``
        parameter is defined, a subdirectory is added within the ``temp`` directory and a
        hash suffix is added to ensure that this directory is empty and has a unique name.

        Parameters
        ----------
        name : str
            Base name of the subdirectory to create in the ``temp`` directory.

        Returns
        -------
        str
            Base name of the created subdirectory.

        Examples
        --------
        >>> m3d = Maxwell3d()
        >>> proj_directory = m3d.generate_temp_project_directory("Example")

        """
        ...
    
    @pyaedt_function_handler(project_file="file_name", design_name="design", close_active_proj="close_active", save_active_project="set_active")
    def load_project(self, file_name, design=..., close_active=..., set_active=...): # -> bool:
        """Open an AEDT project based on a project and optional design.

        Parameters
        ----------
        file_name : str
            Full path of the project to load.
        design : str, optional
            Design name. The default is ``None``.
        close_active : bool, optional
            Whether to close the active project. The default is ``False``.
        set_active : bool, optional
            Whether to save the active project. The default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.OpenProject
        """
        ...
    
    @pyaedt_function_handler(dsname="name", xlist="x", ylist="y", xunit="x_unit", yunit="y_unit")
    def create_dataset1d_design(self, name, x, y, x_unit=..., y_unit=..., sort=...): # -> DataSet | Literal[False]:
        """Create a design dataset.

        Parameters
        ----------
        name : str
            Name of the dataset (without a prefix for a project dataset).
        x : list
            List of X-axis values for the dataset.
        y : list
            List of Y-axis values for the dataset.
        x_unit : str, optional
            Units for the X axis. The default is ``""``.
        y_unit : str, optional
            Units for the Y axis. The default is ``""``.
        sort : bool, optional
            Sort dataset. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.application.variables.DataSet`

        References
        ----------
        >>> oProject.AddDataset
        >>> oDesign.AddDataset
        """
        ...
    
    @pyaedt_function_handler(dsname="name", xlist="x", ylist="y", xunit="x_unit", yunit="y_unit")
    def create_dataset1d_project(self, name, x, y, x_unit=..., y_unit=..., sort=...): # -> DataSet | Literal[False]:
        """Create a project dataset.

        Parameters
        ----------
        name : str
            Name of dataset (without a prefix for a project dataset).
        x : list
            List of X-axis values for the dataset.
        y : list
            List of Y-axis values for the dataset.
        x_unit : str, optional
            Units for the X axis. The default is ``""``.
        y_unit : str, optional
            Units for the Y axis. The default is ``""``.
        sort : bool, optional
            Sort dataset. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.application.variables.DataSet`
            Dataset object when the dataset is created, ``False`` otherwise.

        References
        ----------
        >>> oProject.AddDataset
        >>> oDesign.AddDataset
        """
        ...
    
    @pyaedt_function_handler(dsname="name", xlist="x", ylist="y", zlist="z", vlist="v", xunit="x_unit", yunit="y_unit", zunit="z_unit", vunit="v_unit")
    def create_dataset3d(self, name, x, y, z=..., v=..., x_unit=..., y_unit=..., z_unit=..., v_unit=..., is_project_dataset=..., sort=...): # -> DataSet | Literal[False]:
        """Create a 3D dataset.

        Parameters
        ----------
        name : str
            Name of the dataset (without a prefix for a project dataset).
        x : list
            List of X-axis values for the dataset.
        y : list
            List of Y-axis values for the dataset.
        z : list, optional
            List of Z-axis values for a 3D dataset only. The default is ``None``.
        v : list, optional
            List of V-axis values for a 3D dataset only. The default is ``None``.
        x_unit : str, optional
            Units for the X axis. The default is ``""``.
        y_unit : str, optional
            Units for the Y axis. The default is ``""``.
        z_unit : str, optional
            Units for the Z axis for a 3D dataset only. The default is ``""``.
        v_unit : str, optional
            Units for the V axis for a 3D dataset only. The default is ``""``.
        is_project_dataset : bool, optional
            Whether it is a project data set. The default is ``True``.
        sort : bool, optional
            Sort dataset. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.application.variables.DataSet`
            Dataset object when the dataset is created, ``False`` otherwise.

        References
        ----------
        >>> oDesign.AddDataset
        """
        ...
    
    @pyaedt_function_handler(filename="input_file", dsname="name")
    def import_dataset1d(self, input_file, name=..., is_project_dataset=..., sort=...): # -> DataSet | Literal[False]:
        """Import a 1D dataset.

        Parameters
        ----------
        input_file : str
            Full path and name for the TAB file.
        name : str, optional
            Name of the dataset. The default is the file name.
        is_project_dataset : bool, optional
            Whether it is a project data set. The default is ``True``.
        sort : bool, optional
            Sort dataset. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.application.variables.DataSet`

        References
        ----------
        >>> oProject.AddDataset
        >>> oDesign.AddDataset
        """
        ...
    
    @pyaedt_function_handler(filename="input_file", dsname="name")
    def import_dataset3d(self, input_file, name=..., encoding=..., is_project_dataset=..., sort=...): # -> DataSet | Literal[False]:
        """Import a 3D dataset.

        Parameters
        ----------
        input_file : str
            Full path and name for the tab/csv/xlsx file.
        name : str, optional
            Name of the dataset. The default is the file name.
        encoding : str, optional
            File encoding to be provided for csv.
        is_project_dataset : bool, optional
            Whether it is a project data set. The default is ``True``.
        sort : bool, optional
            Sort dataset. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.application.variables.DataSet`

        References
        ----------
        >>> oProject.AddDataset
        """
        ...
    
    @pyaedt_function_handler(dsname="name", xlist="x", ylist="y", zlist="z", vlist="v", xunit="x_unit", yunit="y_unit", zunit="z_unit", vunit="v_unit")
    def create_dataset(self, name, x, y, z=..., v=..., is_project_dataset=..., x_unit=..., y_unit=..., z_unit=..., v_unit=..., sort=...): # -> DataSet | Literal[False]:
        """Create a dataset.

        Parameters
        ----------
        name : str
            Name of the dataset (without a prefix for a project dataset).
        x : list
            List of X-axis values for the dataset.
        y : list
            List of Y-axis values for the dataset.
        z : list, optional
            List of Z-axis values for a 3D dataset only. The default is ``None``.
        v : list, optional
            List of V-axis values for a 3D dataset only. The default is ``None``.
        is_project_dataset : bool, optional
            Whether it is a project data set. The default is ``True``.
        x_unit : str, optional
            Units for the X axis. The default is ``""``.
        y_unit : str, optional
            Units for the Y axis. The default is ``""``.
        z_unit : str, optional
            Units for the Z axis for a 3D dataset only. The default is ``""``.
        v_unit : str, optional
            Units for the V axis for a 3D dataset only. The default is ``""``.
        sort : bool, optional
            Sort dataset. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.application.variables.DataSet`
            Dataset object when the dataset is created, ``False`` otherwise.

        References
        ----------
        >>> oProject.AddDataset
        >>> oDesign.AddDataset
        """
        ...
    
    @pyaedt_function_handler()
    def dataset_exists(self, name, is_project_dataset=...): # -> bool:
        """Check if a dataset exists.

        Parameters
        ----------
        name : str
            Name of the dataset (without a prefix for a project dataset).
        is_project_dataset : bool, optional
            Whether it is a project data set. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def change_design_settings(self, settings): # -> Literal[True]:
        """Set Design Settings.

        Parameters
        ----------
        settings : dict
            Dictionary of settings with value to apply.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def change_automatically_use_causal_materials(self, lossy_dielectric=...): # -> Literal[True]:
        """Enable or disable the automatic use of causal materials for lossy dielectrics.

        Parameters
        ----------
        lossy_dielectric : bool, optional
            Whether to enable causal materials.
            The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetDesignSettings
        """
        ...
    
    @pyaedt_function_handler()
    def change_material_override(self, material_override=...): # -> Literal[True]:
        """Enable or disable the material override in the project.

        Parameters
        ----------
        material_override : bool, optional
            Whether to enable the material override.
            The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetDesignSettings
        """
        ...
    
    @pyaedt_function_handler()
    def change_validation_settings(self, entity_check_level=..., ignore_unclassified=..., skip_intersections=...): # -> Literal[True]:
        """Update the validation design settings.

        Parameters
        ----------
        entity_check_level : str, optional
            Entity check level. The default is ``"Strict"``.
            Options are ``"Strict"``, ``"Basic"``, ``"Warning Only"``, ``"None"``.
        ignore_unclassified : bool, optional
            Whether to ignore unclassified elements. The default is ``False``.
        skip_intersections : bool, optional
            Whether to skip intersections. The default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetDesignSettings
        """
        ...
    
    @pyaedt_function_handler()
    def clean_proj_folder(self, directory=..., name=...): # -> Literal[True]:
        """Delete a project folder.

        Parameters
        ----------
        directory : str or :class:`pathlib.Path`, optional
            Name of the directory. The default is ``None``, in which case the active project is
            deleted from the ``aedtresults`` directory.
        name : str, optional
            Name of the project. The default is ``None``, in which case the data for the
            active project is deleted.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(path="destination", dest="name")
    def copy_project(self, destination, name): # -> Literal[True]:
        """Copy the project to another destination.

        .. note::
           This method saves the project before copying it.

        Parameters
        ----------
        destination : str
            Path to save a copy of the project to.
        name :
            Name to give the project in the new destination.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.SaveAs
        """
        ...
    
    @pyaedt_function_handler(proj_name="name")
    def create_new_project(self, name): # -> Literal[True]:
        """Create a project within AEDT.

        Parameters
        ----------
        name :
            Name of the project.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.NewProject
        """
        ...
    
    @pyaedt_function_handler(save_project="save")
    def close_project(self, name=..., save=...): # -> bool:
        """Close an AEDT project.

        Parameters
        ----------
        name : str, optional
            Name of the project. The default is ``None``, in which case the
            active project is closed.
        save : bool, optional
            Whether to save the project before closing it. The default is
            ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.CloseProject
        """
        ...
    
    @pyaedt_function_handler()
    def delete_design(self, name=..., fallback_design=...): # -> bool:
        """Delete a design from the current project.

        .. warning::
           This method does not work from the toolkit.

        Parameters
        ----------
        name : str, optional
            Name of the design. The default is ``None``, in which case
            the active design is deleted.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.DeleteDesign
        """
        ...
    
    @pyaedt_function_handler(separator_name="name")
    def delete_separator(self, name): # -> bool:
        """Delete a separator from either the active project or a design.

        Parameters
        ----------
        name : str
            Name of the separator.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.ChangeProperty
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(sVarName="name")
    def delete_variable(self, name): # -> bool:
        """Delete a variable.

        Parameters
        ----------
        name :
            Name of the variable.

        References
        ----------
        >>> oProject.ChangeProperty
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler()
    def delete_unused_variables(self): # -> Literal[True]:
        """Delete design and project unused variables.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(design_name="name")
    def insert_design(self, name=..., solution_type=...): # -> None:
        """Add a design of a specified type.

        The default design type is taken from the derived application class.

        Parameters
        ----------
        name : str, optional
            Name of the design. The default is ``None``, in which case the
            default design name is ``<Design-Type>Design<_index>``. If the
            given or default design name is in use, then an underscore and
            index is added to ensure that the design name is unique.
            The inserted object is assigned to the ``Design`` object.
        solution_type : str, optional
            Solution type to apply to the design. The default is
            ``None``, in which case the default type is applied.

        Returns
        -------
        str
            Name of the design.

        References
        ----------
        >>> oProject.InsertDesign
        """
        ...
    
    @pyaedt_function_handler(new_name="name", save_after_duplicate="save")
    def rename_design(self, name, save=...): # -> Literal[True]:
        """Rename the active design.

        Parameters
        ----------
        name : str
            New name of the design.
        save : bool, optional
            Save project after the duplication is completed. If ``False``, pyaedt objects like boundaries will not be
            available.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.RenameDesignInstance
        """
        ...
    
    @pyaedt_function_handler(project_fullname="project", design_name="design")
    def copy_design_from(self, project, design, save_project=..., set_active_design=...): # -> Any | None:
        """Copy a design from a project into the active project.

        Parameters
        ----------
        project : str
            Full path and name for the project containing the design to copy.
            The active design is maintained.
        design : str
            Name of the design to copy into the active design. If a design with this
            name is already present in the destination project, AEDT automatically
            changes the name.
        save_project : bool, optional
            Save the project after the design has been copied. Default value is `True`.
        set_active_design : bool, optional
            Set the design active after it has been copied. Default value is `True`.

        Returns
        -------
        str
           Name of the copied design name when successful or ``None`` when failed.
           Failure is generally a result of the name specified for ``design_name``
           not existing in the project specified for ``project_fullname``.

        References
        ----------
        >>> oProject.CopyDesign
        >>> oProject.Paste
        """
        ...
    
    @pyaedt_function_handler(label="name")
    def duplicate_design(self, name, save_after_duplicate=...): # -> Literal[True]:
        """Copy a design to a new name.

        The new name consists of the original
        design name plus a suffix of ``MMode`` and a running index
        as necessary to allow for multiple calls.

        Parameters
        ----------
        name : str
            Name of the design to copy.
        save_after_duplicate : bool, optional
            Save project after the duplication is completed. If ``False``, pyaedt objects like boundaries will not be
            available.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.CopyDesign
        >>> oProject.Paste
        """
        ...
    
    @pyaedt_function_handler(filename="output_file")
    def export_design_preview_to_jpg(self, output_file): # -> Literal[True]:
        """Export design preview image to a JPG file.

        Parameters
        ----------
        output_file : str
            Full path and name for the JPG file.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(filename="output_file", export_project="export_project_variables", export_design="export_design_properties")
    def export_variables_to_csv(self, output_file, export_project_variables=..., export_design_properties=...): # -> bool:
        """Export design properties, project variables, or both to a CSV file.

        Parameters
        ----------
        output_file : str
            Full path and name for the CSV file.
        export_project_variables : bool, optional
            Whether to export project variables. The default is ``True``.
        export_design_properties : bool, optional
            Whether to export design properties. The default is ``True``.


        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.GetProperties
        >>> oDesign.GetProperties
        >>> oProject.GetVariableValue
        >>> oDesign.GetVariableValue
        """
        ...
    
    @pyaedt_function_handler()
    def read_design_data(self): # -> Any:
        """Read back the design data as a dictionary.

        Returns
        -------
        dict
            Dictionary of the design data.

        """
        ...
    
    @pyaedt_function_handler(project_file="file_name", refresh_obj_ids_after_save="refresh_ids")
    def save_project(self, file_name=..., overwrite=..., refresh_ids=...): # -> Literal[True]:
        """Save the project and add a message.

        Parameters
        ----------
        file_name : str, optional
            Full path and project name. The default is ````None``.
        overwrite : bool, optional
            Whether to overwrite the existing project. The default is ``True``.
        refresh_ids : bool, optional
            Whether to refresh object IDs after saving the project.
            The default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.Save
        >>> oProject.SaveAs
        """
        ...
    
    @pyaedt_function_handler(project_file="project_path", additional_file_lists="additional_files")
    def archive_project(self, project_path=..., include_external_files=..., include_results_file=..., additional_files=..., notes=...): # -> Literal[True]:
        """Archive the AEDT project and add a message.

        Parameters
        ----------
        project_path : str, optional
            Full path and project name. The default is ``None``.
        include_external_files : bool, optional
            Whether to include external files in the archive. The default is ``True``.
        include_results_file : bool, optional
            Whether to include simulation results files in the archive. The default is ``True``.
        additional_files : list, optional
            List of additional files to add to the archive.
            The default is ``None`` in which case an empty list is set.
        notes : str, optional
            Simulation notes to add to the archive. The default is ``""``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.Save
        >>> oProject.SaveProjectArchive
        """
        ...
    
    @pyaedt_function_handler(project_name="name")
    def delete_project(self, name): # -> Literal[True]:
        """Delete a project.

        Parameters
        ----------
        name : str
            Name of the project.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.DeleteProject
        """
        ...
    
    @pyaedt_function_handler()
    def set_active_design(self, name): # -> Literal[True]:
        """Change the active design to another design.

        Parameters
        ----------
        name :
            Name of the design to make active.

        References
        ----------
        >>> oProject.SetActiveDesign
        """
        ...
    
    @pyaedt_function_handler(logfile="log_file")
    def validate_simple(self, log_file=...): # -> Any:
        """Validate a design.

        Parameters
        ----------
        log_file : str or :class:`pathlib.Path`, optional
            Name of the log file to save validation information to.
            The default is ``None``.

        Returns
        -------
        int
            ``1`` when successful, ``0`` when failed.

        References
        ----------
        >>> oDesign.ValidateDesign
        """
        ...
    
    @pyaedt_function_handler(variable_name="name")
    def get_evaluated_value(self, name, units=...): # -> Any | float:
        """Retrieve the evaluated value of a design property or project variable in SI units if no unit is provided.

        Parameters
        ----------
        name : str
            Name of the design property or project variable.
        units : str, optional
            Name of the unit to use for rescaling. The default is ``None``,
            in which case SI units are applied by default.

        Returns
        -------
        float
            Evaluated value of the design property or project variable in SI units.

        References
        ----------
        >>> oDesign.GetNominalVariation
        >>> oDesign.GetVariationVariableValue

        Examples
        --------

        >>> M3D = Maxwell3d()
        >>> M3D["p1"] = "10mm"
        >>> M3D["p2"] = "20mm"
        >>> M3D["p3"] = "P1 * p2"
        >>> eval_p3 = M3D.get_evaluated_value("p3")
        """
        ...
    
    @pyaedt_function_handler(expression_string="expression")
    def evaluate_expression(self, expression): # -> float:
        """Evaluate a valid string expression and return the numerical value in SI units.

        Parameters
        ----------
        expression : str
            A valid string expression for a design property or project variable.
            For example, ``"34mm*sqrt(2)"`` or ``"$G1*p2/34"``.

        Returns
        -------
        float
            Evaluated value for the string expression.

        """
        ...
    
    @pyaedt_function_handler(variation_string="variation")
    def design_variation(self, variation=...): # -> Any:
        """Generate a string to specify a desired variation.

        This method converts an input string defining a desired solution variation into a valid
        string taking into account all existing design properties and project variables, including
        dependent (non-sweep) properties.

        This is needed because the standard method COM function ``GetVariationVariableValue``
        does not work for obtaining values of dependent (non-sweep) variables.
        Using the object-oriented scripting model, which is a beta feature, could make this redundant in
        future releases.

        Parameters
        ----------
        variation : str, optional
            Variation string. For example, ``"p1=1mm"`` or ``"p2=3mm"``.

        Returns
        -------
        str
            String specifying the desired variation.

        References
        ----------
        >>> oDesign.GetNominalVariation
        """
        ...
    
    @pyaedt_function_handler(toolkit_object="toolkit")
    def add_from_toolkit(self, toolkit, draw=..., **kwargs):
        """Add a new toolkit to the current application.

        Parameters
        ----------
        toolkit :
            Application object from ``"ansys.aedt.toolkits"``.


        Returns
        -------
            Application-created object.
        """
        ...
    
    @pyaedt_function_handler(project_path="input_file")
    def check_if_project_is_loaded(self, input_file): # -> Any | Literal[False]:
        """Check if a project path is already loaded in active Desktop.

        Parameters
        ----------
        input_file : str
            Project path to check in active desktop.

        Returns
        -------
        str
            Project name if loaded in Desktop.
        """
        ...
    
    @pyaedt_function_handler(temp_dir_path="path")
    def set_temporary_directory(self, path): # -> Literal[True]:
        """Set temporary directory path.

        Parameters
        ----------
        path : str
            Temporary directory path.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesktop.SetTempDirectory()
        """
        ...
    
    @pyaedt_function_handler()
    def edit_notes(self, text): # -> bool:
        """Edit notes.

        Notes are used to document aspects of designs only.

        Parameters
        ----------
        text : str
            Text to be added in the design notes.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.EditNotes()

        Examples
        --------

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> m3d.edit_notes("This is an example.")
        """
        ...
    


class DesignSettings:
    """Get design settings for the current AEDT app.

    References
    ----------
    >>> oDesign.GetChildObject("Design Settings")
    """
    def __init__(self, app) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __setitem__(self, key: str, value: Any) -> Union[bool, None]:
        ...
    
    def __getitem__(self, key: str) -> Optional[Any]:
        ...
    
    def __contains__(self, item: str) -> bool:
        ...
    
    @property
    def design_settings(self) -> Optional[Any]:
        """Design settings."""
        ...
    
    @property
    def available_properties(self) -> List[str]:
        """Available properties names for the current design."""
        ...
    


class DesignSettingsManipulation:
    @abstractmethod
    def execute(self, k: str, v: Any) -> Any:
        ...
    


