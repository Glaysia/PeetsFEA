"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Union
from ansys.aedt.core.application.design import Design
from ansys.aedt.core.generic.general_methods import deprecate_argument, pyaedt_function_handler

"""
This module contains the ``analysis`` class.

It includes common classes for file management and messaging and all
calls to AEDT modules like the modeler, mesh, postprocessing, and setup.
"""
class Analysis(Design):
    """Contains all common analysis functions.

    This class is inherited in the caller application and is accessible through it ( eg. ``hfss.method_name``).


    It is automatically initialized by a call from an application, such as HFSS or Q3D.
    See the application function for its parameter descriptions.

    Parameters
    ----------
    application : str
        Application that is to initialize the call.
    projectname : str
        Name of the project to select or the full path to the project
        or AEDTZ archive to open.
    designname : str
        Name of the design to select.
    solution_type : str
        Solution type to apply to the design.
    setup_name : str
        Name of the setup to use as the nominal.
    specified_version : str
        Version of AEDT  to use.
    NG : bool
        Whether to run AEDT in the non-graphical mode.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine.
    close_on_exit : bool
        Whether to release  AEDT on exit.
    student_version : bool
        Whether to enable the student version of AEDT.
    aedt_process_id : int, optional
        Only used when ``new_desktop = False``, specifies by process ID which instance
        of Electronics Desktop to point PyAEDT at.
    ic_mode : bool, optional
        Whether to set the design to IC mode. The default is ``None``, which means to retain the
        existing setting. This parameter applies only to HFSS 3D Layout.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.
    """
    def __init__(self, application, projectname, designname, solution_type, setup_name, specified_version, non_graphical, new_desktop, close_on_exit, student_version, machine=..., port=..., aedt_process_id=..., ic_mode=..., remove_lock=...) -> None:
        ...
    
    @property
    def design_setups(self): # -> dict[str | Any, SetupHFSSAuto | Any | Setup]:
        """All design setups ordered by name.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modules.solve_setup.Setup`]
        """
        ...
    
    @property
    def native_components(self): # -> dict[Any, Any]:
        """Native Component dictionary.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modules.Boundaries.NativeComponentObject`]
        """
        ...
    
    @property
    def native_component_names(self):
        """Native component names.

        Returns
        -------
        list
        """
        ...
    
    @property
    def output_variables(self): # -> Any:
        """List of output variables.

        Returns
        -------
        list of str

        References
        ----------
        >>> oModule.GetOutputVariables()
        """
        ...
    
    @property
    def materials(self): # -> Materials | None:
        """Materials in the project.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material_lib.Materials`
           Materials in the project.

        """
        ...
    
    @property
    def setups(self): # -> list[SetupHFSSAuto | Any | Setup]:
        """Setups in the project.

        Returns
        -------
        list[:class:`ansys.aedt.core.modules.solve_setup.Setup`]
            Setups in the project.

        """
        ...
    
    @property
    def parametrics(self): # -> ParametricSetups | list[Any]:
        """Setups in the project.

        Returns
        -------
        :class:`ansys.aedt.core.modules.design_xploration.ParametricSetups`
            Parametric setups in the project.

        """
        ...
    
    @property
    def optimizations(self): # -> OptimizationSetups | list[Any]:
        """Optimizations in the project.

        Returns
        -------
        :class:`ansys.aedt.core.modules.design_xploration.OptimizationSetups`
            Parametric setups in the project.

        """
        ...
    
    @property
    def Position(self): # -> None:
        """Position of the object.

        Returns
        -------
        type
            Position object.

        """
        ...
    
    @property
    def available_variations(self): # -> AvailableVariations:
        """Available variation object.

        Returns
        -------
        :class:`ansys.aedt.core.application.analysis.AvailableVariations`
            Available variation object.

        """
        ...
    
    @property
    def active_setup(self): # -> Any | None:
        """Get or Set the name of the active setup. If not set it will be the first analysis setup.

        Returns
        -------
        str
            Name of the active or first analysis setup.

        References
        ----------
        >>> oModule.GetAllSolutionSetups()
        """
        ...
    
    @active_setup.setter
    @pyaedt_function_handler(setup_name="name")
    def active_setup(self, name): # -> None:
        ...
    
    @property
    def setup_sweeps_names(self): # -> dict[Any, Any]:
        """Get all available setup names and sweeps.
        Returns
        -------
        dict
            A dictionary containing the nominal value for such setup and all available sweeps.
        """
        ...
    
    @property
    def existing_analysis_sweeps(self): # -> list[Any]:
        """Existing analysis sweeps.

        Returns
        -------
        list of str
            List of all analysis sweeps in the design.

        References
        ----------
        >>> oModule.GelAllSolutionNames
        >>> oModule.GetSweeps
        """
        ...
    
    @property
    def nominal_adaptive(self): # -> Any | str:
        """Nominal adaptive sweep.

        Returns
        -------
        str
            Name of the nominal adaptive sweep.

        References
        ----------
        >>> oModule.GelAllSolutionNames
        >>> oModule.GetSweeps
        """
        ...
    
    @property
    def nominal_sweep(self): # -> str | Any:
        """Nominal sweep.

        Returns
        -------
        str
            Name of the last adaptive sweep if a sweep is available or
            the name of the nominal adaptive sweep if present.

        References
        ----------
        >>> oModule.GelAllSolutionNames
        >>> oModule.GetSweeps
        """
        ...
    
    @property
    def existing_analysis_setups(self): # -> Any | list[Any]:
        """Existing analysis setups.

        .. deprecated:: 0.15.0
            Use :func:`setup_names` from setup object instead.

        Returns
        -------
        list of str
            List of all analysis setups in the design.

        References
        ----------
        >>> oModule.GetSetups
        """
        ...
    
    @property
    def setup_names(self): # -> Any | list[Any]:
        """Setup names.

        Returns
        -------
        list of str
            List of names of all analysis setups in the design.

        References
        ----------
        >>> oModule.GetSetups
        """
        ...
    
    @property
    def imported_solution_names(self): # -> list[Any]:
        """Return the list of the imported solution names.

        Returns
        -------
        list of str
        """
        ...
    
    @property
    def SimulationSetupTypes(self): # -> SETUPS:
        """Simulation setup types.

        Returns
        -------
        SETUPS
            List of all simulation setup types categorized by application.
        """
        ...
    
    @property
    def SolutionTypes(self): # -> SOLUTIONS:
        """Solution types.

        Returns
        -------
        SOLUTIONS
            List of all solution type categorized by application.
        """
        ...
    
    @property
    def excitations(self): # -> list[Any]:
        """Get all excitation names.

        .. deprecated:: 0.15.0
           Use :func:`excitation_names` property instead.

        Returns
        -------
        list
            List of excitation names. Excitations with multiple modes will return one
            excitation for each mode.

        References
        ----------
        >>> oModule.GetExcitations
        """
        ...
    
    @property
    def excitation_names(self): # -> list[Any]:
        """Get all excitation names.

        Returns
        -------
        list
            List of excitation names. Excitations with multiple modes will return one
            excitation for each mode.

        References
        ----------
        >>> oModule.GetExcitations
        """
        ...
    
    @property
    def design_excitations(self): # -> dict[Any, Any]:
        """Get all excitation.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`]
           Excitation boundaries.

        References
        ----------
        >>> oModule.GetExcitations
        """
        ...
    
    @property
    def excitations_by_type(self): # -> dict[Any, Any]:
        """Design excitations by type.

        Returns
        -------
        dict
            Dictionary of excitations.
        """
        ...
    
    @property
    def excitation_objects(self): # -> dict[Any, Any]:
        """Get all excitation.

        .. deprecated:: 0.15.0
           Use :func:`design_excitations` property instead.

        Returns
        -------
        dict
            List of excitation boundaries. Excitations with multiple modes will return one
            excitation for each mode.

        References
        ----------
        >>> oModule.GetExcitations
        """
        ...
    
    @pyaedt_function_handler()
    def get_traces_for_plot(self, get_self_terms: bool = ..., get_mutual_terms: bool = ..., first_element_filter: str = ..., second_element_filter: str = ..., category: str = ..., differential_pairs: list = ...) -> list:
        """Retrieve a list of traces of specified designs ready to use in plot reports.

        Parameters
        ----------
        get_self_terms : bool, optional
            Whether to return self terms. The default is ``True``.
        get_mutual_terms : bool, optional
            Whether to return mutual terms. The default is ``True``.
        first_element_filter : str, optional
            Filter to apply to the first element of the equation.
            This parameter accepts ``*`` and ``?`` as special characters. The default is ``None``.
        second_element_filter : str, optional
            Filter to apply to the second element of the equation.
            This parameter accepts ``*`` and ``?`` as special characters. The default is ``None``.
        category : str, optional
            Plot category name as in the report (including operator).
            The default is ``"dB(S)"``,  which is the plot category name for capacitance.
        differential_pairs : list, optional
            Differential pairs defined. The default is ``None`` in which case an empty list is set.

        Returns
        -------
        list
            List of traces of specified designs ready to use in plot reports.

        Examples
        --------
        >>> from ansys.aedt.core import Hfss3dLayout
        >>> hfss = Hfss3dLayout(project_path)
        >>> hfss.get_traces_for_plot(first_element_filter="Bo?1", second_element_filter="GND*", category="dB(S")
        >>> hfss.get_traces_for_plot(
        ...     differential_pairs=["Diff_U0_data0", "Diff_U1_data0", "Diff_U1_data1"],
        ...     first_element_filter="*_U1_data?",
        ...     second_element_filter="*_U0_*",
        ...     category="dB(S",
        ... )
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", sweep_name="sweep")
    def list_of_variations(self, setup=..., sweep=...): # -> list[Any] | list[str] | Literal[False]:
        """Retrieve a list of active variations for input setup.

        Parameters
        ----------
        setup : str, optional
            Setup name. The default is ``None``, in which case the nominal adaptive
            is used.
        sweep : str, optional
            Sweep name. The default is``None``, in which case the nominal adaptive
            is used.

        Returns
        -------
        list
            List of active variations for input setup.

        References
        ----------
        >>> oModule.ListVariations
        """
        ...
    
    @pyaedt_function_handler()
    @deprecate_argument(arg_name="analyze", message="The ``analyze`` argument will be removed in future versions. Analyze before exporting results.")
    def export_results(self, analyze=..., export_folder=..., matrix_name=..., matrix_type=..., touchstone_format=..., touchstone_number_precision=..., length=..., impedance=..., include_gamma_comment=..., support_non_standard_touchstone_extension=..., variations=...):
        """Export all available reports to a file, including profile, and convergence and sNp when applicable.

        Parameters
        ----------
        analyze : bool
            Whether to analyze before export. Solutions must be present for the design.
        export_folder : str, optional
            Full path to the project folder. The default is ``None``, in which case the
            working directory is used.
        matrix_name : str, optional
            Matrix to specify to export touchstone file.
            The default is ``Original``, in which case default matrix is taken.
            This argument applies only to 2DExtractor and Q3D setups where Matrix reduction is computed
            and needed to export touchstone file.
        matrix_type : str, optional
            Type of matrix to export. The default is ``S`` to export a touchstone file.
            Available values are ``S``, ``Y``, ``Z``.  ``Y`` and ``Z`` matrices will be exported as tab file.
        touchstone_format : str, optional
            Touchstone format. The default is ``MagPahse``.
            Available values are: ``MagPahse``, ``DbPhase``, ``RealImag``.
        length : str, optional
            Length of the model to export. The default is ``1meter``.
        impedance : float, optional
            Real impedance value in ohms, for renormalization. The default is ``50``.
        touchstone_number_precision : int, optional
            Touchstone number of digits precision. The default is ``15``.
        include_gamma_comment : bool, optional
            Specifies whether to include Gamma and Impedance comments. The default is ``True``.
        support_non_standard_touchstone_extension : bool, optional
            Specifies whether to support non-standard Touchstone extensions for mixed reference impedance.
            The default is ``False``.
        variations : list, optional
            List of variation values with units. The default is all variations.

        Returns
        -------
        list
            List of all exported files.

        References
        ----------
        >>> oModule.GetAllPortsList
        >>> oDesign.ExportProfile
        >>> oModule.ExportToFile
        >>> oModule.ExportConvergence
        >>> oModule.ExportNetworkData

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> aedtapp.analyze()
        >>> exported_files = aedtapp.export_results()
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", variation_string="variations", file_path="output_file")
    def export_convergence(self, setup, variations=..., output_file=...): # -> str:
        """Export a solution convergence to a file.

        Parameters
        ----------
        setup : str
            Setup name. For example, ``'Setup1'``.
        variations : str
            Variation string with values. For example, ``'radius=3mm'``.
        output_file : str, optional
            Full path to the PROF file. The default is ``None``, in which
            case the working directory is used.


        Returns
        -------
        str
            Output file path if created.

        References
        ----------
        >>> oModule.ExportConvergence
        """
        ...
    
    @property
    def AxisDir(self): # -> GRAVITY:
        """Contains constants for the axis directions.

        .. deprecated:: 0.15.1
            Use :func:`axis_dir` instead.
        """
        ...
    
    @property
    def axis_directions(self): # -> GRAVITY:
        """Contains constants for the axis directions."""
        ...
    
    @pyaedt_function_handler()
    def get_setups(self): # -> list[Any]:
        """Retrieve setups.

        Returns
        -------
        list of str
            List of names of all setups.

        References
        ----------
        >>> oModule.GetSetups
        """
        ...
    
    @pyaedt_function_handler()
    def get_nominal_variation(self, with_values=...): # -> dict[Any, str] | dict[Any, Any]:
        """Retrieve the nominal variation.

        Parameters
        ----------
        with_values : bool
            Whether to return nominal variation or nominal variation with values.
            The default is ``False``.

        Returns
        -------
        dict

        """
        ...
    
    @pyaedt_function_handler()
    def get_sweeps(self, name): # -> list[Any]:
        """Retrieve all sweeps for a setup.

        Parameters
        ----------
        name : str
            Name of the setup.

        Returns
        -------
        list of str
            List of names of all sweeps for the setup.

        References
        ----------
        >>> oModule.GetSweeps
        """
        ...
    
    @pyaedt_function_handler(sweepname="sweep", filename="output_file", exportunits="export_units")
    def export_parametric_results(self, sweep, output_file, export_units=...): # -> Literal[True]:
        """Export a list of all parametric variations solved for a sweep to a CSV file.

        Parameters
        ----------
        sweep : str
            Name of the optimetrics sweep.
        output_file : str
            Full path and name of the CSV file to export the results to.
        export_units : bool, optional
            Whether to export units with the value. The default is ``True``. When ``False``,
            only the value is exported.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.ExportParametricResults
        """
        ...
    
    @pyaedt_function_handler(setup_name="name")
    def generate_unique_setup_name(self, name=...): # -> str:
        """Generate a new setup with a unique name.

        Parameters
        ----------
        name : str, optional
            Name of the setup. The default is ``None``.

        Returns
        -------
        str
            Name of the setup.

        """
        ...
    
    @pyaedt_function_handler(setupname="name")
    def delete_setup(self, name): # -> bool:
        """Delete a setup.

        Parameters
        ----------
        name : str
            Name of the setup.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.DeleteSetups

        Examples
        --------
        Create a setup and then delete it.

        >>> import ansys.aedt.core
        >>> hfss = ansys.aedt.core.Hfss()
        >>> setup1 = hfss.create_setup(name="Setup1")
        >>> hfss.delete_setup()
        PyAEDT INFO: Sweep was deleted correctly.
        """
        ...
    
    @pyaedt_function_handler(setupname="name", properties_dict="properties")
    def edit_setup(self, name, properties): # -> Setup:
        """Modify a setup.

        .. deprecated:: 0.15.0
            Use :func:`update` from setup object instead.

        Parameters
        ----------
        name : str
            Name of the setup.
        properties : dict
            Dictionary containing the property to update with the value.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.Setup`

        References
        ----------
        >>> oModule.EditSetup
        """
        ...
    
    @pyaedt_function_handler(setupname="name")
    def get_setup(self, name): # -> SetupHFSSAuto | Setup:
        """Get the setup from the current design.

        Parameters
        ----------
        name : str
            Name of the setup.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.Setup`

        """
        ...
    
    @pyaedt_function_handler()
    def create_output_variable(self, variable, expression, solution=..., context=..., is_differential=...): # -> Literal[True]:
        """Create or modify an output variable.

        Parameters
        ----------
        variable : str, optional
            Name of the variable.
        expression : str, optional
            Value for the variable.
        solution : str, optional
            Name of the solution in the format `"name : sweep_name"`.
            If `None`, the first available solution is used. Default is `None`.
        context : list, str, optional
            Context under which the output variable will produce results.
        is_differential : bool, optional
            Whether the expression corresponds to a differential pair.
            This parameter is only valid for HFSS 3D Layout and Circuit design types. The default value is `False`.

        Returns
        -------
        bool
           ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.CreateOutputVariable

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> aedtapp = Circuit()
        >>> aedtapp.create_output_variable(variable="output_diff", expression="S(Comm,Diff)", is_differential=True)
        >>> aedtapp.create_output_variable(variable="output_terminal", expression="S(1,1)", is_differential=False)
        """
        ...
    
    @pyaedt_function_handler()
    def get_output_variable(self, variable, solution=...): # -> Any:
        """Retrieve the value of the output variable.

        Parameters
        ----------
        variable : str
            Name of the variable.
        solution :
            Name of the solution in the format `"name : sweep_name"`.
            If `None`, the first available solution is used. Default is `None`.

        Returns
        -------
        type
            Value of the output variable.

        References
        ----------
        >>> oDesign.GetNominalVariation
        >>> oModule.GetOutputVariableValue
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment")
    def get_object_material_properties(self, assignment=..., prop_names=...): # -> dict[Any, Any]:
        """Retrieve the material properties for a list of objects and return them in a dictionary.

        This high-level function ignores objects with no defined material properties.

        Parameters
        ----------
        assignment : list, optional
            List of objects to get material properties for. The default is ``None``,
            in which case material properties are retrieved for all objects.
        prop_names : str or list
            Property or list of properties to export. The default is ``None``, in
            which case all properties are exported.

        Returns
        -------
        dict
            Dictionary of objects with material properties.
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", num_cores="cores", num_tasks="tasks", num_gpu="gpus")
    def analyze(self, setup=..., cores=..., tasks=..., gpus=..., acf_file=..., use_auto_settings=..., solve_in_batch=..., machine=..., run_in_thread=..., revert_to_initial_mesh=..., blocking=...): # -> Literal[True]:
        """Solve the active design.

        Parameters
        ----------
        setup : str, optional
            Setup to analyze. The default is ``None``, in which case all
            setups are solved.
        cores : int, optional
            Number of simulation cores. Default is ``4`` which is the number of cores available in license.
        tasks : int, optional
            Number of simulation tasks. The default is ``1``.
            In bach solve, set ``tasks`` to ``-1`` to apply auto settings and distributed mode.
        gpus : int, optional
            Number of simulation graphic processing units to use. The default is ``0``.
        acf_file : str, optional
            Full path to the custom ACF file.
        use_auto_settings : bool, optional
            Set ``True`` to use automatic settings for HPC. The option is only considered for setups
            that support automatic settings.
        solve_in_batch : bool, optional
            Whether to solve the project in batch or not.
            If ``True`` the project will be saved, closed, solved and repened.
        machine : str, optional
            Name of the machine if remote.  The default is ``"localhost"``.
        run_in_thread : bool, optional
            Whether to submit the batch command as a thread. The default is
            ``False``.
        revert_to_initial_mesh : bool, optional
            Whether to revert to initial mesh before solving or not. Default is ``False``.
        blocking : bool, optional
            Whether to block script while analysis is completed or not. It works from AEDT 2023 R2.
            Default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.Analyze
        """
        ...
    
    @pyaedt_function_handler(num_cores="cores", num_tasks="tasks", num_gpu="gpus")
    def analyze_setup(self, name=..., cores=..., tasks=..., gpus=..., acf_file=..., use_auto_settings=..., num_variations_to_distribute=..., allowed_distribution_types=..., revert_to_initial_mesh=..., blocking=...):
        """Analyze a design setup.

        Parameters
        ----------
        name : str, optional
            Name of the setup, which can be an optimetric setup or a simple setup.
            The default is ``None``, in which case all setups are solved.
        cores : int, optional
            Number of simulation cores.  The default is ``4``.
        tasks : int, optional
            Number of simulation tasks.  The default is ``1``.
        gpus : int, optional
            Number of simulation graphics processing units.  The default is ``0``.
        acf_file : str, optional
            Full path to the custom ACF file. The default is ``None``.
        use_auto_settings : bool, optional
            Either use or not auto settings in task/cores. It is not supported by all Setup.
        num_variations_to_distribute : int, optional
            Number of variations to distribute. For this to take effect ``use_auto_settings`` must be set to ``True``.
        allowed_distribution_types : list, optional
            List of strings. Each string represents a distribution type. The default value ``None`` does nothing.
            An empty list ``[]`` disables all types.
        revert_to_initial_mesh : bool, optional
            Whether to revert to initial mesh before solving or not. Default is ``False``.
        blocking : bool, optional
            Whether to block script while analysis is completed or not. It works from AEDT 2023 R2.
            Default is ``True``.

        Returns
        -------
        bool
           ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.Analyze
        """
        ...
    
    @property
    def are_there_simulations_running(self): # -> Any:
        """Check if there are simulation running.

        .. note::
           It works only for AEDT >= ``"2023.2"``.

        Returns
        -------
        float

        References
        ----------
        >>> oDesktop.AreThereSimulationsRunning
        """
        ...
    
    @pyaedt_function_handler()
    def get_monitor_data(self): # -> dict[str, int]:
        """Check and get monitor data of an existing analysis.

        .. note::
           It works only for AEDT >= ``"2023.2"``.

        Returns
        -------
        dict

        References
        ----------
        >>> oDesktop.GetMonitorData
        """
        ...
    
    @pyaedt_function_handler()
    def stop_simulations(self, clean_stop=...): # -> Any:
        """Check if there are simulation running and stops them.

        .. note::
           It works only for AEDT >= ``"2023.2"``.

        Returns
        -------
        str

        References
        ----------
        >>> oDesktop.StopSimulations
        """
        ...
    
    @pyaedt_function_handler(filename="file_name", numcores="cores", num_tasks="tasks", setup_name="setup")
    def solve_in_batch(self, file_name=..., machine=..., run_in_thread=..., cores=..., tasks=..., setup=..., revert_to_initial_mesh=...): # -> Literal[True]:
        """Analyze a design setup in batch mode.

        .. note::
           To use this function, the project must be closed.

        .. warning::

            Do not execute this function with untrusted function argument, environment
            variables or pyaedt global settings.
            See the :ref:`security guide<ref_security_consideration>` for details.

        Parameters
        ----------
        file_name : str, optional
            Name of the setup. The default is ``None``, which means that the active project
            is to be solved.
        machine : str, optional
            Name of the machine if remote.  The default is ``"localhost"``.
        run_in_thread : bool, optional
            Whether to submit the batch command as a thread. The default is
            ``False``.
        cores : int, optional
            Number of cores to use in the simulation.
        tasks : int, optional
            Number of tasks to use in the simulation.
            Set ``num_tasks`` to ``-1`` to apply auto settings and distributed mode.
        setup : str
            Name of the setup, which can be an optimetrics setup or a simple setup.
            The default is ``None``, in which case all setups are solved.
        revert_to_initial_mesh : bool, optional
            Whether to revert to the initial mesh before solving. The default is ``False``.

        Returns
        -------
         bool
           ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(clustername="cluster_name", numnodes="nodes", numcores="cores")
    def submit_job(self, cluster_name, aedt_full_exe_path=..., nodes=..., cores=..., wait_for_license=..., setting_file=...): # -> Any | Literal[False]:
        """Submit a job to be solved on a cluster.

        Parameters
        ----------
        cluster_name : str
            Name of the cluster to submit the job to.
        aedt_full_exe_path : str, optional
            Full path to the AEDT executable file. The default is ``None``, in which
            case ``"/clustername/AnsysEM/AnsysEM2x.x/Win64/ansysedt.exe"`` is used.
        nodes : int, optional
            Number of nodes. The default is ``1``.
        cores : int, optional
            Number of cores. The default is ``32``.
        wait_for_license : bool, optional
             Whether to wait for the license to be validated. The default is ``True``.
        setting_file : str, optional
            Name of the file to use as a template. The default value is ``None``.

        Returns
        -------
        type
            ID of the job.

        References
        ----------
        >>> oDesktop.SubmitJob
        """
        ...
    
    @pyaedt_function_handler(unit_system="units_system")
    def value_with_units(self, value, units=..., units_system=...): # -> str:
        """Combine a number and a string containing the modeler length unit in a single
        string e.g. "1.2mm".
        If the units are not specified, the model units are used.
        If value is a string (like containing an expression), it is returned as is.

        Parameters
        ----------
        value : float, int, str
            Value of the number or string containing an expression.
        units : str, optional
            Units to combine with value. Valid values are defined in the native API documentation.
            Some common examples are:
            "in": inches
            "cm": centimeter
            "um": micron
            "mm": millimeter
            "meter": meters
            "mil": 0.001 inches (mils)
            "km": kilometer
            "ft": feet
        units_system : str, optional
            Unit system. Default is `"Length"`.

        Returns
        -------
        str
            String that combines the value and the units (e.g. "1.2mm").

        References
        ----------
        >>> oEditor.GetDefaultUnit
        >>> oEditor.GetModelUnits
        >>> oEditor.GetActiveUnits
        """
        ...
    
    @pyaedt_function_handler()
    def change_property(self, aedt_object, tab_name, property_object, property_name, property_value): # -> bool:
        """Change a property.

        Parameters
        ----------
        aedt_object :
            Aedt object. It can be oproject, odesign, oeditor or any of the objects to which the property belongs.
        tab_name : str
            Name of the tab to update. Options are ``BaseElementTab``, ``EM Design``, and
            ``FieldsPostProcessorTab``. The default is ``BaseElementTab``.
        property_object : str
            Name of the property object. It can be the name of an excitation or field reporter.
            For example, ``Excitations:Port1`` or ``FieldsReporter:Mag_H``.
        property_name : str
            Name of the property. For example, ``Rotation Angle``.
        property_value : str, list
            Value of the property. It is a string for a single value and a list of three elements for
            ``[x,y,z]`` coordianates.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler()
    def number_with_units(self, value, units=...): # -> str:
        """Convert a number to a string with units. If value is a string, it's returned as is.

        .. deprecated:: 0.15.0
            Use :func:`value_with_units` instead.

        Parameters
        ----------
        value : float, int, str
            Input  number or string.
        units : optional
            Units for formatting. The default is ``None`` which uses modeler units.

        Returns
        -------
        str
           String concatenating the value and unit.

        """
        ...
    


class AvailableVariations:
    def __init__(self, app) -> None:
        """Contains available variations.

        Parameters
        ----------
        app : :class:`ansys.aedt.core.application.analysis.Analysis`
            Analysis object.

        """
        ...
    
    @property
    def all(self): # -> dict[Any, str]:
        """Create a dictionary with variables names associated to ``"All"``.

        Returns
        -------
        dict
            Dictionary of all variables with ``"All"`` value.

        """
        ...
    
    @property
    def nominal(self): # -> dict[Any, str]:
        """Create a dictionary with variables names associated to ``"Nominal"``.

        Returns
        -------
        dict
            Dictionary of all variables with ``"Nominal"`` value.
        """
        ...
    
    @property
    def nominal_values(self): # -> dict[Any, Any]:
        """All variables with nominal values.

        Returns
        -------
        dict
            Dictionary of nominal variations with values.

        """
        ...
    
    @property
    def nominal_w_values_dict(self): # -> dict[Any, Any]:
        """Nominal independent with values in a dictionary.

        .. deprecated:: 0.15.0
            Use :func:`nominal_values` from setup object instead.

        Returns
        -------
        dict
            Dictionary of nominal independent variations with values.

        References
        ----------
        >>> oDesign.GetChildObject("Variables").GetChildNames
        >>> oDesign.GetVariables
        >>> oDesign.GetVariableValue
        >>> oDesign.GetNominalVariation
        """
        ...
    
    @property
    def variables(self):
        """Variables.

        .. deprecated:: 0.15.0
            Use :func:`variable_manager.independent_variable_names` from setup object instead.

        Returns
        -------
        list of str
            List of names of independent variables.
        """
        ...
    
    @property
    def nominal_w_values(self): # -> list[Any]:
        """Nominal independent with values in a list.

        .. deprecated:: 0.15.0
            Use :func:`nominal_values` from setup object instead.

        Returns
        -------
        list
            List of nominal independent variations with expressions.

        References
        ----------
        >>> oDesign.GetChildObject("Variables").GetChildNames()
        >>> oDesign.GetVariables
        >>> oDesign.GetVariableValue
        >>> oDesign.GetNominalVariation
        """
        ...
    
    @property
    def nominal_w_values_dict_w_dependent(self): # -> dict[Any, Any]:
        """Nominal independent and dependent with values in a dictionary.

        Returns
        -------
        dict
            Dictionary of nominal independent and dependent variations with values.

        References
        ----------
        >>> oDesign.GetChildObject("Variables").GetChildNames
        >>> oDesign.GetVariables
        >>> oDesign.GetVariableValue
        >>> oDesign.GetNominalVariation"""
        ...
    
    @pyaedt_function_handler()
    def variation_string(self, variation: dict) -> str:
        """Convert a variation dictionary to a string.
        This method is useful because AEDT API methods require this format.

        Parameters
        ----------
        variation : dict
            Dictionary containing the variations. Keys are variable names and values are their corresponding values.

        Returns
        -------
        str
            String containing the variations.

        """
        ...
    
    @pyaedt_function_handler()
    def variations(self, setup_sweep: str, output_as_dict: bool = ...) -> Union[List[List], List[Dict]]:
        """Retrieve variations for a given setup.

        Parameters
        ----------
        setup_sweep : str
            Setup name with the sweep to search for variations on.
        output_as_dict : bool, optional
            Whether to output the variations as a dict. The default is ``False``.

        Returns
        -------
        list of lists, list of dicts
            List of variation families. Each family is either a list or a dictionary,
            depending on the value of `output_as_dict`.

        References
        ----------
        >>> oModule.GetAvailableVariations

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss["a"] = 2
        >>> setup = hfss.create_setup()
        >>> setup.analyze()
        >>> variations = hfss.available_variations.variations(hfss.existing_analysis_sweeps[0])
        """
        ...
    
    @pyaedt_function_handler()
    def get_independent_nominal_values(self) -> Dict:
        """Retrieve variations for a given setup.

        Returns
        -------
        dict
            Dictionary of independent nominal variations with values.
        """
        ...
    


