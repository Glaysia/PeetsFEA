"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import List, Union
from ansys.aedt.core.application.analysis import Analysis
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.internal.checks import graphics_required, min_aedt_version

class FieldAnalysis3D(Analysis):
    """Manages 3D field analysis setup in HFSS, Maxwell 3D, and Q3D.

    This class is automatically initialized by an application call from one of
    the 3D tools. See the application function for parameter definitions.

    Parameters
    ----------
    application : str
        3D application that is to initialize the call.
    projectname : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open. The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    designname : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    setup_name : str, optional
        Name of the setup to use as the nominal. The default is
        ``None``, in which case the active setup is used or
        nothing is used.
    version : str, int, float, optional
        Version of AEDT  to use. The default is ``None``, in which case
        the active version or latest installed version is used.
    non_graphical : bool, optional
        Whether to run AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT is launched in the graphical mode.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine. The default is ``False``.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to enable the student version of AEDT. The default
        is ``False``.
    aedt_process_id : int, optional
        Only used when ``new_desktop = False``, specifies by process ID which instance
        of Electronics Desktop to point PyAEDT at.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.
    """
    def __init__(self, application, projectname, designname, solution_type, setup_name=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @property
    def configurations(self): # -> Configurations:
        """Property to import and export configuration files.

        Returns
        -------
        :class:`ansys.aedt.core.generic.configurations.Configurations`
        """
        ...
    
    @property
    def modeler(self): # -> Modeler2D | Modeler3D | None:
        """Modeler.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.modeler_3d.Modeler3D` or :class:`ansys.aedt.core.modeler.modeler_2d.Modeler2D`
            Modeler object.
        """
        ...
    
    @property
    def mesh(self): # -> Mesh | None:
        """Mesh.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.Mesh`
            Mesh object.
        """
        ...
    
    @property
    def post(self): # -> PostProcessor3D | PostProcessor3DLayout | PostProcessorCircuit | PostProcessorHFSS | PostProcessorIcepak | PostProcessorMaxwell | None:
        """PostProcessor.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.post.post_common_3d.PostProcessor3D`
            PostProcessor object.
        """
        ...
    
    @property
    def components3d(self): # -> dict[Any, Any]:
        """3D components.

        Returns
        -------
        dict
            Dictionary of 3D components with their absolute paths.

        """
        ...
    
    @pyaedt_function_handler(objects="assignment", export_path="output_file")
    @min_aedt_version("2021.2")
    def plot(self, assignment=..., show=..., output_file=..., plot_as_separate_objects=..., plot_air_objects=..., force_opacity_value=..., clean_files=..., view=..., show_legend=..., dark_mode=..., show_grid=..., show_bounding=...): # -> ModelPlotter:
        """Plot the model or a subset of objects.

        Parameters
        ----------
        assignment : list, optional
            List of objects to plot. The default is ``None``, in which case all objects
            are exported.
        show : bool, optional
            Whether to show the plot after generation. The default is ``True``. If
            ``False``, the generated class is returned for more customization before
            plot generation.
        output_file : str, optional
            Output file path to save the image to. If ``None`` no image will be saved.
        plot_as_separate_objects : bool, optional
            Whether to plot each object separately. The default is ``True``, which may
            require more time to export from AEDT.
        plot_air_objects : bool, optional
            Whether to also plot air and vacuum objects. The default is ``True``.
        force_opacity_value : float, optional
            Opacity value between 0 and 1 to applied to all the models. The
            default is ``None``, which means the AEDT opacity is applied to each object.
        clean_files : bool, optional
            Whether to clean created files after plot generation. The default is ``False``,
            which means that the cache is maintained in the model object that is returned.
        view : str, optional
           View to export. Options are ``"isometric"``, ``"xy"``, ``"xz"``, ``"yz"``.
           The default is ``"isometric"``.
        show_legend : bool, optional
            Whether to display the legend or not. The default is ``True``.
        dark_mode : bool, optional
            Whether to display the model in dark mode or not. The default is ``False``.
        show_grid : bool, optional
            Whether to display the axes grid or not. The default is ``False``.
        show_bounding : bool, optional
            Whether to display the axes bounding box or not. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.generic.plot.ModelPlotter`
            Model Object.
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", variation_string="variations", mesh_path="output_file")
    def export_mesh_stats(self, setup, variations=..., output_file=...): # -> str:
        """Export mesh statistics to a file.

        Parameters
        ----------
        setup : str
            Setup name.
        variations : str, optional
            Variation list. The default is ``""``.
        output_file : str, optional
            Full path to the mesh statistics file. The default is ``None``, in which
            caswe the working directory is used.

        Returns
        -------
        str
            File path to the mesh statistics file.

        References
        ----------
        >>> oDesign.ExportMeshStats
        """
        ...
    
    @pyaedt_function_handler()
    def get_component_variables(self, name: Union[str, Path]) -> dict:
        """Read component file and extract variables.

        Parameters
        ----------
        name : str or :class:`pathlib.Path`
            Name of the 3D component, which must be in the ``syslib`` or ``userlib`` directory.
            Otherwise, you must specify the full absolute path to the component file.

        Returns
        -------
        dict
            Dictionary of variables in the component file.
        """
        ...
    
    @pyaedt_function_handler(component3dname="component_name")
    def get_components3d_vars(self, component_name): # -> dict[Any, Any]:
        """Read the A3DCOMP file and check for variables.

        .. deprecated:: 0.15.1
            Use :func:`get_component_variables` method instead.

        Parameters
        ----------
        component_name :
            Name of the 3D component, which must be in the ``syslib`` or ``userlib`` directory. Otherwise,
            you must specify the full absolute path to the AEDTCOMP file with the file name and the extension.

        Returns
        -------
        dict
            Dictionary of variables in the A3DCOMP file.
        """
        ...
    
    @pyaedt_function_handler(objectname="assignment", property="property_name", type="property_type")
    def get_property_value(self, assignment, property_name, property_type=...): # -> None:
        """Retrieve a property value.

        Parameters
        ----------
        assignment : str
            Name of the object.
        property_name : str
            Name of the property.
        property_type : str, optional
            Type of the property. Options are ``"boundary"``, ``"excitation"``,
            ``"setup",`` and ``"mesh"``. The default is ``None``.

        Returns
        -------
        type
            Value of the property.

        References
        ----------
        >>> oDesign.GetPropertyValue
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment")
    def copy_solid_bodies_from(self, design, assignment=..., no_vacuum=..., no_pec=..., include_sheets=...): # -> Literal[True]:
        """Copy a list of objects and user defined models from one design to the active design.

        If user defined models are selected, the project will be saved automatically.

        Parameters
        ----------
        design :
            Starting application object. For example, ``hfss1= HFSS3DLayout``.
        assignment : list, optional
            List of objects and user defined components to copy. The default is ``None``.
        no_vacuum : bool, optional
            Whether to include vacuum objects for the copied objects.
            The default is ``True``.
        no_pec :
            Whether to include pec objects for the copied objects. The
            default is ``True``.
        include_sheets :
            Whether to include sheets for the copied objects. The
            default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Copy
        >>> oEditor.Paste
        """
        ...
    
    @pyaedt_function_handler(filename="input_file")
    def import_3d_cad(self, input_file, healing=..., refresh_all_ids=..., import_materials=..., create_lightweigth_part=..., group_by_assembly=..., create_group=..., separate_disjoints_lumped_object=..., import_free_surfaces=..., point_coicidence_tolerance=..., reduce_stl=..., reduce_percentage=..., reduce_error=..., merge_planar_faces=...): # -> Literal[True]:
        """Import a CAD model.

        Parameters
        ----------
        input_file : str
            Full path and name of the CAD file.
        healing : bool, optional
            Whether to perform healing. The default is ``False``.
        refresh_all_ids : bool, optional
            Whether to refresh all IDs after the CAD file is loaded. The
            default is ``True``. Refreshing IDs can take a lot of time in
            a big project.
        import_materials : bool optional
            Whether to import material names from the file if present. The
            default is ``False``.
        create_lightweigth_part : bool ,optional
            Whether to import a lightweight part. The default is ``True``.
        group_by_assembly : bool, optional
            Whether to import by subassembly. The default is ``False``, in which
            case the import is by individual parts.
        create_group : bool, optional
            Whether to create a group of imported objects. The default is ``True``.
        separate_disjoints_lumped_object : bool, optional
            Whether to automatically separate disjoint parts. The default is ``False``.
        import_free_surfaces : bool, optional
            Whether to import free surfaces parts. The default is ``False``.
        point_coicidence_tolerance : float, optional
            Tolerance on the point. The default is ``1e-6``.
        reduce_stl : bool, optional
            Whether to reduce the STL file on import. The default is ``True``.
        reduce_percentage : int, optional
            Percentage to reduce the STL file by if ``reduce_stl=True``. The default is ``0``.
        reduce_error : int, optional
            Error percentage during STL reduction operation. The default is ``0``.
        merge_planar_faces : bool, optional
            Whether to merge planar faces during import. The default is ``True``.

        Returns
        -------
         bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Import
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment_to_export", removed_objects="assignment_to_remove", fileName="file_name", filePath="file_path", fileFormat="file_format")
    def export_3d_model(self, file_name=..., file_path=..., file_format=..., assignment_to_export=..., assignment_to_remove=..., major_version=..., minor_version=...): # -> Literal[True]:
        """Export the 3D model.

        Parameters
        ----------
        file_name : str, optional
            Name of the file.
        file_path : str, optional
            Path for the file.
        file_format : str, optional
            Format of the file. The default is ``".step"``.
        assignment_to_export : list, optional
            List of objects to export. The default is ``None``.
        assignment_to_remove : list, optional
            List of objects to remove. The default is ``None``.
        major_version : int, optional
            File format major version. Default is -1.
        minor_version : int, optional
            File format major version. Default is -1.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Export
        """
        ...
    
    @pyaedt_function_handler()
    def get_all_sources(self): # -> list[Any]:
        """Retrieve all setup sources.

        Returns
        -------
        list of str
            List of all setup sources.

        References
        ----------
        >>> oModule.GetAllSources
        """
        ...
    
    @pyaedt_function_handler()
    def get_all_source_modes(self): # -> list[Any]:
        """Retrieve all source modes.

        Returns
        -------
        list of str
            List of all source modes.

        References
        ----------
        >>> oModule.GetAllSources
        """
        ...
    
    @pyaedt_function_handler()
    def set_source_context(self, sources, number_of_modes=...): # -> Literal[True]:
        """Set the source context.

        Parameters
        ----------
        sources : list
            List of source names.
        number_of_modes : int, optional
            Number of modes. The default is ``1``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.SetSourceContexts
        """
        ...
    
    @pyaedt_function_handler(obj="assignment", mat="material")
    def assign_material(self, assignment, material): # -> bool:
        """Assign a material to one or more objects.

        Parameters
        ----------
        assignment : str, list
            One or more objects to assign materials to.
        material : str
            Material to assign. If this material is not present, it is
            created.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.AssignMaterial

        Examples
        --------
        The method :func:`assign_material` is used to assign a material to a list of objects.

        Open a design and create the objects.

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> box1 = hfss.modeler.create_box([10, 10, 10], [4, 5, 5])
        >>> box2 = hfss.modeler.create_box([0, 0, 0], [2, 3, 4])
        >>> cylinder1 = hfss.modeler.create_cylinder(orientation="X", origin=[5, 0, 0], radius=1, height=20)
        >>> cylinder2 = hfss.modeler.create_cylinder(orientation="Z", origin=[0, 0, 5], radius=1, height=10)

        Assign the material ``"copper"`` to all the objects.

        >>> objects_list = [box1, box2, cylinder1, cylinder2]
        >>> hfss.assign_material(objects_list, "copper")

        The method also accepts a list of object names.

        >>> obj_names_list = [box1.name, box2.name, cylinder1.name, cylinder2.name]
        >>> hfss.assign_material(obj_names_list, "aluminum")
        """
        ...
    
    @pyaedt_function_handler()
    def get_all_conductors_names(self): # -> list[Any]:
        """Retrieve all conductors in the active design.

        Returns
        -------
        list of str
            List of all conductors.

        References
        ----------
        >>> oEditor.GetObjectsByMaterial
        """
        ...
    
    @pyaedt_function_handler()
    def get_all_dielectrics_names(self): # -> list[Any]:
        """Retrieve all dielectrics in the active design.

        Returns
        -------
        list of str
           List of all dielectrics.

        References
        ----------
        >>> oEditor.GetObjectsByMaterial
        """
        ...
    
    @pyaedt_function_handler(csv_component="component_file", csv_material="material_file")
    def assignmaterial_from_sherlock_files(self, component_file, material_file): # -> Literal[True]:
        """Assign material to objects in a design based on a CSV file obtained from Sherlock.

        Parameters
        ----------
        component_file :  str
            Name of the CSV file containing the component properties, including the
            material name.
        material_file : str
            Name of the CSV file containing the material properties.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.AssignMaterial
        """
        ...
    
    @pyaedt_function_handler()
    def cleanup_solution(self, variations=..., entire_solution=..., field=..., mesh=..., linked_data=...): # -> Literal[True]:
        """Delete a set of Solution Variations or part of them.

        Parameters
        ----------
        variations : List, str, optional
            All variations to delete. Default is `"All"` which deletes all available solutions.
        entire_solution : bool, optional
            Either if delete entire Solution or part of it. If `True` other booleans will be ignored
            as solution will be entirely deleted.
        field : bool, optional
            Either if delete entire Fields of variation or not. Default is `True`.
        mesh : bool, optional
            Either if delete entire Mesh of variation or not. Default is `True`.
        linked_data : bool, optional
            Either if delete entire Linked Data of variation or not. Default is `True`.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler
    def add_stackup_3d(self): # -> Stackup3D:
        """Create a stackup 3D object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.stackup_3d.Stackup3D`
            Stackup class.
        """
        ...
    
    @pyaedt_function_handler(component_name="components")
    def flatten_3d_components(self, components=..., purge_history=..., password=...): # -> bool:
        """Flatten one or multiple 3d components in the actual layout.

        Each 3d Component is replaced with objects.
        This function will work only if the reference coordinate system of the 3d component is the global one.

        Parameters
        ----------
        components : str, list, optional
            List of user defined components. The Default is ``None`` for all 3d Components.
        purge_history : bool, optional
            Define if the 3D Component will be purged before copied.
            This is needed when more than 1 component with the same definition is present.
        password : str, optional
            Password for encrypted 3d component.
            The Default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(object_name="assignment")
    @graphics_required
    @min_aedt_version("2023.2")
    def identify_touching_conductors(self, assignment=...): # -> dict[str, Any] | dict[Any, Any]:
        """Identify all touching components and group in a dictionary.

        This method requires that the ``pyvista`` package is installed.

        Parameters
        ----------
        assignment : str, optional
            Starting object to check for touching elements. The default is ``None``.

        Returns
        -------
        dict

        """
        ...
    
    @pyaedt_function_handler(file_path="input_file")
    def get_dxf_layers(self, input_file: Union[str, Path]) -> List[str]:
        """Read a DXF file and return all layer names.

        .. deprecated:: 0.15.1
            Use :func:`ansys.aedt.core.generic.file_utils.get_dxf_layers` method instead.

        Parameters
        ----------
        input_file : str or :class:`pathlib.Path`
            Full path to the DXF file.

        Returns
        -------
        list
            List of layers in the DXF file.
        """
        ...
    
    @pyaedt_function_handler(layers_list="layers", file_path="input_file")
    def import_dxf(self, input_file: Union[str, Path], layers: List[str], auto_detect_close: bool = ..., self_stitch: bool = ..., self_stitch_tolerance: float = ..., scale: float = ..., defeature_geometry: bool = ..., defeature_distance: float = ..., round_coordinates: bool = ..., round_num_digits: int = ..., write_poly_with_width_as_filled_poly: bool = ..., import_method: Union[int, bool] = ...) -> bool:
        """Import a DXF file.

        Parameters
        ----------
        input_file : str or :class:`pathlib.Path`
            Path to the DXF file.
        layers : list
            List of layer names to import. To get the dxf_layers in the DXF file,
            you can call the ``get_dxf_layers`` method.
        auto_detect_close : bool, optional
            Whether to check polylines to see if they are closed.
            The default is ``True``. If a polyline is closed, the modeler
            creates a polygon in the design.
        self_stitch : bool, optional
            Whether to join multiple straight line segments to form polylines.
            The default is ``True``.
        self_stitch_tolerance : float, optional
            Self stitch tolerance value. If negative, let importer use its default tolerance. The default is ``0``.
        scale : float, optional
            Scaling factor. The default is ``0.001``. The units are ``mm``.
        defeature_geometry : bool, optional
            Whether to defeature the geometry to reduce complexity.
            The default is ``False``.
        defeature_distance : float, optional
            Defeature tolerance distance. The default is ``0``.
        round_coordinates : bool, optional
            Whether to rounds all imported data to the number
            of decimal points specified by the next parameter.
            The default is ``False``.
        round_num_digits : int, optional
            Number of digits to which to round all imported data.
            The default is ``4``.
        write_poly_with_width_as_filled_poly : bool, optional
            Imports wide polylines as polygons. The default is ``False``.
        import_method : int or bool, optional
            Whether the import method is ``Script`` or ``Acis``.
            The default is ``1``, which means that the ``Acis`` is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ImportDXF

        """
        ...
    
    @pyaedt_function_handler(gds_file="input_file", gds_number="mapping_layers", unit="units")
    def import_gds_3d(self, input_file: str, mapping_layers: dict, units: str = ..., import_method: int = ...) -> bool:
        """Import a GDSII file.

        Parameters
        ----------
        input_file : str
            Path to the GDS file.
        mapping_layers : dict
            Dictionary keys are GDS layer numbers, and the value is a tuple with the elevation and thickness.
        units : str, optional
            Length unit values. The default is ``"um"``.
        import_method : integer, optional
            GDSII import method. The default is ``1``. Options are:

            - ``0`` for script.
            - ``1`` for Parasolid.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ImportGDSII

        Examples
        --------
        Import a GDS file in an HFSS 3D project.

        >>> gds_path = r"C:\\temp\\gds1.gds"
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> gds_number = {7: (100, 10), 9: (110, 5)}
        >>> hfss.import_gds_3d(gds_path, gds_number, units="um", import_method=1)

        """
        ...
    


