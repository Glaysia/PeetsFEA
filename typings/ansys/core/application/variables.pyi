"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

"""
This module contains these classes: `CSVDataset`, `DataSet`, `Expression`, `Variable`, and `VariableManager`.

This module is used to create and edit design and project variables in the 3D tools.

Examples
--------
>>> from ansys.aedt.core import Hfss
>>> hfss = Hfss()
>>> hfss["$d"] = "5mm"
>>> hfss["d"] = "5mm"
>>> hfss["postd"] = "1W"

"""
class CSVDataset:
    """Reads in a CSV file and extracts data, which can be augmented with constant values.

    Parameters
    ----------
    csv_file : str, optional
        Input file consisting of delimited data with the first line as the header.
        The CSV value includes the header and data, which supports AEDT units information
        such as ``"1.23Wb"``. You can also augment the data with constant values.
    separator : str, optional
        Value to use for the delimiter. The default is``None`` in which case a comma is
        assumed.
    units_dict : dict, optional
        Dictionary consisting of ``{Variable Name: unit}`` to rescale the data
        if it is not in the desired unit system.
    append_dict : dict, optional
        Dictionary consisting of ``{New Variable Name: value}`` to add variables
        with constant values to all data points. This dictionary is used to add
        multiple sweeps to one result file.
    valid_solutions : bool, optional
        The default is ``True``.
    invalid_solutions : bool, optional
        The default is ``False``.

    """
    @property
    def number_of_rows(self): # -> int | None:
        """Number of rows."""
        ...
    
    @property
    def number_of_columns(self): # -> int:
        """Number of columns."""
        ...
    
    @property
    def header(self): # -> list[str]:
        """Header."""
        ...
    
    @property
    def data(self): # -> dict[Any, Any]:
        """Data."""
        ...
    
    @property
    def path(self):
        """Path."""
        ...
    
    def __init__(self, csv_file=..., separator=..., units_dict=..., append_dict=..., valid_solutions=..., invalid_solutions=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, item): # -> CSVDataset:
        ...
    
    @pyaedt_function_handler()
    def __add__(self, other): # -> CSVDataset:
        ...
    
    def __iadd__(self, other): # -> Self:
        """Incrementally add the dataset in one CSV file to a dataset in another CSV file.

        .. note:
           This assumes that the number of columns in both datasets are the same,
           or that one of the datasets is empty. No checking is done for
           equivalency of units or variable names.

        """
        ...
    
    def __iter__(self): # -> Self:
        ...
    
    def __next__(self): # -> LiteralString:
        ...
    
    def next(self): # -> LiteralString:
        """Yield the next row."""
        ...
    


@pyaedt_function_handler()
def generate_validation_errors(property_names, expected_settings, actual_settings): # -> list[str]:
    """From the given property names, expected settings and actual settings, return a list of validation errors.

    If no errors are found, an empty list is returned. The validation of values such as "10mm"
    ensures that they are close to within a relative tolerance.
    For example an expected setting of "10mm", and actual of "10.000000001mm" will not yield a validation error.
    For values with no numerical value, an equivalence check is made.

    Parameters
    ----------
    property_names : List[str]
        List of property names.
    expected_settings : List[str]
        List of the expected settings.
    actual_settings : List[str]
        List of actual settings.

    Returns
    -------
    List[str]
        A list of validation errors for the given settings.
    """
    ...

class VariableManager:
    """Manages design properties and project variables.

    Design properties are the local variables in a design. Project
    variables are defined at the project level and start with ``$``.

    This class provides access to all variables or a subset of the
    variables. Manipulation of the numerical or string definitions of
    variable values is provided in the
    :class:`ansys.aedt.core.application.variables.Variable` class.

    Parameters
    ----------
    variables : dict
        Dictionary of all design properties and project variables in
        the active design.
    design_variables : dict
        Dictionary of all design properties in the active design.
    project_variables : dict
        Dictionary of all project variables available to the active
        design (key by variable name).
    dependent_variables : dict
        Dictionary of all dependent variables available to the active
        design (key by variable name).
    independent_variables : dict
       Dictionary of all independent variables (constant numeric
       values) available to the active design (key by variable name).
    independent_design_variables : dict

    independent_project_variables : dict

    variable_names : str or list
        One or more variable names.
    project_variable_names : str or list
        One or more project variable names.
    design_variable_names : str or list
        One or more design variable names.
    dependent_variable_names : str or list
        All dependent variable names within the project.
    independent_variable_names : list of str
        All independent variable names within the project. These can
        be sweep variables for optimetrics.
    independent_project_variable_names : str or list
        All independent project variable names within the
        project. These can be sweep variables for optimetrics.
    independent_design_variable_names : str or list
        All independent design properties (local variables) within the
        project. These can be sweep variables for optimetrics.

    See Also
    --------
    ansys.aedt.core.application.variables.Variable

    Examples
    --------

    >>> from ansys.aedt.core.maxwell import Maxwell3d
    >>> from ansys.aedt.core.desktop import Desktop
    >>> d = Desktop()
    >>> aedtapp = Maxwell3d()

    Define some test variables.

    >>> aedtapp["Var1"] = 3
    >>> aedtapp["Var2"] = "12deg"
    >>> aedtapp["Var3"] = "Var1 * Var2"
    >>> aedtapp["$PrjVar1"] = "pi"

    Get the variable manager for the active design.

    >>> v = aedtapp.variable_manager

    Get a dictionary of all project and design variables.

    >>> v.variables
    {'Var1': <ansys.aedt.core.application.variables.Variable at 0x2661f34c448>,
     'Var2': <ansys.aedt.core.application.variables.Variable at 0x2661f34c308>,
     'Var3': <ansys.aedt.core.application.variables.Expression at 0x2661f34cb48>,
     '$PrjVar1': <ansys.aedt.core.application.variables.Expression at 0x2661f34cc48>}

    Get a dictionary of only the design variables.

    >>> v.design_variables
    {'Var1': <ansys.aedt.core.application.variables.Variable at 0x2661f339508>,
     'Var2': <ansys.aedt.core.application.variables.Variable at 0x2661f3415c8>,
     'Var3': <ansys.aedt.core.application.variables.Expression at 0x2661f341808>}

    Get a dictionary of only the independent design variables.

    >>> v.independent_design_variables
    {'Var1': <ansys.aedt.core.application.variables.Variable at 0x2661f335d08>,
     'Var2': <ansys.aedt.core.application.variables.Variable at 0x2661f3557c8>}

    """
    @property
    def variables(self): # -> dict[Any, Any]:
        """Variables.

        Returns
        -------

        dict[str, :class:`ansys.aedt.core.application.variables.Variable`]
            Dictionary of the `Variable` objects for each project variable and each
            design property in the active design.


        References
        ----------
        >>> oProject.GetVariables
        >>> oDesign.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        >>> oDesign.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @pyaedt_function_handler(variable_value="variable")
    def decompose(self, variable): # -> tuple[Any, Any]:
        """Decompose a variable string to a floating with its unit.

        Parameters
        ----------
        variable : str

        Returns
        -------
        tuple
            The float value of the variable and the units exposed as a string.

        Examples
        --------
        >>> hfss = Hfss()
        >>> print(hfss.variable_manager.decompose("5mm"))
        >>> (5.0, "mm")
        >>> hfss["v1"] = "3N"
        >>> print(hfss.variable_manager.decompose("v1"))
        >>> (3.0, "N")
        >>> hfss["v2"] = "2*v1"
        >>> print(hfss.variable_manager.decompose("v2"))
        >>> (6.0, "N")
        """
        ...
    
    @property
    def design_variables(self): # -> dict[Any, Any]:
        """Design variables.

        Returns
        -------
        dict
            Dictionary of the design properties (local properties) in the design.

        References
        ----------
        >>> oDesign.GetVariables
        >>> oDesign.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def project_variables(self): # -> dict[Any, Any]:
        """Project variables.

        Returns
        -------
        dict
            Dictionary of the project properties.

        References
        ----------
        >>> oProject.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def post_processing_variables(self): # -> dict[Any, Any]:
        """Post Processing variables.

        Returns
        -------
        dict
            Dictionary of the post processing variables (constant numeric
            values) available to the design.

        References
        ----------
        >>> oProject.GetVariables
        >>> oDesign.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        >>> oDesign.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def independent_variables(self): # -> dict[Any, Any]:
        """Independent variables.

        Returns
        -------
        dict
            Dictionary of the independent variables (constant numeric
            values) available to the design.

        References
        ----------
        >>> oProject.GetVariables
        >>> oDesign.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        >>> oDesign.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def independent_project_variables(self): # -> dict[Any, Any]:
        """Independent project variables.

        Returns
        -------
        dict
            Dictionary of the independent project variables available to the design.

        References
        ----------
        >>> oProject.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def independent_design_variables(self): # -> dict[Any, Any]:
        """Independent design variables.

        Returns
        -------
        dict
            Dictionary of the independent design properties (local
            variables) available to the design.

        References
        ----------
        >>> oDesign.GetVariables
        >>> oDesign.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def dependent_variables(self): # -> dict[Any, Any]:
        """Dependent variables.

        Returns
        -------
        dict
            Dictionary of the dependent design properties (local
            variables) and project variables available to the design.

        References
        ----------
        >>> oProject.GetVariables
        >>> oDesign.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        >>> oDesign.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def dependent_project_variables(self): # -> dict[Any, Any]:
        """Dependent project variables.

        Returns
        -------
        dict
            Dictionary of the dependent project variables available to the design.

        References
        ----------
        >>> oProject.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def dependent_design_variables(self): # -> dict[Any, Any]:
        """Dependent design variables.

        Returns
        -------
        dict
            Dictionary of the dependent design properties (local
            variables) available to the design.

        References
        ----------
        >>> oDesign.GetVariables
        >>> oDesign.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def variable_names(self): # -> list[Any]:
        """List of variables."""
        ...
    
    @property
    def project_variable_names(self): # -> list[Any]:
        """List of project variables.

        References
        ----------
        >>> oProject.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def design_variable_names(self): # -> list[Any]:
        """List of design variables.

        References
        ----------
        >>> oDesign.GetVariables
        >>> oDesign.GetChildObject("Variables").GetChildNames"""
        ...
    
    @property
    def independent_project_variable_names(self): # -> list[Any]:
        """List of independent project variables.

        References
        ----------
        >>> oProject.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def independent_design_variable_names(self): # -> list[Any]:
        """List of independent design variables.

        References
        ----------
        >>> oDesign.GetVariables
        >>> oDesign.GetChildObject("Variables").GetChildNames"""
        ...
    
    @property
    def independent_variable_names(self): # -> list[Any]:
        """List of independent variables.

        References
        ----------
        >>> oProject.GetVariables
        >>> oDesign.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        >>> oDesign.GetChildObject("Variables").GetChildNames"""
        ...
    
    @property
    def dependent_project_variable_names(self): # -> list[Any]:
        """List of dependent project variables.

        References
        ----------
        >>> oProject.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        """
        ...
    
    @property
    def dependent_design_variable_names(self): # -> list[Any]:
        """List of dependent design variables.

        References
        ----------
        >>> oDesign.GetVariables
        >>> oDesign.GetChildObject("Variables").GetChildNames"""
        ...
    
    @property
    def dependent_variable_names(self): # -> list[Any]:
        """List of dependent variables.

        References
        ----------
        >>> oProject.GetVariables
        >>> oDesign.GetVariables
        >>> oProject.GetChildObject("Variables").GetChildNames
        >>> oDesign.GetChildObject("Variables").GetChildNames"""
        ...
    
    def __init__(self, app) -> None:
        ...
    
    @pyaedt_function_handler()
    def __delitem__(self, key): # -> None:
        """Implement del with array name or index."""
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, variable_name):
        ...
    
    @pyaedt_function_handler()
    def __setitem__(self, variable, value): # -> Literal[True]:
        ...
    
    @pyaedt_function_handler(variable_name="name")
    def get_expression(self, name): # -> Literal[False]:
        """Retrieve the variable value of a project or design variable as a string.

        Parameters
        ----------
        name : str
            Name of the expression.

        References
        ----------
        >>> oProject.GetVariableValue
        >>> oDesign.GetVariableValue
        """
        ...
    
    @pyaedt_function_handler(variable="name")
    def aedt_object(self, name):
        """Retrieve an AEDT object.

        Parameters
        ----------
        name : str
            Name of the variable.

        """
        ...
    
    @pyaedt_function_handler(variable_name="name", readonly="read_only", postprocessing="is_post_processing")
    def set_variable(self, name, expression=..., read_only=..., hidden=..., description=..., sweep=..., overwrite=..., is_post_processing=..., circuit_parameter=...):
        """Set the value of a design property or project variable.

        Parameters
        ----------
        name : str
            Name of the design property or project variable
            (``$var``). If this variable does not exist, a new one is
            created and a value is set.
        expression : str
            Valid string expression within the AEDT design and project
            structure.  For example, ``"3*cos(34deg)"``.
        read_only : bool, optional
            Whether to set the design property or project variable to
            read-only. The default is ``False``.
        hidden :  bool, optional
            Whether to hide the design property or project variable. The
            default is ``False``.
        description : str, optional
            Text to display for the design property or project variable in the
            ``Properties`` window. The default is ``None``.
        sweep : bool, optional
            Allows you to designate variables to include in solution indexing as a way to
            permit faster post-processing.
            Variables with the Sweep check box cleared are not used in solution indexing.
            The default is ``True``.
        overwrite : bool, optional
            Whether to overwrite an existing value for the design
            property or project variable. The default is ``False``, in
            which case this method is ignored.
        is_post_processing : bool, optional
            Whether to define a postprocessing variable.
             The default is ``False``, in which case the variable is not used in postprocessing.
        circuit_parameter : bool, optional
            Whether to define a parameter in a circuit design or a local parameter.
             The default is ``True``, in which case a circuit variable is created as a parameter default.

        Returns
        -------
        bool
             ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.ChangeProperty
        >>> oDesign.ChangeProperty

        Examples
        --------
        >>> from ansys.aedt.core import Maxwell3d
        >>> aedtapp = Maxwell3d(specified_version="2025.1")

        Set the value of design property ``p1`` to ``"10mm"``,
        creating the property if it does not already eixst.

        >>> aedtapp.variable_manager.set_variable("p1", expression="10mm")

        Set the value of design property ``p1`` to ``"20mm"`` only if
        the property does not already exist.

        >>> aedtapp.variable_manager.set_variable("p1", expression="20mm", overwrite=False)

        Set the value of design property ``p2`` to ``"10mm"``,
        creating the property if it does not already exist. Also make
        it read-only and hidden and add a description.

        >>> aedtapp.variable_manager.set_variable(
        ...     name="p2",
        ...     expression="10mm",
        ...     read_only=True,
        ...     hidden=True,
        ...     description="This is the description of this variable.",
        ... )

        Set the value of the project variable ``$p1`` to ``"30mm"``,
        creating the variable if it does not exist.

        >>> aedtapp.variable_manager.set_variable["$p1"] == "30mm"
        """
        ...
    
    @pyaedt_function_handler(separator_name="name")
    def delete_separator(self, name): # -> bool:
        """Delete a separator from either the active project or design.

        Parameters
        ----------
        name : str
            Value to use for the delimiter.

        Returns
        -------
        bool
            ``True`` when the separator exists and can be deleted, ``False`` otherwise.

        References
        ----------
        >>> oProject.ChangeProperty
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(var_name="name")
    def delete_variable(self, name): # -> bool:
        """Delete a variable.

        Parameters
        ----------
        name : str
            Name of the variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.ChangeProperty
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(var_name="name")
    def is_used(self, name): # -> bool:
        """Find if a variable is used.

        Parameters
        ----------
        name : str
            Name of the variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(var_name="name")
    def is_used_variable(self, name): # -> bool:
        """Find if a variable is used.

        .. deprecated:: 0.7.4
           Use :func:`is_used` method instead.

        Parameters
        ----------
        name : str
            Name of the variable.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def delete_unused_variables(self): # -> Literal[True]:
        """Delete unused design and project variables.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


class Variable:
    """Stores design properties and project variables and provides operations to perform on them.

    Parameters
    ----------
    value : float, str
        Numerical value of the variable in SI units.
    units : str
        Units for the value.

    Examples
    --------

    >>> from ansys.aedt.core.application.variables import Variable

    Define a variable using a string value consistent with the AEDT properties.

    >>> v = Variable("45mm")

    Define an unitless variable with a value of 3.0.

    >>> v = Variable(3.0)

    Define a variable defined by a numeric result and a unit string.

    >>> v = Variable(3.0 * 4.5, units="mm")
    >>> assert v.numeric_value = 13.5
    >>> assert v.units = "mm"

    """
    def __init__(self, expression, units=..., si_value=..., full_variables=..., name=..., app=..., readonly=..., hidden=..., sweep=..., description=..., postprocessing=..., circuit_parameter=...) -> None:
        ...
    
    @property
    def name(self): # -> None:
        """Variable name."""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @property
    def is_optimization_enabled(self): # -> None:
        """ "Check if optimization is enabled."""
        ...
    
    @is_optimization_enabled.setter
    def is_optimization_enabled(self, value): # -> None:
        ...
    
    @property
    def optimization_min_value(self): # -> None:
        """ "Optimization min value."""
        ...
    
    @optimization_min_value.setter
    def optimization_min_value(self, value): # -> None:
        ...
    
    @property
    def optimization_max_value(self): # -> None:
        """ "Optimization max value."""
        ...
    
    @optimization_max_value.setter
    def optimization_max_value(self, value): # -> None:
        ...
    
    @property
    def is_sensitivity_enabled(self): # -> None:
        """Check if Sensitivity is enabled."""
        ...
    
    @is_sensitivity_enabled.setter
    def is_sensitivity_enabled(self, value): # -> None:
        ...
    
    @property
    def sensitivity_min_value(self): # -> None:
        """ "Sensitivity min value."""
        ...
    
    @sensitivity_min_value.setter
    def sensitivity_min_value(self, value): # -> None:
        ...
    
    @property
    def sensitivity_max_value(self): # -> None:
        """ "Sensitivity max value."""
        ...
    
    @sensitivity_max_value.setter
    def sensitivity_max_value(self, value): # -> None:
        ...
    
    @property
    def sensitivity_initial_disp(self): # -> None:
        """ "Sensitivity initial value."""
        ...
    
    @sensitivity_initial_disp.setter
    def sensitivity_initial_disp(self, value): # -> None:
        ...
    
    @property
    def is_tuning_enabled(self): # -> None:
        """Check if tuning is enabled."""
        ...
    
    @is_tuning_enabled.setter
    def is_tuning_enabled(self, value): # -> None:
        ...
    
    @property
    def tuning_min_value(self): # -> None:
        """ "Tuning min value."""
        ...
    
    @tuning_min_value.setter
    def tuning_min_value(self, value): # -> None:
        ...
    
    @property
    def tuning_max_value(self): # -> None:
        """ "Tuning max value."""
        ...
    
    @tuning_max_value.setter
    def tuning_max_value(self, value): # -> None:
        ...
    
    @property
    def tuning_step_value(self): # -> None:
        """ "Tuning Step value."""
        ...
    
    @tuning_step_value.setter
    def tuning_step_value(self, value): # -> None:
        ...
    
    @property
    def is_statistical_enabled(self): # -> None:
        """Check if statistical is enabled."""
        ...
    
    @is_statistical_enabled.setter
    def is_statistical_enabled(self, value): # -> None:
        ...
    
    @property
    def read_only(self): # -> None:
        """Read-only flag value."""
        ...
    
    @read_only.setter
    def read_only(self, value): # -> None:
        ...
    
    @property
    def hidden(self): # -> None:
        """Hidden flag value."""
        ...
    
    @hidden.setter
    def hidden(self, value): # -> None:
        ...
    
    @property
    def sweep(self): # -> None:
        """Sweep flag value."""
        ...
    
    @sweep.setter
    def sweep(self, value): # -> None:
        ...
    
    @property
    def description(self): # -> None:
        """Description value."""
        ...
    
    @description.setter
    def description(self, value): # -> None:
        ...
    
    @property
    def post_processing(self): # -> bool | None:
        """Postprocessing flag value."""
        ...
    
    @property
    def circuit_parameter(self): # -> bool:
        """Circuit parameter flag value."""
        ...
    
    @property
    def expression(self): # -> None:
        """Expression."""
        ...
    
    @expression.setter
    def expression(self, value): # -> None:
        ...
    
    @property
    def numeric_value(self): # -> list[Any] | Any:
        """Numeric part of the expression as a float value."""
        ...
    
    @property
    def unit_system(self): # -> str | Literal[False]:
        """Unit system of the expression as a string."""
        ...
    
    @property
    def units(self): # -> None:
        """Units."""
        ...
    
    @property
    def value(self): # -> Any:
        """Value."""
        ...
    
    @property
    def evaluated_value(self): # -> str:
        """String value.

        The numeric value with the unit is concatenated and returned as a string. The numeric display
        in the modeler and the string value can differ. For example, you might see ``10mm`` in the
        modeler and see ``10.0mm`` returned as the string value.

        """
        ...
    
    @pyaedt_function_handler()
    def decompose(self): # -> tuple[Any, ...]:
        """Decompose a variable value to a floating with its unit.

        Returns
        -------
        tuple
            The float value of the variable and the units exposed as a string.

        Examples
        --------
        >>> hfss = Hfss()
        >>> hfss["v1"] = "3N"
        >>> print(hfss.variable_manager["v1"].decompose("v1"))
        >>> (3.0, "N")

        """
        ...
    
    @pyaedt_function_handler()
    def rescale_to(self, units): # -> Self:
        """Rescale the expression to a new unit within the current unit system.

        Parameters
        ----------
        units : str
            Units to rescale to.

        Examples
        --------
        >>> from ansys.aedt.core.application.variables import Variable

        >>> v = Variable("10W")
        >>> assert v.numeric_value == 10
        >>> assert v.units == "W"
        >>> v.rescale_to("kW")
        >>> assert v.numeric_value == 0.01
        >>> assert v.units == "kW"

        """
        ...
    
    @pyaedt_function_handler()
    def format(self, format): # -> str:
        """Retrieve the string value with the specified numerical formatting.

        Parameters
        ----------
        format : str
            Format for the numeric value of the string. For example, ``'06.2f'``. For
            more information, see the `PyFormat documentation <https://pyformat.info/>`_.

        Returns
        -------
        str
            String value with the specified numerical formatting.

        Examples
        --------
        >>> from ansys.aedt.core.application.variables import Variable

        >>> v = Variable("10W")
        >>> assert v.format("f") == "10.000000W"
        >>> assert v.format("06.2f") == "010.00W"
        >>> assert v.format("6.2f") == " 10.00W"

        """
        ...
    
    @pyaedt_function_handler()
    def __mul__(self, other): # -> Any | Variable:
        """Multiply the variable with a number or another variable and return a new object.

                Parameters
                ----------
                other : numbers.Number or variable
                    Object to be multiplied.

                Returns
                -------
                type
                    Variable.

                Examples
                --------
                >>> from ansys.aedt.core.application.variables import Variable

                Multiply ``'Length1'`` by unitless ``'None'``` to obtain ``'Length'``.
                A numerical value is also considered to be unitless.

        import ansys.aedt.core.generic.constants        >>> v1 = Variable("10mm")
                >>> v2 = Variable(3)
                >>> result_1 = v1 * v2
                >>> result_2 = v1 * 3
                >>> assert result_1.numeric_value == 30.0
                >>> assert result_1.unit_system == "Length"
                >>> assert result_2.numeric_value == result_1.numeric_value
                >>> assert result_2.unit_system == "Length"

                Multiply voltage times current to obtain power.

        import ansys.aedt.core.generic.constants        >>> v3 = Variable("3mA")
                >>> v4 = Variable("40V")
                >>> result_3 = v3 * v4
                >>> assert result_3.numeric_value == 0.12
                >>> assert result_3.units == "W"
                >>> assert result_3.unit_system == "Power"

        """
        ...
    
    __rmul__ = ...
    @pyaedt_function_handler()
    def __add__(self, other): # -> Variable:
        """Add the variable to another variable to return a new object.

        Parameters
        ----------
        other : class:`ansys.aedt.core.application.variables.Variable`
            Object to be multiplied.

        Returns
        -------
        type
            Variable.

        Examples
        --------
        >>> from ansys.aedt.core.application.variables import Variable
        >>> import ansys.aedt.core.generic.constants
        >>> v1 = Variable("3mA")
        >>> v2 = Variable("10A")
        >>> result = v1 + v2
        >>> assert result.numeric_value == 10.003
        >>> assert result.units == "A"
        >>> assert result.unit_system == "Current"

        """
        ...
    
    @pyaedt_function_handler()
    def __sub__(self, other): # -> Variable:
        """Subtract another variable from the variable to return a new object.

        Parameters
        ----------
        other : class:`ansys.aedt.core.application.variables.Variable`
            Object to be subtracted.

        Returns
        -------
        type
            Variable.

        Examples
        --------

        >>> import ansys.aedt.core.generic.constants
        >>> from ansys.aedt.core.application.variables import Variable
        >>> v3 = Variable("3mA")
        >>> v4 = Variable("10A")
        >>> result_2 = v3 - v4
        >>> assert result_2.numeric_value == -9.997
        >>> assert result_2.units == "A"
        >>> assert result_2.unit_system == "Current"

        """
        ...
    
    @pyaedt_function_handler()
    def __truediv__(self, other): # -> Variable:
        """Divide the variable by a number or another variable to return a new object.

        Parameters
        ----------
        other : numbers.Number or variable
            Object by which to divide.

        Returns
        -------
        type
            Variable.

        Examples
        --------
        Divide a variable with units ``"W"`` by a variable with units ``"V"`` and automatically
        resolve the new units to ``"A"``.

        >>> from ansys.aedt.core.application.variables import Variable
        >>> import ansys.aedt.core.generic.constants
        >>> v1 = Variable("10W")
        >>> v2 = Variable("40V")
        >>> result = v1 / v2
        >>> assert result_1.numeric_value == 0.25
        >>> assert result_1.units == "A"
        >>> assert result_1.unit_system == "Current"

        """
        ...
    
    @pyaedt_function_handler()
    def __div__(self, other): # -> Variable:
        ...
    
    @pyaedt_function_handler()
    def __rtruediv__(self, other): # -> Variable:
        """Divide another object by this object.

        Parameters
        ----------
        other : numbers.Number or variable
            Object to divide by.

        Returns
        -------
        type
            Variable.

        Examples
        --------
        Divide a number by a variable with units ``"s"`` and automatically determine that
        the result is in ``"Hz"``.

        >>> import ansys.aedt.core.generic.constants
        >>> from ansys.aedt.core.application.variables import Variable
        >>> v = Variable("1s")
        >>> result = 3.0 / v
        >>> assert result.numeric_value == 3.0
        >>> assert result.units == "Hz"
        >>> assert result.unit_system == "Freq"

        """
        ...
    


class DataSet:
    """Manages datasets.

    Parameters
    ----------
    app :
    name : str
        Name of the app.
    x : list
        List of X-axis values for the dataset.
    y : list
        List of Y-axis values for the dataset.
    z : list, optional
        List of Z-axis values for a 3D dataset only. The default is ``None``.
    v : list, optional
        List of V-axis values for a 3D dataset only. The default is ``None``.
    xunit : str, optional
        Units for the X axis. The default is ``""``.
    yunit : str, optional
        Units for the Y axis. The default is ``""``.
    zunit : str, optional
        Units for the Z axis for a 3D dataset only. The default is ``""``.
    vunit : str, optional
        Units for the V axis for a 3D dataset only. The default is ``""``.
    sort : bool, optional
        Sort dataset. The default is ``True``.
    """
    def __init__(self, app, name, x, y, z=..., v=..., xunit=..., yunit=..., zunit=..., vunit=..., sort=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> Literal[True]:
        """Create a dataset.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.AddDataset
        >>> oDesign.AddDataset
        """
        ...
    
    @pyaedt_function_handler()
    def add_point(self, x, y, z=..., v=...): # -> bool:
        """Add a point to the dataset.

        Parameters
        ----------
        x : float
            X coordinate of the point.
        y : float
            Y coordinate of the point.
        z : float, optional
            The default is ``None``.
        v : float, optional
            The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.EditDataset
        >>> oDesign.EditDataset
        """
        ...
    
    @pyaedt_function_handler()
    def remove_point_from_x(self, x): # -> bool:
        """Remove a point from an X-axis value.

        Parameters
        ----------
        x : float

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.EditDataset
        >>> oDesign.EditDataset
        """
        ...
    
    @pyaedt_function_handler()
    def remove_point_from_index(self, id_to_remove): # -> bool:
        """Remove a point from an index.

        Parameters
        ----------
        id_to_remove : int
            ID of the index.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.EditDataset
        >>> oDesign.EditDataset
        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> bool:
        """Update the dataset.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.EditDataset
        >>> oDesign.EditDataset
        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the dataset.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.DeleteDataset
        >>> oDesign.DeleteDataset
        """
        ...
    
    @pyaedt_function_handler(dataset_path="output_dir")
    def export(self, output_dir=...): # -> Literal[True]:
        """Export the dataset.

        Parameters
        ----------
        output_dir : str, optional
            Path to export the dataset to. The default is ``None``, in which
            case the dataset is exported to the working_directory path.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.ExportDataset
        >>> oDesign.ExportDataset
        """
        ...
    


