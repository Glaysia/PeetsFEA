"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class ScatteringMethods:
    """Class containing all methods related to scattering matrix management that are common to Hfss, Circuit and
    Hfss3dLayout classes.
    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def get_all_sparameter_list(self, excitation_names=...): # -> list[Any]:
        """List of all S parameters for a list of excitations.

        Parameters
        ----------
        excitation_names : list, optional
            List of excitations. The default is ``None``, in which case
            the S parameters for all excitations are to be provided.
            For example, ``["1", "2"]``.

        Returns
        -------
        list
            Strings representing the S parameters of the excitations.
            For example, ``["S(1, 1)", "S(1, 2)", S(2, 2)]``.

        """
        ...
    
    @pyaedt_function_handler(excitation_names="excitations", net_list="nets")
    def get_all_return_loss_list(self, excitations=..., excitation_name_prefix=..., math_formula=..., nets=...): # -> list[Any]:
        """Get a list of all return losses for a list of excitations.

        Parameters
        ----------
        excitations : list, optional
            List of excitations. The default is ``None``, in which case
            the return losses for all excitations are provided.
            For example ``["1", "2"]``.
        excitation_name_prefix : string, optional
             Prefix to add to the excitation names. The default is ``""``,
        math_formula : str, optional
            One of the available AEDT mathematical formulas to apply. For example, ``abs, dB``.
        nets : list, optional
            List of nets to filter the output. The default is ``None``, in which case all parameters are returned.

        Returns
        -------
        list of str
            List of strings representing the return losses of the excitations.
            For example, ``["S(1, 1)", S(2, 2)]``.

        References
        ----------
        >>> oEditor.GetAllPorts
        """
        ...
    
    @pyaedt_function_handler(trlist="drivers", reclist="receivers", tx_prefix="drivers_prefix_name", rx_prefix="receivers_prefix_name", net_list="nets")
    def get_all_insertion_loss_list(self, drivers=..., receivers=..., drivers_prefix_name=..., receivers_prefix_name=..., math_formula=..., nets=...):
        """Get a list of all insertion losses from two lists of excitations (driver and receiver).

        Parameters
        ----------
        drivers : list, optional
            List of drivers. The default is ``[]``. For example, ``["1"]``.
        receivers : list, optional
            List of receivers. The default is ``[]``. The number of drivers equals
            the number of receivers. For example, ``["2"]``.
        drivers_prefix_name : str, optional
            Prefix to add to driver names. For example, ``"DIE"``. The default is ``""``.
        receivers_prefix_name : str, optional
            Prefix to add to receiver names. For example, ``"BGA"``. The default is ``""``.
        math_formula : str, optional
            One of the available AEDT mathematical formulas to apply. For example, ``abs, dB``.
        nets : list, optional
            List of nets to filter the output. The default is ``None``, in which
            case all parameters are returned.

        Returns
        -------
        list of str
            List of strings representing insertion losses of the excitations.
            For example, ``["S(1,2)"]``.

        References
        ----------
        >>> oEditor.GetAllPorts
        """
        ...
    
    @pyaedt_function_handler(trlist="drivers", tx_prefix="drivers_prefix_name", net_list="nets")
    def get_next_xtalk_list(self, drivers=..., drivers_prefix_name=..., math_formula=..., nets=...): # -> list[Any]:
        """Get a list of all the near end XTalks from a list of excitations (driver and receiver).

        Parameters
        ----------
        drivers : list, optional
            List of drivers. The default is ``None``. For example,
            ``["1", "2", "3"]``.
        drivers_prefix_name : str, optional
            Prefix to add to driver names. For example, ``"DIE"``.  The default is ``""``.
        math_formula : str, optional
            One of the available AEDT mathematical formulas to apply. For example, ``abs, dB``.
        nets : list, optional
            List of nets to filter the output. The default is ``None``, in which case
            all parameters are returned.

        Returns
        -------
        list of str
            List of strings representing near end XTalks of the excitations.
            For example, ``["S(1, 2)", "S(1, 3)", "S(2, 3)"]``.

        References
        ----------
        >>> oEditor.GetAllPorts
        """
        ...
    
    @pyaedt_function_handler(trlist="drivers", reclist="receivers", tx_prefix="drivers_prefix_name", rx_prefix="receivers_prefix_name", net_list="nets")
    def get_fext_xtalk_list(self, drivers=..., receivers=..., drivers_prefix_name=..., receivers_prefix_name=..., skip_same_index_couples=..., math_formula=..., nets=...): # -> list[Any]:
        """Geta list of all the far end XTalks from two lists of excitations (driver and receiver).

        Parameters
        ----------
        drivers : list, optional
            List of drivers. The default is ``[]``. For example,
            ``["1", "2"]``.
        receivers : list, optional
            List of receivers. The default is ``[]``. For example,
            ``["3", "4"]``.
        drivers_prefix_name : str, optional
            Prefix for driver names. For example, ``"DIE"``.  The default is ``""``.
        receivers_prefix_name : str, optional
            Prefix for receiver names. For examples, ``"BGA"`` The default is ``""``.
        skip_same_index_couples : bool, optional
            Whether to skip driver and receiver couples with the same index position.
            The default is ``True``, in which case the drivers and receivers
            with the same index position are considered insertion losses and
            excluded from the list.
        math_formula : str, optional
            One of the available AEDT mathematical formulas to apply. For example, ``abs, dB``.
        nets : list, optional
            List of nets to filter the output. The default is ``None``, in which case all
            parameters are returned.

        Returns
        -------
        list of str
            List of strings representing the far end XTalks of the excitations.
            For example, ``["S(1, 4)", "S(2, 3)"]``.

        References
        ----------
        >>> oEditor.GetAllPorts
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", sweep_name="sweep")
    def get_touchstone_data(self, setup=..., sweep=..., variations=...): # -> list[Any]:
        """
        Return a Touchstone data plot.

        Parameters
        ----------
        setup : list
            Name of the setup.
        sweep : str, optional
            Name of the sweep. The default value is ``None``.
        variations : dict, optional
            Dictionary of variation names. The default value is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.generic.touchstone_parser.TouchstoneData`
           Class containing all requested data.

        References
        ----------
        >>> oModule.GetSolutionDataPerVariation
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", sweep_name="sweep", file_name="output_file")
    def export_touchstone(self, setup=..., sweep=..., output_file=..., variations=..., variations_value=..., renormalization=..., impedance=..., gamma_impedance_comments=...):
        """Export a Touchstone file.

        Parameters
        ----------
        setup : str, optional
            Name of the setup that has been solved.
        sweep : str, optional
            Name of the sweep that has been solved.
        output_file : str, optional
            Full path and name for the Touchstone file.
            The default is ``None``, in which case the Touchstone file is exported to
            the working directory.
        variations : list, optional
            List of all parameter variations. For example, ``["$AmbientTemp", "$PowerIn"]``.
            The default is ``None``.
        variations_value : list, optional
            List of all parameter variation values. For example, ``["22cel", "100"]``.
            The default is ``None``.
        renormalization : bool, optional
            Perform renormalization before export.
            The default is ``False``.
        impedance : float, optional
            Real impedance value in ohm, for renormalization, if not specified considered 50 ohm.
            The default is ``None``.
        gamma_impedance_comments : bool, optional
            Include Gamma and Impedance values in comments.
            The default is ``False``.

        Returns
        -------
        str
            Filename when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ExportNetworkData
        """
        ...
    


