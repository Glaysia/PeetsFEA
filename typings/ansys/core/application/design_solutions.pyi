"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

solutions_defaults = ...
solutions_types = ...
model_names = ...
class DesignSolution:
    def __init__(self, odesign, design_type, aedt_version) -> None:
        ...
    
    @property
    def solution_type(self): # -> str:
        """Get/Set the Solution Type of the active Design."""
        ...
    
    @solution_type.setter
    def solution_type(self, value): # -> None:
        ...
    
    @property
    def report_type(self):
        """Return the default report type of the selected solution if present."""
        ...
    
    @property
    def default_setup(self):
        """Return the default setup id of the selected solution if present."""
        ...
    
    @property
    def default_adaptive(self):
        """Return the default adaptive name of the selected solution if present."""
        ...
    
    @property
    def solution_types(self): # -> list[Any]:
        """Return the list of all available solutions."""
        ...
    
    @property
    def design_types(self): # -> list[str]:
        """Return the list of all available designs."""
        ...
    
    @property
    def intrinsics(self): # -> list[Any]:
        """Get list of intrinsics for that specified setup."""
        ...
    


class HFSSDesignSolution(DesignSolution):
    def __init__(self, odesign, design_type, aedt_version) -> None:
        ...
    
    @property
    def solution_type(self): # -> str:
        """Get/Set the Solution Type of the active Design."""
        ...
    
    @solution_type.setter
    def solution_type(self, value): # -> None:
        ...
    
    @property
    def hybrid(self): # -> bool:
        """HFSS hybrid mode for the active solution."""
        ...
    
    @hybrid.setter
    def hybrid(self, value): # -> None:
        ...
    
    @property
    def composite(self): # -> bool:
        """HFSS composite mode for the active solution."""
        ...
    
    @composite.setter
    def composite(self, val): # -> None:
        ...
    
    @pyaedt_function_handler(boundary_type="opening_type")
    def set_auto_open(self, enable=..., opening_type=...): # -> bool:
        """Set HFSS auto open type.

        Parameters
        ----------
        enable : bool, optional
            Whether to enable auto open. The default is ``True``.
        opening_type : str, optional
            Boundary type to use with auto open. The default is `"Radiation"`.

        Returns
        -------
        bool
        """
        ...
    


class Maxwell2DDesignSolution(DesignSolution):
    def __init__(self, odesign, design_type, aedt_version) -> None:
        ...
    
    @property
    def xy_plane(self): # -> bool:
        """Get/Set Maxwell 2d plane between `"XY"` and `"about Z"`."""
        ...
    
    @xy_plane.setter
    def xy_plane(self, value=...): # -> None:
        ...
    
    @property
    def solution_type(self): # -> str:
        """Get/Set the Solution Type of the active Design."""
        ...
    
    @solution_type.setter
    def solution_type(self, value): # -> None:
        ...
    


class IcepakDesignSolution(DesignSolution):
    def __init__(self, odesign, design_type, aedt_version) -> None:
        ...
    
    @property
    def problem_type(self): # -> str:
        """Get/Set the problem type of the icepak Design.

        It can be any of`"TemperatureAndFlow"`, `"TemperatureOnly"`,`"FlowOnly"`.
        """
        ...
    
    @problem_type.setter
    def problem_type(self, value=...): # -> None:
        ...
    
    @property
    def solution_type(self): # -> str:
        """Get/Set the Solution Type of the active Design."""
        ...
    
    @solution_type.setter
    def solution_type(self, solution_type): # -> None:
        ...
    


class RmXprtDesignSolution(DesignSolution):
    def __init__(self, odesign, design_type, aedt_version) -> None:
        ...
    
    @property
    def solution_type(self):
        """Get/Set the Machine Type of the active Design."""
        ...
    
    @solution_type.setter
    def solution_type(self, solution_type): # -> None:
        ...
    
    @property
    def design_type(self):
        """Get/Set the Machine Design Type."""
        ...
    
    @design_type.setter
    def design_type(self, value): # -> None:
        ...
    


