"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.application.analysis import Analysis
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class FieldAnalysisCircuit(Analysis):
    """FieldCircuitAnalysis class.

    This class is for circuit analysis setup in Nexxim.

    It is automatically initialized by a call from an application,
    such as HFSS or Q3D. See the application function for its
    parameter definitions.

    Parameters
    ----------
    """
    def __init__(self, application, projectname, designname, solution_type, setup_name=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @property
    def configurations(self): # -> ConfigurationsNexxim:
        """Property to import and export configuration files.

        Returns
        -------
        :class:`ansys.aedt.core.generic.configurations.Configurations`
        """
        ...
    
    @pyaedt_function_handler(setupname="name")
    def delete_setup(self, name): # -> bool:
        """Delete a setup.

        Parameters
        ----------
        name : str
            Name of the setup.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.RemoveSimSetup
        """
        ...
    
    @pyaedt_function_handler(component_name="component")
    def push_down(self, component): # -> bool:
        """Push-down to the child component and reinitialize the Circuit object.

        Parameters
        ----------
        component : str or :class:`ansys.aedt.core.modeler.cad.object_3d.circuit.CircuitComponent`
            Component to initialize.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def pop_up(self): # -> bool:
        """Pop-up to parent Circuit design and reinitialize Circuit object.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @property
    def post(self): # -> PostProcessor3D | PostProcessor3DLayout | PostProcessorCircuit | PostProcessorHFSS | PostProcessorIcepak | PostProcessorMaxwell | None:
        """PostProcessor.

        Returns
        -------
        :class:`ansys.aedt.core.visualization.post.post_circuit.PostProcessorCircuit`
            PostProcessor object.
        """
        ...
    
    @property
    def existing_analysis_setups(self): # -> list[Any]:
        """Existing analysis setups.

        .. deprecated:: 0.15.0
            Use :func:`setup_names` from setup object instead.

        Returns
        -------
        list of str
            List of all analysis setups in the design.

        References
        ----------
        >>> oModule.GetSetups
        """
        ...
    
    @property
    def modeler(self): # -> ModelerNexxim | None:
        """Modeler object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.schematic.ModelerNexxim`
        """
        ...
    
    @property
    def setup_names(self): # -> list[Any]:
        """Setup names.

        References
        ----------
        >>> oModule.GetAllSolutionSetups"""
        ...
    
    @property
    def source_names(self): # -> list[Any]:
        """Get all source names.

        Returns
        -------
        list
            List of source names.

        References
        ----------
        >>> oDesign.GetChildObject("Excitations").GetChildNames()
        """
        ...
    
    @property
    def source_objects(self): # -> list[Any]:
        """Get all source objects.

        Returns
        -------
        list
            List of source objects.
        """
        ...
    
    @property
    def sources(self): # -> dict[Any, Any]:
        """Get all sources.

        Returns
        -------
        list[:class:`ansys.aedt.core.modules.boundary.circuit_boundary.Sources`]
            List of sources.

        """
        ...
    
    @property
    def excitations(self): # -> list[Any]:
        """Get all excitation names.

        .. deprecated:: 0.15.0
           Use :func:`excitation_names` property instead.

        Returns
        -------
        list
            List of excitation names. Excitations with multiple modes will return one
            excitation for each mode.

        References
        ----------
        >>> oModule.GetExcitations
        """
        ...
    
    @property
    def excitation_names(self): # -> list[Any]:
        """Get all excitation names.

        Returns
        -------
        list
            List of excitation names. Excitations with multiple modes will return one
            excitation for each mode.

        References
        ----------
        >>> oModule.GetExcitations
        """
        ...
    
    @property
    def design_excitations(self): # -> dict[Any, Any]:
        """Get all excitation.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`]
           Excitation boundaries.

        References
        ----------
        >>> oModule.GetExcitations
        """
        ...
    
    @pyaedt_function_handler(setupname="name", setuptype="setup_type")
    def create_setup(self, name=..., setup_type=..., **kwargs): # -> SetupCircuit:
        """Create a setup.

        Parameters
        ----------
        name : str, optional
            Name of the new setup. The default is ``"MySetupAuto"``.
        setup_type : str, optional
            Type of the setup. The default is ``None``, in which case
            the default type is applied.
        **kwargs : dict, optional
            Extra arguments to set up the circuit.
            Available keys depend on the setup chosen.
            For more information, see
            :doc:`../SetupTemplatesCircuit`.


        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.SetupCircuit`
            Setup object.

        References
        ----------
        >>> oModule.AddLinearNetworkAnalysis
        >>> oModule.AddDCAnalysis
        >>> oModule.AddTransient
        >>> oModule.AddQuickEyeAnalysis
        >>> oModule.AddVerifEyeAnalysis
        >>> oModule.AddAMIAnalysis


        Examples
        --------

        >>> from ansys.aedt.core import Circuit
        >>> app = Circuit()
        >>> app.create_setup(name="Setup1", setup_type=app.SETUPS.NexximLNA, Data="LINC 0GHz 4GHz 501")
        """
        ...
    


