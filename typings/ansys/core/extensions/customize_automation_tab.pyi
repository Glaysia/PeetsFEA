"""
This type stub file was generated by pyright.
"""

from typing import List

def add_automation_tab(name, lib_dir, icon_file=..., product=..., template=..., overwrite=..., panel=...): # -> str | None:
    """Add an automation tab in AEDT.

    Parameters
    ----------
    name : str
        Toolkit name.
    lib_dir : str
        Path to the library directory.
    icon_file : str
        Full path to the icon file. The default is the PyAnsys icon.
    product : str, optional
        Product directory to install the toolkit.
    template : str, optional
        Script template name to use
    overwrite : bool, optional
        Whether to overwrite the existing automation tab. The default is ``False``, in
        which case is adding new tabs to the existing ones.
    panel : str, optional
        Panel name. The default is ``"Panel_PyAEDT_Extensions"``.

    Returns
    -------
    str
        Automation tab path.
    """
    ...

def create_xml_tab(root, output_file): # -> None:
    """Write the XML file to create the automation tab.

    Parameters
    ----------
    root : :class:xml.etree.ElementTree
        Root element of the main panel.
    output_file : str
        Full name of the file to save the XML tab.
    """
    ...

def remove_xml_tab(toolkit_dir, name, panel=...): # -> Literal[True] | None:
    """Remove a toolkit configuration file."""
    ...

def available_toolkits(): # -> dict[Any, Any]:
    ...

def add_script_to_menu(name, script_file=..., template_file=..., icon_file=..., product=..., copy_to_personal_lib=..., executable_interpreter=..., panel=..., personal_lib=..., aedt_version=...): # -> bool:
    """Add a script to the ribbon menu.

    .. note::
       This method is available in AEDT 2023 R2 and later. PyAEDT must be installed
       in AEDT to allow this method to run. For more information, see `Installation
       <https://aedt.docs.pyansys.com/version/stable/Getting_started/Installation.html>`_.

    Parameters
    ----------
    name : str
        Name of the toolkit to appear in AEDT.
    script_file : str, optional
        Full path to the script file. The script will be copied to Personal Lib.
    template_file : str
        Script template name to use. The default is ``"run_pyaedt_toolkit_script"``.
    icon_file : str, optional
        Full path to the icon (a 30x30 pixel PNG file) to add to the UI.
        The default is ``None``.
    product : str, optional
        Product to which the toolkit applies. The default is ``"Project"``, in which case
        it applies to all designs. You can also specify a product, such as ``"HFSS"``.
    copy_to_personal_lib : bool, optional
        Whether to copy the script to Personal Lib or link the original script. Default is ``True``.
    executable_interpreter : str, optional
        Executable python path. The default is the one current interpreter.
    panel : str, optional
        Panel name. The default is ``"Panel_PyAEDT_Extensions"``.
    personal_lib : str, optional
    aedt_version : str, optional

    Returns
    -------
    bool

    """
    ...

def run_command(command: List[str], desktop_object): # -> int:
    """Run a command through subprocess.

    .. warning::

        Do not execute this function with untrusted function argument, environment
        variables or pyaedt global settings.
        See the :ref:`security guide<ref_security_consideration>` for details.

    """
    ...

def add_custom_toolkit(desktop_object, toolkit_name, wheel_toolkit=..., install=...): # -> Literal[False] | None:
    """Add toolkit to AEDT Automation Tab.

    .. warning::

        Do not execute this function with untrusted function argument, environment
        variables or pyaedt global settings.
        See the :ref:`security guide<ref_security_consideration>` for details.

    Parameters
    ----------
    desktop_object : :class:ansys.aedt.core.desktop.Desktop
        Desktop object.
    toolkit_name : str
        Name of toolkit to add.
    wheel_toolkit : str
        Wheelhouse path.
    install : bool, optional
        Whether to install the toolkit.

    Returns
    -------
    bool
    """
    ...

def remove_script_from_menu(desktop_object, name, product=...): # -> Literal[True]:
    """Remove a toolkit script from the menu.

    Parameters
    ----------
    desktop_object : :class:ansys.aedt.core.desktop.Desktop
        Desktop object.
    name : str
        Name of the toolkit to remove.
    product : str, optional
        Product to which the toolkit applies. The default is ``"Project"``, in which case
        it applies to all designs. You can also specify a product, such as ``"HFSS"``.

    Returns
    -------
    bool
    """
    ...

