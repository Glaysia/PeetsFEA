"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.application.analysis_icepak import FieldAnalysisIcepak
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.mixins import CreateBoundaryMixin

"""This module contains the ``Icepak`` class."""
class Icepak(FieldAnalysisIcepak, CreateBoundaryMixin):
    """Provides the Icepak application interface.

    This class allows you to connect to an existing Icepak design or create a
    new Icepak design if one does not exist.

    Parameters
    ----------
    project : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open.  The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    design : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    setup : str, optional
        Name of the setup to use as the nominal. The default is
        ``None``, in which case the active setup is used or
        nothing is used.
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case
        the active version or latest installed version is  used.
        This parameter is ignored when Script is launched within AEDT.
        Examples of input values are ``251``, ``25.1``, ``2025.1``, ``"2025.1"``.
    non_graphical : bool, optional
        Whether to launch AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT is launched in graphical mode.
        This parameter is ignored when a script is launched within AEDT.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine.  The default is ``False``.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to open the AEDT student version. The default is ``False``.
        This parameter is ignored when a script is launched within AEDT.
    machine : str, optional
        Machine name to connect the oDesktop session to. This works only in 2022 R2 or later.
        The remote server must be up and running with the command `"ansysedt.exe -grpcsrv portnum"`.
        If the machine is `"localhost"`, the server also starts if not present.
    port : int, optional
        Port number of which to start the oDesktop communication on an already existing server.
        This parameter is ignored when creating a new server. It works only in 2022 R2 or later.
        The remote server must be up and running with the command `"ansysedt.exe -grpcsrv portnum"`.
    aedt_process_id : int, optional
        Process ID for the instance of AEDT to point PyAEDT at. The default is
        ``None``. This parameter is only used when ``new_desktop = False``.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.

    Examples
    --------

    Create an instance of Icepak and connect to an existing Icepak
    design or create a new Icepak design if one does not exist.

    >>> from ansys.aedt.core import Icepak
    >>> icepak = Icepak()
    PyAEDT INFO: No project is defined. Project ...
    PyAEDT INFO: Active design is set to ...

    Create an instance of Icepak and link to a project named
    ``IcepakProject``. If this project does not exist, create one with
    this name.

    >>> icepak = Icepak("IcepakProject")
    PyAEDT INFO: Project ...
    PyAEDT INFO: Added design ...

    Create an instance of Icepak and link to a design named
    ``IcepakDesign1`` in a project named ``IcepakProject``.

    >>> icepak = Icepak("IcepakProject", "IcepakDesign1")
    PyAEDT INFO: Added design 'IcepakDesign1' of type Icepak.

    Create an instance of Icepak and open the specified project,
    which is ``myipk.aedt``.

    >>> icepak = Icepak("myipk.aedt")
    PyAEDT INFO: Project myipk has been created.
    PyAEDT INFO: No design is present. Inserting a new design.
    PyAEDT INFO: Added design ...

    Create an instance of Icepak using the 2025 R1 release and
    open the specified project, which is ``myipk2.aedt``.

    >>> icepak = Icepak(version=2025.1, project="myipk2.aedt")
    PyAEDT INFO: Project...
    PyAEDT INFO: No design is present. Inserting a new design.
    PyAEDT INFO: Added design...
    """
    @pyaedt_function_handler(designname="design", projectname="project", specified_version="version", setup_name="setup", new_desktop_session="new_desktop")
    def __init__(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @property
    def problem_type(self): # -> str:
        """Problem type of the Icepak design.

        Options are ``"TemperatureAndFlow"``, ``"TemperatureOnly"``, and ``"FlowOnly"``.
        """
        ...
    
    @problem_type.setter
    def problem_type(self, value=...): # -> None:
        ...
    
    @property
    def existing_analysis_sweeps(self): # -> list[Any]:
        """Existing analysis setups.

        Returns
        -------
        list of str
            List of all analysis setups in the design.

        """
        ...
    
    @pyaedt_function_handler()
    def assign_grille(self, air_faces, free_loss_coeff=..., free_area_ratio=..., external_temp=..., expternal_pressure=..., x_curve=..., y_curve=..., boundary_name=...): # -> BoundaryObject:
        """Assign grille to a face or list of faces.

        Parameters
        ----------
        air_faces : str, list
            List of face names.
        free_loss_coeff : bool
            Whether to use the free loss coefficient. The default is ``True``. If ``False``,
            the free loss coefficient is not used.
        free_area_ratio : float, str
            Free loss coefficient value. The default is ``0.8``.
        external_temp : str, optional
            External temperature. The default is ``"AmbientTemp"``.
        expternal_pressure : str, optional
            External pressure. The default is ``"AmbientPressure"``.
        x_curve : list, optional
            List of X curves in m_per_sec. The default is ``["0", "1", "2"]``.
        y_curve : list
            List of Y curves in n_per_meter_q. The default is ``["0", "1", "2"]``.
        boundary_name : str, optional
            Boundary name. The default is ``None``, in which case the name will
            be generated automatically.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignGrilleBoundary
        """
        ...
    
    @pyaedt_function_handler()
    def assign_openings(self, air_faces): # -> BoundaryObject:
        """Assign openings to a list of faces.

        Parameters
        ----------
        air_faces : list or :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`
            List of face names.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignOpeningBoundary

        Examples
        --------

        Create an opening boundary for the faces of the ``"USB_GND"`` object.

        >>> faces = icepak.modeler["USB_GND"].faces
        >>> face_names = [face.id for face in faces]
        >>> boundary = icepak.assign_openings(face_names)
        PyAEDT INFO: Face List boundary_faces created
        PyAEDT INFO: Opening Assigned
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def assign_2way_coupling(self, setup=..., number_of_iterations=..., continue_ipk_iterations=..., ipk_iterations_per_coupling=...): # -> Literal[True]:
        """Assign two-way coupling to a setup.

        Parameters
        ----------
        setup : str, optional
            Name of the setup. The default is ``None``, in which case the active setup is used.
        number_of_iterations : int, optional
            Number of iterations. The default is ``2``.
        continue_ipk_iterations : bool, optional
           Whether to continue Icepak iterations. The default is ``True``.
        ipk_iterations_per_coupling : int, optional
            Additional iterations per coupling. The default is ``20``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AddTwoWayCoupling

        Examples
        --------

        >>> icepak.assign_2way_coupling("Setup1", 1, True, 10)
        True

        """
        ...
    
    @pyaedt_function_handler()
    def create_source_blocks_from_list(self, list_powers, assign_material=..., default_material=...): # -> list[Any]:
        """Assign to a box in Icepak the sources that come from the CSV file.

        Assignment is made by name.

        Parameters
        ----------
        list_powers : list
            List of input powers. It is a list of lists. For example,
            ``[["Obj1", 1], ["Obj2", 3]]``. The list can contain multiple
            columns for power inputs.
        assign_material : bool, optional
            Whether to assign a material. The default is ``True``.
        default_material : str, optional
            Default material to assign when ``assign_material=True``.
            The default is ``"Ceramic_material"``.

        Returns
        -------
        list[:class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`]
            List of boundaries inserted.

        References
        ----------
        >>> oModule.AssignBlockBoundary

        Examples
        --------

        Create block boundaries from each box in the list.

        >>> box1 = icepak.modeler.create_box([1, 1, 1], [3, 3, 3], "BlockBox1", "copper")
        >>> box2 = icepak.modeler.create_box([2, 2, 2], [4, 4, 4], "BlockBox2", "copper")
        >>> blocks = icepak.create_source_blocks_from_list([["BlockBox1", 2], ["BlockBox2", 4]])
        PyAEDT INFO: Block on ...
        >>> blocks[1].props
        {'Objects': ['BlockBox1'], 'Block Type': 'Solid', 'Use External Conditions': False, 'Total Power': '2W'}
        >>> blocks[3].props
        {'Objects': ['BlockBox2'], 'Block Type': 'Solid', 'Use External Conditions': False, 'Total Power': '4W'}
        """
        ...
    
    @pyaedt_function_handler()
    def create_source_block(self, object_name, input_power, assign_material=..., material_name=..., use_object_for_name=...): # -> BoundaryObject:
        """Create a source block for an object.

        .. deprecated:: 0.6.75
            This method is deprecated. Use the ``assign_solid_block()`` method instead.

        Parameters
        ----------
        object_name : str, list
            Name of the object.
        input_power : str or var
            Input power.
        assign_material : bool, optional
            Whether to assign a material. The default is ``True``.
        material_name :
            Material to assign if ``assign_material=True``. The default is ``"Ceramic_material"``.
        use_object_for_name : bool, optional
            Whether to use the object name for the source block name. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignBlockBoundary

        Examples
        --------

        >>> box = icepak.modeler.create_box([5, 5, 5], [1, 2, 3], "BlockBox3", "copper")
        >>> block = icepak.create_source_block("BlockBox3", "1W", False)
        PyAEDT INFO: Block on ...
        >>> block.props
        {'Objects': ['BlockBox3'], 'Block Type': 'Solid', 'Use External Conditions': False, 'Total Power': '1W'}

        """
        ...
    
    @pyaedt_function_handler()
    def create_conduting_plate(self, face_id, thermal_specification, thermal_dependent_dataset=..., input_power=..., radiate_low=..., low_surf_material=..., radiate_high=..., high_surf_material=..., shell_conduction=..., thickness=..., solid_material=..., thermal_conductance=..., thermal_resistance=..., thermal_impedance=..., bc_name=...): # -> BoundaryObject:
        """Add a conductive plate thermal assignment on a face.

        .. deprecated:: 0.7.8
            This method is deprecated. Use the ``assign_conducting_plate()`` method instead.

        Parameters
        ----------
        face_id : int or str or list
            Integer indicating a face ID or a string indicating an object name. A list of face
            IDs or object names is also accepted.
        thermal_specification : str
            Select what thermal specification is to be applied. The possible choices are ``"Thickness"``,
            ``"Conductance"``, ``"Thermal Impedance"`` and ``"Thermal Resistance"``
        thermal_dependent_dataset : str, optional
            Name of the dataset if a thermal dependent power source is to be assigned. The default is ``None``.
        input_power : str, float, or int, optional
            Input power. The default is ``"0W"``. Ignored if thermal_dependent_dataset is set
        radiate_low : bool, optional
            Whether to enable radiation on the lower face. The default is ``False``.
        low_surf_material : str, optional
            Low surface material. The default is ``"Steel-oxidised-surface"``.
        radiate_high : bool, optional
            Whether to enable radiation on the higher face. The default is ``False``.
        high_surf_material : str, optional
            High surface material. The default is ``"Steel-oxidised-surface"``.
        shell_conduction : str, optional
            Whether to enable shell conduction. The default is ``False``.
        thickness : str, optional
            Thickness value, relevant only if ``thermal_specification="Thickness"``. The default is ``"1mm"``.
        thermal_conductance : str, optional
            Thermal Conductance value, relevant only if ``thermal_specification="Conductance"``.
            The default is ``"0W_per_Cel"``.
        thermal_resistance : str, optional
            Thermal resistance value, relevant only if ``thermal_specification="Thermal Resistance"``.
            The default is ``"0Kel_per_W"``.
        thermal_impedance : str, optional
            Thermal impedance value, relevant only if ``thermal_specification="Thermal Impedance"``.
            The default is ``"0celm2_per_w"``.
        solid_material : str, optional
            Material type for the wall. The default is ``"Al-Extruded"``.
        bc_name : str, optional
            Name of the plate. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def create_source_power(self, face_id, thermal_dependent_dataset=..., input_power=..., thermal_condtion=..., surface_heat=..., temperature=..., radiate=..., source_name=...): # -> BoundaryObject:
        """Create a source power for a face.

        .. deprecated:: 0.6.71
            This method is replaced by :obj:`~Icepak.assign_source`.

        Parameters
        ----------
        face_id : int or str
            If int, Face ID. If str, object name.
        thermal_dependent_dataset : str, optional
            Name of the dataset if a thermal dependent power source is to be assigned. The default is ``None``.
        input_power : str, float, or int, optional
            Input power. The default is ``None``.
        thermal_condtion : str, optional
            Thermal condition. The default is ``"Total Power"``.
        surface_heat : str, optional
            Surface heat. The default is ``"0irrad_W_per_m2"``.
        temperature : str, optional
            Type of the temperature. The default is ``"AmbientTemp"``.
        radiate : bool, optional
            Whether to enable radiation. The default is ``False``.
        source_name : str, optional
            Name of the source. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignSourceBoundary

        Examples
        --------

        Create two source boundaries from one box, one on the top face and one on the bottom face.

        >>> box = icepak.modeler.create_box([0, 0, 0], [20, 20, 20], name="SourceBox")
        >>> source1 = icepak.create_source_power(box.top_face_z.id, input_power="2W")
        >>> source1.props["Total Power"]
        '2W'
        >>> source2 = icepak.create_source_power(
        ...     box.bottom_face_z.id, thermal_condtion="Fixed Temperature", temperature="28cel"
        ... )
        >>> source2.props["Temperature"]
        '28cel'

        """
        ...
    
    @pyaedt_function_handler()
    def create_network_block(self, object_name, power, rjc, rjb, gravity_dir, top=..., assign_material=..., default_material=..., use_object_for_name=...): # -> BoundaryObject | None:
        """Create a network block.

        .. deprecated:: 0.6.27
            This method is replaced by :obj:`~Icepak.create_two_resistor_network_block`.

        Parameters
        ----------
        object_name : str
            Name of the object to create the block for.
        power : str or var
            Input power.
        rjc : float
            RJC value.
        rjb : float
            RJB value.
        gravity_dir : int
            Gravity direction X to Z. Options are ``0`` to ``2``. Determines the orientation of network boundary faces.
        top : float, optional
            Chosen orientation (X to Z) coordinate value in millimeters of the top face of the board.
            The default is ''0 mm''.
            This parameter determines the casing and board side of the network.
        assign_material : bool, optional
            Whether to assign a material. The default is ``True``.
        default_material : str, optional
            Default material if ``assign_material=True``. The default is ``"Ceramic_material"``.
        use_object_for_name : bool, optional
             The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.

        References
        ----------
        >>> oModule.AssignNetworkBoundary

        Examples
        --------

        >>> box = icepak.modeler.create_box([4, 5, 6], [5, 5, 5], "NetworkBox1", "copper")
        >>> block = icepak.create_network_block("NetworkBox1", "2W", 20, 10, 2, 1.05918)
        >>> block.props["Nodes"]["Internal"][0]
        '2W'
        """
        ...
    
    @pyaedt_function_handler()
    def create_network_blocks(self, input_list, gravity_dir, top=..., assign_material=..., default_material=...): # -> list[Any]:
        """Create network blocks from CSV files.

        Parameters
        ----------
        input_list : list
            List of sources with inputs ``rjc``, ``rjb``, and ``power``.
            For example, ``[[Objname1, rjc, rjb, power1, power2, ...], [Objname2, rjc2, rbj2, power1, power2, ...]]``.
        gravity_dir : int
            Gravity direction X to Z. Options are ``0`` to ``2``. This parameter determines the orientation of network
            boundary faces.
        top : float, optional
            Chosen orientation (X to Z) coordinate value in millimeters of the top face of
            the board. The default is ''0 mm''. This parameter determines the casing and
            board side of the network.

        assign_material : bool, optional
            Whether to assign a material. The default is ``True``.
        default_material : str, optional
            Default material if ``assign_material=True``. The default is ``"Ceramic_material"``.

        Returns
        -------
        list[:class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`]
            List of boundary objects created.

        References
        ----------
        >>> oModule.AssignNetworkBoundary

        Examples
        --------

        Create network boundaries from each box in the list.

        >>> box1 = icepak.modeler.create_box([1, 2, 3], [10, 10, 10], "NetworkBox2", "copper")
        >>> box2 = icepak.modeler.create_box([4, 5, 6], [5, 5, 5], "NetworkBox3", "copper")
        >>> blocks = icepak.create_network_blocks(
        ...     [["NetworkBox2", 20, 10, 3], ["NetworkBox3", 4, 10, 2]], 2, 1.05918, False
        ... )
        >>> blocks[0].props["Nodes"]["Internal"]
        ['3W']
        """
        ...
    
    @pyaedt_function_handler()
    def assign_surface_monitor(self, face_name, monitor_type=..., monitor_name=...): # -> list[Any] | Literal[False]:
        """Assign a surface monitor.

        Parameters
        ----------
        face_name : str
            Name of the face.
        monitor_type : str, optional
            Type of the monitor.  The default is ``"Temperature"``.
        monitor_name : str, optional
            Name of the monitor. The default is ``None``, in which case
            the default name is used.

        Returns
        -------
        str
            Monitor name when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignFaceMonitor

        Examples
        --------

        Create a rectangle named ``"Surface1"`` and assign a temperature monitor to that surface.

        >>> surface = icepak.modeler.create_rectangle(icepak.PLANE.XY, [0, 0, 0], [10, 20], name="Surface1")
        >>> icepak.assign_surface_monitor("Surface1", monitor_name="monitor")
        'monitor'
        """
        ...
    
    @pyaedt_function_handler()
    def assign_point_monitor(self, point_position, monitor_type=..., monitor_name=...): # -> list[Any] | Literal[False]:
        """Create and assign a point monitor.

        Parameters
        ----------
        point_position : list
            List of the ``[x, y, z]`` coordinates for the point.
        monitor_type : str, optional
            Type of the monitor. The default is ``"Temperature"``.
        monitor_name : str, optional
            Name of the monitor. The default is ``None``, in which case
            the default name is used.

        Returns
        -------
        str
            Monitor name when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignPointMonitor

        Examples
        --------
        Create a temperature monitor at the point ``[1, 1, 1]``.

        >>> icepak.assign_point_monitor([1, 1, 1], monitor_name="monitor1")
        'monitor1'

        """
        ...
    
    @pyaedt_function_handler()
    def assign_point_monitor_in_object(self, name, monitor_type=..., monitor_name=...): # -> list[Any] | Literal[False]:
        """Assign a point monitor in the centroid of a specific object.

        Parameters
        ----------
        name : str
            Name of the object to assign monitor point to.
        monitor_type : str, optional
            Type of the monitor.  The default is ``"Temperature"``.
        monitor_name : str, optional
            Name of the monitor. The default is ``None``, in which case
            the default name is used.

        Returns
        -------
        str
            Monitor name when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignPointMonitor

        Examples
        --------

        Create a box named ``"BlockBox1"`` and assign a temperature monitor point to that object.

        >>> box = icepak.modeler.create_box([1, 1, 1], [3, 3, 3], "BlockBox1", "copper")
        >>> icepak.assign_point_monitor(box.name, monitor_name="monitor2")
        "'monitor2'
        """
        ...
    
    @pyaedt_function_handler()
    def assign_block_from_sherlock_file(self, csv_name): # -> float | Literal[0]:
        """Assign block power to components based on a CSV file from Sherlock.

        Parameters
        ----------
        csv_name : str
            Name of the CSV file.

        Returns
        -------
        type
            Total power applied.

        References
        ----------
        >>> oModule.AssignBlockBoundary
        """
        ...
    
    @pyaedt_function_handler()
    def assign_priority_on_intersections(self, component_prefix=...): # -> Literal[True]:
        """Validate an Icepak design.

        If there are intersections, priorities are automatically applied to overcome simulation issues.

        Parameters
        ----------
        component_prefix : str, optional
            Component prefix to search for. The default is ``"COMP_"``.

        Returns
        -------
        bool
             ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.UpdatePriorityList
        """
        ...
    
    @pyaedt_function_handler(gravityDir="gravity_dir")
    def find_top(self, gravity_dir):
        """Find the top location of the layout given a gravity.

        Parameters
        ----------
        gravity_dir :
            Gravity direction from -X to +Z. Options are ``0`` to ``5``.

        Returns
        -------
        float
            Top position.

        References
        ----------
        >>> oEditor.GetModelBoundingBox
        """
        ...
    
    @pyaedt_function_handler(matname="material")
    def create_parametric_fin_heat_sink(self, hs_height=..., hs_width=..., hs_basethick=..., pitch=..., thick=..., length=..., height=..., draftangle=..., patternangle=..., separation=..., symmetric=..., symmetric_separation=..., numcolumn_perside=..., vertical_separation=..., material=..., center=..., plane_enum=..., rotation=..., tolerance=...): # -> bool:
        """Create a parametric heat sink.

        Parameters
        ----------
        hs_height : int, optional
            Height of the heat sink. The default is ``100``.
        hs_width : int, optional
            Width of the heat sink. The default is ``100``.
        hs_basethick : int, optional
            Thickness of the heat sink base. The default is ``10``.
        pitch : optional
            Pitch of the heat sink. The default is ``10``.
        thick : optional
            Thickness of the heat sink. The default is ``10``.
        length : optional
            Length of the heat sink. The default is ``40``.
        height : optional
            Height of the heat sink. The default is ``40``.
        draftangle : int, float, optional
            Draft angle in degrees. The default is ``0``.
        patternangle : int, float, optional
            Pattern angle in degrees. The default is ``10``.
        separation : optional
            The default is ``5``.
        symmetric : bool, optional
            Whether the heat sink is symmetric. The default is ``True``.
        symmetric_separation : optional
            The default is ``20``.
        numcolumn_perside : int, optional
            Number of columns per side. The default is ``2``.
        vertical_separation : optional
            The default is ``10``.
        material : str, optional
            Name of the material. The default is ``Al-Extruded``.
        center : list, optional
           List of ``[x, y, z]`` coordinates for the center of
           the heatsink. The default is ``[0, 0, 0]``.
        plane_enum : str, int, optional
            Plane for orienting the heat sink.
            :class:`ansys.aedt.core.constants.PLANE` Enumerator can be used as input.
            The default is ``0``.
        rotation : int, float, optional
            The default is ``0``.
        tolerance : int, float, optional
            Tolerance value. The default is ``0.001``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        Create a symmetric fin heat sink.

        >>> from ansys.aedt.core import Icepak
        >>> icepak = Icepak()
        >>> icepak.insert_design("Heat_Sink_Example")
        >>> icepak.create_parametric_fin_heat_sink(
        ...     draftangle=1.5,
        ...     patternangle=8,
        ...     numcolumn_perside=3,
        ...     vertical_separation=5.5,
        ...     material="Steel",
        ...     center=[10, 0, 0],
        ...     plane_enum=icepak.PLANE.XY,
        ...     rotation=45,
        ...     tolerance=0.005,
        ... )

        """
        ...
    
    @pyaedt_function_handler(matname="material")
    def create_parametric_heatsink_on_face(self, top_face, relative=..., hs_basethick=..., fin_thick=..., fin_length=..., fin_height=..., draft_angle=..., pattern_angle=..., separation=..., column_separation=..., symmetric=..., symmetric_separation=..., numcolumn_perside=..., material=...): # -> tuple[Object3d | Any, dict[str, str]]:
        """Create a parametric heat sink.

        Parameters
        ----------
        top_face : modeler.cad.elements_3d.FacePrimitive
            Face to build the heatsink on.
        relative : bool, optional
            Whether the dimensions used as arguments of the function are
            absolute or relative to the width and the height of the
            top face.
        hs_basethick : float, optional
            Thickness of the heat sink base. If ``relative==True``, it is the
            fraction of the ``top_face`` width. The default is ``0.1``.
        fin_thick : float, optional
            Thickness of the fin. If ``relative==True``, it is the fraction of
             the ``top_face`` height. The default is ``0.50``.
        fin_length : float, optional
            Length of the fin. If ``relative==True``, it is the fraction of
            the ``top_face`` width. The default is ``0.25``.
        fin_height : float, optional
            Height of the fin. If ``relative==True``, it is the fraction of
            the ``top_face`` height. The default is ``1``.
        draft_angle : float, optional
            Draft angle in degrees. The default is ``0``.
        pattern_angle : float, optional
            Pattern angle in degrees. The default is ``10``.
        separation : float, optional
            Separation among the fins of one column. If ``relative==True``,
            it is the fraction of the ``top_face`` width. The default is
            ``0.05``.
        column_separation : float, optional
            Separation among columns of fins. If ``relative==True``, it is the
            fraction of the ``top_face`` height. The default is ``0.1``.
        symmetric : bool, optional
            Whether the heat sink is symmetric. The default is ``True``.
        symmetric_separation : optional
            Separation between the two sides. If ``relative==True``, it is the
            fraction of the ``top_face`` height. The default is ``0.01``.
        numcolumn_perside : int, optional
            Number of columns per side. The default is ``2``.
        material : str, optional
            Name of the material. The default is ``Al-Extruded``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Heatsink created or ``False`` when failed.
        dict
            Variable mapping. Keys are the different parameters names, and values
            are the corresponding variables names in Icepak.

        Examples
        --------

        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> box = ipk.modeler.create_box([0, 0, 0], [1, 2, 3])
        >>> top_face = box.top_face_z
        >>> ipk.create_parametric_heatsink_on_face(top_face, material="Al-Extruded")
        """
        ...
    
    @pyaedt_function_handler(ambtemp="ambient_temperature", performvalidation="perform_validation", defaultfluid="default_fluid", defaultsolid="default_solid")
    @pyaedt_function_handler()
    def edit_design_settings(self, gravity_dir=..., ambient_temperature=..., perform_validation=..., check_level=..., default_fluid=..., default_solid=..., default_surface=..., export_monitor=..., export_sherlock=..., export_directory=..., gauge_pressure=..., radiation_temperature=..., ignore_unclassified_objects=..., skip_intersection_checks=...): # -> Literal[True]:
        """Update the main settings of the design.

        Parameters
        ----------
        gravity_dir : int, optional
            Gravity direction from -X to +Z. Options are ``0`` to ``5``.
            The default is ``0``.
        ambient_temperature : float, str, BoundaryDict or dict optional
            Ambient temperature. The default is ``20``.
            The default unit is Celsius for a float or string value.
            You can include a unit for a string value. For example, ``325kel``.
        perform_validation : bool, optional
            Whether to perform validation. The default is ``False``.
        check_level : str, optional
            Level of check to perform during validation. The default
            is ``"None"``.
        default_fluid : str, optional
            Default fluid material. The default is ``"air"``.
        default_solid : str, optional
            Default solid material. The default is ``"Al-Extruded"``.
        default_surface : str, optional
            Default surface material. The default is ``"Steel-oxidised-surface"``.
        export_monitor : bool, optional
            Whether to export monitor data.
            The default is ``False``.
        export_sherlock : bool, optional
            Whether to export temperature data for Sherlock.
            The default is ``False``.
        export_directory : str, optional
            Default export directory for monitor point and Sherlock data.
            The default is the current working directory.
        gauge_pressure : float, str, optional
            Gauge pressure. It can be a float where "n_per_meter_sq" is
            assumed as the units or a string with the units specified. The default is ``0``.
        radiation_temperature : float, str, optional
            Set the radiation temperature. It can be a float (units will be "cel") or a string with units.
            Default is ``20``.
        ignore_unclassified_objects : bool, optional
            Whether to ignore unclassified objects during validation check.
            The default value is ``False``.
        skip_intersection_checks : bool, optional
            Whether to skip intersection checks during validation check.
            The default value is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetDesignSettings
        """
        ...
    
    @pyaedt_function_handler(designname="design", setupname="setup", sweepname="sweep", paramlist="parameters", object_list="assignment")
    def assign_em_losses(self, design=..., setup=..., sweep=..., map_frequency=..., surface_objects=..., source_project_name=..., parameters=..., assignment=...): # -> BoundaryObject:
        """Map EM losses to an Icepak design.

        Parameters
        ----------
        design : string, optional
            Name of the design with the source mapping. The default is ``"HFSSDesign1"``.
        setup : str, optional
            Name of the EM setup. The default is ``"Setup1"``.
        sweep : str, optional
            Name of the EM sweep to use for the mapping. The default is ``"LastAdaptive"``.
        map_frequency : str, optional
            String containing the frequency to map. The default is ``None``.
            The value must be ``None`` for Eigenmode analysis.
        surface_objects : list, optional
            List of objects in the source that are metals. The default is ``None``.
        source_project_name : str, optional
            Name of the source project. The default is ``None``, in which case the
            source from the same project is used.
        parameters : list, dict, optional
            List of all parameters to map from source and Icepak design.
            The default is ``None``, in which case the variables are set to their values (no mapping).
            If ``None`` the variables are set to their values (no mapping).
            If a list is provided, the specified variables in the Icepak design are mapped to variables
            in the source design having the same name.
            If a dictionary is provided, it is possible to map variables to the source design having a different name.
            The dictionary structure is {"source_design_variable": "icepak_variable"}.
        assignment : list, optional
            List of objects. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignEMLoss
        """
        ...
    
    @pyaedt_function_handler()
    def eval_surface_quantity_from_field_summary(self, faces_list, quantity_name=..., savedir=..., filename=..., sweep_name=..., parameter_dict_with_values=...): # -> str:
        """Export the field surface output.

        This method exports one CSV file for the specified variation.

        Parameters
        ----------
        faces_list : list
            List of faces to apply.
        quantity_name : str, optional
            Name of the quantity to export. The default is ``"HeatTransCoeff"``.
        savedir : str, optional
            Directory to save the CSV file to. The default is ``None``, in which
            case the file is exported to the working directory.
        filename : str or :class:`pathlib.Path`, optional
            Name of the CSV file. The default is ``None``, in which case the default
            name is used.
        sweep_name : str, optional
            Name of the setup and name of the sweep. For example, ``"IcepakSetup1 : SteatyState"``.
            The default is ``None``, in which case the active setup and active sweep are used.
        parameter_dict_with_values : dict, optional
            Dictionary of parameters defined for the specific setup with values. The default is ``{}``.

        Returns
        -------
        str
            Name of the file.

        References
        ----------
        >>> oModule.ExportFieldsSummary
        """
        ...
    
    def eval_volume_quantity_from_field_summary(self, object_list, quantity_name=..., savedir=..., filename=..., sweep_name=..., parameter_dict_with_values=...): # -> str:
        """Export the field volume output.

        This method exports one CSV file for the specified variation.

        Parameters
        ----------
        object_list : list
            List of faces to apply.
        quantity_name : str, optional
            Name of the quantity to export. The default is ``"HeatTransCoeff"``.
        savedir : str, optional
            Directory to save the CSV file to. The default is ``None``, in which
            case the file is exported to the working directory.
        filename :  str or :class:`pathlib.Path`, optional
            Name of the CSV file. The default is ``None``, in which case the default name
            is used.
        sweep_name :
            Name of the setup and name of the sweep. For example, ``"IcepakSetup1 : SteatyState"``.
            The default is ``None``, in which case the active setup and active sweep are used.
        parameter_dict_with_values : dict, optional
            Dictionary of parameters defined for the specific setup with values. The default is ``{}``

        Returns
        -------
        str
           Name of the file.

        References
        ----------
        >>> oModule.ExportFieldsSummary
        """
        ...
    
    @pyaedt_function_handler(geometryType="geometry_type", variationlist="variation_list")
    def export_summary(self, output_dir=..., solution_name=..., type=..., geometry_type=..., quantity=..., variation=..., variation_list=..., filename=...): # -> Literal[True]:
        """Export a fields summary of all objects.

        Parameters
        ----------
        output_dir : str, optional
            Name of directory for exporting the fields summary.
            The default is ``None``, in which case the fields summary
            is exported to the working directory.
        solution_name : str, optional
            Name of the solution. The default is ``None``, in which case the
            default solution is used.
        type : string, optional
            Entity type, ``"Boundary"`` or ``"Object"``. The default is ``"Object"``.
        geometry_type : str, optional
            Geometry type, ``"Volume"`` or ``"Surface"``. The default is ``"Volume"``.
        quantity : str, optional
            The default is ``"Temperature"``.
        variation : str, optional
            The default is ``""``.
        variation_list : list, optional
            The default is ``None``.
        filename : str, optional
            The default is ``"IPKsummaryReport"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditFieldsSummarySetting
        >>> oModule.ExportFieldsSummary
        """
        ...
    
    @pyaedt_function_handler()
    def get_radiation_settings(self, radiation): # -> tuple[Any | bool, Any | bool]:
        """Get radiation settings.

        Parameters
        ----------
        radiation : str
            Type of the radiation. Options are:

            * ``"Nothing"``
            * ``"Low"``
            * ``"High"``
            * ``"Both"``

        Returns
        -------
        (bool, bool)
            Tuple containing the low side radiation and the high side radiation.
        """
        ...
    
    @pyaedt_function_handler()
    def get_link_data(self, links_data, **kwargs): # -> list[Any]:
        """Get a list of linked data.

        Parameters
        ----------
        linkData : list
            List of the data to retrieve for links. Options are:

            * Project name, if ``None`` use the active project
            * Design name
            * HFSS solution name, such as ``"HFSS Setup 1 : Last Adaptive"``
            * Force source design simulation, ``True`` or ``False``
            * Preserve source design solution, ``True`` or ``False``

        Returns
        -------
        list
            List containing the requested link data.

        """
        ...
    
    @pyaedt_function_handler()
    def create_fan(self, name=..., is_2d=..., shape=..., cross_section=..., radius=..., hub_radius=..., origin=...): # -> NativeComponentObject | Literal[False]:
        """Create a fan component in Icepak that is linked to an HFSS 3D Layout object.

        Parameters
        ----------
        name : str, optional
            Fan name. The default is ``None``, in which case the default name is used.
        is_2d : bool, optional
            Whether the fan is modeled as 2D. The default is ``False``, in which
            case the fan is modeled as 3D.
        shape : str, optional
            Fan shape. Options are ``"Circular"`` and ``"Rectangular"``. The default
            is ``"Circular"``.
        cross_section : str, optional
            Cross section plane of the fan. The default is ``"XY"``.
        radius : str, float, optional
            Radius of the fan in modeler units. The default is ``"0.008mm"``.
        hub_radius : str, float, optional
            Hub radius of the fan in modeler units. The default is ``"0mm"``,
        origin : list, optional
            List of ``[x,y,z]`` coordinates for the position of the fan in the modeler.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.layout_boundary.NativeComponentObject`
            NativeComponentObject object.

        References
        ----------
        >>> oModule.InsertNativeComponent
        """
        ...
    
    @pyaedt_function_handler()
    def create_ipk_3dcomponent_pcb(self, compName, setupLinkInfo, solutionFreq, resolution, PCB_CS=..., rad=..., extent_type=..., outline_polygon=..., powerin=..., custom_x_resolution=..., custom_y_resolution=..., **kwargs): # -> NativeComponentPCB | Literal[False]:
        """Create a PCB component in Icepak that is linked to an HFSS 3D Layout object.

        Parameters
        ----------
        compName : str
            Name of the new PCB component.
        setupLinkInfo : list
            List of the five elements needed to set up the link in this format:
            ``[projectname, designname, solution name, forcesimulation (bool), preserve results (bool)]``.
        solutionFreq :
            Frequency of the solution if cosimulation is requested.
        resolution : int
            Resolution of the mapping.
        PCB_CS : str, optional
            Coordinate system for the PCB. The default is ``"Global"``.
        rad : str, optional
            Radiating faces. The default is ``"Nothing"``.
        extent_type : str, optional
            Type of the extent. Options are ``"Bounding Box"`` and ``"Polygon"``.
            The default is ``"Bounding Box"``.
        outline_polygon : str, optional
            Name of the polygon if ``extentype="Polygon"``. The default is ``""``,
            in which case the outline polygon is automatically identified.
        powerin : str, optional
            Power to dissipate if cosimulation is disabled. The default is ``"0W"``.
        custom_x_resolution
            The default is ``None``.
        custom_y_resolution
            The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.layout_boundary.NativeComponentPCB`
            NativeComponentObject object.

        References
        ----------
        >>> oModule.InsertNativeComponent
        """
        ...
    
    @pyaedt_function_handler()
    def create_pcb_from_3dlayout(self, component_name, project_name, design_name, resolution=..., extent_type=..., outline_polygon=..., close_linked_project_after_import=..., custom_x_resolution=..., custom_y_resolution=..., power_in=..., rad=..., **kwargs): # -> NativeComponentPCB | Literal[False]:
        """Create a PCB component in Icepak that is linked to an HFSS 3DLayout object linking only to the geometry file.

        .. note::
           No solution is linked.

        Parameters
        ----------
        component_name : str
            Name of the new PCB component to create in Icepak.
        project_name : str
            Name of the project or the full path to the project.
        design_name : str
            Name of the design.
        resolution : int, optional
            Resolution of the mapping. The default is ``2``.
        extent_type : str, optional
            Type of the extent. Options are ``"Polygon"`` and ``"Bounding Box"``. The default
            is ``"Bounding Box"``.
        outline_polygon : str, optional
            Name of the outline polygon if ``extent_type="Polygon"``. The default is ``""``.
        close_linked_project_after_import : bool, optional
            Whether to close the linked AEDT project after the import. The default is ``True``.
        custom_x_resolution : int, optional
            The default is ``None``.
        custom_y_resolution : int, optional
            The default is ``None``.
        power_in : float, optional
            Power in Watt.
        rad : str, optional
            Radiating faces. Options are:

            * ``"Nothing"``
            * ``"Low"``
            * ``"High"``
            * ``"Both"``

            The default is ``"Nothing"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.InsertNativeComponent
        """
        ...
    
    @pyaedt_function_handler()
    def copyGroupFrom(self, group_name, source_design, source_project_name=..., source_project_path=..., **kwargs): # -> Literal[True]:
        """Copy a group from another design.

        Parameters
        ----------
        group_name : str
            Name of the group.
        source_design : str
            Name of the source design.
        source_project_name : str, optional
            Name of the source project. The default is ``None``, in which case the current active project is used.
        source_project_path : str, optional
            Path to the source project. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Copy
        >>> oeditor.Paste
        """
        ...
    
    @pyaedt_function_handler()
    def globalMeshSettings(self, meshtype, gap_min_elements=..., noOgrids=..., MLM_en=..., MLM_Type=..., stairStep_en=..., edge_min_elements=..., object=...): # -> Literal[True]:
        """Create a custom mesh tailored on a PCB design.

        Parameters
        ----------
        meshtype : int
            Type of the mesh. Options are ``1``, ``2``, and ``3``, which represent
            respectively a coarse, standard, and very accurate mesh.
        gap_min_elements : str, optional
            The default is ``"1"``.
        noOgrids : bool, optional
            The default is ``False``.
        MLM_en : bool, optional
            The default is ``True``.
        MLM_Type : str, optional
            The default is ``"3D"``.
        stairStep_en : bool, optional
            The default is ``False``.
        edge_min_elements : str, optional
            The default is ``"1"``.
        object : str, optional
            The default is ``"Region"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.EditGlobalMeshRegion
        """
        ...
    
    @pyaedt_function_handler()
    def create_meshregion_component(self, scale_factor=..., name=..., restore_padding_values=...): # -> tuple[str, str, str]:
        """Create a bounding box to use as a mesh region in Icepak.

        .. deprecated:: 0.8.3
            Use ``create_subregion`` or ``create_region`` functions inside the modeler class.

        Parameters
        ----------
        scale_factor : float, optional
            The default is ``1.0``.
        name : str, optional
            Name of the bounding box. The default is ``"Component_Region"``.
        restore_padding_values : list, optional
            The default is ``[50,50,50,50,50,50]``.

        Returns
        -------
        tuple
            Tuple containing the ``(x, y, z)`` distances of the region.

        References
        ----------
        >>> oeditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler()
    def delete_em_losses(self, bound_name): # -> Literal[True]:
        """Delete the EM losses boundary.

        Parameters
        ----------
        bound_name : str
            Name of the boundary.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.DeleteBoundaries
        """
        ...
    
    @pyaedt_function_handler()
    def delete_pcb_component(self, comp_name): # -> Literal[True]:
        """Delete a PCB component.

        Parameters
        ----------
        comp_name : str
            Name of the PCB component.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Delete
        """
        ...
    
    @pyaedt_function_handler()
    def get_liquid_objects(self): # -> list[Any]:
        """Get liquid material objects.

        Returns
        -------
        list
            List of all liquid material objects.
        """
        ...
    
    @pyaedt_function_handler()
    def get_gas_objects(self): # -> list[Any]:
        """Get gas objects.

        Returns
        -------
        list
            List of all gas objects.
        """
        ...
    
    @pyaedt_function_handler()
    def generate_fluent_mesh(self, object_lists=..., meshtype=..., min_size=..., max_size=..., inflation_layer_number=..., inflation_growth_rate=..., mesh_growth_rate=...): # -> MeshOperation | Literal[False]:
        """Generate a Fluent mesh for a list of selected objects and assign the mesh automatically to the objects.

        .. warning::

            Do not execute this function with untrusted function argument, environment
            variables or pyaedt global settings.
            See the :ref:`security guide<ref_security_consideration>` for details.

        Parameters
        ----------
        object_lists : list, optional
            List of objects to compute the Fluent mesh on. The default is ``None``, in which case
            all fluids objects are used to compute the mesh.
        meshtype : str, optional
            Mesh type. Options are ``"tethraedral"`` or ``"hexcore"``.
        min_size : float, optional
            Minimum mesh size. Default is the smallest edge of objects/20.
        max_size : float, optional
            Maximum mesh size. Default is the smallest edge of objects/5.
        inflation_layer_number : int, optional
            Inflation layer number. Default is ``3``.
        inflation_growth_rate : float, optional
            Inflation layer size. Default is ``1.2``.
        mesh_growth_rate : float, optional
            Growth rate. Default is ``1.2``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.mesh.MeshOperation`
        """
        ...
    
    @pyaedt_function_handler()
    def apply_icepak_settings(self, ambienttemp=..., gravityDir=..., perform_minimal_val=..., default_fluid=..., default_solid=..., default_surface=...): # -> Literal[True]:
        """Apply Icepak default design settings.

        .. deprecated:: 0.8.9
            Use the ``edit_design_settins()`` method.

        Parameters
        ----------
        ambienttemp : float, str, optional
            Ambient temperature, which can be an integer or a parameter already
            created in AEDT. The default is ``20``.
        gravityDir : int, optional
            Gravity direction index in the range ``[0, 5]``. The default is ``5``.
        perform_minimal_val : bool, optional
            Whether to perform minimal validation. The default is ``True``.
            If ``False``, full validation is performed.
        default_fluid : str, optional
            Type of fluid. The default is ``"Air"``.
        default_solid : str, optional
            Type of solid. The default is ``"Al-Extruded"``.
        default_surface : str, optional
            Type of surface. The default is ``"Steel-oxidised-surface"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetDesignSettings
        """
        ...
    
    @pyaedt_function_handler()
    def assign_surface_material(self, obj, mat): # -> Literal[True]:
        """Assign a surface material to one or more objects.

        Parameters
        ----------
        obj : str, list
            One or more objects to assign surface materials to.
        mat : str
            Material to assign. The material must be present in the database.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler()
    def import_idf(self, board_path, library_path=..., control_path=..., filter_cap=..., filter_ind=..., filter_res=..., filter_height_under=..., filter_height_exclude_2d=..., power_under=..., create_filtered_as_non_model=..., high_surface_thick=..., low_surface_thick=..., internal_thick=..., internal_layer_number=..., high_surface_coverage=..., low_surface_coverage=..., internal_layer_coverage=..., trace_material=..., substrate_material=..., create_board=..., model_board_as_rect=..., model_device_as_rect=..., cutoff_height=..., component_lib=...): # -> Literal[True]:
        """Import an IDF file into an Icepak design.

        Parameters
        ----------
        board_path : str
            Full path to the EMN/BDF file.
        library_path : str
            Full path to the EMP/LDF file. The default is ``None``, in which case a search for an EMP/LDF file
            with the same name as the EMN/BDF file is performed in the folder with the EMN/BDF file.
        control_path : str
            Full path to the XML file. The default is ``None``, in which case a search for an XML file
            with the same name as the EMN/BDF file is performed in the folder with the EMN/BDF file.
        filter_cap : bool, optional
            Whether to filter capacitors from the IDF file. The default is ``False``.
        filter_ind : bool, optional
            Whether to filter inductors from the IDF file. The default is ``False``.
        filter_res : bool, optional
            Whether to filter resistors from the IDF file. The default is ``False``.
        filter_height_under : float or str, optional
            Filter components under a given height. The default is ``None``, in which case
            no components are filtered based on height.
        filter_height_exclude_2d : bool, optional
            Whether to filter 2D components from the IDF file. The default is ``False``.
        power_under : float or str, optional
            Filter components with power under a given mW. The default is ``None``, in which
            case no components are filtered based on power.
        create_filtered_as_non_model : bool, optional
            Whether to set imported filtered components as ``Non-Model``. The default is ``False``.
        high_surface_thick : float or str optional
            High surface thickness. The default is ``"0.07mm"``.
        low_surface_thick : float or str, optional
            Low surface thickness. The default is ``"0.07mm"``.
        internal_thick : float or str, optional
            Internal layer thickness. The default is ``"0.07mm"``.
        internal_layer_number : int, optional
            Number of internal layers. The default is ``2``.
        high_surface_coverage : float, optional
            High surface material coverage. The default is ``30``.
        low_surface_coverage : float, optional
            Low surface material coverage. The default is ``30``.
        internal_layer_coverage : float, optional
            Internal layer material coverage. The default is ``30``.
        trace_material : str, optional
            Trace material. The default is ``"Cu-Pure"``.
        substrate_material : str, optional
            Substrate material. The default is ``"FR-4"``.
        create_board : bool, optional
            Whether to create the board. The default is ``True``.
        model_board_as_rect : bool, optional
            Whether to create the board as a rectangle. The default is ``False``.
        model_device_as_rect : bool, optional
            Whether to create the components as rectangles. The default is ``True``.
        cutoff_height : str or float, optional
            Cutoff height. The default is ``None``.
        component_lib : str, optional
            Full path to the component library.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ImportIDF
        """
        ...
    
    @pyaedt_function_handler()
    def create_two_resistor_network_block(self, object_name, pcb, power, rjb, rjc): # -> BoundaryObject:
        """Function to create 2-Resistor network object.

        Parameters
        ----------
        object_name : str
            name of the object (3D block primitive) on which 2-R network is to be created
        pcb : str
            name of board touching the network block. If the board is a PCB 3D component, enter name of
            3D component instance
        power : float
            junction power in [W]
        rjb : float
            Junction to board thermal resistance in [K/W]
        rjc : float
            Junction to case thermal resistance in [K/W]

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.

        References
        ----------
        >>> oModule.AssignNetworkBoundary

        Examples
        --------
        >>> board = icepak.modeler.create_box([0, 0, 0], [50, 100, 2], "board", "copper")
        >>> box = icepak.modeler.create_box([20, 20, 2], [10, 10, 3], "network_box1", "copper")
        >>> network_block = icepak.create_two_resistor_network_block("network_box1", "board", "5W", 2.5, 5)
        >>> network_block.props["Nodes"]["Internal"][0]
        '5W'
        """
        ...
    
    @pyaedt_function_handler(htc_dataset="htc")
    def assign_stationary_wall(self, geometry, boundary_condition, name=..., temperature=..., heat_flux=..., thickness=..., htc=..., ref_temperature=..., material=..., radiate=..., radiate_surf_mat=..., ht_correlation=..., ht_correlation_type=..., ht_correlation_fluid=..., ht_correlation_flow_type=..., ht_correlation_flow_direction=..., ht_correlation_value_type=..., ht_correlation_free_stream_velocity=..., ht_correlation_surface=..., ht_correlation_amb_temperature=..., shell_conduction=..., ext_surf_rad=..., ext_surf_rad_material=..., ext_surf_rad_ref_temp=..., ext_surf_rad_view_factor=...):
        """Assign surface wall boundary condition.

        Parameters
        ----------
        geometry : str or int
            Name of the surface object or ID of the face.
        boundary_condition : str
            Type of the boundary condition. Options are ``"Temperature"``, ``"Heat Flux"``,
            or ``"Heat Transfer Coefficient"``.
        name : str, optional
            Name of the boundary condition. The default is ``None``.
        temperature : str or float or dict or BoundaryDictionary, optional
            Temperature to assign to the wall. This parameter is relevant if
            ``ext_condition="Temperature"``. If a float value is specified, the
            unit is degrees Celsius. Assign a transient condition using the
            result of a function with the ``create_*_transient_assignment`` pattern.
            The default is ``"0cel"``.
        heat_flux : str or float or dict or BoundaryDictionary, optional
            Heat flux to assign to the wall. This parameter is relevant if
            ``ext_condition="Temperature"``. If a float value is specified,
            the unit is irrad_W_per_m2. Assign a transient condition using the
            result of a function with the ``create_*_transient_assignment`` pattern.
            the unit is ``irrad_W_per_m2``. Assign a transient condition using the
            result of a function with the ``create_*_transient_assignment`` pattern.
            The default is ``"0irrad_W_per_m2"``.
        htc : str or float or dict or BoundaryDictionary, optional
            Heat transfer coefficient to assign to the wall. This parameter
            is relevant if ``ext_condition="Heat Transfer Coefficient"``. If a
            float value is specified, the unit is ``w_per_m2kel``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            the ``create_*_transient_assignment`` pattern.
            Assign a temperature-dependent condition using the result of a
            function with the pattern ``create_temp_dep_assignment``.
            The default is ``"0w_per_m2kel"``.
        thickness : str or float, optional
            Thickness of the wall. If a float value is specified, the unit is
            the current unit system set in Icepak. The default is ``"0mm"``.
        ref_temperature : str or float, optional
            Reference temperature for the definition of the heat transfer
            coefficient. This parameter is relevant if
            ``ext_condition="Heat Transfer Coefficient"``. The default
            is ``"AmbientTemp"``.
        material : str, optional
            Solid material of the wall. This parameter is relevant if
            the thickness is a non-zero value. The default is ``"Al-Extruded"``.
        radiate : bool, optional
            Whether to enable the inner surface radiation option. The default is ``False``.
        radiate_surf_mat : str, optional
            Surface material used for inner surface radiation. Relevant if it is enabled.
            The default is ``"Steel-oxidised-surface``.
        ht_correlation : bool, optional
            Whether to use the correlation option to compute the heat transfer coefficient.
            The default is ``False``.
        ht_correlation_type : str, optional
            The correlation type for the heat transfer coefficient. Options are
            "Natural Convection" and "Forced Convection". This parameter is
            relevant if ``ht_correlation=True``. The default is ``"Natural Convection"``.
        ht_correlation_fluid : str, optional
            Fluid for the correlation option. This parameter is relevant if
            ``ht_correlation=True``. The default is ``"air"``.
        ht_correlation_flow_type : str, optional
            Type of flow for the correlation option. This parameter
            is relevant if ``ht_correlation=True``. Options are ``"Turbulent"``
            and ``"Laminar"``. The default is ``"Turbulent"``.
        ht_correlation_flow_direction : str, optional
            Flow direction for the correlation option. This parameter is relevant if
            ``ht_correlation_type="Forced Convection"``. The default is ``"X"``.
        ht_correlation_value_type : str, optional
             Value type for the forced convection correlation option.
             This parameter is relevant if ``ht_correlation_type="Forced Convection"``.
             Options are "Average Values" and "Local Values". The default is
             ``"Average Values"``.
        ht_correlation_free_stream_velocity : str or float, optional
             Free stream flow velocity. This parameter is relevant if
             ``ht_correlation_type="Forced Convection"``. If a float value
             is specified, the default unit is ``m_per_sec``. The default is
             ``"1m_per_sec"``.
        ht_correlation_surface : str, optional
            Surface type for the natural convection correlation option.
            This parameter is relevant if ``ht_correlation_type="Natural Convection"``.
            Options are "Top", "Bottom", and "Vertical". The default is ``"Vertical"``.
        ht_correlation_amb_temperature : str or float, optional
            Ambient temperature for the natural convection correlation option.
            This parameter is relevant if ``ht_correlation_type="Natural Convection"``.
            If a float value is specified, the default unit is degrees Celsius.
            The default is ``"AmbientTemp"``.
        shell_conduction : bool, optional
            Whether to use the shell conduction option. The default is ``False``.
        ext_surf_rad : bool, optional
            Whether to use the external surface radiation option. This parameter
            is relevant if ``ext_condition="Heat Transfer Coefficient"``. The
            default is ``False``.
        ext_surf_rad_material : str, optional
            Surface material for the external surface radiation option. This parameter
            is relevant if ``ext_surf_rad=True``. The default is ``"Stainless-steel-cleaned"``.
        ext_surf_rad_ref_temp : str or float or dict or BoundaryDictionary, optional
             Reference temperature for the external surface radiation option. This parameter
             is relevant if ``ext_surf_rad=True``.  If a float value is specified, the default
             unit is degrees Celsius.
             Assign a transient condition using the result of a function with
             the pattern  ``create_*_transient_assignment``.
             The default is ``"AmbientTemp"``.
        ext_surf_rad_view_factor : str or float, optional
            View factor for the external surface radiation option. The default is ``"1"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignStationaryWallBoundary
        """
        ...
    
    @pyaedt_function_handler()
    def assign_stationary_wall_with_heat_flux(self, geometry, name=..., heat_flux=..., thickness=..., material=..., radiate=..., radiate_surf_mat=..., shell_conduction=...):
        """Assign a surface wall boundary condition with specified heat flux.

        Parameters
        ----------
        geometry : str or int
            Name of the surface object or ID of the face.
        name : str, optional
            Name of the boundary condition. The default is ``None``.
        heat_flux : str or float or dict or BoundaryDictionary, optional
            Heat flux to assign to the wall. This parameter is relevant if
            ``ext_condition="Temperature"``. If a float value is specified,
            the unit is ``irrad_W_per_m2``. Assign a transient condition using the
            result of a function with the ``create_*_transient_assignment`` pattern.
            The default is ``"0irrad_W_per_m2"``.
        thickness : str or float, optional
            Thickness of the wall. If a float value is specified, the unit is the
            current unit system set in Icepak. The default is ``"0mm"``.
        material : str, optional
            Solid material of the wall. This parameter is relevant if the thickness
            is non-zero. The default is ``"Al-Extruded"``.
        radiate : bool, optional
            Whether to enable the inner surface radiation option. The default is ``False``.
        radiate_surf_mat : str, optional
            Surface material for the inner surface radiation. This parameter is
            relevant if ``radiate`` is enabled. The default is ``"Steel-oxidised-surface``.
        shell_conduction : bool, optional
            Whether to use the shell conduction option. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.

        References
        ----------
        >>> oModule.AssignStationaryWallBoundary
        """
        ...
    
    @pyaedt_function_handler()
    def assign_stationary_wall_with_temperature(self, geometry, name=..., temperature=..., thickness=..., material=..., radiate=..., radiate_surf_mat=..., shell_conduction=...):
        """Assign a surface wall boundary condition with specified temperature.

        Parameters
        ----------
        geometry : str or int
            Name of the surface object or ID of the face.
        name : str, optional
            Name of the boundary condition. The default is ``None``.
        temperature : str or float or dict or BoundaryDictionary, optional
            Temperature to assign to the wall. This parameter is relevant if
            ``ext_condition="Temperature"``. If a float value is specified, the
            unit is degrees Celsius. Assign a transient condition using the
            result of a function with the ``create_*_transient_assignment`` pattern.
            The default is ``"0cel"``.
        thickness : str or float, optional
            Thickness of the wall. If a float value is specified used, the unit is the
            current unit system set in Icepak. The default is ``"0mm"``.
        material : str, optional
            Solid material of the wall. This parameter is relevant if the
            thickness is a non-zero value. The default is ``"Al-Extruded"``.
        radiate : bool, optional
            Whether to enable the inner surface radiation option. The default is ``False``.
        radiate_surf_mat : str, optional
            Surface material to use for inner surface radiation. This parameter is relevant
            if ``radiate`` is enabled. The default is ``"Steel-oxidised-surface``.
        shell_conduction : bool, optional
            Whether to use the shell conduction option. The default is ``False``.


        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.

        References
        ----------
        >>> oModule.AssignStationaryWallBoundary
        """
        ...
    
    @pyaedt_function_handler(htc_dataset="htc")
    def assign_stationary_wall_with_htc(self, geometry, name=..., thickness=..., material=..., htc=..., ref_temperature=..., ht_correlation=..., ht_correlation_type=..., ht_correlation_fluid=..., ht_correlation_flow_type=..., ht_correlation_flow_direction=..., ht_correlation_value_type=..., ht_correlation_free_stream_velocity=..., ht_correlation_surface=..., ht_correlation_amb_temperature=..., ext_surf_rad=..., ext_surf_rad_material=..., ext_surf_rad_ref_temp=..., ext_surf_rad_view_factor=..., radiate=..., radiate_surf_mat=..., shell_conduction=...):
        """Assign a surface wall boundary condition with a given heat transfer coefficient.

        Parameters
        ----------
        geometry : str or int
            Name of the surface object or id of the face.
        name : str, optional
            Name of the boundary condition. The default is ``None``.
        htc : str or float or dict or BoundaryDictionary, optional
            Heat transfer coefficient to assign to the wall. This parameter
            is relevant if ``ext_condition="Heat Transfer Coefficient"``. If a
            float value is specified, the unit is ``w_per_m2kel``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            Assign a temperature-dependent condition using the result of a
            function with the pattern ``create_temp_dep_assignment``.
            The default is ``"0w_per_m2kel"``.
        thickness : str or float, optional
            Thickness of the wall. If a float value is specified, the unit is the
            current unit system set in Icepak. The default is ``"0mm"``.
        ref_temperature : str or float, optional
            Reference temperature for the definition of the heat transfer
            coefficient. This parameter is relevant if
            ``ext_condition="Heat Transfer Coefficient"``. The default is ``"AmbientTemp"``.
        material : str, optional
            Solid material of the wall. This parameter is relevant if the thickness
            is non-zero. The default is ``"Al-Extruded"``.
        radiate : bool, optional
            Whether to enable the inner surface radiation option. The default is ``False``.
        radiate_surf_mat : str, optional
            Surface material for inner surface radiation. This parameter is relevant
            if ``radiate`` is enabled. The default is ``"Steel-oxidised-surface``.
        ht_correlation : bool, optional
            Whether to use the correlation option to compute the heat transfer
            coefficient. The default is ``False``.
        ht_correlation_type : str, optional
            Correlation type for the correlation option. This parameter is
            relevant if ``ht_correlation=True``. Options are "Natural Convection"
            and "Forced Convection". The default is ``"Natural Convection"``.
        ht_correlation_fluid : str, optional
            Fluid for the correlation option. This parameter is relevant if
            ``ht_correlation=True``. The default is ``"air"``.
        ht_correlation_flow_type : str, optional
            Type of flow for the correlation option. This parameter is relevant
            if ``ht_correlation=True``. Options are ``"Turbulent"`` and ``"Laminar"``.
            The default is ``"Turbulent"``.
        ht_correlation_flow_direction : str, optional
            Flow direction for the correlation option. This parameter is relevant
            if ``ht_correlation_type="Forced Convection"``. The default is ``"X"``.
        ht_correlation_value_type : str, optional
            Value type for the forced convection correlation option. This
            parameter is relevant if ``ht_correlation_type="Forced Convection"``.
            Options are ``"Average Values"`` and ``"Local Values"``. The default
            is ``"Average Values"``.
        ht_correlation_free_stream_velocity : str or float, optional
            Free stream flow velocity. This parameter is relevant if
            ``ht_correlation_type="Forced Convection"``.  If a float
            value is specified, ``m_per_sec`` is the unit. The default
            is ``"1m_per_sec"``.
        ht_correlation_surface : str, optional
            Surface for the natural convection correlation option. This parameter is
            relevant if ``ht_correlation_type="Natural Convection"``. Options are "Top",
            "Bottom", and "Vertical". The default is ``"Vertical"``.
        ht_correlation_amb_temperature : str or float, optional
            Ambient temperature for the natural convection correlation option.
            This parameter is relevant if ``ht_correlation_type="Natural Convection"``.
            If a float value is specified, the default unit is degrees Celsius. The
            default is ``"AmbientTemp"``.
        shell_conduction : bool, optional
            Whether to use the shell conduction option. The default is ``False``.
        ext_surf_rad : bool, optional
            Whether to use the external surface radiation option. This parameter
            is relevant if ``ext_condition="Heat Transfer Coefficient"``. The default
            is ``False``.
        ext_surf_rad_material : str, optional
            Surface material for the external surface radiation option. This parameter is
            relevant if ``ext_surf_rad=True``. The default is ``"Stainless-steel-cleaned"``.
        ext_surf_rad_ref_temp : str or float or dict or BoundaryDictionary, optional
            Reference temperature for the external surface radiation option. This parameter
            is relevant if ``ext_surf_rad=True``.  If a float value is specified, the default
            unit is degrees Celsius.
            Assign a transient condition using the result of a function with
            the pattern  ``create_*_transient_assignment``.
            The default is ``"AmbientTemp"``.
        ext_surf_rad_view_factor : str or float, optional
            View factor for the external surface radiation option. The default is ``"1"``.


        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.

        References
        ----------
        >>> oModule.AssignStationaryWallBoundary
        """
        ...
    
    @pyaedt_function_handler(setupname="name", setuptype="setup_type")
    def create_setup(self, name=..., setup_type=..., **kwargs): # -> SetupHFSSAuto | SetupSBR | SetupMaxwell | SetupQ3D | SetupIcepak | SetupHFSS:
        """Create an analysis setup for Icepak.
        Optional arguments are passed along with ``setup_type`` and ``name``.  Keyword
        names correspond to the ``setup_type``
        corresponding to the native AEDT API.  The list of
        keywords here is not exhaustive.

        .. note::
           This method overrides the ``Analysis.setup()`` method for the HFSS app.

        Parameters
        ----------
        name : str, optional
            Name of the setup.
        setup_type : int, str, optional
            Type of the setup. Options are ``"IcepakSteadyState"``
            and ``"IcepakTransient"``. The default is ``"IcepakSteadyState"``.
        **kwargs : dict, optional
            Available keys depend on setup chosen.
            For more information, see
            :doc:`../SetupTemplatesIcepak`.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.SetupHFSS`
            3D Solver Setup object.

        References
        ----------
        >>> oModule.InsertSetup

        Examples
        --------

        >>> from ansys.aedt.core import Icepak
        >>> app = Icepak()
        >>> app.create_setup(setup_type="Transient", name="Setup1", MaxIterations=20)

        """
        ...
    
    @pyaedt_function_handler()
    def assign_source(self, assignment, thermal_condition, assignment_value, boundary_name=..., radiate=..., voltage_current_choice=..., voltage_current_value=...): # -> BoundaryObject | None:
        """Create a source power for a face.

        Parameters
        ----------
        assignment : int or str or list
            Integer indicating a face ID or a string indicating an object name. A list of face
            IDs or object names is also accepted.
        thermal_condition : str
            Thermal condition. Accepted values are ``"Total Power"``, ``"Surface Heat"``,
            ``"Temperature"``.
        assignment_value : str or dict or BoundaryDictionary
            Value and units of the input power, surface heat, or temperature (depending on
            ``thermal_condition``).
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            Assign a temperature-dependent condition using the result of a
            function with the ``create_temp_dep_assignment`` pattern.
        boundary_name : str, optional
            Name of the source boundary. The default is ``None``, in which case the boundary name
            is generated automatically.
        radiate : bool, optional
            Whether to enable radiation. The default is ``False``.
        voltage_current_choice : str or bool, optional
            Whether to assign the ``"Voltage"`` or ``"Current"`` option. The default is
            ``False``, in which case neither option is assigned.
        voltage_current_value : str or dict or BoundaryDictionary, optional
            Value and units of current or voltage assignment.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignSourceBoundary

        Examples
        --------

        >>> from ansys.aedt.core import Icepak
        >>> app = Icepak()
        >>> box = app.modeler.create_box([0, 0, 0], [20, 20, 20], name="box")
        >>> ds = app.create_dataset1d_design("Test_DataSet", [1, 2, 3], [3, 4, 5])
        >>> app.solution_type = "Transient"
        >>> b = app.assign_source(
        ...     "box",
        ...     "Total Power",
        ...     assignment_value={"Type": "Temp Dep", "Function": "Piecewise Linear", "Values": "Test_DataSet"},
        ... )

        """
        ...
    
    @pyaedt_function_handler()
    def create_network_object(self, name=..., props=..., create=...): # -> NetworkObject:
        """Create a thermal network.

        Parameters
        ----------
        name : str, optional
           Name of the network object. The default is ``None``, in which case
           the name is generated autotmatically.
        props : dict, optional
            Dictionary with information required by the ``oModule.AssignNetworkBoundary``
            object. The default is ``None``.
        create : bool, optional
            Whether to create immediately the network inside AEDT. The
            default is ``False``, which means the network can be modified
            from PyAEDT functions and the network created only afterwards.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.NetworkObject`
            Boundary network object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignNetworkBoundary

        Examples
        --------

        >>> from ansys.aedt.core import Icepak
        >>> app = Icepak()
        >>> network = app.create_network_object()
        """
        ...
    
    @pyaedt_function_handler()
    def create_resistor_network_from_matrix(self, sources_power, faces_ids, matrix, network_name=..., node_names=...): # -> NetworkObject | None:
        """Create a thermal network.

        Parameters
        ----------
        sources_power : list of str or list of float
            List containing all the power value of the internal nodes. If the element of
            the list is a float, the ``W`` unit is used.  Otherwise, the
            unit specified in the string is used.
        faces_ids :  list of int
            All the face IDs that are network nodes.
        matrix : list of list
            Strict lower-square triangular matrix containing the link values between
            the nodes of the network. If the element of the matrix is a float, the
            ``cel_per_w`` unit is used. Otherwise, the unit specified
            in the string is used. The element of the matrix in the i-th row
            and j-th column is the link value between the i-th node and j-th node.
            The list of nodes is automatically created from the lists for the
            ``sources_power`` and ``faces_ids`` parameters (in this order).
        network_name : str, optional
            Name of the network boundary. The default is ``None``, in which
            case the boundary name is generated automatically.
        node_names : list of str, optional
            Name of all the nodes in the network.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.BoundaryNetwork`
            Boundary network object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignNetworkBoundary

        Examples
        --------

        >>> from ansys.aedt.core import Icepak
        >>> app = Icepak()
        >>> box = app.modeler.create_box([0, 0, 0], [20, 50, 80])
        >>> faces_ids = [face.id for face in box.faces][0, 1]
        >>> sources_power = [3, "4mW"]
        >>> matrix = [[0, 0, 0, 0],
        >>>           [1, 0, 0, 0],
        >>>           [0, 3, 0, 0],
        >>>           [1, 2, 4, 0]]
        >>> boundary = app.assign_resistor_network_from_matrix(sources_power, faces_ids, matrix)
        """
        ...
    
    @pyaedt_function_handler
    def assign_solid_block(self, object_name, power_assignment, boundary_name=..., htc=..., ext_temperature=...): # -> BoundaryObject | None:
        """
        Assign block boundary for solid objects.

        Parameters
        ----------
        object_name : str or list
            Object name or a list of object names.
        power_assignment : str or dict or BoundaryDictionary
            String with the value and units of the power assignment or with
            ``" If you don't want to assign a specific power but set a joule heating
            dissipation, use ``power_assignment="Joule Heating"``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            Assign a temperature-dependent condition using the result of a
            function with the ``create_temp_dep_assignment`` pattern.
        boundary_name : str, optional
            Name of the source boundary. The default is ``None``, in which case the
            boundary name is automatically generated.
        htc : float, str, or dict or BoundaryDictionary, optional
            String with the value and units of the heat transfer coefficient for the
            external conditions. If a float is provided, the unit is ``"w_per_m2kel"``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern .
            Assign a temperature-dependent condition using the result of a
            function with the pattern ``create_temp_dep_assignment``.
            The default is ``None``, in which case no external condition is applied.
        ext_temperature : float, str or dict or BoundaryDictionary, optional
            String with the value and units of temperature for the external conditions.
            If a float is provided, the ``"cel"`` unit is used.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"AmbientTemp"``, which is used if the ``htc`` parameter is not
            set to ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignBlockBoundary

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> ipk.solution_type = "Transient"
        >>> box = ipk.modeler.create_box([5, 5, 5], [1, 2, 3], "BlockBox3", "copper")
        >>> power_dict = {"Type": "Transient", "Function": "Sinusoidal", "Values": ["0W", 1, 1, "1s"]}
        >>> block = ipk.assign_solid_block("BlockBox3", power_dict)

        """
        ...
    
    @pyaedt_function_handler
    def assign_hollow_block(self, object_name, assignment_type, assignment_value, boundary_name=..., external_temperature=...): # -> BoundaryObject | None:
        """Assign block boundary for hollow objects.

        Parameters
        ----------
        object_name : str or list
            Object name or a list of object names.
        assignment_type : str
            Type of the boundary assignment. Options are ``"Heat Transfer Coefficient"``,
            ``"Heat Flux"``, ``"Temperature"``, and ``"Total Power"``.
        assignment_value : str or dict or BoundaryDictionary
            String with a value and units of the assignment. If ``"Total Power"`` is
            the assignment type, ``"Joule Heating"`` can be used.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            Assign a temperature-dependent condition using the result of a
            function with the pattern ``create_temp_dep_assignment``.
        boundary_name : str, optional
            Name of the source boundary. The default is ``None``, in which case the
            boundary is automatically generated.
        external_temperature : str, dict or float or BoundaryDictionary, optional
            String with the value and unit of the temperature for the heat transfer
            coefficient. If a float value is specified, the ``"cel"`` unit is automatically
            added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"AmbientTemp"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignBlockBoundary

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> ipk.solution_type = "Transient"
        >>> box = ipk.modeler.create_box([5, 5, 5], [1, 2, 3], "BlockBox5", "copper")
        >>> box.solve_inside = False
        >>> temp_dict = {"Type": "Transient", "Function": "Square Wave", "Values": ["1cel", "0s", "1s", "0.5s", "0cel"]}
        >>> block = ipk.assign_hollow_block("BlockBox5", "Heat Transfer Coefficient", "1w_per_m2kel", "Test", temp_dict)

        """
        ...
    
    @pyaedt_function_handler(timestep="time_step")
    def get_fans_operating_point(self, export_file=..., setup_name=..., time_step=..., design_variation=...): # -> list[Any]:
        """
        Get operating point of the fans in the design.

        Parameters
        ----------
        export_file : str, optional
            Name of the file in which the fans' operating point is saved. The default is
            ``None``, in which case the filename is automatically generated.
        setup : str, optional
            Setup name from which to determine the fans' operating point. The default is
            ``None``, in which case the first available setup is used.
        time_step : str, optional
            Time, with units, at which to determine the fans' operating point. The default
            is ``None``, in which case the first available timestep is used. This argument is
            only relevant in transient simulations.
        design_variation : str, optional
            Design variation from which to determine the fans' operating point. The default is
            ``None``, in which case the nominal variation is used.

        Returns
        -------
        list
            First element of the list is the csv filename, the second and third element of
            the list are the quantities with units describing the fan operating point,
            the fourth element contains the dictionary with the name of the fan instances
            as keys and list with volumetric flow rates and pressure rise floats associated
            with the operating points.

        References
        ----------
        >>> oModule.ExportFanOperatingPoint

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> ipk.create_fan()
        >>> filename, vol_flow_name, p_rise_name, op_dict = ipk.post.get_fans_operating_point()
        """
        ...
    
    @pyaedt_function_handler()
    def assign_free_opening(self, assignment, boundary_name=..., temperature=..., radiation_temperature=..., flow_type=..., pressure=..., no_reverse_flow=..., velocity=..., mass_flow_rate=..., inflow=..., direction_vector=...): # -> BoundaryObject | None:
        """Assign free opening boundary condition.

        Parameters
        ----------
        assignment : int or str or list
            Integer indicating a face ID or a string indicating an object name. A list of face
            IDs or object names is also accepted.
        boundary_name : str, optional
            Boundary name. Default is ``None``, in which case the name is generated automatically.
        temperature : str or float or dict or BoundaryDictionary, optional
            Prescribed temperature at the boundary. If a string is set,  a variable name or a
            number with the unit is expected. If a float is set, the unit ``'cel'`` is
            automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        radiation_temperature : str or floaty, optional
            Prescribed radiation temperature at the boundary. If a string is set,  a variable name
            or a number with the unit is expected. If a float is set, the unit ``'cel'`` is
            automatically added.
            Default is ``"AmbientRadTemp"``.
        flow_type : int or str, optional
            Prescribed radiation flow type at the boundary. Available options are ``"Pressure"``,
            ``"Velocity"``, and ``"Mass Flow"``. The default is ``"Pressure"``.
        pressure : float or str or dict or BoundaryDictionary, optional
            Prescribed pressure (static or total coherently with flow type) at the boundary. If a
            string is set, a variable name or a number with the unit is expected. If a float is set,
            the unit ``'pascal'`` is automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"AmbientPressure"``.
        no_reverse_flow : bool, optional
            Option to block reverse flow at the boundary. Default is ``False``.
        velocity : list, optional
            Prescribed velocity at the boundary. If a list of strings is set, a variable name or a number
             with the unit is expected for each element. If list of floats is set, the unit ``'m_per_sec'``
            is automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern as an element of the list.
            Default is ``["0m_per_sec", "0m_per_sec", "0m_per_sec"]``.
        mass_flow_rate : float or str or dict or BoundaryDictionary, optional
            Prescribed pressure (static or total coherently with flow type) at the boundary. If a
            string is set, a variable name or a number with the unit is expected. If a float is set,
            the unit ``'kg_per_s'`` is automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            Default is ``"0kg_per_s"``.
        inflow : bool, optional
            Prescribe if the imposed mass flow is an inflow or an outflow. Default is ``"True"``,
            in which case an inflow is prescribed.
        direction_vector : list, optional
            Prescribe the direction of the massflow. Default is ``"None"``, in which case a
            massflow normal to the boundary is prescribed.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        oModule.AssignOpeningBoundary

        Examples
        --------
        >>> import ansys.aedt.core
        >>> icepak = ansys.aedt.core.Icepak()
        >>> f_id = icepak.modeler["Region"].faces[0].id
        >>> icepak.assign_free_opening(f_id)

        """
        ...
    
    @pyaedt_function_handler()
    def assign_pressure_free_opening(self, assignment, boundary_name=..., temperature=..., radiation_temperature=..., pressure=..., no_reverse_flow=...): # -> BoundaryObject | None:
        """
        Assign free opening boundary condition.

        Parameters
        ----------
        assignment : int or str or list
            Integer indicating a face ID or a string indicating an object name. A list of face
            IDs or object names is also accepted.
        boundary_name : str, optional
            Boundary name. Default is ``None``, in which case the name is generated automatically.
        temperature : str or float or dict or BoundaryDictionary, optional
            Prescribed temperature at the boundary. If a string is set,  a variable name or a
            number with the unit is expected. If a float is set, the unit ``'cel'`` is
            automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        radiation_temperature : str or floaty, optional
            Prescribed radiation temperature at the boundary. If a string is set,  a variable name
            or a number with the unit is expected. If a float is set, the unit ``'cel'`` is
            automatically added.
            Default is ``"AmbientRadTemp"``.
        pressure : float or str or dict or BoundaryDictionary, optional
            Prescribed pressure (static or total coherently with flow type) at the boundary. If a
            string is set, a variable name or a number with the unit is expected. If a float is set,
            the unit ``'pascal'`` is automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"AmbientPressure"``.
        no_reverse_flow : bool, optional
            Option to block reverse flow at the boundary. Default is ``False``.


        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        oModule.AssignOpeningBoundary

        Examples
        --------
        >>> import ansys.aedt.core
        >>> icepak = ansys.aedt.core.Icepak()
        >>> f_id = icepak.modeler["Region"].faces[0].id
        >>> icepak.assign_pressure_free_opening(f_id)
        """
        ...
    
    @pyaedt_function_handler()
    def assign_velocity_free_opening(self, assignment, boundary_name=..., temperature=..., radiation_temperature=..., pressure=..., velocity=...): # -> BoundaryObject | None:
        """
        Assign free opening boundary condition.

        Parameters
        ----------
        assignment : int or str or list
            Integer indicating a face ID or a string indicating an object name. A list of face
            IDs or object names is also accepted.
        boundary_name : str, optional
            Boundary name. Default is ``None``, in which case the name is generated automatically.
        temperature : str or float or dict or BoundaryDictionary, optional
            Prescribed temperature at the boundary. If a string is set,  a variable name or a
            number with the unit is expected. If a float is set, the unit ``'cel'`` is
            automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        radiation_temperature : str or floaty, optional
            Prescribed radiation temperature at the boundary. If a string is set,  a variable name
            or a number with the unit is expected. If a float is set, the unit ``'cel'`` is
            automatically added.
            Default is ``"AmbientRadTemp"``.
        pressure : float or str or dict or BoundaryDictionary, optional
            Prescribed pressure (static or total coherently with flow type) at the boundary. If a
            string is set, a variable name or a number with the unit is expected. If a float is set,
            the unit ``'pascal'`` is automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"AmbientPressure"``.
        velocity : list, optional
            Prescribed velocity at the boundary. If a list of strings is set, a variable name or a number
             with the unit is expected for each element. If list of floats is set, the unit ``'m_per_sec'``
            is automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern as an element of the list.
            Default is ``["0m_per_sec", "0m_per_sec", "0m_per_sec"]``.


        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        oModule.AssignOpeningBoundary

        Examples
        --------
        >>> import ansys.aedt.core
        >>> icepak = ansys.aedt.core.Icepak()
        >>> f_id = icepak.modeler["Region"].faces[0].id
        >>> icepak.assign_velocity_free_opening(f_id)
        """
        ...
    
    @pyaedt_function_handler()
    def assign_mass_flow_free_opening(self, assignment, boundary_name=..., temperature=..., radiation_temperature=..., pressure=..., mass_flow_rate=..., inflow=..., direction_vector=...): # -> BoundaryObject | None:
        """
        Assign free opening boundary condition.

        Parameters
        ----------
        assignment : int or str or list
            Integer indicating a face ID or a string indicating an object name. A list of face
            IDs or object names is also accepted.
        boundary_name : str, optional
            Boundary name. The default is ``None``, in which case the name is generated automatically.
        temperature : str or float or dict or BoundaryDictionary, optional
            Prescribed temperature at the boundary. If a string is set,  a variable name or a
            number with the unit is expected. If a float is set, the unit ``'cel'`` is
            automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        radiation_temperature : str or floaty, optional
            Prescribed radiation temperature at the boundary. If a string is set,  a variable name
            or a number with the unit is expected. If a float is set, the unit ``'cel'`` is
            automatically added.
            Default is ``"AmbientRadTemp"``.
        pressure : float or str or dict or BoundaryDictionary, optional
            Prescribed pressure (static or total coherently with flow type) at the boundary. If a
            string is set, a variable name or a number with the unit is expected. If a float is set,
            the unit ``'pascal'`` is automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"AmbientPressure"``.
        mass_flow_rate : float or str or dict or BoundaryDictionary, optional
            Prescribed pressure (static or total coherently with flow type) at the boundary. If a
            string is set, a variable name or a number with the unit is expected. If a float is set,
            the unit ``'kg_per_s'`` is automatically added.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"0kg_per_s"``.
        inflow : bool, optional
            Prescribe if the imposed mass flow is an inflow or an outflow. Default is ``"True"``,
            in which case an inflow is prescribed.
        direction_vector : list, optional
            Prescribe the direction of the massflow. Default is ``"None"``, in which case a
            massflow normal to the boundary is prescribed.


        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        oModule.AssignOpeningBoundary

        Examples
        --------
        >>> import ansys.aedt.core
        >>> icepak = ansys.aedt.core.Icepak()
        >>> f_id = icepak.modeler["Region"].faces[0].id
        >>> icepak.assign_mass_flow_free_opening(f_id)
        """
        ...
    
    @pyaedt_function_handler()
    def assign_symmetry_wall(self, geometry, boundary_name=...): # -> BoundaryObject:
        """Assign symmetry wall boundary condition.

        Parameters
        ----------
        geometry : str or int or list
            Surface object name or face ID. A list of surface object names
            or face IDs is also acceptable.
        boundary_name : str, optional
            Name of the boundary condition. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignSymmetryWallBoundary
        """
        ...
    
    @pyaedt_function_handler()
    def assign_adiabatic_plate(self, assignment, high_radiation_dict=..., low_radiation_dict=..., boundary_name=...): # -> BoundaryObject:
        """
        Assign adiabatic plate boundary condition.

        Parameters
        ----------
        assignment : list
            List of strings containing object names, or list of integers
            containing face ids or list of faces or objects.
        high_radiation_dict : dictionary, optional
            Dictionary containing the radiation assignment for the high side.
            The two keys that are always required are ``"RadiateTo"`` and
            ``"Surface Material"``. If the value of ``"RadiateTo"`` is
            ``"RefTemperature"``, then the others required keys are
            ``"Ref. Temperature"`` and ``"View Factor"``. The other possible
            value of ``"RadiateTo"`` is ``"AllObjects"``. Default is ``None``
            in which case the radiation on the high side is set to off.
        low_radiation_dict : dictionary, optional
            Dictionary containing the radiation assignment for the low side.
            The dictionary structure is the same of ``high_radiation_dict``.
            Default is ``None``, in which case the radiation on the low side
            is set to off.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignAdiabaticPlateBoundary

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> box = ipk.modeler.create_box([5, 5, 5], [1, 2, 3], "Box", "copper")
        >>> ad_plate = ipk.assign_adiabatic_plate(box.top_face_x, None, {"RadiateTo": "AllObjects"})

        """
        ...
    
    @pyaedt_function_handler()
    def assign_resistance(self, objects, boundary_name=..., total_power=..., fluid=..., laminar=..., loss_type=..., linear_loss=..., quadratic_loss=..., linear_loss_free_area_ratio=..., quadratic_loss_free_area_ratio=..., power_law_constant=..., power_law_exponent=..., loss_curves_x=..., loss_curves_y=..., loss_curves_z=..., loss_curve_flow_unit=..., loss_curve_pressure_unit=...): # -> BoundaryObject:
        """
        Assign resistance boundary condition.

        Parameters
        ----------
        objects : list or str
            A list of objects to which the resistance condition will be
            assigned. It can be a single object (a string) or multiple
            objects specified as a list.
        boundary_name : str, optional
            The name of the boundary object that will be created. If not
            provided, a unique name is generated. The default is ``None``.
        total_power : str, float, or dict or BoundaryDictionary, optional
            The total power transferred to the fluid through the resistance
            volume. It is specified as a string with a value and unit, a float
            where the default unit "W" is used.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            Default is ``"0W"``.
        fluid : str, optional
            The material of the volume to which the resistance is being
            assigned. Default is ``"air"``.
        laminar : bool, optional
            Whether the flow inside the volume must be treated as laminar or
            not. Default is ``False``.
        loss_type : str, optional
            Type of pressure loss model to be used. It can have one of the
            following values: ``"Device"``, ``"Power Law"``, and
            ``"Loss Curve"``. Default is ``"Device"``.
        linear_loss : list of floats or list of strings, optional
            Three values representing the linear loss coefficients in the X, Y,
            and Z directions. These coefficients can be expressed as floats, in
            which case the default unit ``"m_per_sec"`` will be used, or as
            strings. Relevant only if ``loss_type=="Device"``.  Default is
            ``"1m_per_sec"`` for all three directions.
        quadratic_loss : list of floats or list of strings, optional
            Three values representing the quadratic loss coefficients in the X,
            Y, and Z directions. Relevant only if ``loss_type=="Device"``.
            Default is ``1`` for all three directions.
        linear_loss_free_area_ratio : list of floats or list of strings, optional
            Three values representing the linear loss free area ratio in the X,
            Y, and Z directions. Relevant only if ``loss_type=="Device"``.
            Default is ``1`` for all three directions.
        quadratic_loss_free_area_ratio : list of floats or list of strings, optional
            Three values representing the quadratic loss coefficient for each
            direction (X, Y, Z) in the loss model. Relevant only if
            ``loss_type=="Device"``. Default is ``1`` for all three directions.
        power_law_constant : str or float, optional
            Specifies the coefficient in the power law equation for pressure loss. Default is ``1``.
        power_law_exponent : str or float, optional
            Specifies the exponent value in the power law equation for pressure loss calculation. Default is ``1``.
        loss_curves_x : list of lists of float
            List of two list defining the loss curve in the X direction. The
            first list contains the mass flow rate value of the curve while
            the second contains the pressure values. Units can be specified with
            the ``loss_curve_flow_unit`` and ``loss_curve_pressure_unit``
            parameters. Default is ``[[0,1],[0,1]]``.
        loss_curves_y : list of lists of float
            List of two list defining the loss curve in the Y direction. The
            first list contains the mass flow rate value of the curve while
            the second contains the pressure values. Units can be specified with
            the ``loss_curve_flow_unit`` and ``loss_curve_pressure_unit``
            parameters. Default is ``[[0,1],[0,1]]``.
        loss_curves_z : list of lists of float
            List of two list defining the loss curve in the Z direction. The
            first list contains the mass flow rate value of the curve while the
            second contains the pressure values. Units can be specified with the
            ``loss_curve_flow_unit`` and ``loss_curve_pressure_unit``
            parameters. Default is ``[[0,1],[0,1]]``.
        loss_curve_flow_unit : str, optional
            Specifies the unit of flow rate in the loss curvev (for all
            directions). Default is ``"m_per_sec"``.
        loss_curve_pressure_unit : str, optional
            Specifies the unit of pressure drop in the loss curve (for all
            directions). Default is ``"n_per_meter_sq"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignResistanceBoundary

        Examples
        --------
        """
        ...
    
    @pyaedt_function_handler()
    def assign_power_law_resistance(self, objects, boundary_name=..., total_power=..., fluid=..., laminar=..., power_law_constant=..., power_law_exponent=...): # -> BoundaryObject:
        """
        Assign resistance boundary condition prescribing a power law.

        Parameters
        ----------
        objects : list or str
            A list of objects to which the resistance condition will be
            assigned. It can be a single object (a string) or multiple
            objects specified as a list.
        boundary_name : str, optional
            The name of the boundary object that will be created. If not
            provided, a unique name is generated. The default is ``None``.
        total_power : str, float, or dict or BoundaryDictionary, optional
            The total power transferred to the fluid through the resistance
            volume. It is specified as a string with a value and unit or a float
            where the default unit ``"W"`` is used.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"0W"``.
        fluid : str, optional
            Material of the volume to assign the resistance to. The
            default is ``"air"``.
        laminar : bool, optional
            Whether the flow inside the volume must be treated as laminar or
            not. Default is ``False``.
        power_law_constant : str or float, optional
            Specifies the coefficient in the power law equation for pressure
            loss. Default is ``1``.
        power_law_exponent : str or float, optional
            Specifies the exponent value in the power law equation for pressure
            loss calculation. Default is ``1``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignResistanceBoundary

        Examples
        --------
        """
        ...
    
    @pyaedt_function_handler()
    def assign_loss_curve_resistance(self, objects, boundary_name=..., total_power=..., fluid=..., laminar=..., loss_curves_x=..., loss_curves_y=..., loss_curves_z=..., loss_curve_flow_unit=..., loss_curve_pressure_unit=...): # -> BoundaryObject:
        """
        Assign resistance boundary condition prescribing a loss curve.

        Parameters
        ----------
        objects : list or str
            A list of objects to which the resistance condition will be
            assigned. It can be a single object (a string) or multiple
            objects specified as a list.
        boundary_name : str, optional
            Name of the boundary object to create. If  a name is not
            provided, a unique name is generated. The default is ``None``.
        total_power : str, float, or dict or BoundaryDictionary, optional
            Total power transferred to the fluid through the resistance
            volume. It is specified as a string with a value and unit or a float
            where the default unit ``"W"`` is used.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            Default is ``"0W"``.
        fluid : str, optional
            The material of the volume to which the resistance is being
            assigned. Default is ``"air"``.
        laminar : bool, optional
            Whether the flow inside the volume must be treated as laminar or
            not. Default is ``False``.
        loss_curves_x : list of lists of float
            List of two list defining the loss curve in the X direction. The
            first list contains the mass flow rate value of the curve while
            the second contains the pressure values. Units can be specified with
            the ``loss_curve_flow_unit`` and ``loss_curve_pressure_unit``
            parameters. Default is ``[[0,1],[0,1]]``.
        loss_curves_y : list of lists of float
            List of two list defining the loss curve in the Y direction. The
            first list contains the mass flow rate value of the curve while
            the second contains the pressure values. Units can be specified with
            the ``loss_curve_flow_unit`` and ``loss_curve_pressure_unit``
            parameters. Default is ``[[0,1],[0,1]]``.
        loss_curves_z : list of lists of float
            List of two list defining the loss curve in the Z direction. The
            first list contains the mass flow rate value of the curve while the
            second contains the pressure values. Units can be specified with the
            ``loss_curve_flow_unit`` and ``loss_curve_pressure_unit``
            parameters. Default is ``[[0,1],[0,1]]``.
        loss_curve_flow_unit : str, optional
            Specifies the unit of flow rate in the loss curvev (for all
            directions). Default is ``"m_per_sec"``.
        loss_curve_pressure_unit : str, optional
            Specifies the unit of pressure drop in the loss curve (for all
            directions). Default is ``"n_per_meter_sq"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignResistanceBoundary

        Examples
        --------
        """
        ...
    
    @pyaedt_function_handler()
    def assign_device_resistance(self, objects, boundary_name=..., total_power=..., fluid=..., laminar=..., linear_loss=..., quadratic_loss=..., linear_loss_free_area_ratio=..., quadratic_loss_free_area_ratio=...): # -> BoundaryObject:
        """
        Assign resistance boundary condition using the device/approach model.

        Parameters
        ----------
        objects : list or str
            A list of objects to which the resistance condition will be
            assigned. It can be a single object (a string) or multiple
            objects specified as a list.
        boundary_name : str, optional
            The name of the boundary object that will be created. If not
            provided, a unique name is generated. The default is ``None``.
        total_power : str, float, or dict or BoundaryDictionary, optional
            The total power transferred to the fluid through the resistance
            volume. It is specified as a string with a value and unit or a float
            where the default unit ``"W"`` is used.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default is ``"0W"``.
        fluid : str, optional
            Material of the volume to which the resistance is being
            assigned. Default is ``"air"``.
        laminar : bool, optional
            Whether the flow inside the volume must be treated as laminar or
            not. Default is ``False``.
        linear_loss : list of floats or list of strings, optional
            Three values representing the linear loss coefficients in the X, Y,
            and Z directions. These coefficients can be expressed as floats, in
            which case the default unit ``"m_per_sec"`` will be used, or as
            strings. Relevant only if ``loss_type=="Device"``.  Default is
            ``"1m_per_sec"`` for all three directions.
        quadratic_loss : list of floats or list of strings, optional
            Three values representing the quadratic loss coefficients in the X,
            Y, and Z directions. Relevant only if ``loss_type=="Device"``.
            Default is ``1`` for all three directions.
        linear_loss_free_area_ratio : list of floats or list of strings, optional
            Three values representing the linear loss free area ratio in the X,
            Y, and Z directions. Relevant only if ``loss_type=="Device"``.
            Default is ``1`` for all three directions.
        quadratic_loss_free_area_ratio : list of floats or list of strings, optional
            Three values representing the quadratic loss coefficient for each
            direction (X, Y, Z) in the loss model. Relevant only if
            ``loss_type=="Device"``. Default is ``1`` for all three directions.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignResistanceBoundary

        Examples
        --------
        """
        ...
    
    @pyaedt_function_handler()
    def assign_recirculation_opening(self, face_list, extract_face, thermal_specification=..., assignment_value=..., conductance_external_temperature=..., flow_specification=..., flow_assignment=..., flow_direction=..., start_time=..., end_time=..., boundary_name=...): # -> BoundaryObject:
        """Assign recirculation faces.

        Parameters
        ----------
        face_list : list
            List of face primitive objects or a list of integers
            containing faces IDs.
        extract_face : modeler.cad.elements_3d.FacePrimitive, int
             ID of the face on the extract side.
        thermal_specification : str, optional
            Type of the thermal assignment across the two recirculation
            faces. The default is ``"Temperature"``. Options are
            ``"Conductance"``, ``"Heat Input"``, and ``"Temperature"``.
        assignment_value : str or dict or BoundaryDictionary, optional
            String with a value and units of the thermal assignment.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default value is ``"0cel"``.
        conductance_external_temperature : str, optional
            External temperature value, which is needed if
            ``thermal_specification`` is set to ``"Conductance"``.
            The default is ``None``.
        flow_specification : str, optional
            Flow specification for the recirculation zone. The default is
            ``"Mass Flow"``. Options are: ``"Mass Flow"``, ``"Mass Flux"``,
            and ``"Volume Flow"``.
        flow_assignment : str or dict or BoundaryDictionary, optional
            String with the value and units of the flow assignment.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
            The default value is ``"0kg_per_s_m2"``.
        flow_direction : list, optional
            Flow direction enforced at the recirculation zone. The default value
            is ``None``, in which case the normal direction is used.
        start_time : str, optional
            Start of the time interval. This parameter is relevant only if the
            simulation is transient. The default value is ``"0s"``.
        end_time : str, optional
            End of the time interval. This parameter is relevant only if the
            simulation is transient. The default value is ``"0s"``.
        boundary_name : str, optional
            Name of the recirculation boundary. The default is ``None``, in
            which case the boundary is automatically generated.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignRecircBoundary

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> ipk.solution_type = "Transient"
        >>> box = ipk.modeler.create_box([5, 5, 5], [1, 2, 3], "BlockBoxEmpty", "copper")
        >>> box.solve_inside = False
        >>> recirc = ipk.assign_recirculation_opening([box.top_face_x, box.bottom_face_x], box.top_face_x,
        >>>                                          flow_assignment="10kg_per_s_m2")

        """
        ...
    
    @pyaedt_function_handler()
    def assign_blower_type1(self, faces, inlet_face, fan_curve_pressure, fan_curve_flow, blower_power=..., blade_rpm=..., blade_angle=..., fan_curve_pressure_unit=..., fan_curve_flow_unit=..., boundary_name=...): # -> BoundaryObject:
        """Assign blower type 1.

        Parameters
        ----------
        faces : list
            List of modeler.cad.elements_3d.FacePrimitive or of integers
            containing faces ids.
        inlet_face : modeler.cad.elements_3d.FacePrimitive, int or list
             Inlet faces.
        fan_curve_pressure : list
            List of the fan curve pressure values. Only floats should
            be included in the list as their unit can be modified with
            fan_curve_pressure_unit argument.
        fan_curve_flow : list
            List of the fan curve flow value. Only floats should be
            included in the list as their unit can be modified with
            fan_curve_flow_unit argument.
        blower_power : str, optional
            blower power expressed as a string containing the value and unit.
            Default is "0W".
        blade_rpm : float, optional
            Blade RPM value. Default is 0.
        blade_angle : str, optional
            Blade angle expressed as a string containing value and the unit.
            Default is "0rad".
        fan_curve_pressure_unit : str, optional
            Fan curve pressure unit. Default is "n_per_meter_sq".
        fan_curve_flow_unit : str, optional
            Fan curve flow unit. Default is "m3_per_s".
        boundary_name : str, optional
            Name of the recirculation boundary. The default is ``None``, in
            which case the boundary is automatically generated.


        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignBlowerBoundary

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> cylinder = self.aedtapp.modeler.create_cylinder(orientation="X", origin=[0, 0, 0], radius=10, height=1)
        >>> curved_face = [f for f in cylinder.faces if not f.is_planar]
        >>> planar_faces = [f for f in cylinder.faces if f.is_planar]
        >>> cylinder.solve_inside = False
        >>> blower = self.aedtapp.assign_blower_type1([f.id for f in curved_face+planar_faces],
        >>>                                           [f.id for f in planar_faces], [10, 5, 0], [0, 2, 4])

        """
        ...
    
    @pyaedt_function_handler()
    def assign_blower_type2(self, faces, inlet_face, fan_curve_pressure, fan_curve_flow, blower_power=..., exhaust_angle=..., fan_curve_pressure_unit=..., fan_curve_flow_unit=..., boundary_name=...): # -> BoundaryObject:
        """Assign blower type 2.

        Parameters
        ----------
        faces : list
            List of modeler.cad.elements_3d.FacePrimitive or of integers
            containing faces ids.
        inlet_face : modeler.cad.elements_3d.FacePrimitive, int or list
             Inlet faces.
        fan_curve_pressure : list
            List of the fan curve pressure values. Only floats should
            be included in the list as their unit can be modified with
            fan_curve_pressure_unit argument.
        fan_curve_flow : list
            List of the fan curve flow value. Only floats should be
            included in the list as their unit can be modified with
            fan_curve_flow_unit argument.
        blower_power : str, optional
            blower power expressed as a string containing the value and unit.
            Default is "0W".
        exhaust_angle : float, optional
            Exhaust angle expressed as a string containing value and the unit.
            Default is "0rad".
        fan_curve_pressure_unit : str, optional
            Fan curve pressure unit. Default is "n_per_meter_sq".
        fan_curve_flow_unit : str, optional
            Fan curve flow unit. Default is "m3_per_s".
        boundary_name : str, optional
            Name of the recirculation boundary. The default is ``None``, in
            which case the boundary is automatically generated.


        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        References
        ----------
        >>> oModule.AssignBlowerBoundary

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> ipk = Icepak()
        >>> box = ipk.modeler.create_box([5, 5, 5], [1, 2, 3], "BlockBoxEmpty", "copper")
        >>> box.solve_inside = False
        >>> blower = self.aedtapp.assign_blower_type2([box.faces[0], box.faces[1]],
        >>>                                           [box.faces[0]], [10, 5, 0], [0, 2, 4])

        """
        ...
    
    @pyaedt_function_handler()
    def assign_conducting_plate(self, obj_plate, boundary_name=..., total_power=..., thermal_specification=..., thickness=..., solid_material=..., conductance=..., shell_conduction=..., thermal_resistance=..., low_side_rad_material=..., high_side_rad_material=..., thermal_impedance=...): # -> BoundaryObject:
        """
        Assign thermal boundary conditions to a conducting plate.

        Parameters
        ----------
        obj_plate : str or int or list
            Object to assign the boundary to. If a string, specify a surface name.
            If an integer, specify a face ID.
        boundary_name : str, optional
            Boundary name. The default is ``None``, in which case a name is generated
            automatically.
        total_power : str or float or dict or BoundaryDictionary, optional
            Power dissipated by the plate. The default is ``"0W"``. If a float,
            the default unit is ``"W"``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        thermal_specification : str, optional
            Type of condition to apply. The default is ``"Thickness"``.
            Options are ``"Conductance"``, ``"Thermal Impedance"``,
            ``"Thermal Resistance"``, and ``"Thickness"``.
        thickness : str or float, optional
            If ``thermal_specification="Thickness"``, this parameter represents the
            thickness to model with the plate. The default is ``"1mm"``. If a float,
            the default unit is ``"mm"``.
        solid_material : str, optional
           If ``thermal_specification="Thickness"``, this parameter represents the
           material of the conducting plate. The default is ``"Al-Extruded"``.
        conductance : str or float, optional
             If ``thermal_specification="Conductance"``, this parameter represents the
             conductance of the plate. The default is ``"0W_per_Cel"``. If a float, the default
             unit is ``"W_per_Cel"``.
        thermal_resistance : str or float, optional
            If ``thermal_specification="Thermal Resistance"``, this parameter represents the
            thermal resistance of the plate. The default is ``"0Kel_per_W"``. If a float, the
            default unit is ``"Kel_per_W"``.
        thermal_impedance : str or float, optional
            If ``thermal_specification="Thermal Impedance"``, this parameter represents the
            thermal impedance of the plate. The default is ``"0Cel_m2_per_W"``. If a float, the
            default unit is "``Cel_m2_per_W"``.
        shell_conduction : bool, optional
            Whether to consider shell conduction. The default is ``False``.
        low_side_rad_material : str, optional
            Material on the low side for radiation. The default is ``None``, in which
            case radiation is disabled on the low side.
        high_side_rad_material : str, optional
            Material on the high side for radiation. The default is ``None``, in which
            case radiation is disabled on the high side.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        """
        ...
    
    def assign_conducting_plate_with_thickness(self, obj_plate, boundary_name=..., total_power=..., thickness=..., solid_material=..., shell_conduction=..., low_side_rad_material=..., high_side_rad_material=...): # -> BoundaryObject:
        """
        Assign thermal boundary conditions with thickness specification to a conducting plate.

        Parameters
        ----------
        obj_plate : str or int or list
            Object to assign the boundary to. If a string, specify a surface name.
            If an integer, specify a face ID.
        boundary_name : str, optional
            Boundary name. The default is ``None``, in which case a name is generated
            automatically.
        total_power : str or float or dict or BoundaryDictionary, optional
            Power dissipated by the plate. The default is ``"0W"``. If a float,
            the default unit is ``"W"``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        thickness : str or float, optional
            If ``thermal_specification="Thickness"``, this parameter represents the
            thickness to model with the plate. The default is ``"1mm"``. If a float,
            the default unit is ``"mm"``.
        solid_material : str, optional
           If ``thermal_specification="Thickness"``, this parameter represents the
           material of the conducting plate. The default is ``"Al-Extruded"``.
        shell_conduction : bool, optional
            Whether to consider shell conduction. The default is ``False``.
        low_side_rad_material : str, optional
            Material on the low side for radiation. The default is ``None``, in which
            case radiation is disabled on the low side.
        high_side_rad_material : str, optional
            Material on the high side for radiation. The default is ``None``, in which
            case radiation is disabled on the high side.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        """
        ...
    
    def assign_conducting_plate_with_resistance(self, obj_plate, boundary_name=..., total_power=..., thermal_resistance=..., shell_conduction=..., low_side_rad_material=..., high_side_rad_material=...): # -> BoundaryObject:
        """
        Assign thermal boundary conditions with thermal resistance specification to a conducting plate.

        Parameters
        ----------
        obj_plate : str or int or list
            Object to assign the boundary to. If a string, specify a surface name.
            If an integer, specify a face ID.
        boundary_name : str, optional
            Boundary name. The default is ``None``, in which case a name is generated
            automatically.
        total_power : str or float or dict or BoundaryDictionary, optional
            Power dissipated by the plate. The default is ``"0W"``. If a float,
            the default unit is ``"W"``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        thermal_resistance : str or float, optional
            If ``thermal_specification="Thermal Resistance"``, this parameter represents the
            thermal resistance of the plate. The default is ``"0Kel_per_W"``. If a float, the
            default unit is ``"Kel_per_W"``.
        shell_conduction : bool, optional
            Whether to consider shell conduction. The default is ``False``.
        low_side_rad_material : str, optional
            Material on the low side for radiation. The default is ``None``, in which
            case radiation is disabled on the low side.
        high_side_rad_material : str, optional
            Material on the high side for radiation. The default is ``None``, in which
            case radiation is disabled on the high side.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        """
        ...
    
    def assign_conducting_plate_with_impedance(self, obj_plate, boundary_name=..., total_power=..., thermal_impedance=..., shell_conduction=..., low_side_rad_material=..., high_side_rad_material=...): # -> BoundaryObject:
        """
        Assign thermal boundary conditions with thermal impedance specification to a conducting plate.

        Parameters
        ----------
        obj_plate : str or int or list
            Object to assign the boundary to. If a string, specify a surface name.
            If an integer, specify a face ID.
        boundary_name : str, optional
            Boundary name. The default is ``None``, in which case a name is generated
            automatically.
        total_power : str or float or dict or BoundaryDictionary, optional
            Power dissipated by the plate. The default is ``"0W"``. If a float,
            the default unit is ``"W"``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        thermal_impedance : str or float, optional
            If ``thermal_specification="Thermal Impedance"``, this parameter represents the
            thermal impedance of the plate. The default is ``"0Cel_m2_per_W"``. If a float, the
            default unit is "``Cel_m2_per_W"``.
        shell_conduction : bool, optional
            Whether to consider shell conduction. The default is ``False``.
        low_side_rad_material : str, optional
            Material on the low side for radiation. The default is ``None``, in which
            case radiation is disabled on the low side.
        high_side_rad_material : str, optional
            Material on the high side for radiation. The default is ``None``, in which
            case radiation is disabled on the high side.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        """
        ...
    
    def assign_conducting_plate_with_conductance(self, obj_plate, boundary_name=..., total_power=..., conductance=..., shell_conduction=..., low_side_rad_material=..., high_side_rad_material=...): # -> BoundaryObject:
        """
        Assign thermal boundary conditions with conductance specification to a conducting plate.

        Parameters
        ----------
        obj_plate : str or int or list
            Object to assign the boundary to. If a string, specify a surface name.
            If an integer, specify a face ID.
        boundary_name : str, optional
            Boundary name. The default is ``None``, in which case a name is generated
            automatically.
        total_power : str or float or dict or BoundaryDictionary, optional
            Power dissipated by the plate. The default is ``"0W"``. If a float,
            the default unit is ``"W"``.
            Assign a transient condition using the result of a function with
            the ``create_*_transient_assignment`` pattern.
        conductance : str or float, optional
             If ``thermal_specification="Conductance"``, this parameter represents the
             conductance of the plate. The default is ``"0W_per_Cel"``. If a float, the default
             unit is ``"W_per_Cel"``.
        shell_conduction : bool, optional
            Whether to consider shell conduction. The default is ``False``.
        low_side_rad_material : str, optional
            Material on the low side for radiation. The default is ``None``, in which
            case radiation is disabled on the low side.
        high_side_rad_material : str, optional
            Material on the high side for radiation. The default is ``None``, in which
            case radiation is disabled on the high side.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object when successful or ``None`` when failed.

        """
        ...
    
    @pyaedt_function_handler
    def create_temp_dep_assignment(self, ds_name, scale=...): # -> PieceWiseLinearDictionary:
        """
        Create a temperature-dependent assignment from a dataset.

        Parameters
        ----------
        ds_name : str
            Name of the dataset.
        scale : float or str, optional
            Value for scaling the y value of the dataset. The default is ``1``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.PieceWiseLinearDictionary`
            Boundary dictionary object that can be passed to boundary condition assignment functions.

        """
        ...
    
    @pyaedt_function_handler
    def create_dataset_transient_assignment(self, ds_name, scale=...): # -> PieceWiseLinearDictionary:
        """
        Create a transient assignment from a dataset.

        Parameters
        ----------
        ds_name : str
            Name of the dataset.
        scale : float or str, optional
            Value for scaling the y value of the dataset. The default is ``1``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.PieceWiseLinearDictionary`
            Boundary dictionary object that can be passed to boundary condition assignment functions.

        """
        ...
    
    @pyaedt_function_handler
    def create_linear_transient_assignment(self, intercept, slope): # -> LinearDictionary:
        """
        Create an object to assign the linear transient condition to.

        This method applies a condition ``y`` dependent on the time ``t``:
            ``y=a+b*t^c``

        Parameters
        ----------
        intercept : str
            Value of the assignment condition at the initial time, which
            corresponds to the coefficient ``a`` in the formula.
        coefficient : str
            Coefficient that multiplies the power term, which
            corresponds to the coefficient ``b`` in the formula.
        scaling_exponent : str
            Exponent of the power term, which.
            corresponds to the coefficient ``c`` in the formula.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.LinearDictionary`
            Boundary dictionary object that can be passed to boundary condition assignment functions.
        """
        ...
    
    @pyaedt_function_handler
    def create_powerlaw_transient_assignment(self, intercept, coefficient, scaling_exponent): # -> PowerLawDictionary:
        """
        Create an object to assign the power law transient condition to.

        This method applies a condition ``y`` dependent on the time ``t``:
            ``y=a+b*t^c``

        Parameters
        ----------
        intercept : str
            Value of the assignment condition at the initial time, which
            corresponds to the coefficient ``a`` in the formula.
        coefficient : str
            Coefficient that multiplies the power term, which
            corresponds to the coefficient ``b`` in the formula.
        scaling_exponent : str
            Exponent of the power term, which
            corresponds to the coefficient ``c`` in the formula.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.PowerLawDictionary`
            Boundary dictionary object that can be passed to boundary condition assignment functions.
        """
        ...
    
    @pyaedt_function_handler
    def create_exponential_transient_assignment(self, vertical_offset, coefficient, exponent_coefficient): # -> ExponentialDictionary:
        """
        Create an object to assign the exponential transient condition to.

        This method applies a condition ``y`` dependent on the time ``t``:
            ``y=a+b*exp(c*t)``

        Parameters
        ----------
        vertical_offset : str
            Vertical offset summed to the exponential law, which
            corresponds to the coefficient ``a`` in the formula.
        coefficient : str
            Coefficient that multiplies the exponential term, which
            corresponds to the coefficient ``b`` in the formula.
        exponent_coefficient : str
            Coefficient in the exponential term, which
            corresponds to the coefficient ``c`` in the formula.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.ExponentialDictionary`
            Boundary dictionary object that can be passed to boundary condition assignment functions.
        """
        ...
    
    @pyaedt_function_handler
    def create_sinusoidal_transient_assignment(self, vertical_offset, vertical_scaling, period, period_offset): # -> SinusoidalDictionary:
        """
        Create an object to assign the sinusoidal transient condition to.

        This method applies a condition ``y`` dependent on the time ``t``:
            ``y=a+b*sin(2*pi(t-t0)/T)``

        Parameters
        ----------
        vertical_offset : str
            Vertical offset summed to the sinusoidal law, which
            corresponds to the coefficient ``a`` in the formula.
        vertical_scaling : str
            Coefficient that multiplies the sinusoidal term, which
            corresponds to the coefficient ``b`` in the formula.
        period : str
            Period of the sinusoid, which
            corresponds to the coefficient ``T`` in the formula.
        period_offset : str
            Offset of the sinusoid, which corresponds to the coefficient ``t0`` in the formula.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.SinusoidalDictionary`
            Boundary dictionary object that can be passed to boundary condition assignment functions.
        """
        ...
    
    @pyaedt_function_handler
    def create_square_wave_transient_assignment(self, on_value, initial_time_off, on_time, off_time, off_value): # -> SquareWaveDictionary:
        """
        Create an object to assign the square wave transient condition to.

        Parameters
        ----------
        on_value : str
            Maximum value of the square wave.
        initial_time_off : str
            Time after which the square wave assignment starts.
        on_time : str
            Time for which the square wave keeps the maximum value during one period.
        off_time : str
            Time for which the square wave keeps the minimum value during one period.
        off_value : str
            Minimum value of the square wave.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.SquareWaveDictionary`
            Boundary dictionary object that can be passed to boundary condition assignment functions.
        """
        ...
    
    @pyaedt_function_handler()
    def clear_linked_data(self): # -> Literal[True]:
        """Clear the linked data of all the solution setups.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ClearLinkedData
        """
        ...
    


