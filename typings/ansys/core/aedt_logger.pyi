"""
This type stub file was generated by pyright.
"""

import logging

message_levels = ...
class Msg:
    ...


class MessageList:
    """
    Collects and returns messages from the AEDT message manager for a specified project name and design name.

    Parameters
    ----------
    msg_list : list
        List of messages extracted from AEDT.

    Attributes
    ----------
    info_level : list of str
        List of strings representing the info messages of the message manager.

    warning_level : list of str
        List of strings representing the warning messages of the message manager.

    error_level : list of str
        List of strings representing the error messages of the message manager.

    debug_level : list of str
        List of strings representing the debug messages of the message manager.

    unknown_level : list of str
        List of strings representing the messages with no level of the message manager.

    """
    def __init__(self, msg_list) -> None:
        ...
    


class AppFilter(logging.Filter):
    """Specifies the destination of the logger.

    AEDT exposes three different loggers, which are the global, project, and design loggers.

    Parameters
    ----------
    destination : str, optional
        Logger to write to. Options are ``"Global"`, ``"Project"``, and ``"Design"``.
        The default is ``"Global"``.
    extra : str, optional
        Name of the design or project. The default is ``""``.
    """
    def __init__(self, destination=..., extra=...) -> None:
        ...
    
    def filter(self, record): # -> Literal[True]:
        """
        Modify the record sent to the logger.

        Parameters
        ----------
        record : class:`logging.LogRecord`
            Contains information related to the event being logged.
        """
        ...
    


class AedtLogger:
    """
    Specifies the logger to use for each AEDT logger.

    This class allows you to add a handler to write messages to a file and to indicate
    whether to write mnessages to the standard output (stdout).

    Parameters
    ----------
    level : int, optional
        Logging level to filter the message severity allowed in the logger.
        The default is ``logging.DEBUG``.
    filename : str, optional
        Name of the file to write messages to. The default is ``None``.
    to_stdout : bool, optional
        Whether to write log messages to stdout. The default is ``False``.
    """
    def __init__(self, level=..., filename=..., to_stdout=..., desktop=...) -> None:
        ...
    
    def add_file_logger(self, filename, project_name, level=...): # -> Logger:
        """Add a new file to the logger handlers list."""
        ...
    
    def remove_file_logger(self, project_name): # -> None:
        """Remove a file from the logger handlers list."""
        ...
    
    def remove_all_project_file_logger(self): # -> None:
        """Remove all the local files from the logger handlers list."""
        ...
    
    @property
    def logger(self): # -> Logger | None:
        """AEDT logger object."""
        ...
    
    @property
    def aedt_messages(self): # -> MessageList:
        """Message manager content for the active project and design.

        Returns
        -------
        list of str
           List of messages for the active project and design.

        """
        ...
    
    @property
    def messages(self): # -> MessageList:
        """Message manager content for the active session.

        Returns
        -------
        list of str
           List of messages for the active session.

        """
        ...
    
    @property
    def aedt_info_messages(self): # -> list[Any]:
        """Message manager content for the active project and design.

        Returns
        -------
        list of str
           List of info messages for the active project and design.

        """
        ...
    
    @property
    def aedt_warning_messages(self): # -> list[Any]:
        """Message manager content for the active project and design.

        Returns
        -------
        list of str
           List of warning messages for the active project and design.

        """
        ...
    
    @property
    def aedt_error_messages(self): # -> list[Any]:
        """Message manager content for the active project and design.

        Returns
        -------
        list of str
           List of error messages for the active project and design.

        """
        ...
    
    @property
    def info_messages(self): # -> list[Any]:
        """Message manager content for the active pyaedt session.

        Returns
        -------
        list of str
           List of info messages.

        """
        ...
    
    @property
    def warning_messages(self): # -> list[Any]:
        """Message manager content for the active pyaedt session.

        Returns
        -------
        list of str
           List of warning messages.

        """
        ...
    
    @property
    def error_messages(self): # -> list[Any]:
        """Message manager content for the active pyaedt session.

        Returns
        -------
        list of str
           List of error messages.

        """
        ...
    
    def reset_timer(self, time_val=...): # -> float:
        """Reset actual timer to  actual time or specified time.

        Parameters
        ----------
        time_val : float, optional
            Value time to apply.

        Returns
        -------

        """
        ...
    
    def get_messages(self, project_name=..., design_name=..., level=..., aedt_messages=...): # -> MessageList:
        """Get the message manager content for a specified project and design.

        If the specified project and design names are invalid, they are ignored.

        Parameters
        ----------
        project_name : str
            Name of the project to read messages from. Leave empty string to get Desktop level messages.
        design_name : str
            Name of the design to read messages from. Leave empty string to get Desktop level messages.
        level : int
            Level of messages to read. 0 – info and above, 1 – warning and above, 2 – error and fatal
        aedt_messages : bool
            Read content of message manager even if logger is disabled.


        Returns
        -------
        list of str
            List of messages for the specified project and design.

        """
        ...
    
    def add_error_message(self, message_text, level=...): # -> None:
        """
        Add a type 2 "Error" message to the message manager tree.

        Also add an error message to the logger if the handler is present.

        Parameters
        ----------
        message_text : str
            Text to display as the error message.
        level : str, optional
            Level to add the error message to. Options are ``"Global"``,
            ``"Project"``, and ``"Design"``. The default is ``None``,
            in which case the error message gets added to the ``"Design"``
            level.

        Examples
        --------
        Add an error message to the AEDT message manager.

        >>> hfss.logger.project_logger.error("Project Error Message", "Project")

        """
        ...
    
    def add_warning_message(self, message_text, level=...): # -> None:
        """
        Add a type 1 "Warning" message to the message manager tree.

        Also add a warning message to the logger if the handler is present.

        Parameters
        ----------
        message_text : str
            Text to display as the warning message.
        level : str, optional
            Level to add the warning message to. Options are ``"Global"``,
            ``"Project"``, and ``"Design"``. The default is ``None``,
            in which case the warning message gets added to the ``"Design"``
            level.

        Examples
        --------
        Add a warning message to the AEDT message manager.

        >>> hfss.logger.warning("Global warning message")

        """
        ...
    
    def add_info_message(self, message_text, level=...): # -> None:
        """Add a type 0 "Info" message to the active design level of the message manager tree.

        Also add an info message to the logger if the handler is present.

        Parameters
        ----------
        message_text : str
            Text to display as the info message.
        level : str, optional
            Level to add the info message to. Options are ``"Global"``,
            ``"Project"``, and ``"Design"``. The default is ``None``,
            in which case the info message gets added to the ``"Design"``
            level.

        Examples
        --------
        Add an info message at the global level.

        >>> hfss.logger.info("Global warning message", "Global")

        """
        ...
    
    def add_debug_message(self, message_text, level=...): # -> None:
        """
        Parameterized message to the message manager to specify the type and project or design level.

        Parameters
        ----------
        message_text : str
            Text to display as the message.
        level : str, optional
            Level to add the info message to. Options are ``"Global"``,
            ``"Project"``, and ``"Design"``. The default value is ``None``,
            in which case the info message gets added to the ``"Design"``
            level.
        """
        ...
    
    def add_message(self, message_type, message_text, level=..., proj_name=..., des_name=...): # -> None:
        """Add a message to the message manager to specify the type and project or design level.

        Parameters
        ----------
        message_type : int
            Type of the message. Options are:
            * ``0`` : Info
            * ``1`` : Warning
            * ``2`` : Error
            * ``3`` : Debug
        message_text : str
            Text to display as the message.
        level : str, optional
            Level to add the message to. Options are ``"Global"``,
            ``"Project"``, and ``"Design"``. The default is ``None``,
            in which case the message gets added to the
            ``"Design"`` level.
        proj_name : str, optional
            Name of the project.
        des_name : str, optional
            Name of the design.
        """
        ...
    
    def clear_messages(self, proj_name=..., des_name=..., level=...): # -> None:
        """Clear all messages.

        Parameters
        ----------
        proj_name : str, optional
            Name of project. The default is ``None``, in which case messages
            are cleared for the current project. If blank, messages are cleared
            for all projects.
        des_name : str, optional
            Name of the design within the specified project. The default
            is ``None,`` in which case the current design is used.
            If blank, all designs are used.
        level : int, optional
            Level of the messages to clear. Options are:

            * ``0`` : Clear all info messages.
            * ``1`` : Clear all info and warning messages.
            * ``2`` : Clear all info, warning, and error messages.
            * ``3`` : Clear all messages, which include info, warning,
              error, and fatal-error messages.

            The default is ``2.``

        Examples
        --------
        Clear all messages in the current design and project.

        >>> hfss.clear_messages(level=3)

        Clear all messages.

        >>> hfss.clear_messages(proj_name="", des_name="", level=3)
        """
        ...
    
    @property
    def non_graphical(self): # -> None:
        """Check if desktop is graphical or not.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def oproject(self): # -> None:
        """Project object.

        Returns
        -------
        object
        """
        ...
    
    @property
    def odesign(self): # -> None:
        """Design object.

        Returns
        -------
        object
        """
        ...
    
    @oproject.setter
    def oproject(self, val): # -> None:
        ...
    
    @odesign.setter
    def odesign(self, val): # -> None:
        ...
    
    @property
    def design_name(self): # -> str:
        """Name of current logger design.

        Returns
        -------
        str
        """
        ...
    
    @property
    def project_name(self): # -> str:
        """Name of current logger project.

        Returns
        -------
        str
        """
        ...
    
    def add_logger(self, destination, level=...): # -> Logger:
        """
        Add a logger for either the active project or active design.

        Parameters
        ----------
        destination : str
            Logger to write to. Options are ``"Project"`` and ``"Design"``.
        level : int, optional
            Logging level enum. The default is ``logging.DEBUG``.
        """
        ...
    
    def disable_desktop_log(self): # -> None:
        """Disable the log in AEDT."""
        ...
    
    def enable_desktop_log(self): # -> None:
        """Enable the log in AEDT."""
        ...
    
    def disable_stdout_log(self): # -> None:
        """Disable printing log messages to stdout."""
        ...
    
    def enable_stdout_log(self): # -> None:
        """Enable printing log messages to stdout."""
        ...
    
    def disable_log_on_file(self): # -> None:
        """Disable writing log messages to an output file."""
        ...
    
    def enable_log_on_file(self): # -> None:
        """Enable writing log messages to an output file."""
        ...
    
    def info(self, msg, *args, **kwargs): # -> None:
        """Write an info message to the global logger."""
        ...
    
    def info_timer(self, msg, start_time=..., *args, **kwargs): # -> None:
        """Write an info message to the global logger with elapsed time.
        Message will have an appendix of type Elapsed time: time."""
        ...
    
    def warning(self, msg, *args, **kwargs): # -> None:
        """Write a warning message to the global logger."""
        ...
    
    def error(self, msg, *args, **kwargs): # -> None:
        """Write an error message to the global logger."""
        ...
    
    def debug(self, msg, *args, **kwargs): # -> None:
        """Write a debug message to the global logger."""
        ...
    
    @property
    def glb(self): # -> Logger:
        """Global logger."""
        ...
    
    @property
    def project_logger(self): # -> Logger:
        """Project logger."""
        ...
    
    @property
    def design_logger(self): # -> Logger:
        """Design logger."""
        ...
    


pyaedt_logger = ...
