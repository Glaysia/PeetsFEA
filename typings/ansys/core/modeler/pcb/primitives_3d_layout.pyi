"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.pcb.object_3d_layout import Line3dLayout, Pins3DLayout

class Primitives3DLayout:
    """Manages primitives in HFSS 3D Layout.

    This class is inherited in the caller application and is accessible through the primitives variable part
    of modeler object( eg. ``hfss3dlayout.modeler``).

    Parameters
    ----------
    modeler : :class:`ansys.aedt.core.modeler.modeler_pcb.Modeler3DLayout`
        Name of the modeler.

    Examples
    --------
    Basic usage demonstrated with an HFSS 3D Layout design:

    >>> from ansys.aedt.core import Hfss3dLayout
    >>> aedtapp = Hfss3dLayout()
    >>> prim = aedtapp.modeler
    """
    @pyaedt_function_handler()
    def __getitem__(self, partname): # -> None:
        """Retrieve a part.

        Parameters
        ----------
        partname : int or str
           Part ID or part name.

        Returns
        -------
        type
          Part object details.

        """
        ...
    
    def __init__(self, app) -> None:
        ...
    
    @property
    def opadstack_manager(self):
        """AEDT padstack manager.

        References
        ----------
        >>> oPadstackManger = oDefinitionManager.GetManager("Padstack")
        """
        ...
    
    @property
    def opadstackmanager(self):
        """AEDT oPadstackManager.

        .. deprecated:: 0.15.0
           Use :func:`opadstack_manager` property instead.

        References
        ----------
        >>> oPadstackManger = oDefinitionManager.GetManager("Padstack")
        """
        ...
    
    @property
    def components(self): # -> dict[Any, Any]:
        """Components.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Components3DLayout`]
            Components objects.

        """
        ...
    
    @property
    def coordinate_systems(self): # -> dict[Any, Any]:
        """Coordinate systems.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.CoordinateSystems3DLayout`]
            Coordinate system objects.

        """
        ...
    
    @property
    def coordinate_system_names(self): # -> list[Any]:
        """Coordinate system names.

        Returns
        -------
        list
            Coordinate system names.

        """
        ...
    
    @property
    def geometries(self): # -> dict[Any, Any]:
        """All Geometries including voids.

        Returns
        -------
        dict
            Dictionary of geometries.

        """
        ...
    
    @property
    def voids(self): # -> dict[Any, Any]:
        """All voids.

        Returns
        -------
        dict
            Dictionary of voids.

        """
        ...
    
    @pyaedt_function_handler(layer_name="layer", object_filter="filter")
    def objects_by_layer(self, layer, object_filter=..., include_voids=...): # -> list[Any]:
        """Retrieve the list of objects that belongs to a specific layer.

        Parameters
        ----------
        layer : str
            Name of the layer to filter.
        object_filter : str, list, optional
            Name of the category to include in search. Options are `"poly"`, `"circle"`,
            `"rect"`,`"line"`,`"arc"`, `"via"`,`"pin"` and `"component"`.
        include_voids : bool, optional
            Either if include or not the voids in search.

        Returns
        -------
        list
            Objects found.
        """
        ...
    
    @pyaedt_function_handler(net_name="net")
    def objects_by_net(self, net, object_filter=..., include_voids=...): # -> list[Any]:
        """Retrieve the list of objects that belongs to a specific net.

        Parameters
        ----------
        net : str
            Name of the net to filter.
        object_filter : str, list, optional
            Name of the category to include in search. Options are `"poly"`, `"circle"`,
            `"rect"`,`"line"`,`"arc"`, `"via"`,`"pin"` and `"component"`.
        include_voids : bool, optional
            Either if include or not the voids in search.

        Returns
        -------
        list
            Objects found.
        """
        ...
    
    @property
    def polygon_names(self): # -> list[Any]:
        """Get the list of all polygons in layout.

        Returns
        -------
        list
        """
        ...
    
    @property
    def polygon_voids_names(self): # -> list[Any]:
        """Get the list of all void polygons in layout.

        Returns
        -------
        list
        """
        ...
    
    @property
    def line_names(self): # -> list[Any]:
        """Get the list of all lines in layout.

        Returns
        -------
        list
        """
        ...
    
    @property
    def line_voids_names(self): # -> list[Any]:
        """Get the list of all void lines in layout.

        Returns
        -------
        list
        """
        ...
    
    @property
    def rectangle_names(self): # -> list[Any]:
        """Get the list of all rectangles in layout.

        Returns
        -------
        list
        """
        ...
    
    @property
    def rectangle_void_names(self): # -> list[Any]:
        """Get the list of all void rectangles in layout.

        Returns
        -------
        list
        """
        ...
    
    @property
    def circle_names(self): # -> list[Any]:
        """Get the list of all circles in layout.

        Returns
        -------
        list
        """
        ...
    
    @property
    def circle_voids_names(self): # -> list[Any]:
        """Get the list of all void circles in layout.

        Returns
        -------
        list
        """
        ...
    
    @property
    def via_names(self): # -> list[Any]:
        """Get the list of all vias in layout.

        Returns
        -------
        list
        """
        ...
    
    @pyaedt_function_handler()
    def cleanup_objects(self): # -> tuple[list[Any], list[Any]]:
        """Clean up all 3D Layout geometries.

        Clean up all 3D Layout geometries (circle, rectangles, polygons, lines and voids)
        that have been added or no longer exist in the modeler because they were removed by previous operations.

        Returns
        -------
        tuple
            List of added objects, List of removed names.
        """
        ...
    
    @property
    def polygons(self): # -> dict[Any, Any]:
        """Polygons.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Polygons3DLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def lines(self): # -> dict[Any, Any]:
        """Lines.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Line3dLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def circles(self): # -> dict[Any, Any]:
        """Circles.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Circle3dLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def rectangles(self): # -> dict[Any, Any]:
        """Rectangles.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Rect3dLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def polygons_voids(self): # -> dict[Any, Any]:
        """Void Polygons.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Polygons3DLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def lines_voids(self): # -> dict[Any, Any]:
        """Void Lines.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Line3dLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def circles_voids(self): # -> dict[Any, Any]:
        """Void Circles.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Circle3dLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def rectangles_voids(self): # -> dict[Any, Any]:
        """Void Rectangles.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Rect3dLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def components_3d(self): # -> dict[Any, Any]:
        """Components.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Components3DLayout`]
            Pyaedt Objects.
        """
        ...
    
    @property
    def pins(self): # -> dict[Any, Any]:
        """Pins.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Pins3DLayout`]
            Pins Dictionary.

        """
        ...
    
    @property
    def vias(self): # -> dict[Any, Any]:
        """Vias.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Pins3DLayout`]
            Vias Dictionary.
        """
        ...
    
    @property
    def nets(self): # -> dict[Any, Any]:
        """Nets.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Nets3DLayout`]
            Nets Dictionary.

        """
        ...
    
    @property
    def power_nets(self): # -> dict[Any, Any]:
        """Nets.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Nets3DLayout`]
            Power Nets Dictionary.

        """
        ...
    
    @property
    def signal_nets(self): # -> dict[Any, Any]:
        """Nets.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Nets3DLayout`]
            Signal Nets Dictionary.

        """
        ...
    
    @property
    def no_nets(self): # -> dict[Any, Any]:
        """Nets without class type.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Nets3DLayout`]
            No Nets Dictionary.

        """
        ...
    
    @property
    def defaultmaterial(self): # -> str:
        """Default materials.

        Returns
        -------
        list
            List of default materials.

        """
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def version(self):
        """AEDT version.

        Returns
        -------
        str
            Version of AEDT.

        """
        ...
    
    @property
    def modeler(self):
        """Modeler."""
        ...
    
    @property
    def model_units(self):
        """Model units."""
        ...
    
    @property
    def Padstack(self): # -> Padstack:
        """Padstack."""
        ...
    
    @pyaedt_function_handler()
    def new_padstack(self, name=...): # -> None:
        """Create a `Padstack` object that can be used to create a padstack.

        Parameters
        ----------
        name : str, optional
            Name of the padstack. The default is ``"Padstack"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Padstack`
            Padstack object if a padstack with this name does not already exist.

        """
        ...
    
    @property
    def padstacks(self): # -> dict[Any, Any]:
        """Read all definitions from HFSS 3D Layout.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(netlist="assignment")
    def change_net_visibility(self, assignment=..., visible=...): # -> bool:
        """Change the visibility of one or more nets.

        Parameters
        ----------
        assignment : str  or list, optional
            One or more nets to visualize. The default is ``None``.
            If no nets are provided all the nets in the design will be selected.
        visible : bool, optional
            Whether to make the selected nets visible.
            The default value is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.SetNetVisible
        """
        ...
    
    @pyaedt_function_handler(netname="net")
    def create_via(self, padstack: str = ..., x: float | str = ..., y: float | str = ..., rotation: float = ..., hole_diam: float = ..., top_layer: str = ..., bot_layer: str = ..., name: str = ..., net: str = ...) -> Pins3DLayout:
        """Create a via based on an existing padstack.

        Parameters
        ----------
        padstack : str, optional
            Name of the padstack. The default is ``"PlanarEMVia"``.
        x : float, optional
            Position on the X axis. The default is ``0``.
        y : float, optional
            Position on the Y axis. The default is ``0``.
        rotation : float, optional
            Angle rotation in degrees. The default is ``0``.
        hole_diam : float, optional
            Diameter of the hole. If ``None`` the default is ``1``,
            in which case the override is disabled.
        top_layer : str, optional
            Top layer. If ``None`` the first layer is taken.
        bot_layer : str, optional
            Bottom layer. If ``None`` the last layer is taken.
        name : str, optional
            Name of the via. If ``None`` a random name is generated.
        net : str, optional
            Name of the net. The default is ``None``, in which case no
            name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Pins3DLayout` or bool
            Object via created when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateVia
        """
        ...
    
    @pyaedt_function_handler(layername="layer", netname="net", net_name="net")
    def create_circle(self, layer, x, y, radius, name=..., net=..., **kwargs): # -> Circle3dLayout:
        """Create a circle on a layer.

        Parameters
        ----------
        layer : str
            Name of the layer.
        x : float
            Position on the X axis.
        y : float
            Position on the Y axis.
        radius : float
            Radius of the circle.
        name : str, optional
            Name of the circle. The default is ``None``, in which case the
            default name is assigned.
        net : str, optional
            Name of the net. The default is ``None``, in which case the
            default name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Circle3dLayout`
            Objects of the circle created when successful.

        References
        ----------
        >>> oEditor.CreateCircle
        """
        ...
    
    @pyaedt_function_handler(layername="layer", dimensions="sizes", net_name="net", netname="net")
    def create_rectangle(self, layer, origin, sizes, corner_radius=..., angle=..., name=..., net=..., **kwargs): # -> Rect3dLayout:
        """Create a rectangle on a layer.

        Parameters
        ----------
        layer : str
            Name of the layer.
        origin : list
            Origin of the coordinate system in a list of ``[x, y]`` coordinates.
        sizes : list
            Dimensions for the box in a list of ``[x, y]`` coordinates.
        corner_radius : float, optional
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        name : str, optional
            Name of the rectangle. The default is ``None``, in which case the
            default name is assigned.
        net : str, optional
            Name of the net. The default is ``None``, in which case the
            default name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Rect3dLayout`
            Name of the rectangle created when successful.

        References
        ----------
        >>> oEditor.CreateRectangle
        """
        ...
    
    @pyaedt_function_handler(layername="layer", net_name="net")
    def create_polygon(self, layer, point_list, units=..., name=..., net=...): # -> Polygons3DLayout:
        """Create a polygon on a specified layer.

        Parameters
        ----------
        layer : str
            Name of the layer.
        point_list : list
            Origin of the coordinate system in a list of ``[x, y]`` coordinates.
        units : str, optional
            Polygon units. Default is modeler units.
        name : str, optional
            Name of the rectangle. The default is ``None``, in which case the
            default name is assigned.
        net : str, optional
            Name of the net. The default is ``None``, in which case the
            default name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Polygons3DLayout`
            Object of the rectangle created when successful.

        References
        ----------
        >>> oEditor.CreatePolygon
        """
        ...
    
    @pyaedt_function_handler(layername="layer", point_list="points", object_owner="assignment")
    def create_polygon_void(self, layer, points, assignment, units=..., name=...): # -> Polygons3DLayout | Literal[False]:
        """Create a polygon void on a specified layer.

        Parameters
        ----------
        layer : str
            Name of the layer.
        points : list
            List of points in a list of ``[x, y]`` coordinates.
        assignment : str
            Object Owner.
        units : str, optional
            Polygon units. Default is modeler units.
        name : str, optional
            Name of the rectangle. The default is ``None``, in which case the
            default name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Polygons3DLayout`
            Object of the rectangle created when successful.

        References
        ----------
        >>> oEditor.CreatePolygon
        """
        ...
    
    @pyaedt_function_handler(layername="layer", center_line_list="center_line_coordinates", net_name="net", netname="net")
    def create_line(self, layer: str, center_line_coordinates: list, lw: float | str = ..., start_style: int = ..., end_style: int = ..., name: str = ..., net: str = ..., **kwargs: any) -> Line3dLayout:
        """Create a line based on a list of points.

        Parameters
        ----------
        layer : str
            Name of the layer to create the line on.
        center_line_coordinates : list
            List of centerline coordinates in the form of ``[x, y]``.
        lw : float, optional
            Line width. The default is ``1``.
        start_style :
            Starting style of the line. Options are:

            * ``0`` - Flat
            * ``1`` - Extended
            * ``2`` - Round

            The default is ``0``.
        end_style :
            Ending style of the line. The options are the same as
            those for ``start_style``. The default is ``0``.
        name : str, optional
            Name  of the line. The default is ``None``, in which case the
            default name is assigned.
        net : str, optional
            Name of the net. The default is ``None``, in which case the
            default name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Line3dLayout`
            Object of the line created when successful.

        References
        ----------
        >>> oEditor.CreateLine
        """
        ...
    
    @pyaedt_function_handler()
    def number_with_units(self, value, units=...):
        """Convert a number to a string with units.

        .. deprecated:: 0.14.0
            Use :func:`value_with_units` in Analysis class instead.

        If value is a string, it's returned as is.

        Parameters
        ----------
        value : float, int, str
            Input  number or string.
        units : optional
            Units for formatting. The default is ``None``, which uses ``"meter"``.

        Returns
        -------
        str
           String concatenating the value and unit.

        """
        ...
    
    @pyaedt_function_handler()
    def place_3d_component(self, component_path, number_of_terminals=..., placement_layer=..., component_name=..., pos_x=..., pos_y=..., create_ports=..., is_3d_placement=..., pos_z=...): # -> ComponentsSubCircuit3DLayout:
        """Place an HFSS 3D component in HFSS 3D Layout.

        Parameters
        ----------
        component_path : str
            Full path to the A3DCOMP file.
        number_of_terminals : int, optional
            Number of ports in the 3D component. The default is ``1``.
        placement_layer : str, optional
            Layer to place the component on. The default is ``None``, in which case it is
            placed on top.
        component_name : str, optional
            Name of the component. The default is ``None``, in which case a
            default name is assigned.
        pos_x : float, optional
            X placement. The default is ``0``.
        pos_y : float, optional
            Y placement. The default is ``0``.
        create_ports : bool, optional
            Whether to expose 3D component ports. The default is ``True``.
        is_3d_placement : bool, optional
            Whether if the component is placed on a layer or arbitrary.
        pos_z : float, optional
            Z placement. When enabled, 3d placement will be automatically enabled too.
             The default is ``False``.

        Returns
        -------
            :class:`ansys.aedt.core.modeler.pcb.object_3d_layout.ComponentsSubCircuit3DLayout`
        """
        ...
    
    @pyaedt_function_handler()
    def create_component_on_pins(self, pins, definition_name=..., component_type=..., ref_des=...): # -> Components3DLayout:
        """Create a component based on a pin list.

        Parameters
        ----------
        pins : list
            Pins to include in the new component.
        definition_name : str, optional
            Name of the component definition. If no name is provided, a
            name is automatically assigned.
        component_type : str, optional
            Component type. The default is ``"Other"``.
        ref_des : str, optional
            Reference designator. The default is ``"U100"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Components3DLayout`

        """
        ...
    
    @pyaedt_function_handler(placement_layer="layer")
    def create_text(self, text, position, layer=..., angle=..., font_size=...):
        """Create a text primitive object.

        Parameters
        ----------
        text : str
            Name for the text primitive object.
        position : list
            Position of the text.
        layer : str, optional
            Layer where text will be placed. The default value is ``"PostProcessing"``.
        angle : float, optional
            Angle of the text. The default value is ``0``.
        font_size : int, optional
            Font size. The default value is ``12``.

        Returns
        -------
        str
            Name of the text primitive.
        """
        ...
    
    @pyaedt_function_handler()
    def create_coordinate_system(self, origin=..., name=...): # -> CoordinateSystems3DLayout:
        """Create a coordinate system.

        Parameters
        ----------
        origin : list
            List of ``[x, y]`` coordinates for the origin of the
            coordinate system. The default is ``None``, in which case
            ``[0, 0]`` is used.
        name : str, optional
            Name of the coordinate system. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.CoordinateSystems3DLayout`
            Created coordinate system.

        References
        ----------
        >>> oEditor.CreateCS
        """
        ...
    


