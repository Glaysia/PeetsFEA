"""
This type stub file was generated by pyright.
"""

from typing import Optional, Tuple
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

"""This module provides methods and data structures for managing all properties of
objects (points, lines, sheeets, and solids) within the AEDT 3D Layout Modeler.
"""
class Object3DLayout:
    """Manages properties of objects in HFSS 3D Layout.

    Parameters
    -----------
    primitives : :class:`ansys.aedt.core.modeler.Model3DLayout.Modeler3dLayout`
    """
    def __init__(self, primitives, prim_type=...) -> None:
        ...
    
    @property
    def object_units(self):
        """Object units.

        Returns
        -------
        str
        """
        ...
    
    @pyaedt_function_handler(property_val="value", names_list="names")
    def change_property(self, value, names=...): # -> Literal[True]:
        """Modify a property.

        Parameters
        ----------
        value : list

        names : list, optional
             The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(property_name="name", property_value="value")
    def set_property_value(self, name, value): # -> Literal[True]:
        """Set a property value.

        Parameters
        ----------
        name : str
            Name of the property.
        value :
            Value of the property.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @property
    def angle(self): # -> None:
        """Get/Set the circle radius.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @angle.setter
    def angle(self, value): # -> None:
        ...
    
    @property
    def absolute_angle(self): # -> float:
        """Get the absolute angle location for 2 pins components.

        Returns
        -------
        float
        """
        ...
    
    @property
    def net_name(self): # -> None:
        """Get/Set the net name.

        Returns
        -------
        str
            Name of the net.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @net_name.setter
    def net_name(self, netname=...): # -> None:
        ...
    
    @property
    def placement_layer(self): # -> None:
        """Get/Set the placement layer of the object.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @placement_layer.setter
    def placement_layer(self, layer_name): # -> None:
        ...
    
    @property
    def bounding_box(self): # -> list[Any]:
        """Get component bounding box.

        Returns
        -------
        list
            [BB_lower_left_X, BB_lower_left_Y, BB_upper_right_X, BB_upper_right_Y].
        """
        ...
    
    @pyaedt_function_handler()
    def create_clearance_on_component(self, extra_soldermask_clearance=...): # -> bool:
        """Create a Clearance on Soldermask layer by drawing a rectangle.

        Parameters
        ----------
        extra_soldermask_clearance : float, optional
            Extra Soldermask value in model units to be applied on component bounding box.

        Returns
        -------
            bool
        """
        ...
    
    @property
    def location(self): # -> list[Any] | None:
        """Retrieve/Set the absolute location in model units.

        Location is computed with combination of 3d Layout location and model center.

        Returns
        -------
        list
           List of ``(x, y)`` coordinates for the component location.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @location.setter
    def location(self, position): # -> None:
        ...
    
    @property
    def lock_position(self): # -> bool:
        """Get/Set the lock position.

        Parameters
        ----------
        lock_position : bool, optional
            The default value is ``True``.

        Returns
        -------
        type

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @lock_position.setter
    def lock_position(self, lock_position=...): # -> None:
        ...
    


class ModelInfoRlc:
    def __init__(self, component, name) -> None:
        ...
    
    @property
    def rlc_model_type(self): # -> list[Any]:
        ...
    
    @property
    def res(self): # -> None:
        ...
    
    @property
    def cap(self): # -> None:
        ...
    
    @property
    def ind(self): # -> None:
        ...
    
    @property
    def is_parallel(self): # -> None:
        ...
    


class Components3DLayout(Object3DLayout):
    """Contains components in HFSS 3D Layout."""
    def __init__(self, primitives, name=..., edb_object=...) -> None:
        ...
    
    @property
    def part(self):
        """Retrieve the component part.

        Returns
        -------
        type
            Component part.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @property
    def part_type(self):
        """Retrieve the component part type.

        Returns
        -------
        type
            Component part type.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @property
    def enabled(self): # -> bool:
        """Enable or Disable the RLC Component.

        Parameters
        ----------
        status : bool, optional
            Set the RLC Component to Enable or Disable state.

        Returns
        -------
        bool
            `True` if succeeded.
        """
        ...
    
    @enabled.setter
    def enabled(self, status): # -> Literal[False] | None:
        ...
    
    @property
    def die_properties(self) -> Optional[Tuple[int, int, str, int]]:
        """Get die properties from component.

        Returns
        -------
        Tuple[int, int, str, int]
            Tuple of die type (``0`` for None, ``1``, for FlipChip, or ``2`` for WireBond), die orientation (``0`` for
            Chip Top or ``1`` for Chip Bottom), die height as a string, and a reserved property as an integer.
        """
        ...
    
    @property
    def port_properties(self) -> Optional[Tuple[str, bool, str, str]]:
        """Get port properties from component.

        Returns
        -------
        Tuple[str, bool, str, str]
            Tuple of reference offset [str], reference size auto [bool], reference size X dimension [str], reference
            size Y dimension [str].
        """
        ...
    
    @port_properties.setter
    def port_properties(self, values: Tuple[str, bool, str, str]): # -> None:
        ...
    
    @property
    def solderball_enabled(self): # -> bool:
        """Check if solderball is enabled.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @property
    def die_enabled(self): # -> bool:
        """Check if the die is enabled. This method is valid for integrated circuits only.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @property
    def die_type(self): # -> Literal[False, 'FlipChip', 'WireBond'] | None:
        """Die type.

        Returns
        -------
        str
        """
        ...
    
    @pyaedt_function_handler()
    def set_die_type(self, die_type=..., orientation=..., height=..., reference_offset=..., auto_reference=..., reference_x=..., reference_y=...): # -> bool:
        """Set the die type.

        Parameters
        ----------
        die_type : int, optional
            Die type. The default is ``1``. Options are ``0`` for None, ``1`` for FlipChip, and
            ``2`` for WireBond.
        orientation : int, optional
            Die orientation. The default is ``0``. Options are ``0`` for Chip Top and ``1`` for
            Chip Bottom.
        height : float, optional
            Die height valid for port setup. The default is ``0``.
        reference_offset : str, float, optional
            Port reference offset. The default is ``0``.
        auto_reference : bool, optional
            Whether to automatically compute reference size. The default is ``True``.
        reference_x : str, float, optional
            Reference x size for when ``auto_reference=False``.
        reference_y : str, float, optional
            Reference y size for when ``auto_reference=False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def set_solderball(self, solderball_type=..., diameter=..., mid_diameter=..., height=..., material=..., reference_offset=...): # -> bool:
        """Set solderball on the active component.

        The method applies to these component types: ``Other``, ``IC`` and ``IO``.

        Parameters
        ----------
        solderball_type : str, optional
            Solderball type. The default is ``"Cyl"``. Options are ``"None"``, ``"Cyl"``,
            and ``"Sph"``.
        diameter : str, optional
            Ball diameter. The default is ``"0.1mm"``.
        mid_diameter : str, optional
            Ball mid diameter. The default is ``"0.1mm"``.
        height : str, optional
            Ball height. The default is height="0.2mm".
        material : str, optional
            Ball material. The default is ``"solder"``.
        reference_offset : str, optional.
            Reference offset for port creation.  The default is ``"0mm"``

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed or the wrong component type.
        """
        ...
    
    @property
    def pins(self): # -> dict[Any, Pins3DLayout]:
        """Component pins.

        Returns
        -------
        dict
            Dictionary of pins.
        """
        ...
    
    @property
    def model(self): # -> ModelInfoRlc | None:
        """RLC model if available.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.ModelInfoRlc`
        """
        ...
    


class Nets3DLayout:
    """Contains Nets in HFSS 3D Layout."""
    def __init__(self, primitives, name=...) -> None:
        ...
    
    @property
    def components(self): # -> dict[Any, Any]:
        """Components that belongs to the Nets.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Components3DLayout`
        """
        ...
    
    @property
    def geometry_names(self): # -> list[Any]:
        """List of geometry names.

        Returns
        -------
        list
            Geometries that belong to the selected net."""
        ...
    
    @pyaedt_function_handler()
    def plot(self, layers=..., show_legend=..., save_plot=..., outline=..., size=..., plot_components_on_top=..., plot_components_on_bottom=..., show=...):
        """Plot a Net to Matplotlib 2D Chart.

        Parameters
        ----------
        layers : str, list, optional
            Name of the layers to include in the plot. If ``None`` all the signal layers will be considered.
        show_legend : bool, optional
            If ``True`` the legend is shown in the plot. (default)
            If ``False`` the legend is not shown.
        save_plot : str, optional
            If a path is specified the plot will be saved in this location.
            If ``save_plot`` is provided, the ``show`` parameter is ignored.
        outline : list, optional
            List of points of the outline to plot.
        size : tuple, int, optional
            Image size in pixel (width, height). Default value is ``(2000, 1000)``
        plot_components_on_top : bool, optional
            If ``True``  the components placed on top layer are plotted.
            If ``False`` the components are not plotted. (default)
            If nets and/or layers is specified, only the components belonging to the specified nets/layers are plotted.
        plot_components_on_bottom : bool, optional
            If ``True``  the components placed on bottom layer are plotted.
            If ``False`` the components are not plotted. (default)
            If nets and/or layers is specified, only the components belonging to the specified nets/layers are plotted.
        show : bool, optional
            Whether to show the plot or not. Default is `True`.
        """
        ...
    


class Pins3DLayout(Object3DLayout):
    """Contains the pins in HFSS 3D Layout."""
    def __init__(self, primitives, name=..., component_name=..., is_pin=...) -> None:
        ...
    
    @property
    def start_layer(self):
        """Retrieve the starting layer of the pin.

        Returns
        -------
        str
            Name of the starting layer of the pin.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @property
    def stop_layer(self):
        """Retrieve the starting layer of the pin.

        Returns
        -------
        str
            Name of the stopping layer of the pin.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @property
    def holediam(self):
        """Retrieve the hole diameter of the pin.

        Returns
        -------
        float
           Hole diameter of the pin.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    


class Geometries3DLayout(Object3DLayout):
    """Contains geometries in HFSS 3D Layout."""
    def __init__(self, primitives, name, prim_type=..., is_void=...) -> None:
        ...
    
    @property
    def obounding_box(self):
        """Bounding box of a specified object.

        Returns
        -------
        list
            List of [LLx, LLy, URx, URy] coordinates.

        References
        ----------
        >>> oEditor.GetBBox
        """
        ...
    
    @property
    def name(self): # -> Any:
        """Name of Primitive."""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @property
    def is_closed(self): # -> Literal[True]:
        """Either if the Geometry is closed or not.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def points(self): # -> list[Any]:
        """Provide the polygon points. For Lines it returns the center line.

        Returns
        -------
        List of :class:`ansys.aedt.core.modeler.cad.object_3dlayout.Points3dLayout`
        """
        ...
    
    @property
    def edges(self): # -> list[Any]:
        """Edges list.

        Returns
        -------
        List
        """
        ...
    
    @pyaedt_function_handler()
    def edge_by_point(self, point): # -> int | None:
        """Return the closest edge to specified point.

        Parameters
        ----------
        point : list
            List of [x,y] values.

        Returns
        -------
        int
            Edge id.
        """
        ...
    
    @property
    def bottom_edge_x(self): # -> int:
        """Compute the lower edge in the layout on x direction.

        Returns
        -------
        int
            Edge number.
        """
        ...
    
    @property
    def top_edge_x(self): # -> int:
        """Compute the upper edge in the layout on x direction.

        Returns
        -------
        int
            Edge number.
        """
        ...
    
    @property
    def bottom_edge_y(self): # -> int:
        """Compute the lower edge in the layout on y direction.

        Returns
        -------
        int
            Edge number.
        """
        ...
    
    @property
    def top_edge_y(self): # -> int:
        """Compute the upper edge in the layout on y direction.

        Returns
        -------
        int
            Edge number.
        """
        ...
    
    @pyaedt_function_handler(propertyname="name")
    def get_property_value(self, name):
        """Retrieve a property value.

        Parameters
        ----------
        name : str
            Name of the property

        Returns
        -------
        type
            Value of the property.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @property
    def negative(self): # -> bool:
        """Get/Set the negative.

        Parameters
        ----------
        negative : bool, optional
            The default is ``False``.

        Returns
        -------
        type

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @negative.setter
    def negative(self, negative=...): # -> None:
        ...
    
    @property
    def net_name(self): # -> None:
        """Get/Set the net name.

        Returns
        -------
        str
            Name of the net.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @net_name.setter
    def net_name(self, netname=...): # -> None:
        ...
    


class Polygons3DLayout(Geometries3DLayout):
    """Manages Hfss 3D Layout polygons."""
    def __init__(self, primitives, name, prim_type=..., is_void=...) -> None:
        ...
    
    @property
    def is_closed(self):
        """Either if the Geometry is closed or not.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def polygon_voids(self): # -> dict[Any, Any]:
        """All Polygon Voids.

        Returns
        -------
        dict
            Dictionary of polygon voids.
        """
        ...
    


class Circle3dLayout(Geometries3DLayout):
    """Manages Hfss 3D Layout circles."""
    def __init__(self, primitives, name, is_void=...) -> None:
        ...
    
    @property
    def center(self): # -> None:
        """Get/Set the circle center.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @center.setter
    def center(self, position): # -> None:
        ...
    
    @property
    def radius(self):
        """Get/Set the circle radius.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @radius.setter
    def radius(self, value): # -> None:
        ...
    


class Rect3dLayout(Geometries3DLayout):
    """Manages Hfss 3D Layout rectangles."""
    def __init__(self, primitives, name, is_void=...) -> None:
        ...
    
    @property
    def corner_radius(self):
        """Get/Set the circle radius.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @corner_radius.setter
    def corner_radius(self, value): # -> None:
        ...
    
    @property
    def two_point_description(self): # -> bool:
        """Get/Set the circle radius.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @two_point_description.setter
    def two_point_description(self, value): # -> None:
        ...
    
    @property
    def center(self): # -> None:
        """Get/Set the rectangle center.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @center.setter
    def center(self, value): # -> None:
        ...
    
    @property
    def width(self): # -> None:
        """Get/Set the circle radius.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    
    @property
    def height(self): # -> None:
        """Get/Set the circle radius.

        Returns
        -------
        str
            placement layer.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @height.setter
    def height(self, value): # -> None:
        ...
    
    @property
    def point_a(self): # -> None:
        """Get/Set the Point A value if 2Point Description is enabled.

        Returns
        -------
        List
            Point A coordinates.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @point_a.setter
    def point_a(self, value): # -> None:
        ...
    
    @property
    def point_b(self): # -> None:
        """Get/Set the Point A value if 2Point Description is enabled.

        Returns
        -------
        List
            Point B coordinates

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @point_b.setter
    def point_b(self, value): # -> None:
        ...
    


class Line3dLayout(Geometries3DLayout):
    """Manages Hfss 3D Layout lines."""
    def __init__(self, primitives, name, is_void=...) -> None:
        ...
    
    @property
    def bend_type(self):
        """Get/Set the line bend type.

        Returns
        -------
        str
            Bend Type.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @bend_type.setter
    def bend_type(self, value): # -> None:
        ...
    
    @property
    def start_cap_type(self):
        """Get/Set the line start type.

        Returns
        -------
        str
            Start Cap Type.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @start_cap_type.setter
    def start_cap_type(self, value): # -> None:
        ...
    
    @property
    def end_cap_type(self):
        """Get/Set the line end type.

        Returns
        -------
        str
            End Cap Type.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @end_cap_type.setter
    def end_cap_type(self, value): # -> None:
        ...
    
    @property
    def width(self):
        """Get/Set the line width.

        Returns
        -------
        str
            Line Width.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    
    @property
    def length(self):
        """Get the line length.

        Returns
        -------
        str
            Line length.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @property
    def center_line(self): # -> dict[Any, Any]:
        """Get the center line points and arc height.

        Returns
        -------
        dict
            Points.
        """
        ...
    
    @center_line.setter
    def center_line(self, points): # -> None:
        ...
    
    @pyaedt_function_handler()
    def add(self, point, position=...):
        """Add a new point to the center line.

        Parameters
        ----------
        point : list
            [x,y] coordinate point to add.
        position : int, optional
            Position of the new point in the geometry.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.pcb.object_3d_layout.Line3dLayout`
        """
        ...
    
    @pyaedt_function_handler()
    def remove(self, point):
        """Remove one or more points from the center line.

        Parameters
        ----------
        point : list, str
            Name of points to remove in the form of ``"Ptx"``.


        Returns
        -------
        :class:`ansys.aedt.core.modeler.pcb.object_3d_layout.Line3dLayout`
        """
        ...
    


class Points3dLayout:
    """Manages HFSS 3D Layout points."""
    def __init__(self, primitives, point) -> None:
        ...
    
    @property
    def is_arc(self): # -> bool:
        """Either if the Point is an arc or not.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def position(self): # -> list[Any]:
        """Points x and y coordinate.

        Returns
        -------
        List
        """
        ...
    
    @pyaedt_function_handler(new_position="location")
    def move(self, location): # -> Literal[True] | None:
        """Move actual point to new location.

        Parameters
        ----------
        location : List
            New point location.

        Returns
        -------
        bool
            ``True`` if the point was moved to the new location.

        """
        ...
    


class ComponentsSubCircuit3DLayout(Object3DLayout):
    """Contains 3d Components in HFSS 3D Layout.

    Parameters
    ----------
    parent :

    name : string, optional
        The default is ``""``.

    """
    def __init__(self, primitives, name=...) -> None:
        ...
    
    @property
    def component_info(self):
        """Retrieve all component info."""
        ...
    
    @property
    def component_name(self): # -> Literal['']:
        """Retrieve the component name."""
        ...
    
    @property
    def angle(self): # -> float:
        """Retrieve/Set the component angle.

        Returns
        -------
        str
            Component angle.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @angle.setter
    def angle(self, angle_val): # -> None:
        ...
    
    @property
    def is_3d_placement(self): # -> bool:
        """Retrieve if the component has 3d placement."""
        ...
    
    @is_3d_placement.setter
    def is_3d_placement(self, value): # -> None:
        ...
    
    @property
    def is_flipped(self): # -> bool:
        """Retrieve if the component is flipped or not."""
        ...
    
    @is_flipped.setter
    def is_flipped(self, value): # -> None:
        ...
    
    @property
    def rotation_axis(self): # -> Literal[False]:
        """Rotation axis around which the component is rotated."""
        ...
    
    @rotation_axis.setter
    def rotation_axis(self, value): # -> None:
        ...
    
    @property
    def rotation_axis_direction(self): # -> list[float] | list[int]:
        """Axis direction of the rotation."""
        ...
    
    @rotation_axis_direction.setter
    def rotation_axis_direction(self, value): # -> None:
        ...
    
    @property
    def local_origin(self): # -> list[Any] | list[int]:
        """Retrieve if the component has 3d placement, the local origin.

        Returns
        -------
        list
            [x, y, z] position.
        """
        ...
    
    @local_origin.setter
    def local_origin(self, value): # -> None:
        ...
    
    @property
    def location(self): # -> list[Any]:
        """Retrieve/Set the absolute location in model units.
        Location is computed with combination of 3d Layout location and model center.

        Returns
        -------
        list
           List of ``(x, y)`` coordinates for the component location.

        References
        ----------
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @location.setter
    def location(self, position): # -> None:
        ...
    


class Padstack:
    """Manages properties of a padstack.

    Parameters
    ----------
    name : str, optional
        Name of the padstack. The default is ``"Padstack"``.
    padstackmanager : optional
        The default is ``None``.
    units : str, optional
        The default is ``mm``.

    """
    def __init__(self, name=..., padstackmanager=..., units=...) -> None:
        ...
    
    class PDSHole:
        """Manages properties of a padstack hole.

        Parameters
        ----------
        holetype : str, optional
            Type of the hole. The default is ``Circular``.
        sizes : str, optional
            Diameter of the hole with units. The default is ``"1mm"``.
        xpos : str, optional
            The default is ``"0mm"``.
        ypos : str, optional
            The default is ``"0mm"``.
        rot : str, optional
            Rotation in degrees. The default is ``"0deg"``.

        """
        def __init__(self, holetype=..., sizes=..., xpos=..., ypos=..., rot=...) -> None:
            ...
        
    
    
    class PDSLayer:
        """Manages properties of a padstack layer."""
        def __init__(self, layername=..., id=...) -> None:
            ...
        
        @property
        def pad(self): # -> PDSHole | None:
            """Pad."""
            ...
        
        @property
        def antipad(self): # -> PDSHole | None:
            """Antipad."""
            ...
        
        @pad.setter
        def pad(self, value=...): # -> None:
            ...
        
        @antipad.setter
        def antipad(self, value=...): # -> None:
            ...
        
        @property
        def thermal(self): # -> PDSHole | None:
            """Thermal."""
            ...
        
        @thermal.setter
        def thermal(self, value=...): # -> None:
            ...
        
    
    
    @property
    def pads_args(self): # -> list[Any]:
        """Pad properties."""
        ...
    
    @pyaedt_function_handler(layername="layer")
    def add_layer(self, layer=..., pad_hole=..., antipad_hole=..., thermal_hole=..., connx=..., conny=..., conndir=..., layer_id=...): # -> bool:
        """Create a layer in the padstack.

        Parameters
        ----------
        layer : str, optional
            Name of layer. The default is ``"Start"``.
        pad_hole : ansys.aedt.core.modeler.Object3d.Object3d.PDSHole
            Pad hole object, which you can create with the :func:`add_hole` method.
            The default is ``None``.
        antipad_hole :
            Antipad hole object, which you can create with the :func:`add_hole` method.
            The default is ``None``.
        thermal_hole :
            Thermal hole object, which you can create with the :func:`add_hole` method.
            The default is ``None``.
        connx : optional
            Connection in the X-axis direction. The default is ``0.``
        conny : optional
            Connection in the Y-axis direction. The default is ``0.``
        conndir :
            Connection attach angle. The default is ``0.``

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(holetype="hole_type", xpos="x", ypos="y", rot="rotation")
    def add_hole(self, hole_type=..., sizes=..., x=..., y=..., rotation=...): # -> PDSHole:
        """Add a hole.

        Parameters
        ----------
        hole_type : str, optional
            Type of the hole. Options are:

            * No" - no pad
            * "Cir" - Circle
            * "Sq" - Square
            * "Rct" - Rectangle
            * "Ov" - Oval
            * "Blt" - Bullet
            * "Ply" - Polygons
            * "R45" - Round 45 thermal
            * "R90" - Round 90 thermal
            * "S45" - Square 45 thermal
            * "S90" - Square 90 thermal

            The default is ``"Cir"``.
        sizes : array, optional
            Array of sizes, which depends on the object. For example, a circle ias an array
            of one element. The default is ``[1]``.
        x :
            Position on the X axis. The default is ``0``.
        y :
            Position on the Y axis. The default is ``0``.
        rotation : float, optional
            Angle rotation in degrees. The default is ``0``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Object3d.Object3d.PDSHole`
            Hole object to be passed to padstack or layer.

        """
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> Literal[True]:
        """Create a padstack in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oPadstackManager.Add

        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> None:
        """Update the padstack in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oPadstackManager.Edit

        """
        ...
    
    @pyaedt_function_handler()
    def remove(self): # -> None:
        """Remove the padstack in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oPadstackManager.Remove

        """
        ...
    


class CoordinateSystems3DLayout:
    """Coordinate systems in HFSS 3D Layout."""
    def __init__(self, primitives) -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    @property
    def valid_properties(self): # -> list[Any]:
        """Valid properties.

        References
        ----------
        >>> oEditor.GetProperties
        """
        ...
    
    @property
    def name(self): # -> None:
        """Name of the coordinate system as a string value.

        Returns
        -------
        str
           Name of the coordinate system as a string value.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @name.setter
    def name(self, obj_name): # -> None:
        ...
    
    @property
    def origin(self): # -> list[float] | list[Any]:
        """Location of the coordinate system.

        Returns
        -------
        list
           Location of the coordinate system.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @origin.setter
    def origin(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def create(self) -> bool:
        """Create coordinate systems in HFSS 3D Layout.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateCS
        """
        ...
    
    @pyaedt_function_handler()
    def get_property_value(self, property_name: str):
        """Retrieve a property value.

        Parameters
        ----------
        property_name : str
            Name of the property.

        Returns
        -------
        type
            Value of the property.

        References
        ----------
        >>> oDesign.GetPropertyValue
        """
        ...
    
    @pyaedt_function_handler()
    def change_property(self, value: list) -> bool:
        """Modify a property.

        Parameters
        ----------
        value : list

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty

        Examples
        --------
        >>> app = Hfss3dLayout()

        >>> cs = app.modeler.create_coordinate_system()
        >>> property = ["NAME:Flipped", "Value:=", True]
        >>> cs.change_property(property)
        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> bool:
        """Delete the coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


