"""
This type stub file was generated by pyright.
"""

import sys
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.modeler import Modeler

if (3, 7) < sys.version_info < (3, 13):
    ...
else:
    ...
class ModelerCircuit(Modeler):
    """ModelerCircuit class.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_nexxim.FieldAnalysisCircuit`

    Examples
    --------
    >>> from ansys.aedt.core import Circuit
    >>> app = Circuit()
    >>> my_modeler = app.modeler
    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def o_def_manager(self):
        """AEDT Definition manager."""
        ...
    
    @property
    def schematic_units(self): # -> str:
        """Schematic units.

        Options are ``"mm"``, ``"mil"``, ``"cm"`` and all other metric and imperial units.
        The default is ``"meter"``.
        """
        ...
    
    @schematic_units.setter
    def schematic_units(self, value): # -> None:
        ...
    
    @property
    def ocomponent_manager(self):
        """Component manager object."""
        ...
    
    @property
    def o_component_manager(self):
        """Component manager object.

        .. deprecated:: 0.15.0
           Use :func:`ocomponent_manager` property instead.

        """
        ...
    
    @property
    def omodel_manager(self):
        """Model manager object."""
        ...
    
    @property
    def o_model_manager(self):
        """Model manager object.

        .. deprecated:: 0.15.0
           Use :func:`omodel_manager` property instead.
        """
        ...
    
    @property
    def oeditor(self):
        """Oeditor Module.

        References
        ----------
        >>> oEditor = oDesign.SetActiveEditor("SchematicEditor")"""
        ...
    
    @pyaedt_function_handler()
    def zoom_to_fit(self): # -> None:
        """Zoom To Fit.

        References
        ----------
        >>> oEditor.ZoomToFit
        """
        ...
    
    @pyaedt_function_handler(firstcomponent="starting_component", secondcomponent="ending_component", pinnum_first="pin_starting", pinnum_second="pin_ending")
    def connect_schematic_components(self, starting_component, ending_component, pin_starting=..., pin_ending=..., use_wire=...): # -> bool:
        """Connect schematic components.

        Parameters
        ----------
        starting_component : str
           Starting (right) component.
        ending_component : str
           Ending (left) component for the connection line.
        pin_starting : int, str, list optional
             Number or name of the pins at which to terminate the connection from the right end of the
             starting component. The default is ``2``.
        pin_ending : int, str, list optional
             Number or name of the pins at which to terminate the connection from the left end of the
             ending component. The default is ``1``.
        use_wire : bool, optional
            Whether to use wires or a page port to connect the pins.
            The default is ``True``, in which case wires are used. Note
            that if wires are not well placed, shorts can result.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateWire
        """
        ...
    
    @pyaedt_function_handler()
    def create_text(self, text, x_origin=..., y_origin=..., text_size=..., text_angle=..., text_color=..., show_rect=..., x1=..., y1=..., x2=..., y2=..., rect_line_width=..., rect_border_color=..., rect_fill=..., rect_color=...):
        """Draw Text.

        Parameters
        ----------
        text : string
            Text to display.
        x_origin : float, optional
            x origin coordinate of the text box.
            Default value is ``0``.
        y_origin : float, optional
            y origin coordinate of the text box .
            Default value is ``0``.
        text_size : int, optional
            Size of text.
            Default value is ``12``.
        text_angle : float, optional
            Angle of text.
            Default value is ``0``.
        text_color : int, optional
            The RGB value of the text color.
            Default value is ``0``.
        show_rect : bool, optional
            Show rectangle.
            Default value is ``False``.
        x1 : float, optional
            The text rectangle left X value, in meters.
            Default value is ``0``.
        y1 : float, optional
            The text rectangle upper Y value, in meters.
            Default value is ``0``.
        x2 : float, optional
            The text rectangle right X value, in meters.
            Default value is ``0``.
        y2 : float, optional
            The text rectangle lower Y value, in meters.
            Default value is ``0``.
        rect_line_width : float, optional
            The width of the rectangle border, in meters.
            Default value is ``0``.
        rect_border_color : int, optional
            The RGB value of the rectangle border color.
            Default value is ``0``.
        rect_fill : int, optional
            The rectangle fill pattern id.
            Available values are: 0 = hollow, 1 = solid, 2 = NEDiagonal, 3 = OrthoCross,
            4 = DiagCross, 5 = NWDiagonal, 6 = Horizontal, 7 = Vertical.
            Default value is ``0``.
        rect_color : int, optional
            The RGB value of the rectangle fill color.
            Default value is ``0``.


        Returns
        -------
        str
             Unique id of the created object when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateText

        """
        ...
    
    @pyaedt_function_handler(property_id="assignment", property_name="name", property_value="value")
    def change_text_property(self, assignment, name, value): # -> bool:
        """Change an oeditor property.

        Parameters
        ----------
        assignment : str
            Object id.
        name : str
            Name of the property. For example, ``Text``.
        value : str, list, int
            Value of the property. It can be a string, an int for a single value, a list of three elements for
            ``[r,g,b]`` color values or a list of two elements for ``[x, y]`` coordinates.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    


class ModelerNexxim(ModelerCircuit):
    """ModelerNexxim class.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_nexxim.FieldAnalysisCircuit`

    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def layouteditor(self):
        """Return the Circuit Layout Editor.

        References
        ----------
        >>> oDesign.SetActiveEditor("Layout")
        """
        ...
    
    @property
    def schematic(self): # -> NexximComponents:
        """Schematic Component.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.primitives_nexxim.NexximComponents`
        """
        ...
    
    @property
    def components(self): # -> NexximComponents:
        """Schematic Component.

        .. deprecated:: 0.4.13
           Use :func:`Circuit.modeler.schematic` instead.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.primitives_nexxim.NexximComponents`
        """
        ...
    
    @property
    def pages(self):
        """Return the number of pages of the current schematic.

        Returns
        -------
        int
        """
        ...
    
    @property
    def edb(self): # -> None:
        """EDB.

        Returns
        -------
        :class:`ansys.aedt.core.Edb`
            edb_core object if it exists.

        """
        ...
    
    @property
    def model_units(self):
        """Layout model units.

        References
        ----------
        >>> oEditor.GetActiveUnits
        >>> oEditor.SetActiveUnits
        """
        ...
    
    @property
    def layout(self): # -> Primitives3DLayout | None:
        """Primitives.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitives_3d_layout.Primitives3DLayout`

        """
        ...
    
    @property
    def primitives(self): # -> Primitives3DLayout:
        """Primitives.

        .. deprecated:: 0.4.13
           Use :func:`Circuit.modeler.layout` instead.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitives_3d_layout.Primitives3DLayout`

        """
        ...
    
    @model_units.setter
    def model_units(self, units): # -> None:
        """Set the model units as a string e.g. "mm"."""
        ...
    
    @pyaedt_function_handler(selections="assignment", pos="offset")
    def move(self, assignment, offset, units=...): # -> bool:
        """Move the selections by the specified ``[x, y]`` coordinates.

        Parameters
        ----------
        assignment : list
            List of the selections.
        offset : list
            Offset for the ``[x, y]`` axis.
        units : str
            Units of the movement. The default is ``meter``. If ``None``, ``schematic_units`` are used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Move
        """
        ...
    
    @pyaedt_function_handler(selections="assignment")
    def rotate(self, assignment, degrees=...): # -> bool:
        """Rotate the selections by degrees.

        Parameters
        ----------
        assignment : list
            List of the selections.
        degrees : optional
            Angle rotation in degrees. The default is ``90``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Rotate
        """
        ...
    


class ModelerTwinBuilder(ModelerCircuit):
    """ModelerTwinBuilder class.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_twin_builder.AnalysisTwinBuilder`

    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def components(self): # -> TwinBuilderComponents:
        """
        .. deprecated:: 0.4.13
           Use :func:`TwinBuilder.modeler.schematic` instead.

        """
        ...
    
    @property
    def schematic(self): # -> TwinBuilderComponents:
        """Schematic Object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitivesTwinBuilder.TwinBuilderComponents`

        """
        ...
    


class ModelerEmit(ModelerCircuit):
    """ModelerEmit class.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_emit`

    """
    def __init__(self, app) -> None:
        ...
    


class ModelerMaxwellCircuit(ModelerCircuit):
    """ModelerMaxwellCircuit class.

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_maxwell_circuit`

    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def schematic(self): # -> MaxwellCircuitComponents:
        """Schematic Object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitivesMaxwellCircuit.MaxwellCircuitComponents`

        """
        ...
    


