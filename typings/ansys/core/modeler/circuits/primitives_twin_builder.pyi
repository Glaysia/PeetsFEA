"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.circuits.primitives_circuit import CircuitComponents

class TwinBuilderComponents(CircuitComponents):
    """TwinBuilderComponents class.

    This class is for managing all circuit components for Twin Builder.

    Parameters
    ----------
    parent :

    modeler :

    Examples
    --------
    Basic usage demonstrated with a Twin Builder design:

    >>> from ansys.aedt.core import Twin Builder
    >>> aedtapp = TwinBuilder()
    >>> prim = aedtapp.modeler.schematic
    """
    @property
    def design_libray(self): # -> Literal['Simplorer Elements']:
        """Design Library."""
        ...
    
    @property
    def tab_name(self): # -> Literal['Quantities']:
        """Tab name."""
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, partname): # -> None:
        """Get object id from a string or integer.

        Parameters
        ----------
        partname : int or str
            ID or name of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        """
        ...
    
    def __init__(self, modeler) -> None:
        ...
    
    @property
    def components_catalog(self): # -> ComponentCatalog:
        """Return the syslib component catalog with all info.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitivesCircuit.ComponentCatalog`
        """
        ...
    
    @property
    def o_simmodel_manager(self):
        """Simulation models manager object."""
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_resistor(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a resistor.

        Parameters
        ----------
        name : str, optional
            Name of the resistor. The default value is ``None``.
        value : float, optional
            Value for the resistor. The default value is ``50``.
        location : list of float, optional
            Position on the X axis and Y axis. The default value is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default value is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list. The default value is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_inductor(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create an inductor.

        Parameters
        ----------
        name : str, optional
            Name of the inductor. The default is ``None``.
        value : float, optional
            Value for the inductor. The default is ``50``.
        location : list of float, optional
            Position on the X axis and Y axis. The default is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_capacitor(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a capacitor.

        Parameters
        ----------
        name : str, optional
            Name of the capacitor. The default value is ``None``.
        value : float, optional
            Value for the capacitor. The default value is ``50``.
        location : list of float, optional
            Position on the X axis and Y axis. The default value is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default value is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list. The default value is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_voltage_source(self, name=..., type=..., amplitude=..., freq=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a voltage source (conservative electrical output).

        Parameters
        ----------
        name : str, optional
            Name of the voltage source. The default is ``None``.
        type  : str, optional
            Type of the source. The default is ``E``.
        amplitude : float, optional
            Amplitude of the waveform if periodic. The default is ``326V``
        freq : float, optional
            Frequency of the periodic waveform. The default is ``50Hz``.
        location : list of float, optional
            Position on the X axis and Y axis. The default value is ``None``.
        angle : float, optional
            Angle of rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list or not. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_diode(self, name=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a diode.

        Parameters
        ----------
        name : str, optional
            Name of the diode. The default is ``None``.
        location : list of float, optional
            Position on the X axis and Y axis. The default value is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_npn(self, name=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create an NPN transistor.

        Parameters
        ----------
        name : str, optional
            Name of the NPN transistor. The default value is ``None``.
        location : list of float, optional
            Position on the X axis and Y axis. The default value is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_pnp(self, name=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a PNP transistor.

        Parameters
        ----------
        name : str, optional
            Name of the PNP transistor. The default is ``None``.
        location : list of float, optional
            Position on the X axis and Y axis. The default value is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_periodic_waveform_source(self, name=..., type=..., amplitude=..., freq=..., phase=..., offset=..., delay=..., location=..., angle=..., use_instance_id_netlist=...):
        """
        Create a periodic waveform source (non conservative real output).

        Parameters
        ----------
        name : str, optional
            Name of the voltage source. The default is ``None``.
        type  : str, optional
            Type of the source [SINE, PULSE, TRAING, SAWTOOTH]. The default is ``SINE``.
        amplitude : float, optional
            Amplitude of the waveform if periodic. The default is ``100V``
        freq : float, optional
            Frequency of the periodic waveform. The default is ``50Hz``.
        phase : float, optional
            Phase of the  periodic waveform. The default is ``0deg``.
        offset : float, optional
            Offset added to the amplitude of the periodic waveform. The default is ``0``.
        delay : float, optional
            Delay before starting of the periodic waveform. The default is ``0``.
        location : list of float, optional
            Position on the X axis and Y axis. The default value is ``None``.
        angle : float, optional
            Angle of rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list or not. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler()
    def create_component_from_sml(self, input_file, model, pins_names): # -> Literal[True]:
        """Create and place a new component based on a .sml file.

        Parameters
        ----------
        input_file : str
            Path to .sml file.
        model : str
            Model name to import.
        pins_names : list
            List of model pins names.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import TwinBuilder
        >>> tb = TwinBuilder(version="2025.1")
        >>> input_file = os.path.join("Your path", "test.sml")
        >>> model = "Thermal_ROM_SML"
        >>> pins_names = ["Input1_InternalHeatGeneration", "Input2_HeatFlow", "Output1_Temp1,Output2_Temp2"]
        >>> tb.modeler.schematic.create_component_from_sml(input_file=model, model=model, pins_names=pins_names)
        >>> tb.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler()
    def update_quantity_value(self, component_name, name, value, netlist_units=...): # -> bool:
        """Change the quantity value of a component.

        Parameters
        ----------
        component_name : str
            Component name.
        name : str
            Quantity name.
        value : str
            Value of the quantity.
        netlist_units : str, optional
            Value of the netlist unit.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import TwinBuilder
        >>> tb = TwinBuilder(version="2025.1")
        >>> G = 0.00254
        >>> modelpath = "Simplorer Elements\\Basic Elements\\Tools\\Time Functions:DATAPAIRS"
        >>> source1 = tb.modeler.schematic.create_component("source1", "", modelpath, [20 * G, 29 * G])
        >>> tb.modeler.schematic.update_quantity_value(source1.composed_name, "PERIO", "0")
        >>> tb.release_desktop(False, False)
        """
        ...
    


