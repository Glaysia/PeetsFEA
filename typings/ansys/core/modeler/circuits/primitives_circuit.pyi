"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class CircuitComponents:
    """CircutComponents class.

    Manages all circuit components for Nexxim and Twin Builder.

    Examples
    --------
    >>> from ansys.aedt.core import Circuit
    >>> aedtapp = Circuit()
    >>> prim = aedtapp.modeler.schematic
    """
    @pyaedt_function_handler()
    def __getitem__(self, partname): # -> None:
        """Retrieve a part.

        Parameters
        ----------
        partname : int or str
           Part ID or part name.

        Returns
        -------
        type
            Part object details.
        """
        ...
    
    def __init__(self, modeler) -> None:
        ...
    
    @pyaedt_function_handler()
    def get_wire_by_name(self, name): # -> None:
        """Wire class by name.

        Parameters
        ----------
        name : str
            Wire name.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.Wire`
        """
        ...
    
    @property
    def wires(self): # -> dict[Any, Any]:
        """All schematic wires in the design.

        Returns
        -------
        dict
            Wires.
        """
        ...
    
    @property
    def o_definition_manager(self):
        """Aedt oDefinitionManager.

        References
        ----------
        >>> oDefinitionManager = oProject.GetDefinitionManager()
        """
        ...
    
    @property
    def ocomponent_manager(self):
        """Component manager object."""
        ...
    
    @property
    def o_component_manager(self):
        """Component manager object.

        .. deprecated:: 0.15.0
           Use :func:`ocomponent_manager` property instead.
        """
        ...
    
    @property
    def osymbol_manager(self):
        """Model manager object."""
        ...
    
    @property
    def o_symbol_manager(self):
        """Model manager object.

        .. deprecated:: 0.15.0
           Use :func:`osymbol_manager` property instead.

        """
        ...
    
    @property
    def version(self):
        """Version."""
        ...
    
    @property
    def model_units(self):
        """Model units."""
        ...
    
    @property
    def schematic_units(self):
        """Schematic units.

        Options are ``"mm"``, ``"mil"``, ``"cm"`` and all other metric and imperial units.
        The default is ``"meter"``.
        """
        ...
    
    @schematic_units.setter
    def schematic_units(self, value): # -> None:
        ...
    
    @property
    def design_type(self):
        """Design type."""
        ...
    
    @property
    def nets(self): # -> list[Any]:
        """List of all schematic nets."""
        ...
    
    @pyaedt_function_handler()
    def create_unique_id(self): # -> int:
        """Create an unique ID.

        Returns
        -------
        int
            Unique ID in the range of ``[1, 65535]``.

        """
        ...
    
    @pyaedt_function_handler()
    def add_pin_iports(self, name, id_num): # -> Literal[True]:
        """Add ports on pins.

        Parameters
        ----------
        name : str
            Name of the component.
        id_num : int
            ID of circuit component.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oeditor.AddPinIPorts
        """
        ...
    
    @pyaedt_function_handler()
    def create_interface_port(self, name, location=..., angle=...): # -> Literal[False]:
        """Create an interface port.

        Parameters
        ----------
        name : str
            Name of the port.
        location : list, optional
            Position on the X and Y axis. The default is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.icepak_boundary.Excitation`
            Circuit Excitation Object.

        References
        ----------
        >>> oEditor.CreateIPort
        """
        ...
    
    @pyaedt_function_handler()
    def create_page_port(self, name, location=..., angle=..., label_position=...):
        """Create a page port.

        Parameters
        ----------
        name : str
            Name of the port.
        location : list, optional
            Position on the X and Y axis.
            If not provided the default is ``None``, in which case an empty list is set.
        angle : int, optional
            Angle rotation in degrees. The default is ``0``.
        label_position : str, optional
            Label position. The default is ``"auto"``.
            Options are ''"Center"``, ``"Left"``, ``"Right"``, ``"Top"``, ``"Bottom"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreatePagePort
        """
        ...
    
    @pyaedt_function_handler()
    def create_gnd(self, location=..., angle=..., page=...): # -> None:
        """Create a ground.

        Parameters
        ----------
        location : list, optional
            Position on the X and Y axis. The default is ``None``.
        angle : optional
            Angle rotation in degrees. The default is ``0``.
        page: int, optional
            Schematics page number. The default value is ``1``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateGround
        """
        ...
    
    @pyaedt_function_handler(touchstone_full_path="input_file")
    def create_model_from_touchstone(self, input_file, model_name=..., show_bitmap=...): # -> str:
        """Create a model from a Touchstone file.

        Parameters
        ----------
        input_file : str or :class:`pathlib.Path`
            Full path to the Touchstone file.
        model_name : str, optional
            Name of the model. The default is ``None``.
        show_bitmap : bool, optional
            Show bitmap image of schematic component.
            The default value is ``True``.

        Returns
        -------
        str
            Model name when successfully created. ``False`` if something went wrong.

        References
        ----------
        >>> oModelManager.Add
        >>> oComponentManager.Add
        """
        ...
    
    @pyaedt_function_handler(touchstone_full_path="input_file")
    def create_model_from_nexxim_state_space(self, input_file, num_terminal, model_name=..., port_names=...): # -> str:
        """Create a model from a Touchstone file.

        Parameters
        ----------
        input_file : str
            Full path to the Touchstone file.
        num_terminal : int
            Number of terminals in the .sss file.
        model_name : str, optional
            Name of the model. The default is ``None``.
        show_bitmap : bool, optional
            Show bitmap image of schematic component.
            The default value is ``True``.
        port_names : list, optional
            List of port names. The default is ``None``.

        Returns
        -------
        str
            Model name when successfully created. ``False`` if something went wrong.

        References
        ----------
        >>> oModelManager.Add
        >>> oComponentManager.Add
        """
        ...
    
    @pyaedt_function_handler()
    def create_touchstone_component(self, model_name, location=..., angle=..., show_bitmap=...):
        """Create a component from a Touchstone model.

        Parameters
        ----------
        model_name : str
            Name of the Touchstone model or full path to touchstone file.
            If full touchstone is provided then, new model will be created.
        location : list of float, optional
            Position on the X  and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        show_bitmap : bool, optional
            Show bitmap image of schematic component.
            The default value is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oModelManager.Add
        >>> oComponentManager.Add
        >>> oEditor.CreateComponent

        Examples
        --------

        >>> from ansys.aedt.core import Circuit
        >>> from pathlib import Path
        >>> cir = Circuit()
        >>> comps = cir.modeler.components
        >>> s_parameter_path = Path("your_path") / "s_param_file_name.s4p"
        >>> circuit_comp = comps.create_touchstone_component(s_parameter_path, location=[0.0, 0.0], show_bitmap=False)
        """
        ...
    
    @pyaedt_function_handler()
    def create_nexxim_state_space_component(self, model_name, num_terminal, location=..., angle=..., port_names=...):
        """Create a component from a Touchstone model.

                Parameters
                ----------
                model_name : str, Path
                    Name of the Touchstone model or full path to touchstone file.
                    If full touchstone is provided then, new model will be created.
                num_terminal : int
                    Number of terminals in the .sss file.
                location : list of float, optional
                    Position on the X  and Y axis.
                angle : float, optional
                    Angle rotation in degrees. The default is ``0``.
                port_names : list, optional
                    Name of ports.
        .

                Returns
                -------
                :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
                    Circuit Component Object.

                References
                ----------
                >>> oModelManager.Add
                >>> oComponentManager.Add
                >>> oEditor.CreateComponent

        """
        ...
    
    @pyaedt_function_handler(inst_name="name")
    def create_component(self, name=..., component_library=..., component_name=..., location=..., angle=..., use_instance_id_netlist=..., global_netlist_list=..., page=...):
        """Create a component from a library.

        Parameters
        ----------
        name : str, optional
            Name of the instance. The default is ``None.``
        component_library : str, optional
            Name of the component library. The default is ``""``.
        component_name : str, optional
            Name of component in the library. The default is ``"RES"``.
        location : list of float, optional
            Position on the X axis and Y axis.
            The default is ``None``, in which case the component is placed in [0, 0].
        angle : optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to enable the instance ID in the net list.
            The default is ``False``.
        global_netlist_list : list, optional
            The default is ``None``, in which case an empty list is passed.
        page: int, optional
            Schematic page number. The default value is ``1``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent

        Examples
        --------

        >>> from ansys.aedt.core import TwinBuilder
        >>> aedtapp = TwinBuilder()
        >>> cmp = aedtapp.modeler.schematic.create_component(component_library="", component_name="ExcitationComponent")
        >>> cmp.set_property("ShowPin", True)
        >>> aedtapp.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(component_name="assignment")
    def disable_data_netlist(self, assignment): # -> Literal[True]:
        """Disable the Nexxim global net list.

        Parameters
        ----------
        assignment : str
            Name of the component.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oComponentManager.GetData
        >>> oComponentManager.Edit
        """
        ...
    
    @pyaedt_function_handler(component_name="assignment")
    def enable_global_netlist(self, assignment, global_netlist_list=...): # -> Literal[True]:
        """Enable Nexxim global net list.

        Parameters
        ----------
        assignment : str
            Name of the component.
        global_netlist_list : list
            A list of lines to include. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oComponentManager.GetData
        >>> oComponentManager.Edit
        """
        ...
    
    @pyaedt_function_handler(symbol_name="name", pin_lists="pins")
    def create_symbol(self, name, pins): # -> Literal[True]:
        """Create a symbol.

        Parameters
        ----------
        name : str
            Name of the symbol.
        pins : list
            List of the pins.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oSymbolManager.Add
        """
        ...
    
    @pyaedt_function_handler()
    def enable_use_instance_name(self, component_library=..., component_name=...): # -> Literal[True]:
        """Enable the use of the instance name.

        Parameters
        ----------
        component_library : str, optional
             Name of the component library. The default is ``""``.
        component_name : str, optional
             Name of the component. The default is ``"RES_"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oComponentManager.GetData
        >>> oComponentManager.Edit
        """
        ...
    
    @pyaedt_function_handler()
    def refresh_all_ids(self): # -> int:
        """Refresh all IDs and return the number of components.

        References
        ----------
        >>> oEditor.GetAllElements()
        """
        ...
    
    @pyaedt_function_handler()
    def add_id_to_component(self, id, name=...): # -> int:
        """Add an ID to a component.

        Parameters
        ----------
        id : int
            ID to assign to the component.

        Returns
        -------
        int
            Number of components.

        """
        ...
    
    @pyaedt_function_handler(objname="assignment")
    def get_obj_id(self, assignment): # -> None:
        """Retrieve the ID of an object.

        Parameters
        ----------
        assignment : str
            Name of the object.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(partid="assignment")
    def get_pins(self, assignment): # -> list[Any]:
        """Retrieve one or more pins.

        Parameters
        ----------
        assignment : int or str
            One or more IDs or names for the pins to retrieve.

        Returns
        -------
        type
            Pin with properties.

        References
        ----------
        >>> oEditor.GetComponentPins
        """
        ...
    
    @pyaedt_function_handler(partid="assignment", pinname="pin")
    def get_pin_location(self, assignment, pin): # -> list[Any]:
        """Retrieve the location of a pin.

        Parameters
        ----------
        assignment : int
            ID of the part.
        pin :
            Name of the pin.

        Returns
        -------
        List
            List of axis values ``[x, y]``.

        References
        ----------
        >>> oEditor.GetComponentPinLocation

        """
        ...
    
    @pyaedt_function_handler()
    def number_with_units(self, value, units=...):
        """Convert a number to a string with units. If value is a string, it's returned as is.

        .. deprecated:: 0.14.0
           Use :func:`value_with_units` in Analysis class instead.

        Parameters
        ----------
        value : float, int, str
            Input  number or string.
        units : optional
            Units for formatting. The default is ``None``, which uses ``"meter"``.

        Returns
        -------
        str
           String concatenating the value and unit.

        """
        ...
    
    @pyaedt_function_handler(points_array="points", line_width="width")
    def create_line(self, points, color=..., width=...):
        """Draw a graphical line.

        Parameters
        ----------
        points : list
            A nested list of point coordinates. For example,
            ``[[x1, y1], [x2, y2], ...]``.
        color : string or 3 item list, optional
            Color or the line. The default is ``"0"``.
        width : float, optional
            Width of the line. The default is ``0``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dcircuit.Line`
            Line Object.

        >>> oEditor.CreateLine
        """
        ...
    
    @pyaedt_function_handler(points_array="points", wire_name="name")
    def create_wire(self, points, name=..., page=...): # -> Wire | Literal[False]:
        """Create a wire.

        Parameters
        ----------
        points : list
            A nested list of point coordinates. For example,
            ``[[x1, y1], [x2, y2], ...]``.
        name : str, optional
            Name of the wire. Default value is ``""``.
        page: int, optional
            Schematics page number. The default value is ``1``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3dcircuit.Wire`
            Wire Object.

        References
        ----------
        >>> oEditor.CreateWire
        """
        ...
    


class ComponentInfo:
    """Manages Circuit Catalog info."""
    def __init__(self, name, component_manager, file_name, component_library) -> None:
        ...
    
    @property
    def props(self): # -> dict[Any, Any]:
        """Retrieve the component properties."""
        ...
    
    @pyaedt_function_handler(inst_name="assignment")
    def place(self, assignment, location=..., angle=..., use_instance_id_netlist=...):
        """Create a component from a library.

        Parameters
        ----------
        assignment : str, optional
            Name of the instance. The default is ``None.``
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to enable the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    


class ComponentCatalog:
    """Indexes Circuit Sys Catalog."""
    @pyaedt_function_handler()
    def __getitem__(self, compname): # -> list[Any] | None:
        """Get component from name.

        Parameters
        ----------
        compname : str
            ID or name of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitivesCircuit.ComponentInfo`
            Circuit Component Info.

        """
        ...
    
    def __init__(self, component_manager) -> None:
        ...
    
    @pyaedt_function_handler()
    def find_components(self, filter_str=...): # -> list[Any]:
        """Find all components with given filter wildcards.

        Parameters
        ----------
        filter_str : str
            Filter String to search.

        Returns
        -------
        list
            List of matching component names.

        """
        ...
    


