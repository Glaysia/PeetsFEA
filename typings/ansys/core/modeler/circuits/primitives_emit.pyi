"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class EmitComponents:
    """EmitComponents class.

    This is the class for managing all EMIT components.
    """
    @property
    def oeditor(self):
        """Oeditor Module."""
        ...
    
    @property
    def odesign(self):
        """Odesign module."""
        ...
    
    @property
    def messenger(self):
        """Messenger."""
        ...
    
    @property
    def version(self):
        """Version."""
        ...
    
    @property
    def model_units(self):
        """Model units."""
        ...
    
    @property
    def omodel_manager(self):
        """AEDT model manager."""
        ...
    
    @property
    def o_model_manager(self):
        """AEDT model manager.

        .. deprecated:: 0.15.0
           Use :func:`omodel_manager` property instead.

        """
        ...
    
    @property
    def o_definition_manager(self):
        """Aedt Definition Manager.

        References
        ----------
        >>> oDefinitionManager = oProject.GetDefinitionManager()
        """
        ...
    
    @property
    def osymbol_manager(self):
        """AEDT Symbol Manager.

        References
        ----------
        >>> oSymbolManager = oDefinitionManager.GetManager("Symbol")
        """
        ...
    
    @property
    def o_symbol_manager(self):
        """AEDT Symbol Manager.

        .. deprecated:: 0.15.0
           Use :func:`osymbol_manager` property instead.

        References
        ----------
        >>> oSymbolManager = oDefinitionManager.GetManager("Symbol")
        """
        ...
    
    @property
    def ocomponent_manager(self):
        """AEDT Component Manager.

        References
        ----------
        >>> oComponentManager = oDefinitionManager.GetManager("Component")
        """
        ...
    
    @property
    def o_component_manager(self):
        """AEDT Component Manager.

        .. deprecated:: 0.15.0
           Use :func:`ocomponent_manager` property instead.

        References
        ----------
        >>> oComponentManager = oDefinitionManager.GetManager("Component")
        """
        ...
    
    @property
    def design_type(self):
        """Design type."""
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, compname): # -> _VT | None:
        """Get a component by its name.

        Parameters
        ----------
        compname : str
           Name of the component.

        Returns
        -------
        EmitComponent
            The Component or ``None`` if a component with the given name is not
            found.
        """
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Iterator[str]:
        ...
    
    def __init__(self, parent, modeler) -> None:
        ...
    
    @property
    def include_personal_library(self, value=...): # -> bool:
        """Include personal library."""
        ...
    
    @include_personal_library.setter
    def include_personal_library(self, value): # -> None:
        ...
    
    @property
    def design_libray(self): # -> Literal['PersonalLib', 'EMIT Elements']:
        """Design library."""
        ...
    
    @property
    def components_catalog(self): # -> ComponentCatalog:
        """System library component catalog with all information.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitivesCircuit.ComponentCatalog`
        """
        ...
    
    @pyaedt_function_handler()
    def create_component(self, component_type, name=..., library=...):
        """Create a new component from a library.

        Parameters
        ----------
        component_type : str
            Type of component to create. For example, "Antenna".
        name : str, optional
            Name to assign to the new component. If ``None``, then an instance
            name is assigned automatically. The default is ``None.``
        library : str, optional
            Name of the component library. If ``None``, the syslib is used. The
            default is ``None``.

        Returns
        -------
        EmitComponent
            The newly created component.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler()
    def create_radio_antenna(self, radio_type, radio_name=..., antenna_name=..., library=...): # -> tuple[Any, Any]:
        """Create a new radio and antenna and connect them.

        Parameters
        ----------
        radio_type : str
            Type of radio to create. For example, "Bluetooth". Must match
            a radio name in the specified library.
        radio_name : str, optional
            Name to assign to the new radio. If ``None``, then an instance
            name is assigned automatically. The default is ``None.``
        antenna_name : str, optional
            Name to assign to the new antenna. If ``None``, then an instance
            name is assigned automatically. The default is ``None.``
        library : str, optional
            Name of the component library. If ``None``, the syslib is used. The
            default is ``None``.

        Returns
        -------
        EmitComponent
            The newly created radio.
        EmitComponent
            The newly created antenna.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler()
    def get_radios(self): # -> dict[str, _VT]:
        """Get all radios in the design.

        Returns
        -------
        Dict : radio_name : EmitRadioComponents
            Dict of all the radio_name and EmitRadioComponents in the
            design.
        """
        ...
    
    @pyaedt_function_handler()
    def get_antennas(self): # -> dict[str, _VT]:
        """Get all antennas in the design.

        Returns
        -------
        Dict : antenna_name : EmitAntennaComponents
            Dict of all the antenna_name and EmitAntennaComponents in the
            design.
        """
        ...
    
    @pyaedt_function_handler()
    def refresh_all_ids(self): # -> int:
        """Refresh all IDs and return the number of components."""
        ...
    
    @pyaedt_function_handler()
    def get_obj_id(self, object_name): # -> str | None:
        """Get object ID.

        Parameters
        ----------
        object_name : str
            Name of the object.

        Returns
        -------
        EmitComponent
            The component when successful, None when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def update_object_properties(self, o):
        """Update the properties of an EMIT component.

        Parameters
        ----------
        o :
            Object (component) to update.

        Returns
        -------
        type
            Object with properties.
        """
        ...
    


class EmitComponent:
    """A component in the EMIT schematic."""
    subclasses = ...
    @classmethod
    def register_subclass(cls, root_node_type): # -> Callable[..., Any]:
        ...
    
    @classmethod
    def create(cls, components, component_name): # -> EmitComponent:
        """Create an EMIT component.

        Parameters
        ----------
        components : list
            List of components in the design.
        component_name : str
            Name of the component.

        Returns
        -------
        EmitComponent
            An instance of the new component.
        """
        ...
    
    def __init__(self, components, component_name) -> None:
        ...
    
    @property
    def composed_name(self): # -> Any:
        """Component name. Needed for compatibility."""
        ...
    
    @pyaedt_function_handler()
    def move_and_connect_to(self, component): # -> None:
        """Move and connect this component to another component.

        Parameters
        ----------
        component : EmitComponent or str
            The component or name of component to move this component to
            and connect. For example, "Radio1"

        """
        ...
    
    @pyaedt_function_handler()
    def port_names(self):
        """Get the names of the component's ports.

        Returns
        -------
        List
            List of port names.

        References
        ----------
        >>> oEditor.GetComponentPorts
        """
        ...
    
    @pyaedt_function_handler()
    def port_connection(self, port_name): # -> tuple[Any, Any] | tuple[None, None]:
        """Get the name component and port connected to the given port.

        Parameters
        ----------
        port_name : str
            The name of the port to interrogate for connection information.

        Returns
        -------
        str
            Connected component name. Returns None if no connection at given
            port.
        str
            Port name on connected component. Returns None if no connection
            at given port.

        References
        ----------
        >>> oEditor.GetWireAtPort
        >>> oEditor.GetWireConnections
        """
        ...
    
    @pyaedt_function_handler()
    def update_property_tree(self):
        """Update the nodes (property groups) for this component.

        Returns
        -------
        EmitComponentPropNode
            The root node of the updated property tree.

        References
        ----------
        >>> oDesign.GetComponentNodeNames
        """
        ...
    
    @pyaedt_function_handler()
    def get_node_properties(self, node=...): # -> dict[Any, Any]:
        """Return the properties of the given node (property group).

        Parameters
        ----------
        node : str
            The name of the node (property group) whose properties will
            be returned. If node is None, the root node properties will be
            returned. (Default value = None)

        Returns
        -------
        dict
            Dictionary of property names (keys) and property values.

        References
        ----------
        >>> oDesign.GetComponentNodeNames
        >>> oDesign.GetComponentNodeProperties
        """
        ...
    
    def get_prop_nodes(self, property_filter=...): # -> list[Any]:
        """Get all property nodes that match a set of key,value pairs.

        Parameters
        ----------
        property_filter : dict, optional
        Only return nodes with all the property name, value pairs of this dict.
            Defaults to ``None`` which returns all nodes.

        Returns
        -------
        List
            List of all matching nodes (EmitComponentPropNode).
        """
        ...
    
    @pyaedt_function_handler()
    def get_connected_components(self): # -> list[Any]:
        """Get all EMIT components that are connected (directly or indirectly) to this component.

        Parameters
        ----------
        None

        Returns
        -------
        List
            List containing all EMIT components that are connected to this component.
        """
        ...
    
    @pyaedt_function_handler()
    def get_type(self):
        """Get the property ``Type`` of a component.

        Parameters
        ----------
        None

        Returns
        -------
        str
            Type property of self.
        """
        ...
    


@EmitComponent.register_subclass("Antenna")
class EmitAntennaComponent(EmitComponent):
    """An Antenna component in the EMIT schematic."""
    def __init__(self, components, component_name) -> None:
        ...
    
    def get_pattern_filename(self):
        """Get the filename of the antenna pattern defining this antenna.

        Parameters
        ----------
        None

        Returns
        -------
        Str
            Filename of the antenna pattern.
        """
        ...
    
    def get_orientation_rpy(self): # -> tuple[float, float, float] | None:
        """Get the RPY orientation of this antenna.

        Parameters
        ----------
        None

        Returns
        -------
            Tuple containing the roll, pitch, and yaw values in degrees defining this orientation.
        """
        ...
    
    def get_position(self, units=...): # -> tuple[Any | list[Any], Any | list[Any], Any | list[Any]] | None:
        """Get the position of this antenna.

        Parameters
        ----------
        units : str, optional
            Units of the antenna position. If None specified, units are meters.

        Returns
        -------
        Tuple containing the X, Y, and Z offset values in specified units.

        """
        ...
    


@EmitComponent.register_subclass("Radio")
class EmitRadioComponent(EmitComponent):
    """A Radio component in the EMIT schematic."""
    def __init__(self, components, component_name) -> None:
        ...
    
    def is_emitter(self): # -> Literal[False]:
        """Check if the radio component is an emitter

        Parameters
        ----------
        None

        Return
        ------
        Bool
            ``True`` if it is an emitter, ``False`` otherwise.
        """
        ...
    
    def bands(self): # -> list[Any]:
        """Get the bands of this radio.

        Parameters
        ----------
        None

        Returns
        -------
        List
            List of the band nodes in the radio."""
        ...
    
    def band_node(self, band_name): # -> None:
        """Get the specified band node from this radio.

        Parameters
        ----------
        band_name : name of the desired band node.

        Returns
        -------
        band_node : Instance of the band node."""
        ...
    
    def band_start_frequency(self, band_node, units=...): # -> list[Any]:
        """Get the start frequency of the band node.

        Parameters
        ----------
        band_node : Instance of the band node.
        units : str, optional
            If ``None`` specified, global units are used.

        Returns
        -------
        Float
            Start frequency of the band node."""
        ...
    
    def band_stop_frequency(self, band_node, units=...): # -> list[Any]:
        """Get the stop frequency of the band node.

        Parameters
        ----------
        band_node : Instance of the band node.
        units : str, optional
            If ``None`` specified, global units are used.

        Returns
        -------
        Float
            Stop frequency of the band node."""
        ...
    
    def set_band_start_frequency(self, band_node, band_start_freq, units=...): # -> None:
        """Set start frequency of the band.

        Parameters
        ----------
        band_node : ansys.aedt.core.modeler.circuits.primitives_emit.EmitComponentPropNode object
            Instance of the band node
        band_start_freq : float
            Start frequency of the band.
        units : str, optional
            Units of the start frequency. If no units are specified or the units
            specified are invalid, then `"Hz"`` is assumed.

        Returns
        ------
        None

        Examples
        --------
        >>> from ansys.aedt.core import Emit
        >>> aedtapp = Emit(new_desktop=False)
        >>> radio = aedtapp.modeler.components.create_component("New Radio")
        >>> band = radio.bands()[0]
        >>> start_freq = 10
        >>> units = "MHz"
        >>> radio.set_band_start_frequency(band, start_freq, units=units)
        """
        ...
    
    def set_band_stop_frequency(self, band_node, band_stop_freq, units=...): # -> None:
        """Set stop frequency of the band.

        Parameters
        ----------
        band_node : ansys.aedt.core.modeler.circuits.primitives_emit.EmitComponentPropNode object
            Instance of the band node
        band_stop_freq : float
            Stop frequency of the band.
        units : str, optional
            Units of the stop frequency. If no units are specified or the units
            specified are invalid, then `"Hz"`` is assumed.

        Returns
        ------
        None

        Examples
        --------
        >>> from ansys.aedt.core import Emit
        >>> aedtapp = Emit(new_desktop=False)
        >>> radio = aedtapp.modeler.components.create_component("New Radio")
        >>> band = radio.bands()[0]
        >>> stop_freq = 10
        >>> units = "MHz"
        >>> radio.set_band_stop_frequency(band, stop_freq, units=units)
        """
        ...
    
    def band_channel_bandwidth(self, band_node, units=...): # -> list[Any]:
        """Get the channel bandwidth of the band node.

        Parameters
        ----------
        band_node : Instance of the band node.
        units : str, optional
            If ``None`` specified, global units are used.

        Returns
        -------
        Float
            Channel bandwidth of the band node."""
        ...
    
    def band_tx_power(self, band_node, units=...): # -> list[Any] | None:
        """Get the transmit power of the band node.

        Parameters
        ----------
        band_node : Instance of the band node.
        units : str
            Units to use for the tx power.

        Returns
        -------
        Float
            Transmit power of the band node."""
        ...
    
    def has_tx_channels(self): # -> bool:
        """Check the radio for enabled transmit channels.

        Parameters
        ----------
        None

        Returns
        -------
        Bool
            ``True`` if the radio has enabled transmit channels and
            ``False`` if there are no enabled transmit channels."""
        ...
    
    def has_rx_channels(self): # -> bool:
        """Check the radio for enabled receive channels.

        Parameters
        ----------
        None

        Returns
        -------
        Bool
            ''True'' if the radio has enabled receive channels and
            ''False'' if there are no enabled receive channels."""
        ...
    
    def get_connected_antennas(self): # -> list[Any]:
        """Return a list of antennas connected to this radio instance.

        Parameters
        ----------
        None

        Returns
        -------
        List
            List of antennas connected to this radio."""
        ...
    
    def get_sampling(self):
        """Returns the sampling for the radio.

        Parameters
        ----------
        None

        Return
        ------
        EmitComponentPropNode
            Sampling node for the radio.
        """
        ...
    


class EmitComponentPropNode:
    def __init__(self, editor, design, parent_component, node_name) -> None:
        ...
    
    @property
    def props(self): # -> dict[Any, Any]:
        """Returns a dictionary of all the properties for this node.

        Parameters
        ----------
        None

        Returns
        -------
        Dict
            Dictionary of all the properties for this node."""
        ...
    
    @property
    def enabled(self):
        """Returns ''True'' if the node is enabled and ''False'' if the node is disabled.

        Parameters
        ----------
        None

        Returns
        -------
        Bool
            Returns ``True`` if the node is enabled and
            ``False`` if the node is disabled."""
        ...
    
    @pyaedt_function_handler()
    def set_band_power_level(self, power, units=...): # -> None:
        """Set the power of the fundamental for the given band.

        Parameters
        ----------
        power : float
            Peak amplitude of the fundamental [dBm].
        units : str, optional
            Units of the input power. If None specified, global units are used.

        Return
        ------
        None
        """
        ...
    
    @pyaedt_function_handler()
    def get_band_power_level(self, units=...): # -> list[Any]:
        """Get the power of the fundamental for the given band.

        Parameters
        ----------
        units : str, optional
            Units to use for the power. If None specified, global units are used.

        Return
        ------
        Float
            Peak amplitude of the fundamental [units].
        """
        ...
    
    @pyaedt_function_handler()
    def set_channel_sampling(self, sampling_type=..., percentage=..., max_channels=..., seed=...): # -> None:
        """Set the channel sampling for the radio.

        If a percentage is specified, then it will be used instead of max_channels.

        Parameters
        ----------
        sampling_type : str, optional
            Type of sampling to use: Uniform, Random, or All.
        percentage : float, optional
            Percentage of channels to sample for the analysis.
        max_channels : float, optional
            Maximum number of channels to sample for the analysis.
        seed : float, optional
            Seed used for the random channel generator. Applies to
            random sampling only.

        Returns
        -------
        None
        """
        ...
    
    @enabled.setter
    def enabled(self, value): # -> None:
        """Set the node enabled or disabled.

        Parameters
        ----------
        value : bool
            If ''True'' sets the node enabled and if
            ''False'' sets the node disabled.

        Returns
        -------
        None
        """
        ...
    


