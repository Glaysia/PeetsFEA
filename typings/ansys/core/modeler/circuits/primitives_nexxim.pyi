"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.circuits.primitives_circuit import CircuitComponents

class NexximComponents(CircuitComponents):
    """Manages circuit components for Nexxim.

    Parameters
    ----------
    modeler : :class:`ansys.aedt.core.modeler.schematic.ModelerNexxim`
        Inherited parent object.

    Examples
    --------
    >>> from ansys.aedt.core import Circuit
    >>> aedtapp = Circuit()
    >>> prim = aedtapp.modeler.schematic
    """
    @property
    def design_libray(self): # -> Literal['Nexxim Circuit Elements']:
        """Design library."""
        ...
    
    @property
    def tab_name(self): # -> Literal['PassedParameterTab']:
        """Tab name."""
        ...
    
    @pyaedt_function_handler()
    def __getitem__(self, partname): # -> CircuitComponent | None:
        """Get the object ID if the part name is an integer or the object name if it is a string.

        Parameters
        ----------
        partname : int or str
            Part ID or object name.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.
        """
        ...
    
    def __init__(self, modeler) -> None:
        ...
    
    @pyaedt_function_handler()
    def get_component(self, name): # -> Literal[False]:
        """Get a component.

        Parameters
        ----------
        name : str, int
            Name of the component.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
             Circuit Component Object.
        """
        ...
    
    @pyaedt_function_handler()
    def delete_component(self, name): # -> bool:
        """Get and delete a component.

        Parameters
        ----------
        name : str, int
            Name of the component.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @property
    def components_catalog(self): # -> ComponentCatalog:
        """System library component catalog with all information.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitivesCircuit.ComponentCatalog`
        """
        ...
    
    @pyaedt_function_handler()
    def create_subcircuit(self, location=..., angle=..., name=..., nested_subcircuit_id=...): # -> CircuitComponent | Literal[False]:
        """Add a new Circuit subcircuit to the design.

        Parameters
        ----------
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``None``.
        name : str, optional
            Name of the design. The default is ``None``, in which case
            a unique name is generated.
        nested_subcircuit_id : str, optional
            ID of the nested subcircuit.
            Example `"U1"`.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object when successful or ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit()
        """
        ...
    
    @pyaedt_function_handler(component="assignment")
    def duplicate(self, assignment, location=..., angle=..., flip=...): # -> Literal[False]:
        """Add a new subcircuit to the design.

        .. note::
            This works only in graphical mode.

        Parameters
        ----------
        assignment : :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Component to duplicate.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        flip : bool, optional
            Whether the component should be flipped. The default value is ``False``.

        Returns
        -------
        ::class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent` Circuit Component Object
        when successful or ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(components_to_connect="assignment")
    def connect_components_in_series(self, assignment, use_wire=...): # -> Literal[True]:
        """Connect schematic components in series.

        Parameters
        ----------
        assignment : list[:class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`]
           List of Components to connect. It can be a list of objects or component names.
        use_wire : bool, optional
            Whether to use wires or a page port to connect the pins.
            The default is ``True``, in which case wires are used. Note
            that if wires are not well placed, shorts can result.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> circuit = Circuit()
        >>> circuit.modeler.schematic_units = "mil"
        >>> myind = circuit.modeler.schematic.create_inductor(value=1e-9, location=[0, 0])
        >>> myres = circuit.modeler.schematic.create_resistor(value=50, location=[100, 2000])
        >>> circuit.modeler.schematic.connect_components_in_series([myind, myres])
        """
        ...
    
    @pyaedt_function_handler(components_to_connect="assignment")
    def connect_components_in_parallel(self, assignment): # -> Literal[True]:
        """Connect schematic components in parallel.

        Parameters
        ----------
        assignment : list[:class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`]
           List of Components to connect. It can be a list of objects or component names.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> circuit = Circuit()
        >>> myind = circuit.modeler.schematic.create_inductor("L100", 1e-9)
        >>> myres = circuit.modeler.schematic.create_resistor("R100", 50)
        >>> circuit.modeler.schematic.connect_components_in_parallel([myind, myres.composed_name])
        """
        ...
    
    @pyaedt_function_handler(sourcename="name")
    def add_subcircuit_3dlayout(self, name): # -> Literal[False]:
        """Add a subcircuit from a HFSS 3DLayout.

        Parameters
        ----------
        name : str
            Name of the source design.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oProject.CopyDesign
        >>> oEditor.PasteDesign
        """
        ...
    
    @pyaedt_function_handler()
    def create_field_model(self, design_name, solution_name, pin_names, model_type=...): # -> tuple[Any, Any] | Literal[False]:
        """Create a field model.

        Parameters
        ----------
        design_name : str
            Name of the design.
        solution_name : str
            Name  of the solution.
        pin_names : list
            List of the pin names.
        model_type : str, optional
            Type of the model. The default is ``"hfss"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModelManager.Add
        >>> oComponentManager.Add
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_resistor(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a resistor.

        Parameters
        ----------
        name : str, optional
            Name of the resistor. The default is ``None``.
        value : float, optional
            Resistance in ohms. The default is ``50``.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_inductor(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create an inductor.

        Parameters
        ----------
        name : str, optional
            Name of the inductor. The default is ``None``.
        value : float, optional
            Inductance value. The default is ``50``.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_capacitor(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a capacitor.

        Parameters
        ----------
        name : str, optional
            Name of the capacitor. The default is ``None``.
        value : float, optional
            Capacitor value. The default is ``50``.
        location : list of float, optional
            Position on the X axis and Y axis. The default is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_voltage_dc(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a voltage DC source.

        Parameters
        ----------
        name : str, optional
            Name of the voltage DC source. The default is ``None``.
        value : float, optional
            Voltage value. The default is ``50``.
        location : list of float, optional
            Position on the X axis and Y axis. The default is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(probe_name="name")
    def create_voltage_probe(self, name=..., location=..., angle=..., use_instance_id_netlist=...): # -> Literal[False]:
        """Create a voltage probe.

        Parameters
        ----------
        name : str, optional
            Name of the voltage probe. The default is ``None``.
        location : list of float, optional
            Position on the X axis and Y axis. The default is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit()
        >>> cir.modeler.components.create_voltage_probe(name="probe")
        >>> cir.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler()
    def create_current_probe(self, name=..., location=..., angle=..., use_instance_id_netlist=...): # -> Literal[False]:
        """Create a current probe.

        Parameters
        ----------
        name : str, optional
            Name of the current probe. The default is ``None``.
        location : list of float, optional
            Position on the X axis and Y axis. The default is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit()
        >>> cir.modeler.components.create_current_probe(name="probe")
        >>> cir.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_current_pulse(self, name=..., value_lists=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a current pulse.

        Parameters
        ----------
        name : str, optional
            Name of the current pulse. The default is ``None``.
        value_lists : list, optional
            List of values for the current pulse. The default is ``[]``.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_voltage_pulse(self, name=..., value_lists=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a voltage pulse.

        Parameters
        ----------
        name : str, optional
            Name of the voltage pulse. The default is ``None``.
        value_lists : list, optional
            List of values for the voltage pulse. The default is ``[]``.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_voltage_pwl(self, name=..., time_list=..., voltage_list=..., location=..., angle=..., use_instance_id_netlist=...): # -> Literal[False]:
        """Create a pwl voltage source.

        Parameters
        ----------
        name : str, optional
            Name of the voltage pulse. The default is ``None``.
        time_list : list, optional
            List of time points for the pwl voltage source. The default is ``[0]``.
        voltage_list : list, optional
            List of voltages for the pwl voltage source. The default is ``[0]``.
        location : list of float, optional
            Position on the x-axis and y-xis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_current_dc(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a current DC source.

        Parameters
        ----------
        name : str, optional
            Name of the current DC source. The default is ``None``.
        value : float, optional
            Current value. The default is ``1``.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    def create_coupling_inductors(self, compname, l1, l2, value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a coupling inductor.

        Parameters
        ----------
        compname : str
            Name of the coupling inductor.
        l1 : float, optional
            Value for the first inductor.
        l2 : float, optional
            Value for the second inductor.
        value : float, optional
            Value for the coupling inductor. The default is ``1``.
        location : list of float, optional
            Position on the X axis and Y axis. The default is ``None``.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_diode(self, name=..., model_name=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a diode.

        Parameters
        ----------
        name : str
            Name of the diode. The default is ``None``.
        model_name : str, optional
            Name of the model. The default is ``"required"``.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_npn(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create an NPN transistor.

        Parameters
        ----------
        name : str
            Name of the NPN transistor. The default is ``None``.
        value : float, optional
            Value for the NPN transistor. The default is ``None``.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(compname="name")
    def create_pnp(self, name=..., value=..., location=..., angle=..., use_instance_id_netlist=...):
        """Create a PNP transistor.

        Parameters
        ----------
        name : str
            Name of the PNP transistor. The default is ``None``.
        value : float, optional
            Value for the PNP transistor. The default is ``None``.
        location : list of float, optional
            Position on the X axis and Y axis.
        angle : float, optional
            Angle rotation in degrees. The default is ``0``.
        use_instance_id_netlist : bool, optional
            Whether to use the instance ID in the net list.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oEditor.CreateComponent
        """
        ...
    
    @pyaedt_function_handler(symbol_name="name", pin_lists="pins", parameter_list="parameters", parameter_value="values")
    def create_new_component_from_symbol(self, name, pins, time_stamp=..., description=..., refbase=..., parameters=..., values=..., gref=...): # -> Literal[True]:
        """Create a component from a symbol.

        Parameters
        ----------
        name : str
            Name of the symbol.
        pins : list
            List of pin names.
        time_stamp : int, optional
            UTC time stamp.
        description : str, optional
            Component description.
        refbase : str, optional
            Reference base. The default is ``"U"``.
        parameters : list
            List of parameters.
            If not provided the default is ``None``, in which case an empty list is set.
        values : list
            List of parameter values.
            If not provided the default is ``None``, in which case an empty list is set.
        gref : str, optional
            Global Reference

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModelManager.Add
        >>> oComponentManager.Add
        """
        ...
    
    @pyaedt_function_handler(comp_name="name")
    def add_subcircuit_dynamic_link(self, pyaedt_app=..., solution_name=..., extrusion_length=..., enable_cable_modeling=..., default_matrix=..., tline_port=..., name=...): # -> Literal[False]:
        """Add a subcircuit from `HFSS`, `Q3d` or `2D Extractor` in circuit design.

        Parameters
        ----------
        pyaedt_app : :class:`ansys.aedt.core.q3d.Q3d` or :class:`ansys.aedt.core.q3d.Q2d` or
            :class:`ansys.aedt.core.q3d.Hfss`.
            pyaedt application object to include. It could be an Hfss object, a Q3d object or a Q2d.
        solution_name : str, optional
            Name of the solution and sweep. The default is ``"Setup1 : Sweep"``.
        extrusion_length : float, str, optional
            Extrusion length for 2D Models (q2d or Hfss) in model units. Default is `None`.
        enable_cable_modeling : bool, optional
            Either if the Hfss Cable modeling has to be enabled for 2D subcircuits.
        default_matrix : str, optional
            Matrix to link to the subcircuit. Default to `"Original"`. It only applies to 2D Extractor and Q3D.
        tline_port : str, optional
            Port to be used for tramsission line. Only applies to Hfss.
        name : str, optional
            Component name.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        References
        ----------
        >>> oModelManager.Add
        >>> oComponentManager.Add
        >>> oDesign.AddCompInstance
        >>> oDesign.AddDynamicLink
        """
        ...
    
    @pyaedt_function_handler()
    def set_sim_option_on_hfss_subcircuit(self, component, option=...): # -> bool:
        """Set the simulation option on the HFSS subscircuit.

        Parameters
        ----------
        component : str or :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Address of the component instance. For example, ``"Inst@layout_cutout;87;1"``.
        option : str
            Set the simulation strategy. Options are ``"simulate"`` and ``"interpolate"``. The default
            is ``"simulate"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler()
    def set_sim_solution_on_hfss_subcircuit(self, component, solution_name=...): # -> Literal[True]:
        """Set the simulation solution on the HFSS subcircuit.

        Parameters
        ----------
        component : str
            Address of the component instance. For example, ``"Inst@layout_cutout;87;1"``.
        solution_name : str, optional
            Name of the solution and sweep. The default is ``"Setup1 : Sweep"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oProject.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(component_name="name")
    def refresh_dynamic_link(self, name): # -> Literal[True]:
        """Refresh a dynamic link component.

        Parameters
        ----------
        name : str
            Name of the dynamic link component.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oComponentManager.UpdateDynamicLink
        """
        ...
    
    @pyaedt_function_handler(model_path="input_file", model_name="model", symbol_name="symbol")
    def create_component_from_spicemodel(self, input_file, model=..., create_component=..., location=..., symbol_path=..., symbol=...): # -> bool:
        """Create and place a new component based on a spice .lib file.

        Parameters
        ----------
        input_file : str or :class:`pathlib.Path`
            Path to .lib file.
        model : str, optional
            Model name to import. If `None` the first subckt in the lib file will be placed.
        create_component : bool, optional
            If set to ``True``, create a spice model component. Otherwise, only import the spice model.
        location : list, optional
            Position in the schematic of the new component.
        symbol_path : str, optional
            Path to the symbol library.
            Default value is ``"Nexxim Circuit Elements\\Nexxim_symbols:"``.
        symbol : str, optional
            Symbol name to replace the spice model with.
            Default value is an empty string which means the default symbol for spice is used.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        Examples
        --------
        >>> from pathlib import Path
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit(version="2025.1")
        >>> model = Path("Your path") / "test.lib"
        >>> cir.modeler.schematic.create_component_from_spicemodel(input_file=model, model="GRM1234", symbol="nexx_cap")
        >>> cir.release_desktop(False, False)
        """
        ...
    
    @pyaedt_function_handler(model_path="input_file", solution_name="solution")
    def add_siwave_dynamic_link(self, input_file, solution=..., simulate_solutions=...): # -> Literal[False]:
        """Add a siwave dinamyc link object.

        Parameters
        ----------
        input_file : str or :class:`pathlib.Path`
            Full path to the .siw file.
        solution : str, optional
            Solution name.
        simulate_solutions : bool, optional
            Either if simulate or interpolate existing solutions.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.
        """
        ...
    


