"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class CircuitPins:
    """Manages circuit component pins."""
    def __init__(self, circuit_comp, pinname, pin_number) -> None:
        ...
    
    @property
    def units(self):
        """Length units."""
        ...
    
    @property
    def location(self): # -> list[Any]:
        """Pin Position in [x,y] format.

        References
        ----------
        >>> oPadstackManager.GetComponentPinLocation
        """
        ...
    
    @property
    def net(self): # -> Literal['']:
        """Get pin net."""
        ...
    
    @property
    def angle(self): # -> int | float:
        """Pin angle."""
        ...
    
    @pyaedt_function_handler(component_pin="assignment")
    def connect_to_component(self, assignment, page_name=..., use_wire=..., wire_name=..., clearance_units=..., page_port_angle=...):
        """Connect schematic components.

        Parameters
        ----------
        assignment : :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitPins`
           Component pin to attach.
        page_name : str, optional
            Page port name. The default value is ``None``, in which case
            a name is automatically generated.
        use_wire : bool, optional
            Whether to use wires or a page port to connect the pins.
            The default is ``False``, in which case a page port is used. Note
            that if wires are used but not well placed, shorts can result.
        wire_name : str, optional
            Wire name used only when ``user_wire=True``. The default is ``""``.
        clearance_units : int, optional
            Number of snap units (100mil each) around the object to overcome pins and wires.
        page_port_angle : int, optional
            Page port angle on the source pin. The default is ``None``, in which case
            the angle is automatically computed.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oPadstackManager.CreatePagePort
        """
        ...
    


class ComponentParameters(dict):
    """Manages component parameters."""
    def __setitem__(self, key, value): # -> Literal[False] | None:
        ...
    
    def __init__(self, component, tab, *args, **kw) -> None:
        ...
    


class ModelParameters:
    """Manages model parameters."""
    def update(self): # -> bool:
        """Update the model properties.

        Returns
        -------
        bool
        """
        ...
    
    def __init__(self, component, name, props) -> None:
        ...
    


class CircuitComponent:
    """Manages circuit components."""
    def __getitem__(self, item):
        ...
    
    @property
    def composed_name(self): # -> str:
        """Composed names."""
        ...
    
    def __init__(self, circuit_components, tabname=..., custom_editor=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the component.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def refdes(self): # -> None:
        """Reference designator."""
        ...
    
    @property
    def units(self):
        """Length units."""
        ...
    
    @property
    def model_name(self): # -> None:
        """Return Model Name if present.

        Returns
        -------
        str
        """
        ...
    
    @property
    def model_data(self): # -> ModelParameters | dict[Any, Any]:
        """Return the model data if the component has one.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Object3d.ModelParameters`
        """
        ...
    
    @property
    def parameters(self): # -> ComponentParameters | dict[Any, Any]:
        """Circuit Parameters.

        References
        ----------
        >>> oEditor.GetProperties
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @property
    def component_info(self): # -> ComponentParameters | dict[Any, Any]:
        """Component parameters.

        References
        ----------
        >>> oEditor.GetProperties
        >>> oEditor.GetPropertyValue
        """
        ...
    
    @property
    def bounding_box(self): # -> list[Any] | list[int]:
        """Component bounding box."""
        ...
    
    @property
    def pins(self): # -> list[Any]:
        """Pins of the component.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitPins`]

        """
        ...
    
    @property
    def location(self): # -> list[Any]:
        """Get the part location.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty
        """
        ...
    
    @location.setter
    def location(self, location_xy): # -> None:
        """Set the part location.

        Parameters
        ----------
        location_xy : list
            List of x and y coordinates. If float values are provided, the default units are used.
        """
        ...
    
    @property
    def angle(self): # -> float:
        """Get the part angle.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty
        """
        ...
    
    @angle.setter
    def angle(self, angle=...): # -> None:
        """Set the part angle."""
        ...
    
    @property
    def mirror(self): # -> bool:
        """Get the part mirror.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty
        """
        ...
    
    @mirror.setter
    def mirror(self, mirror_value=...): # -> None:
        """Mirror part.

        Parameters
        ----------
        mirror_value : bool
            Either to mirror the part. The default is ``True``.

        Returns
        -------

        """
        ...
    
    @pyaedt_function_handler(symbol_color="color")
    def set_use_symbol_color(self, color=...): # -> Literal[True]:
        """Set symbol color usage.

        Parameters
        ----------
        color : bool, optional
            The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(R="red", G="green", B="blue")
    def set_color(self, red=..., green=..., blue=...): # -> Literal[True]:
        """Set symbol color.

        Parameters
        ----------
        red : int, optional
            Red color value. The default is ``255``.
        green : int, optional
            Green color value. The default is ``128``.
        blue : int, optional
            Blue color value. The default is ``0``

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(property_name="name", property_value="value")
    def set_property(self, name, value): # -> Literal[True]:
        """Set a part property.

        Parameters
        ----------
        name : str
            Name of the property.
        value :
            Value for the property.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(vPropChange="property", names_list="names")
    def change_property(self, property_name, names=...): # -> Literal[False]:
        """Modify a property.

        Parameters
        ----------
        property_name : list
            Property value in AEDT syntax.
        names : list, optional
             The default is ``None``.

        Returns
        -------
        bool

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler()
    def enforce_touchstone_model_passive(self): # -> bool | None:
        """Enforce touchstone model passive.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModelManager.EditWithComps
        """
        ...
    
    @pyaedt_function_handler()
    def change_symbol_pin_locations(self, pin_locations): # -> bool:
        """Change the locations of symbol pins.

        Parameters
        ----------
        pin_locations : dict
            A dictionary with two keys: "left" and "right",
            each containing a list of pin names to be placed on the left and
            right sides of the symbol, respectively.

        Returns
        -------
        bool
            ``True`` if pin locations were successfully changed, ``False`` otherwise.

        References
        ----------
        >>> oSymbolManager.EditSymbolAndUpdateComps

        Examples
        --------
        >>> from ansys.aedt.core import Circuit
        >>> cir = Circuit(my_project)
        >>> cir.modeler.schematic_units = "mil"
        >>> ts_path = os.path.join(current_path, "connector_model.s4p")
        >>> ts_component = cir.modeler.schematic.create_touchstone_component(ts_path, show_bitmap=False)
        >>> pin_locations = {
        ...     "left": ["DDR_CH3_DM_DBI0_BGA_BE47", "DDR_CH3_DM_DBI1_BGA_BJ50", "DDR_CH3_DM_DBI1_DIE_12471"],
        ...     "right": ["DDR_CH3_DM_DBI0_DIE_7976"],
        ... }
        >>> ts_component.change_symbol_pin_locations(pin_locations)
        """
        ...
    
    @property
    def component_path(self): # -> Literal[False] | None:
        """Component definition path."""
        ...
    


class Wire:
    """Creates and manipulates a wire."""
    def __init__(self, modeler, composed_name=...) -> None:
        ...
    
    @property
    def points_in_segment(self): # -> dict[Any, Any]:
        """Points in segment."""
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def wires(self): # -> list[Any]:
        """List of all schematic wires in the design."""
        ...
    
    @pyaedt_function_handler(wire_name="name")
    def display_wire_properties(self, name=..., property_to_display=..., visibility=..., location=...): # -> bool:
        """
        Display wire properties.

        Parameters
        ----------
        name : str, optional
            Wire name to display.
            Default value is ``""``.
        property_to_display : str, optional
            Property to display. Choices are: ``"NetName"``, ``"PinCount"``, ``"AlignMicrowavePorts"``,
            ``"SchematicID"``, ``"Segment0"``.
            Default value is ``"NetName"``.
        visibility : str, optional
            Visibility type. Choices are ``"Name"``, ``"Value"``, ``"Both"``, ``"Evaluated Value"``,
            ``"Evaluated Both"``.
            Default value is ``"Name"``.
        location : str, optional
            Wire name location. Choices are ``"Left"``, ``"Top"``, ``"Right"``, ``"Bottom"``, ``"Center"``.
            Default value is ``"Top"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def get_net_name(self): # -> str:
        """Get the wire net name.

        Returns
        -------
        str
            Wire net name.
        """
        ...
    
    @pyaedt_function_handler()
    def set_net_name(self, name, split_wires=...): # -> Literal[True]:
        """Set wire net name.

        Parameters
        ----------
        name : str
            Name of the wire.
        split_wires : bool, optional
            Whether if the wires with same net name should be split or not. Default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


