"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.modeler import Modeler
from ansys.aedt.core.modeler.pcb.primitives_3d_layout import Primitives3DLayout

class Modeler3DLayout(Modeler, Primitives3DLayout):
    """Manages Modeler 3D layouts.

    This class is inherited in the caller application and is accessible through the modeler variable
    object (for example, ``hfss3dlayout.modeler``).

    Parameters
    ----------
    app : :class:`ansys.aedt.core.application.analysis_3d_layout.FieldAnalysis3DLayout`
            Inherited parent object.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss3dLayout
    >>> hfss = Hfss3dLayout()
    >>> my_modeler = hfss.modeler
    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def o_def_manager(self):
        """AEDT Definition manager."""
        ...
    
    @property
    def stackup(self): # -> Layers:
        """Get the Stackup class and its methods.

        Returns
        -------
        :class:`ansys.aedt.core.modules.layer_stackup.Layers`
        """
        ...
    
    @property
    def oeditor(self):
        """Oeditor Module.

        References
        ----------
        >>> oEditor = oDesign.SetActiveEditor("Layout")"""
        ...
    
    @property
    def ocomponent_manager(self):
        """Component manager object."""
        ...
    
    @property
    def o_component_manager(self):
        """Component manager object.

        .. deprecated:: 0.15.1
           Use :func:`ocomponent_manager` property instead.

        """
        ...
    
    @property
    def omodel_manager(self):
        """Model manager object."""
        ...
    
    @property
    def o_model_manager(self):
        """Model manager object.

        .. deprecated:: 0.15.1
           Use :func:`omodel_manager` property instead.
        """
        ...
    
    @property
    def edb(self): # -> pyedb.grpc.edb.Edb | pyedb.dotnet.edb.Edb | None:
        """EBD. Supported only in IronPython.

        Returns
        -------
        :class:`ansys.aedt.core.edb.Edb`
             EDB.

        """
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @pyaedt_function_handler()
    def fit_all(self): # -> None:
        """Fit all.

        References
        ----------
        >>> oEditor.ZoomToFit()
        """
        ...
    
    @property
    def model_units(self):
        """Model units as a string (for example, "mm").

        References
        ----------
        >>> oEditor.GetActiveUnits
        >>> oEditor.SetActiveUnits
        """
        ...
    
    @model_units.setter
    def model_units(self, units): # -> None:
        ...
    
    @property
    def primitives(self): # -> Self:
        """Primitives.

        .. deprecated:: 0.4.15
            There is no need to use the ``primitives`` property anymore. You can instantiate
            methods for primitives directly from the modeler.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitives_3d_layout.Primitives3DLayout`

        """
        ...
    
    @pyaedt_function_handler(object_name="assignment")
    def obounding_box(self, assignment): # -> list[Any]:
        """Bounding box of a specified object.

        Returns
        -------
        list
            List of [LLx, LLy, URx, URy] coordinates.

        References
        ----------
        >>> oEditor.GetBBox
        """
        ...
    
    @pyaedt_function_handler(property_object="assignment", property_name="name", property_value="value", property_tab="aedt_tab")
    def change_property(self, assignment, name, value, aedt_tab=...): # -> bool:
        """Change an oeditor property.

        Parameters
        ----------
        assignment : str
            Name of the property object. It can be the name of an excitation or field reporter.
            For example, ``Excitations:Port1`` or ``FieldsReporter:Mag_H``.
        name : str
            Name of the property. For example, ``Rotation Angle``.
        value : str, list
            Value of the property. It is a string for a single value and a list of three elements for
            ``[x,y,z]`` coordianates.
        aedt_tab : str
            Name of the tab to update. Options are ``BaseElementTab``, ``EM Design``, and
            ``FieldsPostProcessorTab``. The default is ``BaseElementTab``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(pos_x="x", pos_y="y", pos_z="z")
    def merge_design(self, merged_design=..., x=..., y=..., z=..., rotation=...): # -> ComponentsSubCircuit3DLayout | Literal[False]:
        """Merge a design into another.

        Parameters
        ----------
        merged_design : :class:`ansys.aedt.core.hfss3dlayout.Hfss3dLayout`
            Design to merge.
        x : float, str
            X Offset.
        y : float, str
            Y Offset.
        z : float, str
            Z Offset.
        rotation : float, str
            Rotation angle in deg.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Object3d.ComponentsSubCircuit3DLayout`
            Object if successful.
        """
        ...
    
    @pyaedt_function_handler(clip_name="name", position="location")
    def change_clip_plane_position(self, name, location): # -> bool:
        """Change the clip plane position.

        Parameters
        ----------
        name : str
            Name of the clip plane.
        location : list
            List of ``[x,y,z]`` coordinates for the new position.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(selection="assignment")
    def colinear_heal(self, assignment, tolerance=...): # -> Literal[True]:
        """Remove small edges of one or more primitives.

        Parameters
        ----------
        assignment : str or list
            One or more primitives to heal.
        tolerance :  float, optional
            Tolerance value. The default is ``0.1``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.


        References
        ----------
        >>> oEditor.Heal

        Examples
        --------
        >>> from ansys.aedt.core import Hfss3dLayout
        >>> h3d = Hfss3dLayout(version="2021.2")
        >>> h3d.modeler.layers.add_layer("TOP")
        >>> l1 = h3d.modeler.create_line("TOP", [[0, 0], [100, 0]], 0.5)
        >>> l2 = h3d.modeler.create_line("TOP", [[100, 0], [120, -35]], 0.5)
        >>> h3d.modeler.unite([l1, l2])
        >>> h3d.modeler.colinear_heal("poly_2", 0.25)
        True
        """
        ...
    
    @pyaedt_function_handler(object_to_expand="assignment")
    def expand(self, assignment, size=..., expand_type=..., replace_original=...): # -> list[Any] | LiteralString:
        """Expand the object by a specific size.

        Parameters
        ----------
        assignment : str
            Name of the object.
        size : float, optional
            Size of the expansion. The default is ``1``.
        expand_type : str, optional
            Type of the expansion. Options are ``"ROUND"``, ``"MITER"``, and
            ``"CORNER"``. The default is ``"ROUND"``.
        replace_original : bool, optional
             Whether to replace the original object. The default is ``False``, in which case
             a new object is created.

        Returns
        -------
        str
            Name of the object.

        References
        ----------
        >>> oEditor.Expand


        Examples
        --------
        >>> from ansys.aedt.core import Hfss3dLayout
        >>> h3d = Hfss3dLayout(version="2021.2")
        >>> h3d.modeler.layers.add_layer("TOP")
        >>> h3d.modeler.create_rectangle("TOP", [20, 20], [50, 50], name="rect_1")
        >>> h3d.modeler.create_line("TOP", [[25, 25], [40, 40]])
        >>> out1 = h3d.modeler.expand("line_3")
        >>> print(out1)
        line_4

        """
        ...
    
    @pyaedt_function_handler(brd_filename="input_file", edb_path="output_dir", edb_name="name")
    def import_cadence_brd(self, input_file, output_dir=..., name=...): # -> Literal[True]:
        """Import a cadence board.

        Parameters
        ----------
        input_file : str
            Full path and name of the BRD file to import.
        output_dir : str, optional
            Path where the EDB is to be created. The default is ``None``, in which
            case the project directory is used.
        name : str or :class:`pathlib.Path`, optional
            Name of the EDB. The default is ``None``, in which
            case the board name is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oImportExport.ImportExtracta
        """
        ...
    
    @pyaedt_function_handler()
    def modeler_variable(self, value): # -> str:
        """Retrieve a modeler variable.

        Parameters
        ----------
        value :

        Returns
        -------

        """
        ...
    
    @pyaedt_function_handler(ipc_filename="input_file", edb_path="output_dir", edb_name="name")
    def import_ipc2581(self, input_file, output_dir=..., name=...): # -> Literal[True]:
        """Import an IPC file.

        Parameters
        ----------
        input_file : str
            Full path and name of the IPC file.
        output_dir : str, optional
            Path where the EDB is to be created. The default is ``None``, in which
            case the project directory is used.
        name : str or :class:`pathlib.Path`, optional
            Name of the EDB. The default is ``None``, in which
            case the board name is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oImportExport.ImportIPC
        """
        ...
    
    @pyaedt_function_handler()
    def subtract(self, blank, tool): # -> tuple[list[Any], list[Any]]:
        """Subtract objects from one or more names.

        Parameters
        ----------
        blank : str
            Name of the geometry to subtract from.
        tool : str or list
            One or more names of the geometries to subtract.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Subtract
        """
        ...
    
    @pyaedt_function_handler(objects_to_split="assignment")
    def convert_to_selections(self, assignment, return_list=...): # -> list[Any] | LiteralString:
        """Convert one or more object to selections.

        Parameters
        ----------
        assignment : str, int, list
            One or more objects to convert to selections. A list can contain
            both strings (object names) and integers (object IDs).
        return_list : bool, option
            Whether to return a list of the selections. The default is
            ``False``, in which case a string of the selections is returned.
            If ``True``, a list of the selections is returned.

        Returns
        -------
        str or list
           String or list of the selections.

        """
        ...
    
    @pyaedt_function_handler(objectlists="assignment")
    def unite(self, assignment): # -> tuple[list[Any], list[Any]] | Literal[False]:
        """Unite objects from names.

        Parameters
        ----------
        assignment : list
            List of objects to unite.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Unite
        """
        ...
    
    @pyaedt_function_handler(objectlists="assignment")
    def intersect(self, assignment): # -> tuple[list[Any], list[Any]] | Literal[False]:
        """Intersect objects from names.

        Parameters
        ----------
        assignment : list
            List of objects to intersect.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Intersect
        """
        ...
    
    @pyaedt_function_handler(objectlists="assignment", direction_vector="vector")
    def duplicate(self, assignment, count, vector): # -> tuple[list[Any], list[Any]]:
        """Duplicate one or more elements along a vector.

        Parameters
        ----------
        assignment : list
            List of elements to duplicate.
        count : int
            Number of clones.
        vector : list
            List of ``[x,y]`` coordinates for the direction vector.

        Returns
        -------
        tuple
            List of added objects, List of removed names.

        References
        ----------
        >>> oEditor.Duplicate
        """
        ...
    
    @pyaedt_function_handler(objects="assignment")
    def duplicate_across_layers(self, assignment, layers): # -> tuple[list[Any], list[Any]]:
        """Duplicate one or more elements along a vector.

        Parameters
        ----------
        assignment : list
            List of elements to duplicate.
        layers : str, list
            Layer name on which duplicate object.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.DuplicateAcrossLyrs
        """
        ...
    
    @pyaedt_function_handler()
    def set_temperature_dependence(self, include_temperature_dependence=..., enable_feedback=..., ambient_temp=..., create_project_var=...): # -> bool:
        """Set the temperature dependence for the design.

        Parameters
        ----------
        include_temperature_dependence : bool, optional
            Whether to include the temperature setting for the design. The default is ``True``.
        enable_feedback : bool, optional
            Whether to enable feedback. The default is ``True``.
        ambient_temp : float, optional
            Ambient temperature. The default is ``22``.
        create_project_var : bool, optional
            Whether to create a project variable for the ambient temperature.
            The default is ``False``. If ``True,`` ``$AmbientTemp`` is created.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetTemperatureSettings
        """
        ...
    
    @pyaedt_function_handler(component_name="assignment", model_path="input_file")
    def set_spice_model(self, assignment, input_file, model_name=..., subcircuit_name=..., pin_map=...): # -> Literal[True]:
        """Assign a Spice model to a component.

        Parameters
        ----------
        assignment : str
            Name of the component.
        input_file : str, optional
            Full path to the model file. The default is ``None``.
        model_name : str, optional
            Name of the model. The default is ``None``, in which case the model name is the file name without an
            extension.
        subcircuit_name : str, optional
            Name of the subcircuit. The default is ``None``, in which case the subcircuit name is the model name.
        pin_map : list, optional
            List of ``[spice_pin_name, aedt_pin_name]`` to customize the pin mapping between Spice pins and
            AEDT pins.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------

        >>> from ansys.aedt.core import Hfss3dLayout
        >>> h3d = Hfss3dLayout("myproject")
        >>> h3d.modeler.set_spice_model(assignment="A1",input_file=,subcircuit_name="SUBCK1")

        """
        ...
    
    @pyaedt_function_handler()
    def set_touchstone_model(self, assignment, input_file, model_name=...): # -> str:
        """Assign a Touchstone model to a component.

        Parameters
        ----------
        assignment : str
            Name of the component.
        input_file : str or :class:`pathlib.Path`, optional
            Full path to the model file. The default is ``None``.
        model_name : str or :class:`pathlib.Path`, optional
            Name of the model. The default is ``None``, in which case the model name is the file name without an
            extension.


        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------

        >>> from ansys.aedt.core import Hfss3dLayout
        >>> h3d = Hfss3dLayout("myproject")
        >>> h3d.modeler.set_touchstone_model(assignment="C1", input_file="comp.s2p")

        """
        ...
    
    @pyaedt_function_handler()
    def clip_plane(self):
        """Create a clip plane in the layout.

        .. note::
            This method works only in AEDT 2022 R2 and later.

        Returns
        -------
        str
            Name of newly created clip plane.
        """
        ...
    
    @property
    def clip_planes(self): # -> list[Any]:
        """All available clip planes. To be considered a clip plane, the name must follow this
        naming convention: "VCP_xxx".

        Returns
        -------
        list
        """
        ...
    
    @pyaedt_function_handler()
    def geometry_check_and_fix_all(self, min_area=...): # -> bool:
        """Run Geometry Check.

        All checks are used and all auto fix options are enabled.

        min_area : float, optional
            CutOuts that are smaller than this minimum area will be ignored during validation checks.
            The default is ``2e-6``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


