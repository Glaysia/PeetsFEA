"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.primitives import GeometryModeler

class Primitives2D(GeometryModeler):
    """Manages primitives in 2D tools.

    This class is inherited in the caller application and is accessible through the primitives variable part
    of the modeler object (for example, ``hfss.modeler`` or ``icepak.modeler``).


    Examples
    --------
    Basic usage demonstrated with a Q2D or Maxwell 2D design:

    >>> from ansys.aedt.core import Q2d
    >>> aedtapp = Q2d()
    >>> prim = aedtapp.modeler
    """
    @property
    def plane2d(self): # -> Literal['Y', 'Z']:
        """Create a 2D plane."""
        ...
    
    def __init__(self, application) -> None:
        ...
    
    @pyaedt_function_handler(position="origin", matname="material")
    def create_circle(self, origin, radius, num_sides=..., is_covered=..., name=..., material=..., non_model=..., **kwargs): # -> Point | Plane | Object3d:
        """Create a circle.

        Parameters
        ----------
        origin : list
            ApplicationName.modeler.Position(x,y,z) object
        radius : float or str
            Radius of the object.
        num_sides : int, optional
            Number of sides. The default is ``0``, which is correct for a circle.
        is_covered : bool
            Specify whether the ellipse is a sheet (covered) or a line object
        name : str, optional
            Name of the object. The default is ``None``. If ``None`` ,
            a unique name ``"NewObject_xxxxxx"`` will be assigned)
        material : str, optional
            Name of the material. The default is ``None``. If ``None``,
            the default material is assigned.
        non_model : bool, optional
             Either to create the new object as model or non-model. The default is ``False``.
         **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.


        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.CreateCircle

        Examples
        --------
        >>> circle1 = aedtapp.modeler.create_circle([0, -2, -2], 3)
        >>> circle2 = aedtapp.modeler.create_circle(
        ...     origin=[0, -2, -2], radius=3, num_sides=6, name="MyCircle", material="Copper"
        ... )


        """
        ...
    
    @pyaedt_function_handler(position="origin", matname="material")
    def create_ellipse(self, origin, major_radius, ratio, is_covered=..., name=..., material=..., non_model=..., segments=..., **kwargs): # -> Point | Plane | Object3d:
        """Create an ellipse.

        Parameters
        ----------
        origin : list of float
            Center Position of the ellipse
        major_radius : flost
            Length of the major axis of the ellipse
        ratio : float
            Ratio of the major axis to the minor axis of the ellipse
        is_covered : bool
            Specify whether the ellipse is a sheet (covered) or a line object
        name : str, default=None
            Name of the object. The default is ``None``. If ``None`` ,
            a unique name NewObject_xxxxxx will be assigned)
        material : str, default=None
             Name of the material. The default is ``None``. If ``None``,
             the default material is assigned.
        non_model : bool, optional
             Whether to create the object as a non-model. The default is ``False``, in which
             case the object is created as a model.
        segments : int, optional
            Number of segments to apply to create the segmented geometry.
            The default is ``0``.
        **kwargs : optional
            Additional keyword arguments to pass to set properties when creating the primitive.
           For more information, see ``ansys.aedt.core.modeler.cad.object_3d.Object3d``.

        Returns
        -------
        ansys.aedt.core.modeler.cad.object_3d.Object3d
            Object 3d.

        References
        ----------
        >>> oEditor.CreateEllipse

        Examples
        --------
        >>> ellipse1 = aedtapp.modeler.create_ellipse([0, -2, -2], 4.0, 0.2)
        >>> ellipse2 = aedtapp.modeler.create_ellipse(origin=[0, -2, -2], major_radius=4.0, ratio=0.2,
        ...                                           name="MyEllipse", material="Copper")
        """
        ...
    
    @pyaedt_function_handler(position="origin", dimension_list="sizes", matname="material")
    def create_rectangle(self, origin, sizes, is_covered=..., name=..., material=..., non_model=..., **kwargs): # -> Point | Plane | Object3d:
        """Create a rectangle.

        Parameters
        ----------
        origin : list
            Position of the lower-left corner of the rectangle
        sizes : list
            List of rectangle sizes: [X size, Y size] for XY planes or [Z size, R size] for RZ planes
        is_covered : bool
            Specify whether the ellipse is a sheet (covered) or a line object
        name : str, default=None
            Name of the object. The default is ``None``. If ``None`` ,
            a unique name NewObject_xxxxxx will be assigned)
        material : str, default=None
             Name of the material. The default is ``None``. If ``None``,
             the default material is assigned.
        non_model : bool, optional
             Either if create the new object as model or non-model. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`

        References
        ----------
        >>> oEditor.CreateRectangle

        Examples
        --------

        >>> rect1 = aedtapp.modeler.create_rectangle([0, -2, -2],[3, 4])
        >>> rect2 = aedtapp.modeler.create_rectangle(origin=[0, -2, -2],sizes=[3, 4],
        ...                                          name="MyRectangle",material="Copper")

        """
        ...
    
    @pyaedt_function_handler(position="origin", matname="material")
    def create_regular_polygon(self, origin, start_point, num_sides=..., name=..., material=..., non_model=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a rectangle.

        Parameters
        ----------
        origin : list of float
            Position of the center of the polygon in ``[x, y, z]``.
        start_point : list of float
            Start point for the outer path of the polygon in ``[x, y, z]``.
        num_sides : int
            Number of sides of the polygon. Must be an integer >= 3.
        name : str, default=None
            Name of the object. The default is ``None``. If ``None`` ,
            a unique name NewObject_xxxxxx will be assigned)
        material : str, default=None
             Name of the material. The default is ``None``. If ``None``,
             the default material is assigned.
        non_model : bool, optional
             Either if create the new object as model or non-model. The default is ``False``.
         **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.


        Returns
        -------
        ansys.aedt.core.modeler.cad.object_3d.Object3d

        References
        ----------
        >>> oEditor.CreateRegularPolygon

        Examples
        --------

        >>> pg1 = aedtapp.modeler.create_regular_polygon([0, 0, 0], [0, 2, 0])
        >>> pg2 = aedtapp.modeler.create_regular_polygon(origin=[0, 0, 0], start_point=[0, 2, 0],
        ...                                              name="MyPolygon", material="Copper")

        """
        ...
    
    @pyaedt_function_handler(region_name="name")
    def create_region(self, pad_value=..., pad_type=..., name=..., **kwarg): # -> Point | Plane | Object3d | Literal[False]:
        """Create an air region.

        Parameters
        ----------
        pad_value : float, str, list of floats or list of str, optional
            Padding values to apply. If a list is not provided, the same
            value is applied to all padding directions. If a list of floats
            or strings is provided, the values are
            interpreted as padding for ``["+X", "-X", "+Y", "-Y"]`` for XY geometry mode,
            and ``["+R", "+Z", "-Z"]`` for RZ geometry mode.
        pad_type : str, optional
            Padding definition. The default is ``"Percentage Offset"``.
            Options are ``"Absolute Offset"``,
            ``"Absolute Position"``, ``"Percentage Offset"``, and
            ``"Transverse Percentage Offset"``. When using a list,
            different padding types can be provided for different
           directions.
        name : str, optional
            Region name. The default is ``None``, in which case the name
            is generated automatically.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Region object.

        References
        ----------
        >>> oEditor.CreateRegion
        """
        ...
    


