"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import PropsManager, pyaedt_function_handler

"""
This module contains these classes: `BaseCoordinateSystem`, `FaceCoordinateSystem`, `CoordinateSystem`, `Modeler`,
`Position`, and `SweepOptions`.

This modules provides functionalities for the 3D Modeler, 2D Modeler,
3D Layout Modeler, and Circuit Modeler.
"""
class CsProps(dict):
    """AEDT Cooardinate System Internal Parameters."""
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __init__(self, cs_object, props) -> None:
        ...
    


class ListsProps(dict):
    """AEDT Lists Internal Parameters."""
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __init__(self, cs_object, props) -> None:
        ...
    


class BaseCoordinateSystem(PropsManager):
    """Base methods common to FaceCoordinateSystem and CoordinateSystem.

    Parameters
    ----------
    modeler :
        Inherited parent object.
    props : dict, optional
        Dictionary of properties. The default is ``None``.
    name : optional
        The default is ``None``.

    """
    def __init__(self, modeler, name=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def set_as_working_cs(self): # -> Literal[True]:
        """Set the coordinate system as the working coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(newname="name")
    def rename(self, name): # -> Literal[True]:
        """Rename the coordinate system.

        Parameters
        ----------
        name : str
            New name for the coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        Delete all coordinate systems in the design.

        >>> from ansys.aedt.core import Maxwell2d
        >>> app = Maxwell2d()
        >>> cs_copy = [i for i in app.modeler.coordinate_systems]
        >>> [i.delete() for i in cs_copy]
        """
        ...
    


class FaceCoordinateSystem(BaseCoordinateSystem):
    """Manages face coordinate system data and execution.

    Parameters
    ----------
    modeler :
        Inherited parent object.
    props : dict, optional
        Dictionary of properties. The default is ``None``.
    name : optional
        The default is ``None``.
    face_id : int
        Id of the face where the Face Coordinate System is laying.

    """
    def __init__(self, modeler, props=..., name=..., face_id=...) -> None:
        ...
    
    @property
    def props(self): # -> CsProps | None:
        """Properties of the coordinate system.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.CSProps`
        """
        ...
    
    @pyaedt_function_handler(face="assignment")
    def create(self, assignment, origin, axis_position, axis=..., name=..., offset=..., rotation=..., always_move_to_end=...): # -> Literal[True]:
        """Create a face coordinate system.

        The face coordinate has always the Z axis parallel to face normal.
        The X and Y axis lie on the face plane.

        Parameters
        ----------
        assignment : int, FacePrimitive
            Face where the coordinate system is defined.
        origin : int, FacePrimitive, EdgePrimitive, VertexPrimitive
            Specify the coordinate system origin. The origin must belong to the face where the
            coordinate system is defined.
            If a face is specified, the origin is placed on the face center. It must be the same as ``face``.
            If an edge is specified, the origin is placed on the edge midpoint.
            If a vertex is specified, the origin is placed on the vertex.
        axis_position : int, FacePrimitive, EdgePrimitive, VertexPrimitive
            Specify where the X or Y axis is pointing. The position must belong to the face where the
            coordinate system is defined.
            Select which axis is considered with the option ``axis``.
            If a face is specified, the position is placed on the face center. It must be the same as ``face``.
            If an edge is specified, the position is placed on the edce midpoint.
            If a vertex is specified, the position is placed on the vertex.
        axis : str, optional
            Select which axis is considered for positioning. Possible values are ``"X"`` and ``"Y"``.
            The default is ``"X"``.
        name : str, optional
            Name of the coordinate system. The default is ``None``.
        offset : list, optional
            List of the ``[x, y]`` coordinates specifying the offset of the coordinate system origin.
            The offset specified in the face coordinate system reference.
            The default is ``[0, 0]``.
        rotation : float, optional
            Rotation angle of the coordinate system around its Z axis. Angle is in degrees.
            The default is ``0``.
        always_move_to_end : bool, optional
            If ``True`` the Face Coordinate System creation operation will always be moved to the end of subsequent
            objects operation. This will guarantee that the coordinate system will remain solidal with the object
            face. If ``False`` the option "Always Move CS to End" is set to off. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


class CoordinateSystem(BaseCoordinateSystem):
    """Manages the coordinate system data and execution.

    Parameters
    ----------
    modeler :
        Inherited parent object.
    props : dict, optional
        Dictionary of properties. The default is ``None``.
    name : optional
        The default is ``None``.

    """
    def __init__(self, modeler, props=..., name=...) -> None:
        ...
    
    @property
    def mode(self): # -> str | None:
        """Coordinate System mode."""
        ...
    
    @mode.setter
    def mode(self, value): # -> None:
        ...
    
    @property
    def props(self): # -> CsProps | None:
        """Coordinate System Properties.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.CSProps`
        """
        ...
    
    @property
    def ref_cs(self): # -> str | None:
        """Reference coordinate system getter and setter.

        Returns
        -------
        str
        """
        ...
    
    @ref_cs.setter
    def ref_cs(self, value): # -> None:
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def change_cs_mode(self, mode_type=...): # -> Literal[True]:
        """Change the mode of the coordinate system.

        Parameters
        ----------
        mode_type : int, optional
            Type of the mode. Options are:

            * ``0`` - Axis/Position
            * ``1`` - Euler Angle ZXZ
            * ``2`` - Euler Angle ZYZ

            The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def create(self, origin=..., reference_cs=..., name=..., mode=..., view=..., x_pointing=..., y_pointing=..., phi=..., theta=..., psi=..., u=...): # -> Literal[True]:
        """Create a coordinate system.

        Parameters
        ----------
        origin : list
            List of ``[x, y, z]`` coordinates for the origin of the coordinate system.
            The default is ``None``, in which case ``[0, 0, 0]`` is used.
        reference_cs : str, optional
            Name of the reference coordinate system. The default is ``"Global"``.
        name : str
            Name of the coordinate system. The default is ``None``.
        mode : str, optional
            Definition mode. Options are ``"view"``, ``"axis"``, ``"zxz"``, ``"zyz"``,
            and ``"axisrotation"``. The default is ``"axis"``.

            * If ``mode="view"``, specify ``view``.
            * If ``mode="axis"``, specify ``x_pointing`` and ``y_pointing``.
            * If ``mode="zxz"`` or ``mode="zyz"``, specify ``phi``, ``theta``, and ``psi``.
            * If ``mode="axisrotation"``, specify ``theta`` and ``u``.

            Parameters not needed by the specified mode are ignored.
            For back compatibility, ``view="rotate"`` is the same as ``mode="axis"``.
            The mode ``"axisrotation"`` is a coordinate system parallel
            to the global coordinate system centered in the global origin.

        view : str, optional
            View for the coordinate system if ``mode="view"``. Options are
            ``"XY"``, ``"XZ"``, ``"XY"``, ``"iso"``, ``None``, and ``"rotate"``
            (obsolete). The default is ``"iso"``.

            .. note::
               Because the ``"rotate"`` option is obsolete, use ``mode="axis"`` instead.

        x_pointing : list, optional
            List of the ``[x, y, z]`` coordinates specifying the X axis
            pointing in the local coordinate system if ``mode="axis"``.
            The default is ``[1, 0, 0]``.
        y_pointing : list, optional
            List of the ``[x, y, z]`` coordinates specifying the Y axis
            pointing in the local coordinate system if ``mode="axis"``.
            The default is ``[0, 1, 0]``.
        phi : float, optional
            Euler angle phi in degrees if ``mode="zxz"`` or ``mode="zyz"``.
            The default is ``0``.
        theta : float, optional
            Euler angle theta or rotation angle in degrees if ``mode="zxz"``,
            ``mode="zyz"``, or ``mode="axisrotation"``. The default is ``0``.
        psi : float, optional
            Euler angle psi in degrees if ``mode="zxz"`` or ``mode="zyz"``.
            The default is ``0``.
        u : list
            List of the ``[ux, uy, uz]`` coordinates for the rotation axis
            if ``mode="zxz"``. The default is ``[1, 0, 0]``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @staticmethod
    @pyaedt_function_handler()
    def pointing_to_axis(x_pointing, y_pointing): # -> tuple[tuple[Any, ...], tuple[Any, ...], tuple[Any, ...]]:
        """Retrieve the axes from the HFSS X axis and Y pointing axis as per
        the definition of the AEDT interface coordinate system.

        Parameters
        ----------
        x_pointing : List or tuple
            ``(x, y, z)`` coordinates for the X axis.

        y_pointing : List or tuple
            ``(x, y, z)`` coordinates for the Y pointing axis.

        Returns
        -------
        tuple
            ``(Xx, Xy, Xz), (Yx, Yy, Yz), (Zx, Zy, Zz)`` of the three axes (normalized).
        """
        ...
    
    @property
    def quaternion(self): # -> Quaternion | None:
        """Quaternion computed based on specific axis mode.

        Returns
        -------
        Quaternion
        """
        ...
    
    @property
    def origin(self): # -> list[Any | bool]:
        """Coordinate system origin in model units.

        Returns
        -------
        list
        """
        ...
    
    @origin.setter
    def origin(self, origin): # -> None:
        """Set the coordinate system origin in model units."""
        ...
    


class ObjectCoordinateSystem(BaseCoordinateSystem):
    """Manages object coordinate system data and execution.

    Parameters
    ----------
    modeler :
        Inherited parent object.
    props : dict, optional
        Dictionary of properties. The default is ``None``.
    name : optional
        Name of the coordinate system.
        The default is ``None``.
    entity_id : int
        ID of the entity object where the object coordinate system is anchored.

    """
    def __init__(self, modeler, props=..., name=..., entity_id=...) -> None:
        ...
    
    @property
    def ref_cs(self): # -> None:
        """Reference coordinate system.

        Returns
        -------
        str
        """
        ...
    
    @ref_cs.setter
    def ref_cs(self, value): # -> None:
        ...
    
    @property
    def props(self): # -> CsProps | None:
        """Properties of the coordinate system.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.CSProps`
        """
        ...
    
    @pyaedt_function_handler(obj="assignment")
    def create(self, assignment, origin, x_axis, y_axis, move_to_end=..., reverse_x_axis=..., reverse_y_axis=...):
        """Create an object coordinate system.

        Parameters
        ----------
        assignment : str, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Object to attach the object coordinate system to.
        origin : int, VertexPrimitive, EdgePrimitive, FacePrimitive, list
            Origin where the object coordinate system is anchored.
            The value can be:

             - An integer, in which case it refers to the entity ID.
             - A VertexPrimitive, EdgePrimitive, or FacePrimitive object, in which case it refers to the entity type.
             - A list, in which case it refers to the origin coordinate system ``[x, y, z]``.

        x_axis : int, VertexPrimitive, EdgePrimitive, FacePrimitive, list
            Entity that the x axis of the object coordinate system points to.
            The value can be:

             - An integer, in which case it refers to the entity IDd.
             - A VertexPrimitive, EdgePrimitive, or FacePrimitive object, in which case it refers to the entity type.
             - A list, in which case it refers to the point coordinate system ``[x, y, z]`` that the x axis points to.

        y_axis : int, VertexPrimitive, EdgePrimitive, FacePrimitive, list
            Entity that the y axis of the object coordinate system points to.
            The value can be:

             - An integer, in which case it refers to the entity ID.
             - A VertexPrimitive, EdgePrimitive, FacePrimitive object, in which case it refers to the entity type.
             - A list, in which case it refers to the point coordinate system ``[x, y, z]`` that the y axis points to.

        move_to_end : bool, optional
            Whether to always move the operation for creating the coordinate system to the
            end of subsequent objects operation. The default is ``True``.
        reverse_x_axis : bool, optional
            Whether the x-axis is in the reverse direction.
            The default is ``False``.
        reverse_y_axis : bool, optional
            Whether the y-axis is in the reverse direction.
            The default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


class Lists(PropsManager):
    """Manages list data and execution.

    Parameters
    ----------
    modeler :
        Inherited parent object.
    props : dict, optional
        Dictionary of properties. The default is ``None``.
    name : optional
        The default is ``None``.

    """
    def __init__(self, modeler, props=..., name=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> Literal[True]:
        """Update the List.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(object_list="assignment", type="entity_type")
    def create(self, assignment, name=..., entity_type=...): # -> bool:
        """Create a List.

        Parameters
        ----------
        assignment : list
            List of ``["Obj1", "Obj2"]`` objects or face ID if type is "Face".
            The default is ``None``, in which case all objects are selected.
        name : list, str
            List of names. The default is ``None``.
        entity_type : str, optional
            List type. Options are ``"Object"``, ``"Face"``. The default is ``"Object"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> Literal[True]:
        """Delete the List.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(newname="name")
    def rename(self, name): # -> Literal[True]:
        """Rename the List.

        Parameters
        ----------
        name : str
            New name for the List.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    


class Modeler:
    """Provides the `Modeler` application class that other `Modeler` classes inherit.

    This class is inherited in the caller application and is accessible through the modeler variable
    object( eg. ``hfss.modeler``).

    Parameters
    ----------
    app :
        Inherited parent object.

    Examples
    --------
    >>> from ansys.aedt.core import Maxwell2d
    >>> app = Maxwell2d()
    >>> my_modeler = app.modeler
    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def projdir(self):
        """Project directory."""
        ...
    


