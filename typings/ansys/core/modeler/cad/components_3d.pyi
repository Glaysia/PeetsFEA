"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class UserDefinedComponentParameters(dict):
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __init__(self, component, *args, **kw) -> None:
        ...
    


class UserDefinedComponentProps(dict):
    """User Defined Component Internal Parameters."""
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __init__(self, user_defined_components, props) -> None:
        ...
    


class UserDefinedComponent:
    """Manages object attributes for 3DComponent and User Defined Model.

    Parameters
    ----------
    primitives : :class:`ansys.aedt.core.modeler.cad.primitives_3d.Primitives3D`
        Inherited parent object.
    name : str, optional
        Name of the component. The default value is ``None``.
    props : dict, optional
        Dictionary of properties. The default value is ``None``.
    component_type : str, optional
        Type of the component. The default value is ``None``.

    Examples
    --------
    Basic usage demonstrated with an HFSS design:

    >>> from ansys.aedt.core import Hfss
    >>> aedtapp = Hfss()
    >>> prim = aedtapp.modeler.user_defined_components

    Obtain user defined component names, to return a
    :class:`ansys.aedt.core.modeler.cad.components_3d.UserDefinedComponent`.

    >>> component_names = aedtapp.modeler.user_defined_components
    >>> component = aedtapp.modeler[component_names["3DC_Cell_Radome_In1"]]
    """
    def __init__(self, primitives, name=..., props=..., component_type=...) -> None:
        ...
    
    @property
    def layout_component(self): # -> LayoutComponent | None:
        """Layout component object.

        Returns
        -------
        :class:`LayoutComponent`
            Layout Component.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @pyaedt_function_handler()
    def history(self): # -> BinaryTreeNode | Literal[False]:
        """Component history.

        Returns
        -------
            :class:`ansys.aedt.core.modeler.cad.elements_3d.BinaryTree` when successful,
            ``False`` when failed.

        """
        ...
    
    @property
    def group_name(self): # -> None:
        """Group the component belongs to.

        Returns
        -------
        str
            Name of the group.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @group_name.setter
    def group_name(self, name): # -> None:
        """Assign component to a specific group. A new group is created if the specified group doesn't exist.

        Parameters
        ----------
        name : str
            Name of the group to assign the component to. A group is created if the one
            specified does not exist.

        Returns
        -------
        str
            Name of the group.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @property
    def is3dcomponent(self): # -> bool:
        """3DComponent flag.

        Returns
        -------
        bool
           ``True`` if a 3DComponent, ``False`` if a user-defined model.

        """
        ...
    
    @property
    def mesh_assembly(self): # -> None:
        """Mesh assembly flag.

        Returns
        -------
        bool
           ``True`` if mesh assembly is checked, ``None`` if a user-defined model.

        """
        ...
    
    @mesh_assembly.setter
    def mesh_assembly(self, ma): # -> None:
        ...
    
    @property
    def name(self): # -> str:
        """Name of the object.

        Returns
        -------
        str
           Name of the object.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @name.setter
    def name(self, component_name): # -> None:
        ...
    
    @property
    def parameters(self): # -> UserDefinedComponentParameters:
        """Component parameters.

        Returns
        -------
        dict
            :class:`ansys.aedt.core.modeler.cad.components_3d.UserDefinedComponentParameters`.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @property
    def parts(self): # -> dict[Any, Any]:
        """Dictionary of objects that belong to the user-defined component.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]

        """
        ...
    
    @property
    def target_coordinate_system(self): # -> None:
        """Target coordinate system.

        Returns
        -------
        str
            Name of the target coordinate system.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @target_coordinate_system.setter
    def target_coordinate_system(self, tCS): # -> None:
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> None:
        """Delete the object.

        The project must be saved after the operation to update the list
        of names for user-defined components.

        References
        ----------
        >>> oEditor.Delete

        Examples
        --------

        >>> from ansys.aedt.core import hfss
        >>> hfss = Hfss()
        >>> hfss.modeler["UDM"].delete()
        >>> hfss.save_project()
        >>> hfss._project_dictionary = None
        >>> udc = hfss.modeler.user_defined_component_names

        """
        ...
    
    @pyaedt_function_handler(position="origin")
    def duplicate_and_mirror(self, origin, vector):
        """Duplicate and mirror a selection.

        Parameters
        ----------
        origin : float
            List of the ``[x, y, z]`` coordinates or
            Application.Position object for the selection.
        vector : float
            List of the ``[x1, y1, z1]`` coordinates or
            Application.Position object for the vector.

        Returns
        -------
        list
            List of objects created or an empty list.

        References
        ----------
        >>> oEditor.DuplicateMirror
        """
        ...
    
    @pyaedt_function_handler(position="origin")
    def mirror(self, origin, vector): # -> Self | Literal[False]:
        """Mirror a selection.

        Parameters
        ----------
        origin : list, Position
            List of the ``[x, y, z]`` coordinates or
            the Application.Position object for the selection.
        vector : float
            List of the ``[x1, y1, z1]`` coordinates or
            the Application.Position object for the vector.

        Returns
        -------
        ansys.aedt.core.modeler.cad.components_3d.UserDefinedComponent, bool
            3D object when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Mirror
        """
        ...
    
    @pyaedt_function_handler(cs_axis="axis", unit="units")
    def rotate(self, axis, angle=..., units=...): # -> Self | Literal[False]:
        """Rotate the selection.

        Parameters
        ----------
        axis
            Coordinate system axis or the Application.AXIS object.
        angle : float, optional
            Angle of rotation. The units, defined by ``unit``, can be either
            degrees or radians. The default is ``90.0``.
        units : text, optional
             Units for the angle. Options are ``"deg"`` or ``"rad"``.
             The default is ``"deg"``.

        Returns
        -------
        ansys.aedt.core.modeler.cad.components_3d.UserDefinedComponent, bool
            3D object when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Rotate
        """
        ...
    
    @pyaedt_function_handler()
    def move(self, vector): # -> Self | Literal[False]:
        """Move component from a list.

        Parameters
        ----------
        vector : list
            Vector of the direction move. It can be a list of the ``[x, y, z]``
            coordinates or a ``Position`` object.

        Returns
        -------
        ansys.aedt.core.modeler.cad.components_3d.UserDefinedComponent, bool
            3D object when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Move
        """
        ...
    
    @pyaedt_function_handler(cs_axis="axis", nclones="clones")
    def duplicate_around_axis(self, axis, angle=..., clones=..., create_new_objects=...): # -> Literal[False]:
        """Duplicate the component around the axis.

        Parameters
        ----------
        axis : Application.AXIS object
            Coordinate system axis of the object.
        angle : float, optional
            Angle of rotation in degrees. The default is ``90``.
        clones : int, optional
            Number of clones. The default is ``2``.
        create_new_objects : bool, optional
            Whether to create copies as new objects. The default is ``True``.

        Returns
        -------
        list
            List of names of the newly added objects.

        References
        ----------
        >>> oEditor.DuplicateAroundAxis

        """
        ...
    
    @pyaedt_function_handler(nclones="clones", attach_object="attach")
    def duplicate_along_line(self, vector, clones=..., attach=..., **kwargs): # -> list[Any] | Literal[False]:
        """Duplicate the object along a line.

        Parameters
        ----------
        vector : list
            List of ``[x1 ,y1, z1]`` coordinates for the vector or the Application.Position object.
        clones : int, optional
            Number of clones. The default is ``2``.
        attach : bool, optional
            Whether to attach the object. The default is ``False``.

        Returns
        -------
        list
            List of names of the newly added objects.

        References
        ----------
        >>> oEditor.DuplicateAlongLine

        """
        ...
    
    @pyaedt_function_handler()
    def update_native(self): # -> Literal[True]:
        """Update the Native Component in AEDT.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @property
    def bounding_box(self): # -> list[float]:
        """Get bounding dimension of a user defined model.

        Returns
        -------
        list
            List of floats containing [x_min, y_min, z_min, x_max, y_max, z_max].

        """
        ...
    
    @property
    def center(self): # -> list[float]:
        """Get center coordinates of a user defined model.

        Returns
        -------
        list
            List of floats containing [x_center, y_center, z_center].

        """
        ...
    
    def __str__(self) -> str:
        ...
    
    @pyaedt_function_handler()
    def get_component_filepath(self):
        """Get 3d component file path.

        Returns
        -------
        str
            Path of the 3d component file.
        """
        ...
    
    @pyaedt_function_handler(new_filepath="output_file")
    def update_definition(self, password=..., output_file=..., local_update=...): # -> Literal[True]:
        """Update 3d component definition.

        Parameters
        ----------
        password : str, optional
            Password for encrypted models. The default value is ``None``.
        output_file : str, optional
            New path containing the 3d component file. The default value is ``""``, which means
            that the 3d component file has not changed.
        local_update : bool, optional
            Whether to update the file only locally. Default is ``False``.

        Returns
        -------
        bool
            True if successful.
        """
        ...
    
    @pyaedt_function_handler()
    def edit_definition(self, password=...): # -> Literal[False] | None:
        """Edit 3d Definition. Open AEDT Project and return Pyaedt Object.

        Parameters
        ----------
        password : str, optional
            Password for encrypted models. The default value is ``""``.

        Returns
        -------
        :class:`ansys.aedt.core.hfss.Hfss` or :class:`ansys.aedt.core.Icepak.Icepak`
            Pyaedt object.
        """
        ...
    


class LayoutComponent:
    """Manages object attributes for Layout components.

    Parameters
    ----------
    primitives : :class:`ansys.aedt.core.modeler.cad.primitives_3d.Primitives3D`
        Inherited parent object.
    name : str, optional
        Name of the component. The default value is ``None``.

    """
    def __init__(self, component) -> None:
        ...
    
    @property
    def edb_path(self): # -> str | None:
        """EDB path.

        Returns
        -------
        str
           EDB file path.

        """
        ...
    
    @property
    def edb_object(self): # -> Edb | Literal[False]:
        """EDB object.

        Returns
        -------
        :class:`ansys.aedt.core.edb.Edb`
           EDB object.

        """
        ...
    
    @property
    def edb_definition(self): # -> None:
        """Edb definition.

        Returns
        -------
        str
           EDB definition.

        """
        ...
    
    @property
    def show_layout(self): # -> None:
        """Show layout flag.

        Returns
        -------
        bool
           `Show layout check box.

        """
        ...
    
    @show_layout.setter
    def show_layout(self, show_layout): # -> None:
        ...
    
    @property
    def fast_transformation(self): # -> None:
        """Show layout flag.

        Returns
        -------
        bool
           Fast transformation check box.

        """
        ...
    
    @fast_transformation.setter
    def fast_transformation(self, fast_transformation): # -> None:
        ...
    
    @property
    def show_dielectric(self): # -> None:
        """Show dielectric flag.

        Returns
        -------
        bool
           Show dielectric check box.

        """
        ...
    
    @show_dielectric.setter
    def show_dielectric(self, show_dielectric): # -> None:
        ...
    
    @property
    def display_mode(self): # -> None:
        """Show layout flag.

        Returns
        -------
        int
           Layout display mode. Available modes are:
            * 0 : Layer.
            * 1 : Net.
            * 2 : Object.

        """
        ...
    
    @display_mode.setter
    def display_mode(self, display_mode): # -> None:
        ...
    
    @pyaedt_function_handler()
    def close_edb_object(self): # -> bool:
        """Close EDB object."""
        ...
    
    @pyaedt_function_handler()
    def update_visibility(self): # -> Literal[True]:
        """Update layer visibility.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    


