"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class EdgeTypePrimitive:
    """Provides common methods for EdgePrimitive and FacePrimitive."""
    @pyaedt_function_handler()
    def fillet(self, radius=..., setback=...): # -> bool:
        """Add a fillet to the selected edges in 3D/vertices in 2D.

        Parameters
        ----------
        radius : float, optional
            Radius of the fillet. The default is ``0.1``.
        setback : float, optional
            Setback value for the file. The default is ``0.0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Fillet

        """
        ...
    
    @pyaedt_function_handler()
    def chamfer(self, left_distance=..., right_distance=..., angle=..., chamfer_type=...): # -> bool:
        """Add a chamfer to the selected edges in 3D/vertices in 2D.

        Parameters
        ----------
        left_distance : float, optional
            Left distance from the edge. The default is ``1``.
        right_distance : float, optional
            Right distance from the edge. The default is ``None``.
        angle : float, optional.
            Angle value for chamfer types 2 and 3. The default is ``0``.
        chamfer_type : int, optional
            Type of the chamfer. Options are:
                * 0 - Symmetric
                * 1 - Left Distance-Right Distance
                * 2 - Left Distance-Angle
                * 3 - Right Distance-Angle

            The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Chamfer

        """
        ...
    


class VertexPrimitive(EdgeTypePrimitive):
    """Contains the vertex object within the AEDT Desktop Modeler.

    Parameters
    ----------
    object3d : :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
        Pointer to the calling object that provides additional functionality.
    objid : int
        Object ID as determined by the parent object.

    """
    def __init__(self, object3d, objid, position=...) -> None:
        ...
    
    @property
    def name(self):
        """Name of the object."""
        ...
    
    @property
    def position(self): # -> list[float] | None:
        """Position of the vertex.

        Returns
        -------
        list of float values or ''None``
            List of ``[x, y, z]`` coordinates of the vertex
            in model units when the data from AEDT is valid, ``None``
            otherwise.

        References
        ----------
        >>> oEditor.GetVertexPosition

        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class EdgePrimitive(EdgeTypePrimitive):
    """Contains the edge object within the AEDT Desktop Modeler.

    Parameters
    ----------
    object3d : :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
        Pointer to the calling object that provides additional functionality.
    edge_id : int
        Object ID as determined by the parent object.

    """
    def __init__(self, object3d, edge_id) -> None:
        ...
    
    @property
    def name(self):
        """Name of the object."""
        ...
    
    @property
    def segment_info(self): # -> dict[Any, Any]:
        """Compute segment information using the object-oriented method (from AEDT 2021 R2
        with beta options). The method manages segment info for lines, circles and ellipse
        providing information about all of those.


        Returns
        -------
            list
                Segment info if available."""
        ...
    
    @property
    def vertices(self): # -> list[Any]:
        """Vertices list.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.VertexPrimitive`]
            List of vertices.

        References
        ----------
        >>> oEditor.GetVertexIDsFromEdge

        """
        ...
    
    @property
    def midpoint(self): # -> list[float]:
        """Midpoint coordinates of the edge.

        Returns
        -------
        list of float values or ``None``
            Midpoint in ``[x, y, z]`` coordinates when the edge
            is a circle with only one vertex, ``None`` otherwise.

        References
        ----------
        >>> oEditor.GetVertexPosition

        """
        ...
    
    @property
    def length(self): # -> float | Literal[False]:
        """Length of the edge.

        Returns
        -------
        float or bool
            Edge length in model units when edge has two vertices, ``False`` otherwise.

        References
        ----------
        >>> oEditor.GetEdgeLength

        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @pyaedt_function_handler()
    def create_object(self, non_model=...):
        """Return a new object from the selected edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.
        non_model : bool, optional
            Either if create the new object as model or non-model. The default is `False`.

        References
        ----------
        >>> oEditor.CreateObjectFromEdges
        """
        ...
    
    @pyaedt_function_handler()
    def move_along_normal(self, offset=...): # -> Literal[False]:
        """Move this edge.

        This method moves an edge which belong to the same solid.

        Parameters
        ----------
        offset : float, optional
             Offset to apply in model units. The default is ``1.0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.MoveEdges
        """
        ...
    


class FacePrimitive:
    """Contains the face object within the AEDT Desktop Modeler.

    Parameters
    ----------
        object3d : :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
        obj_id : int
    """
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __init__(self, object3d, obj_id) -> None:
        ...
    
    @property
    def name(self):
        """Name of the object."""
        ...
    
    @property
    def oeditor(self):
        """Oeditor Module."""
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def touching_objects(self): # -> list[Any]:
        """Get the objects that touch one of the vertex, edge midpoint or the actual face.

        Returns
        -------
        list
            Object names touching that face.
        """
        ...
    
    @property
    def edges(self): # -> list[Any]:
        """Edges lists.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`]
            List of Edges.

        References
        ----------
        >>> oEditor.GetEdgeIDsFromFace

        """
        ...
    
    @property
    def vertices(self): # -> list[Any]:
        """Vertices lists.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.VertexPrimitive`]
            List of Vertices.

        References
        ----------
        >>> oEditor.GetVertexIDsFromFace

        """
        ...
    
    @property
    def id(self): # -> Any:
        """Face ID."""
        ...
    
    @property
    def center_from_aedt(self): # -> list[float] | Literal[False]:
        """Face center for a planar face in model units.

        Returns
        -------
        list or bool
            Center position in ``[x, y, z]`` coordinates for the planar face, ``False`` otherwise.

        References
        ----------
        >>> oEditor.GetFaceCenter

        """
        ...
    
    @property
    def is_planar(self): # -> bool:
        """Check if a face is planar or not.

        Returns
        -------
        bool
        """
        ...
    
    @property
    def center(self): # -> list[float] | None:
        """Face center in model units.

        .. note::
           It returns the face center from AEDT.
           It falls back to get the face centroid if number of face vertices is >1.
           For curved faces returns a point on the surface even if it is
           not properly the center of mass.

        Returns
        -------
        list of float values
            Centroid of all vertices of the face.

        References
        ----------
        >>> oEditor.GetFaceCenter

        """
        ...
    
    @property
    def area(self):
        """Face area.

        Returns
        -------
        float
            Face area in model units.

        References
        ----------
        >>> oEditor.GetFaceArea

        """
        ...
    
    @property
    def top_edge_z(self): # -> None:
        """Top edge in the Z direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        References
        ----------
        >>> oEditor.FaceCenter

        """
        ...
    
    @property
    def bottom_edge_z(self): # -> None:
        """Bottom edge in the Z direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def top_edge_x(self): # -> None:
        """Top edge in the X direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def bottom_edge_x(self): # -> None:
        """Bottom edge in the X direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def top_edge_y(self): # -> None:
        """Top edge in the Y direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def bottom_edge_y(self): # -> None:
        """Bottom edge in the X direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @pyaedt_function_handler(tol="tolerance")
    def is_on_bounding(self, tolerance=...): # -> bool:
        """Check if the face is on bounding box or Not.

        Parameters
        ----------
        tolerance : float, optional
            Tolerance of check between face center and bounding box.

        Returns
        -------
        bool
            `True` if the face is on bounding box. `False` otherwise.
        """
        ...
    
    @pyaedt_function_handler()
    def move_with_offset(self, offset=...): # -> Literal[True]:
        """Move the face along the normal.

        Parameters
        ----------
        offset : float, optional
            Offset to apply in model units. The default is ``1.0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.MoveFaces

        """
        ...
    
    @pyaedt_function_handler()
    def move_with_vector(self, vector): # -> Literal[True]:
        """Move the face along a vector.

        Parameters
        ----------
        vector : list
            List of ``[x, y, z]`` coordinates for the vector.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.MoveFaces

        """
        ...
    
    @property
    def normal(self): # -> list[Any] | None:
        """Face normal.

        Limitations:
        #. The face must be planar.
        #. Currently it works only if the face has at least two vertices. Notable excluded items are circles and
        ellipses that have only one vertex.
        #. If a bounding box is specified, the normal is orientated outwards with respect to the bounding box.
        Usually the bounding box refers to a volume where the face lies.
        If no bounding box is specified, the normal can be inward or outward the volume.

        Returns
        -------
        list of float values or ``None``
            Normal vector (normalized ``[x, y, z]`` coordinates) or ``None``.

        References
        ----------
        >>> oEditor.GetVertexPosition

        """
        ...
    
    @pyaedt_function_handler()
    def create_object(self, non_model=...):
        """Return a new object from the selected face.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.
        non_model : bool, optional
            Either to create the new object as model or non-model. Default is ``False``.

        References
        ----------
        >>> oEditor.CreateObjectFromFaces
        """
        ...
    


class Point:
    """Manages point attributes for the AEDT 3D Modeler.

    Parameters
    ----------
    primitives : :class:`ansys.aedt.core.modeler.cad.primitives_3d.Primitives3D`
        Inherited parent object.
    name : str
        Name of the point.

    Examples
    --------
    Basic usage demonstrated with an HFSS design:

    >>> from ansys.aedt.core import Hfss
    >>> aedtapp = Hfss()
    >>> primitives = aedtapp.modeler

    Create a point, to return an :class:`ansys.aedt.core.modeler.cad.elements_3d.Point`.

    >>> point = primitives.create_point([30, 30, 0], "my_point", (0, 195, 255))
    >>> my_point = primitives.points[point.name]
    """
    def __init__(self, primitives, name) -> None:
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def name(self): # -> Any:
        """Name of the point as a string value.

        Returns
        -------
        str
           Name of object as a string value.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @name.setter
    def name(self, point_name): # -> None:
        ...
    
    @property
    def valid_properties(self):
        """Valid properties.

        References
        ----------
        >>> oEditor.GetProperties
        """
        ...
    
    def set_color(self, color_value): # -> None:
        """Set symbol color.

        Parameters
        ----------
        color_value : string
            String exposing the new color of the point in the format of "(001 255 255)".

        References
        ----------
        >>> oEditor.ChangeProperty

        Examples
        --------
        >>> point = self.aedtapp.modeler.create_point([30, 30, 0], "demo_point")
        >>> point.set_color("(143 175 158)")

        """
        ...
    
    @property
    def coordinate_system(self): # -> str | None:
        """Coordinate system of the point.

        Returns
        -------
        str
            Name of the point's coordinate system.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @coordinate_system.setter
    def coordinate_system(self, new_coordinate_system): # -> None:
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> None:
        """Delete the point.

        References
        ----------
        >>> oEditor.Delete
        """
        ...
    


class Plane:
    """Manages plane attributes for the AEDT 3D Modeler.

    Parameters
    ----------
    primitives : :class:`ansys.aedt.core.modeler.cad.primitives_3d.Primitives3D`
        Inherited parent object.
    name : str
        Name of the point.

    Examples
    --------
    Basic usage demonstrated with an HFSS design:

    >>> from ansys.aedt.core import Hfss
    >>> aedtapp = Hfss()
    >>> primitives = aedtapp.modeler

    Create a plane, to return an :class:`ansys.aedt.core.modeler.cad.elements_3d.Plane`.

    >>> plane = primitives.create_plane("my_plane", "-0.7mm", "0.3mm", "0mm", "0.7mm", "-0.3mm", "0mm", "(0, 195, 255)")
    >>> my_plane = primitives.planes[plane.name]
    """
    def __init__(self, primitives, name) -> None:
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def name(self): # -> Any:
        """Name of the plane as a string value.

        Returns
        -------
        str
           Name of object as a string value.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @name.setter
    def name(self, plane_name): # -> None:
        ...
    
    @property
    def valid_properties(self):
        """Valid properties.

        References
        ----------
        >>> oEditor.GetProperties
        """
        ...
    
    @pyaedt_function_handler()
    def set_color(self, color_value): # -> None:
        """Set symbol color.

        Parameters
        ----------
        color_value : string
            String exposing the new color of the plane in the format of "(001 255 255)".

        References
        ----------
        >>> oEditor.ChangeProperty

        Examples
        --------
        >>> plane = self.aedtapp.modeler.create_plane("-0.7mm", "0.3mm", "0mm", "0.7mm", "-0.3mm", "0mm", "demo_plane")
        >>> plane.set_color("(143 175 158)")

        """
        ...
    
    @property
    def coordinate_system(self): # -> str | None:
        """Coordinate system of the plane.

        Returns
        -------
        str
            Name of the plane's coordinate system.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @coordinate_system.setter
    def coordinate_system(self, new_coordinate_system): # -> Literal[True]:
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> None:
        """Delete the plane.

        References
        ----------
        >>> oEditor.Delete
        """
        ...
    


class HistoryProps(dict):
    """Manages an object's history properties."""
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __init__(self, child_object, props) -> None:
        ...
    
    def pop(self, key, default=...): # -> None:
        ...
    


class BinaryTreeNode:
    """Manages an object's history structure."""
    def __init__(self, node, child_object, first_level=..., get_child_obj_arg=..., root_name=..., app=...) -> None:
        ...
    
    @property
    def children(self): # -> dict[Any, Any]:
        ...
    
    @property
    def properties(self): # -> dict[Any, Any] | HistoryProps:
        """Properties data.

        Returns
        -------
        :class:``ansys.aedt.coree.modeler.cad.elements_3d.HistoryProps``
        """
        ...
    
    @property
    def command(self):
        """Command of the modeler hystory if available.

        Returns
        -------
        str
        """
        ...
    
    def update_property(self, prop_name, prop_value): # -> None:
        """Update the property of the binary tree node.

        Parameters
        ----------
        prop_name : str
             Name of the property.
        prop_value : str
             Value of the property.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler
    def jsonalize_tree(self): # -> dict[Any, dict[str, Any]]:
        """Create dictionary from the Binary Tree.

        Returns
        -------
        dict
            Dictionary containing the information of the Binary Three.
        """
        ...
    
    @pyaedt_function_handler
    def suppress_all(self, app): # -> Literal[True]:
        """Activate suppress option for all the operations contained in the binary tree node.

        Parameters
        ----------
        app : object
            An AEDT application from ``ansys.aedt.core.application``.

        Returns
        -------
        bool
            ``True`` when successful.
        """
        ...
    
    @pyaedt_function_handler
    def unsuppress_all(self, app): # -> Literal[True]:
        """Disable suppress option for all the operations contained in the binary tree node.

        Parameters
        ----------
        app : object
            An AEDT application from ``ansys.aedt.core.application``.

        Returns
        -------
        bool
            ``True`` when successful.
        """
        ...
    


