"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.internal.checks import min_aedt_version

"""
This module contains these classes: `Components3DLayout`,`CircuitComponent',
`EdgePrimitive`, `EdgeTypePrimitive`, `FacePrimitive`, `Geometries3DLayout`,
`Nets3DLayout`, `Object3DLayout`, `Object3d`, `Padstack`, `PDSHole`, `PDSLayer`,
`Pins3DLayout', and `VertexPrimitive`.

This module provides methods and data structures for managing all properties of
objects (points, lines, sheets, and solids) within the AEDT 3D Modeler.

"""
class Object3d:
    """Manages object attributes for the AEDT 3D Modeler.

    Parameters
    ----------
    primitives : :class:`ansys.aedt.core.modeler.cad.primitives_3d.Primitives3D`
        Inherited parent object.
    name : str

    Examples
    --------
    Basic usage demonstrated with an HFSS design:

    >>> from ansys.aedt.core import Hfss
    >>> aedtapp = Hfss()
    >>> prim = aedtapp.modeler

    Create a part, such as box, to return an :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`.

    >>> id = prim.create_box([0, 0, 0], [10, 10, 5], "Mybox", "Copper")
    >>> part = prim[id]
    """
    def __init__(self, primitives, name=...) -> None:
        ...
    
    @property
    def is_polyline(self): # -> bool:
        """Get or set if the body is originated by a polyline.

        Returns
        -------
        bool
        """
        ...
    
    @is_polyline.setter
    def is_polyline(self, value): # -> None:
        ...
    
    @property
    def bounding_box(self): # -> list[float] | list[Any]:
        """Bounding box of a part.

        A list of six 3D position vectors is returned.

        Returns
        -------
        list of [list of float]
            List of six ``[x, y, z]`` positions of the bounding box containing
            Xmin, Ymin, Zmin, Xmax, Ymax, and Zmax values.

        References
        ----------
        >>> oEditor.GetModelBoundingBox

        """
        ...
    
    @property
    def bounding_dimension(self): # -> list[Any]:
        """Retrieve the dimension array of the bounding box.

        Returns
        -------
        list
            List of three float values representing the bounding box dimensions
            in the form ``[dim_x, dim_y, dim_z]``.

        References
        ----------
        >>> oEditor.GetModelBoundingBox
        """
        ...
    
    @pyaedt_function_handler()
    @min_aedt_version("2021.2")
    def plot(self, show=...):
        """Plot model with PyVista.

        Parameters
        ----------
        show : bool, optional
            Show the plot after generation.  The default value is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.generic.plot.ModelPlotter`
            Model Object.

        Notes
        -----
        Works from AEDT 2021.2 in CPython only. PyVista has to be installed.
        """
        ...
    
    @pyaedt_function_handler(file_path="output_file")
    @min_aedt_version("2021.2")
    def export_image(self, output_file=...): # -> None:
        """Export the current object to a specified file path.

        .. note::
           Works from AEDT 2021.2 in CPython only. PyVista has to be installed.

        Parameters
        ----------
        output_file : str or :class:`pathlib.Path`, optional
            File name with full path. If `None` the exported image will be a ``png`` file that
            will be saved in ``working_directory``.
            To access the ``working_directory`` the use ``app.working_directory`` property.

        Returns
        -------
        str
            File path.
        """
        ...
    
    @pyaedt_function_handler()
    def touching_conductors(self): # -> list[Any]:
        """Get the conductors of given object.

        See :func:`ansys.aedt.core.application.analysis_3d.FieldAnalysis3D.identify_touching_conductors`.

        Returns
        -------
        list
            Name of all touching conductors.
        """
        ...
    
    @property
    def touching_objects(self): # -> list[Any]:
        """Get the objects that touch a vertex, edge midpoint, or face of the object."""
        ...
    
    @pyaedt_function_handler(object_name="assignment")
    def get_touching_faces(self, assignment): # -> list[Any]:
        """Get the objects that touch one of the face center of each face of the object.

        Parameters
        ----------
        assignment : str, :class:`Object3d`
            Object to check.

        Returns
        -------
        list
            list of objects and faces touching.
        """
        ...
    
    @property
    def faces(self): # -> list[Any]:
        """Information for each face in the given part.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`]

        References
        ----------
        >>> oEditor.GetFaceIDs

        """
        ...
    
    @property
    def faces_on_bounding_box(self): # -> list[Any]:
        """Return only the face ids of the faces touching the bounding box.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`]
        """
        ...
    
    @property
    def face_closest_to_bounding_box(self): # -> None:
        """Return only the face ids of the face closest to the bounding box.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`
        """
        ...
    
    @pyaedt_function_handler()
    def largest_face(self, n=...): # -> list[Any]:
        """Return only the face with the greatest area.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`]
        """
        ...
    
    @pyaedt_function_handler()
    def longest_edge(self, n=...): # -> list[Any]:
        """Return only the edge with the greatest length.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`]
        """
        ...
    
    @pyaedt_function_handler()
    def smallest_face(self, n=...): # -> list[Any]:
        """Return only the face with the smallest area.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`]
        """
        ...
    
    @pyaedt_function_handler()
    def shortest_edge(self, n=...): # -> list[Any]:
        """Return only the edge with the smallest length.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`]
        """
        ...
    
    @property
    def top_face_z(self): # -> None:
        """Top face in the Z direction of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`

        References
        ----------
        >>> oEditor.FaceCenter

        """
        ...
    
    @property
    def bottom_face_z(self): # -> None:
        """Bottom face in the Z direction of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`

        References
        ----------
        >>> oEditor.FaceCenter

        """
        ...
    
    @property
    def top_face_x(self): # -> None:
        """Top face in the X direction of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`

        References
        ----------
        >>> oEditor.FaceCenter

        """
        ...
    
    @property
    def bottom_face_x(self): # -> None:
        """Bottom face in the X direction of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`

        References
        ----------
        >>> oEditor.FaceCenter

        """
        ...
    
    @property
    def top_face_y(self): # -> None:
        """Top face in the Y direction of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`

        References
        ----------
        >>> oEditor.FaceCenter

        """
        ...
    
    @property
    def bottom_face_y(self): # -> None:
        """Bottom face in the X direction of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`

        References
        ----------
        >>> oEditor.FaceCenter

        """
        ...
    
    @property
    def top_edge_z(self): # -> None:
        """Top edge in the Z direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        References
        ----------
        >>> oEditor.FaceCenter

        """
        ...
    
    @property
    def bottom_edge_z(self): # -> None:
        """Bottom edge in the Z direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def top_edge_x(self): # -> None:
        """Top edge in the X direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def bottom_edge_x(self): # -> None:
        """Bottom edge in the X direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def top_edge_y(self): # -> None:
        """Top edge in the Y direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def bottom_edge_y(self): # -> None:
        """Bottom edge in the Y direction of the object. Midpoint is used as criteria to find the edge.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`

        """
        ...
    
    @property
    def edges(self): # -> list[Any]:
        """Information for each edge in the given part.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`]

        References
        ----------
        >>> oEditor.GetEdgeIDsFromObject

        """
        ...
    
    @property
    def vertices(self): # -> list[Any]:
        """Information for each vertex in the given part.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.VertexPrimitive`]

        References
        ----------
        >>> oEditor.GetVertexIDsFromObject

        """
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def surface_material_name(self): # -> None:
        """Surface material name of the object.

        Returns
        -------
        str or None
            Name of the surface material when successful, ``None`` and a warning message otherwise.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @property
    def group_name(self): # -> None:
        """Group the object belongs to.

        Returns
        -------
        str
            Name of the group.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @group_name.setter
    def group_name(self, name): # -> None:
        """Assign Object to a specific group. It creates a new group if the group doesn't exist.

        Parameters
        ----------
        name : str
            Name of the group to assign. Group will be created if it does not exist.

        Returns
        -------
        str
            Name of the group.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @property
    def is_conductor(self): # -> bool:
        """Check if the object is a conductor."""
        ...
    
    @property
    def material_name(self): # -> str:
        """Material name of the object.

        Returns
        -------
        str or None
            Name of the material when successful, ``None`` and a warning message otherwise.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @material_name.setter
    def material_name(self, mat): # -> None:
        ...
    
    @surface_material_name.setter
    def surface_material_name(self, mat): # -> None:
        ...
    
    @property
    def id(self): # -> None:
        """ID of the object.

        Returns
        -------
        int or None
            ID of the object when successful, ``None`` otherwise.

        References
        ----------
        >>> oEditor.GetObjectIDByName

        """
        ...
    
    @property
    def object_type(self): # -> str | None:
        """Type of the object.

        Options are:
             * Solid
             * Sheet
             * Line

        Returns
        -------
        str
            Type of the object.

        """
        ...
    
    @property
    def is3d(self): # -> bool:
        """Check for if the object is 3D.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @property
    def mass(self): # -> float:
        """Object mass.

        Returns
        -------
        float or None
            Mass of the object when successful, 0.0 otherwise. Mass of the volume in kg since AEDT mass density is
            always in kg/m^3

        References
        ----------
        >>> oEditor.GetObjectVolume

        """
        ...
    
    @property
    def volume(self): # -> float:
        """Object volume.

        Returns
        -------
        float
            Volume of the object when successful, 0.0 otherwise.

        References
        ----------
        >>> oEditor.GetObjectVolume

        """
        ...
    
    @property
    def name(self): # -> str:
        """Name of the object as a string value.

        Returns
        -------
        str
           Name of object as a string value.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @name.setter
    def name(self, obj_name): # -> None:
        ...
    
    @property
    def valid_properties(self):
        """Valid properties.

        References
        ----------
        >>> oEditor.GetProperties
        """
        ...
    
    @property
    def color(self): # -> tuple[int, int, int] | tuple[Literal[0], Literal[195], Literal[255]] | None:
        """Part color as a tuple of integer values for `(Red, Green, Blue)` color values.

        If the integer values are outside the range 0-255, then limit the values. Invalid inputs are ignored.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        Examples
        --------
        >>> part.color = (255, 255, 0)

        """
        ...
    
    @property
    def color_string(self): # -> str:
        """Color tuple as a string in the format '(Red, Green, Blue)'.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty
        """
        ...
    
    @color.setter
    def color(self, color_value): # -> None:
        ...
    
    @property
    def transparency(self): # -> float | None:
        """Part transparency as a value between 0.0 and 1.0.

        If the value is outside the range, then apply a limit. If the value is not a valid number, set to ``0.0``.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @transparency.setter
    def transparency(self, T): # -> None:
        ...
    
    @property
    def object_units(self):
        """Object units."""
        ...
    
    @property
    def part_coordinate_system(self): # -> str | None:
        """Part coordinate system.

        Returns
        -------
        str
            Name of the part coordinate system.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @part_coordinate_system.setter
    def part_coordinate_system(self, sCS): # -> None:
        ...
    
    @property
    def solve_inside(self): # -> bool | None:
        """Part solve inside flag.

        Returns
        -------
        bool
            ``True`` when ``"solve-inside"`` is activated for the part, ``False`` otherwise.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @solve_inside.setter
    def solve_inside(self, S): # -> None:
        ...
    
    @property
    def display_wireframe(self): # -> bool | None:
        """Wireframe property of the part.

        Returns
        -------
        bool
            ``True`` when wirefame is activated for the part, ``False`` otherwise.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @display_wireframe.setter
    def display_wireframe(self, fWireframe): # -> None:
        ...
    
    @property
    def material_appearance(self): # -> bool | None:
        """Material appearance property of the part.

        Returns
        -------
        bool
            ``True`` when material appearance is activated for the part, ``False`` otherwise.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @material_appearance.setter
    def material_appearance(self, material_appearance): # -> None:
        ...
    
    @pyaedt_function_handler()
    def history(self): # -> BinaryTreeNode | Literal[False]:
        """Object history.

        Returns
        -------
            :class:`ansys.aedt.core.modeler.cad.elements_3d.BinaryTree` when successful,
            ``False`` when failed.

        """
        ...
    
    @property
    def model(self): # -> bool | None:
        """Part model or non-model property.

        Returns
        -------
        bool
            ``True`` when model, ``False`` otherwise.

        References
        ----------
        >>> oEditor.GetPropertyValue
        >>> oEditor.ChangeProperty

        """
        ...
    
    @model.setter
    def model(self, fModel): # -> None:
        ...
    
    @pyaedt_function_handler(object_list="assignment")
    def unite(self, assignment): # -> Self:
        """Unite a list of objects with this object.

        Parameters
        ----------
        assignment : list of str or list of ansys.aedt.core.modeler.cad.object_3d.Object3d
            List of objects.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
           Object 3D object.

        References
        ----------
        >>> oEditor.Unite

        """
        ...
    
    @pyaedt_function_handler(theList="assignment")
    def intersect(self, assignment, keep_originals=...): # -> Self:
        """Intersect the active object with a given list.

        Parameters
        ----------
        assignment : list
            List of objects.
        keep_originals : bool, optional
            Whether to keep the original object. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Retrieve the resulting 3D Object when succeeded.

        References
        ----------
        >>> oEditor.Intersect
        """
        ...
    
    @pyaedt_function_handler()
    def split(self, plane, sides=...):
        """Split the active object.

        Parameters
        ----------
        plane : str
            Coordinate plane of the cut or the Application.PLANE object.
            Choices for the coordinate plane are ``"XY"``, ``"YZ"``, and ``"ZX"``.
        sides : str, optional
            Which side to keep. Options are ``"Both"``, ``"PositiveOnly"``,
            and ``"NegativeOnly"``. The default is ``"Both"``, in which case
            all objects are kept after the split.

        Returns
        -------
        list of str
            List of split objects.

        References
        ----------
        >>> oEditor.Split
        """
        ...
    
    @pyaedt_function_handler(position="origin")
    def mirror(self, origin, vector, duplicate=...): # -> Self | Literal[False]:
        """Mirror a selection.

        Parameters
        ----------
        origin : list of int or float
            Cartesian ``[x, y, z]`` coordinates or
            the ``Application.Position`` object of a point in the plane used for the mirror operation.
        vector : list of float
            Vector in Cartesian coordinates ``[x1, y1, z1]``  or
            the ``Application.Position`` object for the vector normal to the plane used for the mirror operation.
        duplicate : bool, optional
             Whether to duplicate the object after mirroring it .n. The default
             is ``False``, in which case AEDT is not duplicating the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.
            ``False`` when failed.

        References
        ----------
        >>> oEditor.Mirror
        """
        ...
    
    @pyaedt_function_handler(cs_axis="axis", unit="units")
    def rotate(self, axis, angle=..., units=...): # -> Self | Literal[False]:
        """Rotate the selection.

        Parameters
        ----------
        axis : int
            Coordinate system axis or the Application.AXIS object.
        angle : float, optional
            Angle of rotation. The units, defined by ``unit``, can be either
            degrees or radians. The default is ``90.0``.
        units : text, optional
             Units for the angle. Options are ``"deg"`` or ``"rad"``.
             The default is ``"deg"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object. ``False`` when failed.

        References
        ----------
        >>> oEditor.Rotate
        """
        ...
    
    @pyaedt_function_handler()
    def move(self, vector): # -> Self | Literal[False]:
        """Move objects from a list.

        Parameters
        ----------
        vector : list
            Vector of the direction move. It can be a list of the ``[x, y, z]``
            coordinates or a Position object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.
            ``False`` when failed.

        References
        ----------
        >>> oEditor.Move
        """
        ...
    
    @pyaedt_function_handler(cs_axis="axis", nclones="clones")
    def duplicate_around_axis(self, axis, angle=..., clones=..., create_new_objects=...):
        """Duplicate the object around the axis.

        Parameters
        ----------
        axis : Application.AXIS object
            Coordinate system axis of the object.
        angle : float
            Angle of rotation in degrees. The default is ``90``.
        clones : int, optional
            Number of clones. The default is ``2``.
        create_new_objects : bool, optional
            Whether to create copies as new objects. The default is ``True``.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            List of names of the newly added objects.

        References
        ----------
        >>> oEditor.DuplicateAroundAxis

        """
        ...
    
    @pyaedt_function_handler(nclones="clones", attachObject="attach")
    def duplicate_along_line(self, vector, clones=..., attach=...):
        """Duplicate the object along a line.

        Parameters
        ----------
        vector : list
            List of ``[x1 ,y1, z1]`` coordinates for the vector or the Application.Position object.
        clones : int, optional
            Number of clones. The default is ``2``.
        attach : bool, optional
            Whether to attach the object. The default is ``False``.

        Returns
        -------
        list of str
            List of names of the newly added objects.

        References
        ----------
        >>> oEditor.DuplicateAlongLine

        """
        ...
    
    @pyaedt_function_handler()
    def sweep_along_vector(self, sweep_vector, draft_angle=..., draft_type=...): # -> Self:
        """Sweep the selection along a vector.

        Parameters
        ----------
        sweep_vector : list
            Application.Position object.
        draft_angle : float, optional
            Angle of the draft in degrees. The default is ``0``.
        draft_type : str, optional
            Type of the draft. Options are ``"Extended"``, ``"Round"``,
            and ``"Natural"``. The default value is ``"Round``.

        Returns
        -------
        bool
            ``True`` when model, ``False`` otherwise.

        References
        ----------
        >>> oEditor.SweepAlongVector

        """
        ...
    
    @pyaedt_function_handler()
    def sweep_along_path(self, sweep_object, draft_angle=..., draft_type=..., is_check_face_intersection=..., twist_angle=...): # -> Self:
        """Sweep the selection along a vector.

        Parameters
        ----------
        sweep_object : :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Application.Position object.
        draft_angle : float, optional
            Angle of the draft in degrees. The default is ``0``.
        draft_type : str
            Type of the draft. Options are ``"Extended"``, ``"Round"``,
            and ``"Natural"``. The default is ``"Round``.
        is_check_face_intersection : bool, optional
           The default value is ``False``.
        twist_angle : float, optional
            Angle at which to twist or rotate in degrees. The default value is ``0``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Swept object.

        References
        ----------
        >>> oEditor.SweepAlongPath

        """
        ...
    
    @pyaedt_function_handler(cs_axis="axis")
    def sweep_around_axis(self, axis, sweep_angle=..., draft_angle=...): # -> Self:
        """Sweep around an axis.

        Parameters
        ----------
        axis : :class:`ansys.aedt.core.generic.constants.AXIS`
            Coordinate system of the axis.
        sweep_angle : float, optional
             Sweep angle in degrees. The default is ``360``.
        draft_angle : float, optional
            Angle of the draft. The default is ``0``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Swept object.

        References
        ----------
        >>> oEditor.SweepAroundAxis

        """
        ...
    
    @pyaedt_function_handler()
    def section(self, plane, create_new=..., section_cross_object=...): # -> Self:
        """Section the object.

        Parameters
        ----------
        plane : from ansys.aedt.core.generic.constants.PLANE
            Coordinate system of the plane object. Application.PLANE object
        create_new : bool, optional
            Whether to create an object. The default is ``True``.
        section_cross_object : bool, optional
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.Section

        """
        ...
    
    @pyaedt_function_handler()
    def detach_faces(self, faces):
        """Section the object.

        Parameters
        ----------
        faces : List[FacePrimitive] or List[int] or int or FacePrimitive
            Face or faces to detach from the object.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            List of object resulting from the operation.

        References
        ----------
        >>> oEditor.DetachFaces

        """
        ...
    
    @pyaedt_function_handler()
    def clone(self):
        """Clone the object and return the new 3D object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object that was added.

        References
        ----------
        >>> oEditor.Clone

        """
        ...
    
    @pyaedt_function_handler()
    def subtract(self, tool_list, keep_originals=...): # -> Self:
        """Subtract one or more parts from the object.

        Parameters
        ----------
        tool_list : str, Object3d, or list of str and Object3d.
            List of parts to subtract from this part.
        keep_originals : bool, optional
            Whether to keep the tool parts after subtraction. The default
            is ``True``. If ``False``, the parts are deleted.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Modified 3D object following the subtraction.

        References
        ----------
        >>> oEditor.Subtract

        """
        ...
    
    @pyaedt_function_handler()
    def wrap_sheet(self, object_name, imprinted=...): # -> Literal[False]:
        """Execute the sheet wrapping around an object. This object can be either the sheet or the object.
        If wrapping produces an unclassified operation it will be reverted.

        Parameters
        ----------
        object_name : str, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Object name or solid object or sheet name.
        imprinted : bool, optional
            Either if imprint or not over the sheet. Default is `False`.

        Returns
        -------
        bool
            Command execution status.
        """
        ...
    
    @pyaedt_function_handler()
    def delete(self): # -> None:
        """Delete the object.

        References
        ----------
        >>> oEditor.Delete
        """
        ...
    
    @pyaedt_function_handler()
    def faces_by_area(self, area, area_filter=..., tolerance=...): # -> list[Any]:
        """Filter faces by area.

        Parameters
        ----------
        area : float
            Value of the area to filter in model units.
        area_filter : str, optional
            Comparer symbol.
            Default value is "==".
        tolerance : float, optional
            tolerance for comparison.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`]
            List of face primitives.
        """
        ...
    
    @pyaedt_function_handler()
    def edges_by_length(self, length, length_filter=..., tolerance=...): # -> list[Any]:
        """Filter edges by length.

        Parameters
        ----------
        length : float
            Value of the length to filter.
        length_filter : str, optional
            Comparer symbol.
            Default value is "==".
        tolerance : float, optional
            tolerance for comparison.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`]
            List of edge primitives.
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    @pyaedt_function_handler()
    def fillet(self, vertices=..., edges=..., radius=..., setback=...): # -> bool:
        """Add a fillet to the selected edges in 3D/vertices in 2D.

        Parameters
        ----------
        vertices : list, optional
            List of vertices to fillet. Default is ``None``.
        edges : list, optional
            List of edges to fillet. Default is ``None``.
        radius : float, optional
            Radius of the fillet. The default is ``0.1``.
        setback : float, optional
            Setback value for the file. The default is ``0.0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Fillet

        """
        ...
    
    @pyaedt_function_handler()
    def chamfer(self, vertices=..., edges=..., left_distance=..., right_distance=..., angle=..., chamfer_type=...): # -> bool:
        """Add a chamfer to the selected edges in 3D/vertices in 2D.

        Parameters
        ----------
        vertices : list, optional
            List of vertices to chamfer.
        edges : list, optional
            List of edges to chamfer.
        left_distance : float, optional
            Left distance from the edge. The default is ``1``.
        right_distance : float, optional
            Right distance from the edge. The default is ``None``.
        angle : float, optional.
            Angle value for chamfer types 2 and 3. The default is ``0``.
        chamfer_type : int, optional
            Type of the chamfer. Options are:
                * 0 - Symmetric
                * 1 - Left Distance-Right Distance
                * 2 - Left Distance-Angle
                * 3 - Right Distance-Angle

            The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Chamfer

        """
        ...
    
    @property
    def start_point(self): # -> None:
        """Get the starting point in the polyline object.

        This is a list of the ``[x, y, z]`` coordinates for the starting point in the polyline
        object in the object's coordinate system

        Returns
        -------
        list
            List of the ``[x, y, z]`` coordinates for the starting point in the polyline
            object.
        """
        ...
    
    @property
    def end_point(self): # -> None:
        """List of the ``[x, y, z]`` coordinates for the ending point in the polyline
        object in the object's coordinate system.

        Returns
        -------
        list
            List of the ``[x, y, z]`` coordinates for the ending point in the polyline
            object.

        References
        ----------
        >>> oEditor.GetVertexIDsFromObject
        >>> oEditor.GetVertexPosition

        """
        ...
    
    @property
    def points(self): # -> list[Any] | None:
        """Polyline Points."""
        ...
    
    @property
    def segment_types(self): # -> list[Any] | None:
        """List of the segment types of the polyline."""
        ...
    
    @property
    def vertex_positions(self): # -> list[Any] | None:
        """List of the ``[x, y, z]`` coordinates for all vertex positions in the
        polyline object in the object's coordinate system.

        Returns
        -------
        list
            List of the ``[x, y, z]`` coordinates for all vertex positions in the
            polyline object.

        References
        ----------
        >>> oEditor.GetVertexIDsFromObject
        >>> oEditor.GetVertexPosition

        """
        ...
    
    @pyaedt_function_handler(abstol="tolerance")
    def remove_point(self, position, tolerance=...): # -> bool:
        """Remove a point from an existing polyline by position.

        You must enter the exact position of the vertex as a list
        of ``[x, y, z]`` coordinates in the object's coordinate system.

        Parameters
        ----------
        position : list
            List of ``[x, y, z]`` coordinates specifying the vertex to remove.
        tolerance : float, optional
            Absolute tolerance of the comparison of a specified position to the
            vertex positions. The default is ``1e-9``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.DeletePolylinePoint

        Examples
        --------
        Use floating point values for the vertex positions.

        >>> P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])
        >>> P.remove_point([0, 1, 2])

        Use string expressions for the vertex position.

        >>> P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])
        >>> P.remove_point(["0mm", "1mm", "2mm"])

        Use string expressions for the vertex position and include an absolute
        tolerance when searching for the vertex to be removed.

        >>> P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])
        >>> P.remove_point(["0mm", "1mm", "2mm"], tolerance=1e-6)
        """
        ...
    
    @pyaedt_function_handler(segment_id="assignment")
    def remove_segments(self, assignment): # -> bool:
        """Remove a segment from an existing polyline by segment id.

        You must enter the segment id or the list of the segment ids you want to remove.

        Parameters
        ----------
        assignment : int or List of int
            One or more edge IDs within the total number of edges of the polyline.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.DeletePolylinePoint

        Examples
        --------
        >>> P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])
        >>> P.remove_segments(assignment=0)
        """
        ...
    
    @pyaedt_function_handler(type="section")
    def set_crosssection_properties(self, section=..., orient=..., width=..., topwidth=..., height=..., num_seg=..., bend_type=...): # -> bool:
        """Set the properties of an existing polyline object.

        Parameters
        ----------
        section : str, optional
            Types of the cross-sections. Options are ``"Line"``, ``"Circle"``, ``"Rectangle"``,
            and ``"Isosceles Trapezoid"``. The default is ``None``.
        orient : str, optional
            Direction of the normal vector to the width of the cross-section.
            Options are ``"X"``, ``"Y"``, ``"Z"``, and ``"Auto"``. The default
            is ``None``, which sets the orientation to ``"Auto"``.
        width : float or str, optional
           Width or diameter of the cross-section for all types. The default is
           ``0``.
        topwidth : float or str
           Top width of the cross-section for the type ``"Isosceles Trapezoid"``
           only. The default is ``0``.
        height : float or str
            Height of the cross-section for the types ``"Rectangle"`` and `"Isosceles
            Trapezoid"`` only. The default is ``0``.
        num_seg : int, optional
            Number of segments in the cross-section surface for the types ``"Circle"``,
            ``"Rectangle"``, and ``"Isosceles Trapezoid"``. The default is ``0``.
            The value must be ``0`` or greater than ``2``.
        bend_type : str, optional
            Type of the bend. The default is ``None``, in which case the bend type
            is set to ``"Corner"``. For the type ``"Circle"``, the bend type should be
            set to ``"Curved"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty

        Examples
        --------
        >>> P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])
        >>> P.set_crosssection_properties(section="Circle", width="1mm")

        """
        ...
    
    @pyaedt_function_handler(position_list="points")
    def insert_segment(self, points, segment=...): # -> bool:
        """Add a segment to an existing polyline.

        Parameters
        ----------
        points : List
            List of positions of the points that define the segment to insert.
            Either the starting point or ending point of the segment list must
            match one of the vertices of the existing polyline.
        segment : str or :class:`ansys.aedt.core.modeler.cad.primitives.PolylineSegment`, optional
            Definition of the segment to insert. For the types ``"Line"`` and ``"Arc"``,
            use their string values ``"Line"`` and ``"Arc"``. For the types ``"AngularArc"``
            and ``"Spline"``, use the :class:`ansys.aedt.core.modeler.cad.primitives.PolylineSegment`
            object to define the segment precisely. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.InsertPolylineSegment

        """
        ...
    


class PolylineSegment:
    """Creates and manipulates a segment of a polyline.

    Parameters
    ----------
    segment_type : str
        Type of the object. Choices are ``"Line"``, ``"Arc"``, ``"Spline"``,
        and ``"AngularArc"``.
    num_seg : int, optional
        Number of segments for the types ``"Arc"``, ``"Spline"``, and
        ``"AngularArc"``.  The default is ``0``. For the type
        ``Line``, this parameter is ignored.
    num_points : int, optional
        Number of control points for the type ``Spline``. For other
        types, this parameter is defined automatically.
    arc_angle : float or str, optional
        Sweep angle in radians or a valid value string. For example,
        ``"35deg"`` or ``0.25``.
        This argument is Specific to type AngularArc.
    arc_center : list or str, optional
        List of values in model units or a valid value string. For
        example, a list of ``[x, y, z]`` coordinates.
        This argument is Specific to type AngularArc.
    arc_plane : str, int optional
        Plane in which the arc sweep is performed in the active
        coordinate system ``"XY"``, ``"YZ"`` or ``"ZX"``. The default is
        ``None``, in which case the plane is determined automatically
        by the first coordinate for which the starting point and
        center point have the same value.
        This argument is Specific to type AngularArc.

    Examples
    --------
    See :class:`ansys.aedt.core.Primitives.Polyline`.

    """
    def __init__(self, segment_type, num_seg=..., num_points=..., arc_angle=..., arc_center=..., arc_plane=...) -> None:
        ...
    


