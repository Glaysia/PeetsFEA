"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.primitives import GeometryModeler

class Primitives3D(GeometryModeler):
    """Manages primitives in applications using the 3D modeler.

    Each Electonics Desktop application uses an instance of this class
    as a property to allow creation and manipulation of geometry.  For example,
    ``hfss.modeler`` or
    ``icepak.modeler`` are used to access methods and properties in the ``Primitives3D``
    class.

    Primitives created using methods of ``app.modeler`` are of the type
    ``ansys.aedt.core.modeler.cad.object_3d.Object3D``. All settable properties may be
    initialized by passing optional named arguments when a method is used to create
    a primitive. Some examples are:
    - ``color`` : tuple, optional
        (R, G, B) values defining the color. R, G, and B are intengers
        in the range 0-255. The default value is derived from the local
        settings for Electronics Desktop.
    - ``transparency`` : float, optional
        Value between 0 - 1 defining the transparency. 0 is opaque. The default
        value is defined in the local settings for Electronics Desktop.
    - ``display_wireframe`` : Boolean, optional
        Set to ``True`` if the object should be displayed as a wireframe. The
        default value is defined in the local settings for Electronics Desktop.
    - ``model`` : Boolean, optional
        Set to ``False`` if the object should be *non-model.* The default value
        is ``True`` unless the local Electronics Desktop settings have been modified.
    - ``material_name`` : str, optional
        Set the material of the primitive. The default value depends on the application
        settings.

    This list is not exhaustive and the properties that can be set using named arguments may depend on the
    specific primitive being created.

    Parameters
    ----------
    application : object
        Name of the application.

    Examples
    --------
    Basic usage demonstrated with an HFSS, Maxwell 3D, Icepak, Q3D, or Mechanical design:

    >>> from ansys.aedt.core import Hfss
    >>> app = Hfss()
    >>> box = app.modeler.create_box(
    ...     origin=[0, 0, 0], sizes=[10, 5, 3], name="my_box", material="copper", color=(240, 120, 0), transparency=0.5
    ... )

    In this example, ``color`` and ``transparency`` are the variable named arguments that
    can be passed to any method that creates a primitive.
    """
    def __init__(self, application) -> None:
        ...
    
    @pyaedt_function_handler(position="origin", dimensions_list="sizes", matname="material")
    def create_box(self, origin, sizes, name=..., material=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a box.

        Parameters
        ----------
        origin : list
            Anchor point for the box in Cartesian``[x, y, z]`` coordinates.
        sizes : list
           Length of the box edges in Cartesian``[x, y, z]`` coordinates.
        name : str, optional
            Name of the box. The default is ``None``, in which case the
            default name is assigned.
        material : str, optional
            Name of the material.  The default is ``None``, in which case the
            default material is assigned. If the material name supplied is
            invalid, the default material is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateBox

        Examples
        --------
        This example shows how to create a box in HFSS.
        The required parameters are ``position`` that provides the origin of the
        box and ``dimensions_list`` that provide the box sizes.
        The optional parameter ``matname`` allows you to set the material name of the box.
        The optional parameter ``name`` allows you to assign a name to the box.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D, and
        Mechanical.

        >>> from ansys.aedt.core import hfss
        >>> hfss = Hfss()
        >>> origin = [0, 0, 0]
        >>> dimensions = [10, 5, 20]
        >>> box_object = hfss.modeler.create_box(origin=origin, sizes=dimensions, name="mybox", material="copper")

        """
        ...
    
    @pyaedt_function_handler(cs_axis="orientation", position="origin", numSides="num_sides", matname="material")
    def create_cylinder(self, orientation, origin, radius, height, num_sides=..., name=..., material=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a cylinder.

        Parameters
        ----------
        orientation : int or str
            Axis of rotation of the starting point around the center point.
            :class:`ansys.aedt.core.constants.AXIS` Enumerator can be used as input.
        origin : list
            Center point of the cylinder in a list of ``(x, y, z)`` coordinates.
        radius : float
            Radius of the cylinder.
        height : float
            Height of the cylinder.
        num_sides : int, optional
            Number of sides. The default is ``0``, which is correct for
            a cylinder.
        name : str, optional
            Name of the cylinder. The default is ``None``, in which case
            the default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which case the
            default material is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateCylinder

        Examples
        --------
        This example shows how to create a cylinder in HFSS.
        The required parameters are ``cs_axis``, ``position``, ``radius``, and ``height``. The
        ``cs_axis`` parameter provides the direction axis of the cylinder. The ``position``
        parameter provides the origin of the cylinder. The other two parameters provide
        the radius and height of the cylinder.

        The optional parameter ``matname`` allows you to set the material name of the cylinder.
        The optional parameter ``name`` allows to assign a name to the cylinder.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D, and
        Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> cylinder_object = aedtapp.modeler.create_cylinder(
        ...     orientation="Z", origin=[0, 0, 0], radius=2, height=3, name="mycyl", material="vacuum"
        ... )

        """
        ...
    
    @pyaedt_function_handler(cs_axis="orientation", center_position="center", start_position="origin", matname="material")
    def create_polyhedron(self, orientation=..., center=..., origin=..., height=..., num_sides=..., name=..., material=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a regular polyhedron.

        Parameters
        ----------
        orientation : optional
            Axis of rotation of the starting point around the center point.
            The default is ``None``, in which case the Z axis is used.
        center : list, optional
            List of ``[x, y, z]`` coordinates for the center position.
            The default is ``(0.0, 0.0, 0.0)``.
        origin : list, optional
            List of ``[x, y, z]`` coordinates for the starting position.
            The default is ``(0.0, 0.0, 0.0)``.
        height : float, optional
            Height of the polyhedron. The default is ``1.0``.
        num_sides : int, optional
            Number of sides of the polyhedron. The default is ``12``.
        name : str, optional
            Name of the polyhedron. The default is ``None``, in which the
            default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which the
            default material is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateRegularPolyhedron

        Examples
        --------
        The following examples shows how to create a regular polyhedron in HFSS.
        The required parameters are cs_axis that provides the direction axis of the polyhedron,
        center_position that provides the center of the polyhedron, start_position of the polyhedron,
        height of the polyhedron and num_sides to determine the number of sides.
        The parameter matname is optional and allows to set the material name of the polyhedron.
        The parameter name is optional and allows to give a name to the polyhedron.
        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D, Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> ret_obj = aedtapp.modeler.create_polyhedron(orientation='X',center=[0, 0, 0],
        ...                                             origin=[0,5,0],height=0.5,num_sides=8,
        ...                                             name="mybox",material="copper")
        """
        ...
    
    @pyaedt_function_handler(cs_axis="orientation", position="origin", matname="material")
    def create_cone(self, orientation, origin, bottom_radius, top_radius, height, name=..., material=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a cone.

        Parameters
        ----------
        orientation : str
            Axis of rotation of the starting point around the center point.
            The default is ``None``, in which case the Z axis is used.
        origin : list, optional
            List of ``[x, y, z]`` coordinates for the center position
            of the bottom of the cone.
        bottom_radius : float
            Bottom radius of the cone.
        top_radius : float
            Top radius of the cone.
        height : float
            Height of the cone.
        name : str, optional
            Name of the cone. The default is ``None``, in which case
            the default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which case
            the default material is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateCone

        Examples
        --------
        This example shows how to create a cone in HFSS.
        The required parameters are ``cs_axis``, ``position``, ``bottom_radius``, and
        ``top_radius``. The ``cs_axis`` parameter provides the direction axis of
        the cone. The ``position`` parameter provides the starting point of the
        cone. The ``bottom_radius`` and ``top_radius`` parameters provide the
        radius and `eight of the cone.

        The optional parameter ``matname`` allows you to set the material name of the cone.
        The optional parameter ``name`` allows you to assign a name to the cone.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D, and
        Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> cone_object = aedtapp.modeler.create_cone(orientation='Z', origin=[0, 0, 0],
        ...                                           bottom_radius=2, top_radius=3, height=4,
        ...                                           name="mybox", material="copper")

        """
        ...
    
    @pyaedt_function_handler(position="origin", matname="material")
    def create_sphere(self, origin, radius, name=..., material=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a sphere.

        Parameters
        ----------
        origin : list
            List of ``[x, y, z]`` coordinates for the center position
            of the sphere.
        radius : float
            Radius of the sphere.
        name : str, optional
            Name of the sphere. The default is ``None``, in which case
            the default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which case
            the default material is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateSphere

        Examples
        --------
        This example shows how to create a sphere in HFSS.
        The required parameters are ``position``, which provides the center of the sphere, and
        ``radius``, which is the radius of the sphere. The optional parameter ``matname``
        allows you to set the material name of the sphere. The optional parameter
        ``name``  allows to assign a name to the sphere.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D, and
        Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> ret_object = aedtapp.modeler.create_sphere(origin=[0,0,0],radius=2,name="mysphere",material="copper")
        """
        ...
    
    @pyaedt_function_handler(center="origin", material_name="material")
    def create_torus(self, origin, major_radius, minor_radius, axis=..., name=..., material=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a torus.

        Parameters
        ----------
        origin : list
            Center point for the torus in a list of ``[x, y, z]`` coordinates.
        major_radius : float
           Major radius of the torus.
        minor_radius : float
           Minor radius of the torus.
        axis : str, optional
            Axis of revolution.
            The default is ``None``, in which case the Z axis is used.
        name : str, optional
            Name of the torus. The default is ``None``, in which case the
            default name is assigned.
        material : str, optional
            Name of the material.  The default is ``None``, in which case the
            default material is assigned. If the material name supplied is
            invalid, the default material is assigned.
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateTorus

        Examples
        --------
        Create a torus named ``"mytorus"`` about the Z axis with a major
        radius of 1 , minor radius of 0.5, and a material of ``"copper"``.
        The optional parameter ``matname`` allows you to set the material name of the sphere.
        The optional parameter ``name`` allows you to give a name to the sphere.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D, and
        Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> origin = [0, 0, 0]
        >>> torus = hfss.modeler.create_torus(origin=origin,major_radius=1,minor_radius=0.5,
        ...                                   axis="Z",name="mytorus",material="copper")

        """
        ...
    
    @pyaedt_function_handler(start_position="start", end_position="end", matname="material", cs_axis="orientation")
    def create_bondwire(self, start, end, h1=..., h2=..., alpha=..., beta=..., bond_type=..., diameter=..., facets=..., name=..., material=..., orientation=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a bondwire.

        Parameters
        ----------
        start : list
            List of ``[x, y, z]`` coordinates for the starting
            position of the bond pad.
        end :  list
            List of ``[x, y, z]`` coordinates for the ending position
            of the bond pad.
        h1 : float|str optional
            Height between the IC die I/O pad and the top of the bondwire.
            If the height is provided as a parameter, its value has to be provided as value + unit.
            The default is ``0.2``.
        h2 : float|str optional
            Height of the IC die I/O pad above the lead frame.
            If the height is provided as a parameter, its value has to be provided as value + unit.
            The default is ``0``. A negative value indicates that the I/O pad is below
            the lead frame.
        alpha : float, optional
            Angle in degrees between the xy plane and the wire bond at the
            IC die I/O pad. The default is ``80``.
        beta : float, optional
            Angle in degrees between the xy plane and the wire bond at the
            lead frame. The default is ``5``.
        bond_type : int, optional
            Type of the boundwire, which indicates its shape. Options are:

            * ''0'' for JEDEC 5-point
            * ``1`` for JEDEC 4-point
            * ''2`` for Low

            The default is ''0``.
        diameter : float|str optional
            Diameter of the wire. The default is ``0.025``.
        facets : int, optional
            Number of wire facets. The default is ``6``.
        name : str, optional
            Name of the bondwire. The default is ``None``, in which case
            the default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which case
            the default material is assigned.
        orientation : str, optional
            Coordinate system axis. The default is ``"Z"``.
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.CreateBondwire

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> origin = [0,0,0]
        >>> endpos = [10,5,20]
        >>> #Material and name are not mandatory fields
        >>> object_id = hfss.modeler.create_bondwire(origin,endpos,h1=0.5,h2=0.1,alpha=75,
        ...                                          beta=4,bond_type=0,name="mybox",material="copper")
        """
        ...
    
    @pyaedt_function_handler(csPlane="orientation", position="origin", dimension_list="sizes", matname="material")
    def create_rectangle(self, orientation, origin, sizes, name=..., material=..., is_covered=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create a rectangle.

        Parameters
        ----------
        orientation : str or int
            Coordinate system plane for orienting the rectangle.
            :class:`ansys.aedt.core.constants.PLANE` Enumerator can be used as input.
        origin : list or Position
            List of ``[x, y, z]`` coordinates of the lower-left corner of the rectangle or
            the position ApplicationName.modeler.Position(x,y,z) object.
        sizes : list
            List of ``[width, height]`` dimensions.
        name : str, optional
            Name of the rectangle. The default is ``None``, in which case
            the default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which case
            the default material is assigned.
        is_covered : bool, optional
            Whether the rectangle is covered. The default is ``True``.
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateRectangle
        """
        ...
    
    @pyaedt_function_handler(cs_plane="orientation", position="origin", numSides="num_sides", matname="material")
    def create_circle(self, orientation, origin, radius, num_sides=..., is_covered=..., name=..., material=..., non_model=..., **kwargs): # -> Point | Plane | Object3d:
        """Create a circle.

        Parameters
        ----------
        orientation : str or int
            Coordinate system plane for orienting the circle.
            :class:`ansys.aedt.core.constants.PLANE` Enumerator can be used as input.
        origin : list
            List of ``[x, y, z]`` coordinates for the center point of the circle.
        radius : float or str
            Radius of the circle.
        num_sides : int, optional
            Number of sides. The default is ``0``, which is correct for a circle.
        name : str, optional
            Name of the circle. The default is ``None``, in which case the
            default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which case the
            default material is assigned.
        non_model : bool, optional
             Either if create the new object as model or non-model. The default is ``False``.
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.CreateCircle

        Examples
        --------
        The following example shows how to create a circle in HFSS.
        The required parameters are ``cs_plane``, ``position``, ``radius``,
        and ``num_sides``. The ``cs_plane`` parameter provides the plane
        that the circle is designed on. The ``position`` parameter provides
        the origin of the  circle.  The ``radius`` and ``num_sides`` parameters
        provide the radius and number of discrete sides of the circle,

        The optional parameter ``matname`` allows you to set the material name
        of the circle. The optional parameter ``name`` allows you to assign a name
        to the circle.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D,
        and Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> circle_object = aedtapp.modeler.create_circle(orientation='Z', origin=[0,0,0],
        ...                                                   radius=2, num_sides=8, name="mycyl",
        ...                                                   material="vacuum")
        """
        ...
    
    @pyaedt_function_handler(cs_plane="orientation", position="origin", matname="material")
    def create_ellipse(self, orientation, origin, major_radius, ratio, is_covered=..., name=..., material=..., segments=..., **kwargs): # -> Point | Plane | Object3d:
        """Create an ellipse.

        Parameters
        ----------
        orientation : str or int
            Coordinate system plane for orienting the ellipse.
            :class:`ansys.aedt.core.constants.PLANE` Enumerator can be used as input.
        origin : list
            List of ``[x, y, z]`` coordinates for the center point of the ellipse.
        major_radius : float
            Base radius of the ellipse.
        ratio : float
            Aspect ratio of the secondary radius to the base radius.
        is_covered : bool, optional
            Whether the ellipse is covered. The default is ``True``,
            in which case the result is a 2D sheet object. If ``False,``
            the result is a closed 1D polyline object.
        name : str, optional
            Name of the ellipse. The default is ``None``, in which case the
            default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which case the
            default material is assigned.
        segments : int, optional
            Number of segments to apply to create the segmented geometry.
            The default is ``0``.
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.CreateEllipse

        Examples
        --------
        The following example shows how to create an ellipse in HFSS.
        The required parameters are ``cs_plane``, ``position``,  ``major_radius``,
        ``ratio``, and ``is_covered``. The ``cs_plane`` parameter provides
        the plane that the ellipse is designed on. The ``position`` parameter
        provides the origin of the ellipse. The ``major_radius`` parameter provides
        the radius of the ellipse. The ``ratio`` parameter is a ratio between the
        major radius and minor radius of the ellipse. The ``is_covered`` parameter
        is a flag indicating if the ellipse is covered.

        The optional parameter ``matname`` allows you to set the material name
        of the ellipse. The optional parameter ``name`` allows you to assign a name
        to the ellipse.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D,
        and Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> ellipse = aedtapp.modeler.create_ellipse(orientation='Z', origin=[0,0,0],
        ...                                          major_radius=2, ratio=2, is_covered=True, name="myell",
        ...                                          material="vacuum")
        """
        ...
    
    @pyaedt_function_handler()
    def create_equationbased_curve(self, x_t=..., y_t=..., z_t=..., t_start=..., t_end=..., num_points=..., name=..., xsection_type=..., xsection_orient=..., xsection_width=..., xsection_topwidth=..., xsection_height=..., xsection_num_seg=..., xsection_bend_type=..., **kwargs): # -> Point | Plane | Object3d:
        """Create an equation-based curve.

        Parameters
        ----------
        x_t : str or float
            Expression for the X-component of the curve as a function of ``"_t"``.
            For example, ``"3 * cos(_t)"``.
        y_t : str or float
            Expression for the Y-component of the curve as a function of ``"_t"``
        z_t : str or float
            Expression for the Z-component of the curve as a function of ``"_t"``
        t_start : str or float
            Starting value of the parameter ``"_t"``.
        t_end : str or float
            Ending value of the parameter ``"_t"``.
        num_points : int, optional
            Number of vertices on the segmented curve. The default is ``0``,
            in which case the curve is non-segmented.
        name : str, optional
            Name of the created curve in the 3D modeler. The default is ``None``,
            in which case the default name is assigned.
        xsection_type : str, optional
            Type of the cross-section. Choices are ``"Line"``, ``"Circle"``,
            ``"Rectangle"``, and ``"Isosceles Trapezoid"``. The default is ``None``.
        xsection_orient : str, optional
            Direction of the normal vector to the width of the cross-section.
            Choices are ``"X"``, ``"Y"``, ``"Z"``, and ``"Auto"``. The default is
            ``None``, in which case the direction is set to ``"Auto"``.
        xsection_width : float or str, optional
            Width or diameter of the cross-section for all types. The
            default is ``1``.
        xsection_topwidth : float or str, optional
            Top width of the cross-section for type ``"Isosceles Trapezoid"`` only.
            The default is ``1``.
        xsection_height : float or str
            Height of the cross-section for types ``"Rectangle"`` and ``"Isosceles
            Trapezoid"`` only. The default is ``1``.
        xsection_num_seg : int, optional
            Number of segments in the cross-section surface for types ``"Circle"``,
            ``"Rectangle"``, and ``"Isosceles Trapezoid"``. The default is ``0``. The
            value must be ``0`` or greater than ``2``.
        xsection_bend_type : str, optional
            Type of the bend for the cross-section. The default is ``None``, in which
            case the bend type is set to ``"Corner"``. For the type ``"Circle"``, the
            bend type should be set to ``"Curved"``.
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.CreateEquationCurve

        Examples
        --------
        The following example shows how to create an equation- based curve in HFSS.
        The required parameters are ``cs_plane``, ``position``, ``major_radius``,
        ``ratio``, and ``is_covered``. The ``cs_plane`` parameter provides
        the plane that the ellipse is designed on. The ``position`` parameter
        provides the origin of the ellipse. The ``major_radius`` parameter provides
        the radius of the ellipse. The ``ratio`` parameter is a ratio between the
        major radius and minor radius of the ellipse. The ``is_covered`` parameter
        is a flag indicating if the ellipse is covered.

        The optional parameter ``matname`` allows you to set the material name
        of the ellipse. The optional parameter ``name`` allows you to assign a name
        to the ellipse.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D,
        and Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> eq_xsection = self.aedtapp.modeler.create_equationbased_curve(x_t="_t",
        ...                                                               y_t="_t*2",
        ...                                                               num_points=200,
        ...                                                               z_t=0,
        ...                                                               t_start=0.2,
        ...                                                               t_end=1.2,
        ...                                                               xsection_type="Circle")
        """
        ...
    
    @pyaedt_function_handler()
    def create_equationbased_surface(self, x_uv=..., y_uv=..., z_uv=..., u_start=..., u_end=..., v_start=..., v_end=..., name=..., **kwargs): # -> Point | Plane | Object3d:
        """Create an equation-based surface.

        Parameters
        ----------
        x_uv : str or float
            Expression for the X-component of the surface as a function of ``"_u,_v"``.
            For example, ``"cos(_u) * sin(_v)"``.
        y_uv : str or float
            Expression for the Y-component of the surface as a function of ``"_u,_v"``
        z_uv : str or float
            Expression for the Z-component of the surface as a function of ``"_u,_v"``
        u_start : str or float
            Starting value of the parameter ``"_u"``.
        u_end : str or float
            Ending value of the parameter ``"_u"``.
        v_start : str or float
            Starting value of the parameter ``"_v"``.
        v_end : str or float
            Ending value of the parameter ``"_v"``.
        name : str, optional
            Name of the created surface in the 3D modeler. The default is ``None``,
            in which case the default name is assigned.
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.CreateEquationSurface

        Examples
        --------

        The optional parameter ``matname`` allows you to set the material name.
        The optional parameter ``name`` allows you to assign a name to the surface.

        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D,
        and Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> surf = aedtapp.modeler.create_equationbased_surface(x_uv='(cos(_v)+2)*cos(_u)',
        ...                                                     y_uv='(cos(_v)+2)*sin(_u)',
        ...                                                     z_uv='sin(_v)',
        ...                                                     u_start=0,
        ...                                                     u_end='2*pi',
        ...                                                     v_start=0,
        ...                                                     v_end='2*pi'
        ...                                                     )
        """
        ...
    
    @pyaedt_function_handler(polyline_name="assignment", position="origin", num_thread="turns")
    def create_helix(self, assignment, origin, x_start_dir, y_start_dir, z_start_dir, turns=..., right_hand=..., radius_increment=..., thread=..., **kwargs): # -> Point | Plane | Object3d | Literal[False]:
        """Create an helix from a polyline.

        Parameters
        ----------
        assignment : str
            Name of the polyline used as the base for the helix.
        origin : list
            List of ``[x, y, z]`` coordinates for the center point of the circle.
        x_start_dir : float
            Distance along x axis from the polyline.
        y_start_dir : float
            Distance along y axis from the polyline.
        z_start_dir : float
            Distance along z axis from the polyline.
        turns : int, optional
            Number of turns. The default value is ``1``.
        right_hand : bool, optional
            Whether the helix turning direction is right hand. The default value is ``True``.
        radius_increment : float, optional
            Radius change per turn. The default value is ``0.0``.
        thread : float
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateHelix

        Examples
        --------
        The following example shows how to create a polyline and then create an helix from the polyline.
        This method applies to all 3D applications: HFSS, Q3D, Icepak, Maxwell 3D, and
        Mechanical.

        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> udp1 = [0, 0, 0]
        >>> udp2 = [5, 0, 0]
        >>> udp3 = [10, 5, 0]
        >>> udp4 = [15, 3, 0]
        >>> polyline = aedtapp.modeler.create_polyline([udp1, udp2, udp3, udp4],cover_surface=False,
        ...                                            name="helix_polyline")
        >>> helix_right_turn = aedtapp.modeler.create_helix(assignment=polyline.name,origin=[0, 0, 0],
        ...                                                 x_start_dir=0,y_start_dir=1.0,z_start_dir=1.0,
        ...                                                 turns=1,right_hand=True,radius_increment=0.0,thread=1.0)
        """
        ...
    
    @pyaedt_function_handler(udmfullname="udm_full_name", udm_params_list="parameters", udm_library="library")
    def create_udm(self, udm_full_name, parameters, library=..., name=...): # -> UserDefinedComponent | Object3d | Polyline | Literal[False]:
        """Create a user-defined model.

        Parameters
        ----------
        udm_full_name : str
            Full name for the user-defined model, including the folder name.
        parameters :
            List of user-defined object pairs for the model.
        library : str, optional
            Name of the library for the user-defined model. The default is ``"syslib"``.
        name : str, optional
            Name of the user-defined model. The default is ``None```.

        Returns
        -------
        bool, :class:`ansys.aedt.core.modeler.components_3d.UserDefinedComponent`
            User-defined component object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreateUserDefinedModel

        """
        ...
    
    @pyaedt_function_handler()
    def create_spiral(self, internal_radius=..., spacing=..., faces=..., turns=..., width=..., thickness=..., elevation=..., material=..., name=..., **kwargs): # -> Polyline | Literal[False]:
        """Create a spiral inductor from a polyline.

        Parameters
        ----------
        internal_radius : float, optional
            Internal starting point of spiral. Default is `10`.
        spacing : float, optional
            Internal pitch between two turns. Default is `1`.
        faces : int, optional
            Number of faces per turn. Default is `8` as an octagon.
        turns : int, optional
            Number of turns. Default is `10`.
        width : float, optional
            Spiral width. Default is `2`.
        thickness : float, optional
            Spiral thickness. Default is `1`.
        elevation : float, optional
            Spiral elevation. Default is`0`.
        material : str, optional
            Spiral material. Default is `"copper"`.
        name : str, optional
            Spiral name. Default is `None`.
        **kwargs : optional
            Additional keyword arguments may be passed when creating the primitive to set properties. See
            ``ansys.aedt.core.modeler.cad.object_3d.Object3d`` for more details.

        Returns
        -------
        bool, :class:`ansys.aedt.core.modeler.cad.elements_3d.Polyline`
            Polyline object or ``False`` if it fails.
        """
        ...
    
    @pyaedt_function_handler(comp_file="input_file", geo_params="geometry_parameters", sz_mat_params="material_parameters", sz_design_params="design_parameters", targetCS="coordinate_system", auxiliary_dict="auxiliary_parameters")
    def insert_3d_component(self, input_file, geometry_parameters=..., material_parameters=..., design_parameters=..., coordinate_system=..., name=..., password=..., auxiliary_parameters=...):
        """Insert a new 3D component.

        Parameters
        ----------
        input_file : str
            Name of the component file.
        geometry_parameters : dict, optional
            Geometrical parameters.
        material_parameters : str, optional
            Material parameters. The default is ``""``.
        design_parameters : str, optional
            Design parameters. The default is ``""``.
        coordinate_system : str, optional
            Target coordinate system. The default is ``"Global"``.
        name : str, optional
            3D component name. The default is ``None``.
        password : str, optional
            Password for encrypted components. The default value is ``None``.
        auxiliary_parameters : bool or str, optional
            Enable the advanced 3d component import. It is possible to set explicitly the json file.
            The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.components_3d.UserDefinedComponent`
            User defined component object.

        References
        ----------
        >>> oEditor.Insert3DComponent
        """
        ...
    
    @pyaedt_function_handler(comp_file="input_file")
    def insert_layout_component(self, input_file, coordinate_system=..., name=..., parameter_mapping=..., layout_coordinate_systems=..., reference_coordinate_system=...):
        """Insert a new layout component.

        Parameters
        ----------
        input_file : str
            Path of the component file. Either ``".aedb"`` and ``".aedbcomp"`` are allowed.
        coordinate_system : str, optional
            Target coordinate system. The default is ``"Global"``.
        name : str, optional
            3D component name. The default is ``None``.
        parameter_mapping : bool, optional
            Whether to map the layout parameters in the target HFSS design. The default is ``False``.
        layout_coordinate_systems : list, optional
            Coordinate system to import. The default is all available coordinate systems.
        reference_coordinate_system : str, optional
            Coordinate system to use as reference. The default is ``"Global"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.components_3d.UserDefinedComponent`
            User defined component object.

        References
        ----------
        >>> oEditor.InsertNativeComponent

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> app = Hfss()
        >>> layout_component = "path/to/layout_component/component.aedbcomp"
        >>> comp = app.modeler.insert_layout_component(layout_component)

        """
        ...
    
    @pyaedt_function_handler(componentname="name")
    def get_3d_component_object_list(self, name): # -> list[Any]:
        """Retrieve all objects belonging to a 3D component.

        Parameters
        ----------
        name : str
            Name of the 3D component.

        Returns
        -------
        List
            List of objects belonging to the 3D component.

        References
        ----------
        >>> oeditor.GetChildObject
        """
        ...
    
    @pyaedt_function_handler(actor_folder="input_dir", relative_cs_name="coordinate_system", actor_name="name")
    def add_person(self, input_dir, speed=..., global_offset=..., yaw=..., pitch=..., roll=..., coordinate_system=..., name=...): # -> Person | Literal[False]:
        """Add a Walking Person Multipart from 3D Components.

        It requires a json file in the folder containing person
        infos. An example json file follows:

         .. code-block:: json

            {
                "name": "person3",
                "version": 1,
                "class":"person",
                "stride":"0.76meter",
                "xlim":["-.43",".43"],
                "ylim":["-.25",".25"],
                "parts": {
                    "arm_left": {
                        "comp_name": "arm_left.a3dcomp",
                        "rotation_cs":["-.04","0","1.37"],
                        "rotation":"-30deg",
                        "compensation_angle":"-15deg",
                        "rotation_axis":"Y"
                        },
                    "arm_right": {
                        "comp_name": "arm_right.a3dcomp",
                        "rotation_cs":["0","0","1.37"],
                        "rotation":"30deg",
                        "compensation_angle":"30deg",
                        "rotation_axis":"Y"
                        },
                    "leg_left": {
                        "comp_name": "leg_left.a3dcomp",
                        "rotation_cs":["0","0",".9"],
                        "rotation":"20deg",
                        "compensation_angle":"22.5deg",
                        "rotation_axis":"Y"
                        },
                    "leg_right": {
                        "comp_name": "leg_right.a3dcomp",
                        "rotation_cs":["-.04","0",".9375"],
                        "rotation":"-20deg",
                        "compensation_angle":"-22.5deg",
                        "rotation_axis":"Y"
                        },
                    "torso": {
                        "comp_name": "torso.a3dcomp",
                        "rotation_cs":null,
                        "rotation":null,
                        "compensation_angle":null,
                        "rotation_axis":null
                        }
                }
            }

        Parameters
        ----------
        input_dir : str
            Path to the actor folder. It must contain a json settings
            file and a 3dcomponent (.a3dcomp).
        speed :  float, optional
            Object movement speed with time (m_per_sec).
        global_offset : list, optional
            Offset from Global Coordinate System [x,y,z] in meters.
        yaw : float, optional
            Yaw Rotation from Global Coordinate System in deg.
        pitch : float, optional
            Pitch Rotation from Global Coordinate System in deg.
        roll : float, optional
            Roll Rotation from Global Coordinate System in deg.
        coordinate_system : str
            Relative CS Name of the actor. ``None`` for Global CS.
        name : str
            If provided, it overrides the actor name in the JSON.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.actors.Person`

        References
        ----------
        >>> oEditor.Insert3DComponent
        """
        ...
    
    @pyaedt_function_handler(actor_folder="input_dir", relative_cs_name="coordinate_system", actor_name="name")
    def add_vehicle(self, input_dir, speed=..., global_offset=..., yaw=..., pitch=..., roll=..., coordinate_system=..., name=...): # -> Vehicle | Literal[False]:
        """Add a Moving Vehicle Multipart from 3D Components.

        It requires a json file in the folder containing vehicle
        infos. An example json file follows:

         .. code-block:: json

            {
                "name": "vehicle3",
                "version": 1,
                "type":"mustang",
                "class":"vehicle",
                "xlim":["-1.94","2.8"],
                "ylim":["-.91",".91"],
                "parts": {
                    "wheels_front": {
                        "comp_name": "wheels_front.a3dcomp",
                        "rotation_cs":["1.8970271810532" ,"0" ,"0.34809664860487"],
                        "tire_radius":"0.349",
                        "rotation_axis":"Y"
                        },
                    "wheels_rear": {
                        "comp_name": "wheels_rear.a3dcomp",
                        "rotation_cs":["-0.82228746728897" ,"0","0.34809664860487"],
                        "tire_radius":"0.349",
                        "rotation_axis":"Y"
                        },
                    "body": {
                        "comp_name": "body.a3dcomp",
                        "rotation_cs":null,
                        "tire_radius":null,
                        "rotation_axis":null
                        }
                }
            }

        Parameters
        ----------
        input_dir : str
            Path to the actor directory. It must contain a json settings file
            and a 3dcomponent (``.a3dcomp`` file).
        speed :  float, optional
            Object movement speed with time (m_per_sec).
        global_offset : list, optional
            Offset from Global Coordinate System [x,y,z] in meters.
        yaw : float, optional
            Yaw Rotation from Global Coordinate System in deg.
        pitch : float, optional
            Pitch Rotation from Global Coordinate System in deg.
        roll : float, optional
            Roll Rotation from Global Coordinate System in deg.
        coordinate_system : str
            Relative CS Name of the actor. ``None`` for Global CS.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.actors.Vehicle`

        References
        ----------
        >>> oEditor.Insert3DComponent
        """
        ...
    
    @pyaedt_function_handler(actor_folder="input_dir", relative_cs_name="coordinate_system", actor_name="name")
    def add_bird(self, input_dir, speed=..., global_offset=..., yaw=..., pitch=..., roll=..., flapping_rate=..., coordinate_system=..., name=...): # -> Bird | Literal[False]:
        """Add a Bird Multipart from 3D Components.

        It requires a json file in the folder containing bird infos. An example json file is showed here.

         .. code-block:: json

            {
                "name": "bird1",
                "version": 1,
                "class":"bird",
                "xlim":["-.7","2.75"],
                "ylim":["-1.2","1.2"],
                "parts": {
                    "body": {
                        "comp_name": "body.a3dcomp",
                        "rotation_cs":null,
                        "rotation":null,
                        "rotation_axis":null
                    },
                        "wing_right": {
                        "comp_name": "wing_left.a3dcomp",
                        "rotation_cs":[".001778" ,".00508" ,".00762"],
                        "rotation":"-45deg",
                        "rotation_axis":"X"
                    },
                        "wing_left": {
                        "comp_name": "wing_right.a3dcomp",
                        "rotation_cs":[".001778" ,"-.00508" ,".00762"],
                        "rotation":"45deg",
                        "rotation_axis":"X"
                    },
                        "tail": {
                        "comp_name": "tail.a3dcomp",
                        "rotation_cs":null,
                        "rotation":null,
                        "rotation_axis":null
                    },
                        "beak": {
                        "comp_name": "beak.a3dcomp",
                        "rotation_cs":null,
                        "rotation":null,
                        "rotation_axis":null
                    }
                }
            }

        Parameters
        ----------
        input_dir : str
            Path to the actor directory. It must contain a json settings file and a
            3dcomponent (``.a3dcomp`` file)
        speed :  float, optional
            Object movement speed with time (m_per_sec).
        global_offset : list, optional
            Offset from Global Coordinate System [x,y,z] in meters.
        yaw : float, optional
            Yaw Rotation from Global Coordinate System in deg.
        pitch : float, optional
            Pitch Rotation from Global Coordinate System in deg.
        roll : float, optional
            Roll Rotation from Global Coordinate System in deg.
        flapping_rate : float, optional
            Motion flapping rate in Hz.
        coordinate_system : str
            Relative CS Name of the actor. ``None`` for Global CS.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.actors.Bird`

        References
        ----------
        >>> oEditor.Insert3DComponent

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> app = Hfss()
        >>> bird_dir = "path/to/bird/directory"
        >>> bird1 = app.modeler.add_bird(bird_dir,1.0,[19, 4, 3],120,-5,flapping_rate=30)

        """
        ...
    
    @pyaedt_function_handler(env_folder="input_dir", relative_cs_name="coordinate_system", environment_name="name")
    def add_environment(self, input_dir, global_offset=..., yaw=..., pitch=..., roll=..., coordinate_system=..., name=...): # -> Environment | Literal[False]:
        """Add an Environment Multipart Component from JSON file.

         .. code-block:: json

            {
                "name": "open1",
                "version": 1,
                "class":"environment",
                "xlim":["-5","95"],
                "ylim":["-60","60"],
                "parts": {
                    "open_area": {
                        "comp_name": "open1.a3dcomp",
                        "offset":null,
                        "rotation_cs":null,
                        "rotation":null,
                        "rotation_axis":null,
                        "duplicate_number":null,
                        "duplicate_vector":null
                        }
                }
            }

        Parameters
        ----------
        input_dir : str
            Path to the actor directory. It must contain a json
            settings file and a 3dcomponent (``.a3dcomp`` file).
        global_offset : list, optional
            Offset from Global Coordinate System [x,y,z] in meters.
        yaw : float, optional
            Yaw Rotation from Global Coordinate System in deg.
        pitch : float, optional
            Pitch Rotation from Global Coordinate System in deg.
        roll : float, optional
            Roll Rotation from Global Coordinate System in deg.
        coordinate_system : str
            Relative CS Name of the actor. ``None`` for Global CS.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.multiparts.Environment`

        References
        ----------
        >>> oEditor.Insert3DComponent

        """
        ...
    
    @pyaedt_function_handler(json_file="input_file")
    def create_choke(self, input_file): # -> list[Point | Plane | Object3d | bool] | list[list[Any] | list[list[Any]] | Point | Plane | Object3d | bool] | list[list[Any] | Point | Plane | Object3d | bool]:
        """Create a choke from a JSON setting file.

        Parameters
        ----------
        input_file : str
            Full path of the JSON file with the choke settings.

        Returns
        -------
        List of
            bool
                ``True`` when successful, ``False`` when failed.
            :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
                3D object core.
            list of
                :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
                    3D object winding.
                list
                    list of point coordinates of the winding.
                    for each winding.
                    [bool, core_obj, [first_winding_obj, first_winding_point_list],
                    [second_winding_obj, second_winding_point_list], etc...]

        Examples
        --------
        Json file has to be like the following example.

        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> dictionary_values = hfss.modeler.check_choke_values("C:/Example/Of/Path/myJsonFile.json")
        >>> mychoke = hfss.modeler.create_choke("C:/Example/Of/Path/myJsonFile_Corrected.json")
        """
        ...
    
    @pyaedt_function_handler(json_file="input_dir")
    def check_choke_values(self, input_dir, create_another_file=...):
        """Verify the values in the json file and create another one with corrected values next to the first one.

        Parameters
        ----------
        input_dir : str
            Full path to json file;
            Specific json file containing all the parameters to design your on choke.
        create_another_file : bool
            Create another file next to the first one in adding _Corrected to the file name if it is True
            else truncate the existing file

        Returns
        -------
        List
            ``True`` when successful, ``False`` when failed.
        dictionary : class : 'dict'

        Examples
        --------
        Dictionary of the Json file has to be like the following example :
        dictionary = {
        "Number of Windings": {"1": True, "2": False, "3": False, "4": False},
        "Layer": {"Simple": True, "Double": False, "Triple": False},
        "Layer Type": {"Separate": True, "Linked": False},
        "Similar Layer": {"Similar": True, "Different": False},
        "Mode": {"Differential": True, "Common": False},
        "Wire Section": {"None": False, "Hexagon": False, "Octagon": True, "Circle": False},
        "Core": {"Name": "Core", "Material": "ferrite", "Inner Radius": 11, "Outer Radius": 17, "Height": 7,
        "Chamfer": 0.8},
        "Outer Winding": {"Name": "Winding", "Material": "copper", "Inner Radius": 12, "Outer Radius": 16,
        "Height": 8, "Wire Diameter": 1, "Turns": 10, "Coil Pit(deg)": 9, "Occupation(%)": 0},
        "Mid Winding": {"Turns": 8, "Coil Pit(deg)": 0.1, "Occupation(%)": 0},
        "Inner Winding": {"Turns": 12, "Coil Pit(deg)": 0.1, "Occupation(%)": 0}
        }

        >>> import json
        >>> with open("C:/Example/Of/Path/myJsonFile.json", "w") as outfile:
        >>>     json.dump(dictionary, outfile)
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> dictionary_values = hfss.modeler.check_choke_values("C:/Example/Of/Path/myJsonFile.json")
        """
        ...
    


