"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.modeler import Modeler
from ansys.aedt.core.modeler.cad.object_3d import Object3d

"""This module contains these Primitives classes: `Polyline` and `Primitives`."""
default_materials = ...
aedt_wait_time = ...
class Objects(dict):
    """AEDT object dictionary."""
    def __len__(self): # -> int:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def keys(self): # -> dict_keys[Any, Any]:
        ...
    
    def values(self): # -> dict_values[Any, Any]:
        ...
    
    def items(self): # -> dict_items[Any, Any]:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __getitem__(self, item): # -> Object3d | Polyline:
        ...
    
    def __init__(self, parent, obj_type=..., props=...) -> None:
        ...
    


class GeometryModeler(Modeler):
    """Manages the main AEDT Modeler functionalities for geometry-based designs.

    Parameters
    ----------
    app :
        Inherited parent object.
    is3d : bool, optional
        Whether the model is 3D. The default is ``True``.
    """
    @pyaedt_function_handler()
    def __getitem__(self, partId) -> Object3d:
        """Get the object ``Object3D`` for a given object ID or object name.

        Parameters
        ----------
        partId : int or str
            Object ID or object name from the 3D modeler.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Returns ``None`` if the part ID or the object name is not found.

        """
        ...
    
    def __init__(self, app, is3d=...) -> None:
        ...
    
    @property
    def rescale_model(self):
        """Whether to rescale the model to model units.

        Returns
        -------
        bool
        """
        ...
    
    @rescale_model.setter
    def rescale_model(self, value): # -> None:
        ...
    
    class Position:
        """Position.

        Parameters
        ----------
        args : list or int
            Position of the item as either a list of the ``[x, y, z]`` coordinates
            or three separate values. If no or insufficient arguments
            are specified, ``0`` is applied.

        """
        @pyaedt_function_handler()
        def __getitem__(self, item): # -> Literal[0]:
            ...
        
        @pyaedt_function_handler()
        def __setitem__(self, item, value): # -> None:
            ...
        
        def __len__(self): # -> Literal[3]:
            ...
        
        def __init__(self, *args) -> None:
            ...
        
    
    
    class SweepOptions:
        """Manages sweep options.

        Parameters
        ----------
        draftType : str, optional
            Type of the draft. Options are ``"Round"``, ``"Natural"``,
            and ``"Extended"``. The default is ``"Round"``.
        draftAngle : str, optional
            Draft angle with units. The default is ``"0deg"``.
        twistAngle : str, optional
            Twist angle with units. The default is ``"0deg"``.

        """
        @pyaedt_function_handler()
        def __init__(self, draftType=..., draftAngle=..., twistAngle=...) -> None:
            ...
        
    
    
    @property
    def coordinate_systems(self): # -> list[Any]:
        """Coordinate systems."""
        ...
    
    @property
    def user_lists(self): # -> list[Any]:
        """User lists."""
        ...
    
    @property
    def planes(self): # -> dict[Any, Any] | list[Any]:
        """Planes."""
        ...
    
    @property
    def oeditor(self):
        """AEDT ``oEditor`` module.

        References
        ----------
        >>> oEditor = oDesign.SetActiveEditor("3D Modeler")
        """
        ...
    
    @property
    def materials(self):
        """Material library used in the project.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material_lib.Materials`

        """
        ...
    
    @property
    def model_units(self):
        """Model units as a string. For example, ``"mm"``.

        This property allows you to get or set the model units. When setting the model units,
        you can specify whether to rescale the model by adjusting the ``rescale_model`` attribute.

        References
        ----------
        >>> oEditor.GetModelUnits
        >>> oEditor.SetModelUnits

        Examples
        --------
        >>> from ansys.aedt.core import hfss
        >>> hfss = Hfss()
        >>> hfss.modeler.model_units = "cm"
        >>> hfss.modeler.rescale_model = True
        >>> hfss.modeler.model_units = "mm"
        """
        ...
    
    @model_units.setter
    def model_units(self, units): # -> None:
        ...
    
    @property
    def selections(self):
        """Selections.

        References
        ----------
        >>> oEditor.GetSelections
        """
        ...
    
    @property
    def obounding_box(self):
        """Bounding box.

        References
        ----------
        >>> oEditor.GetModelBoundingBox
        """
        ...
    
    @property
    def dimension(self): # -> Literal['2D', '3D']:
        """Dimensions.

        Returns
        -------
        str
            Dimensionality, which is either ``"2D"`` or ``"3D"``.

        References
        ----------
        >>> oDesign.Is2D
        """
        ...
    
    @property
    def design_type(self):
        """Design type.

        References
        ----------
        >>> oDesign.GetDesignType
        """
        ...
    
    @property
    def geometry_mode(self): # -> None:
        """Geometry mode.

        References
        ----------
        >>> oDesign.GetGeometryMode"""
        ...
    
    @property
    def solid_bodies(self): # -> list[Any]:
        """List of object names.

        .. note::
            Non-model objects are also returned.

        Returns
        -------
        list os str
            List of object names with the object name as the key.

        References
        ----------
        >>> oEditor.GetObjectsInGroup
        """
        ...
    
    @property
    def solid_objects(self): # -> list[Object3d]:
        """List of all solid objects.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            3D object.
        """
        ...
    
    @property
    def sheet_objects(self): # -> list[Any]:
        """List of all sheet objects.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            3D object.
        """
        ...
    
    @property
    def line_objects(self): # -> list[Any]:
        """List of all line objects.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            3D object.
        """
        ...
    
    @property
    def point_objects(self): # -> list[Any]:
        """List of points objects.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            3D object.
        """
        ...
    
    @property
    def unclassified_objects(self): # -> list[Any]:
        """List of all unclassified objects.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            3D object.
        """
        ...
    
    @property
    def object_list(self): # -> list[Any]:
        """List of all objects.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            3D object.
        """
        ...
    
    @property
    def solid_names(self): # -> list[Any]:
        """List of the names of all solid objects.

        Returns
        -------
        list
        """
        ...
    
    @property
    def sheet_names(self): # -> list[Any]:
        """List of the names of all sheet objects.

        Returns
        -------
        list
        """
        ...
    
    @property
    def line_names(self): # -> list[Any]:
        """List of the names of all line objects.

        Returns
        -------
        list
        """
        ...
    
    @property
    def unclassified_names(self): # -> list[Any]:
        """List of the names of all unclassified objects.

        Returns
        -------
        list
        """
        ...
    
    @property
    def object_names(self): # -> list[Any]:
        """List of the names of all objects.

        Returns
        -------
        list
        """
        ...
    
    @property
    def point_names(self): # -> list[Any]:
        """List of the names of all points.

        Returns
        -------
        list
        """
        ...
    
    @property
    def user_defined_component_names(self): # -> list[Any]:
        """List of the names of all 3D component objects.

        References
        ----------
        >>> oEditor.Get3DComponentDefinitionNames
        >>> oEditor.Get3DComponentInstanceNames
        """
        ...
    
    @property
    def layout_component_names(self): # -> list[Any]:
        """List of the names of all Layout component objects.

        Returns
        -------
        list
            Layout component names.
        """
        ...
    
    @property
    def defaultmaterial(self): # -> str:
        """Default material."""
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def version(self):
        """Version."""
        ...
    
    @property
    def model_objects(self): # -> list[Any]:
        """List of the names of all model objects."""
        ...
    
    @property
    def non_model_objects(self): # -> list[Any]:
        """List of objects of all non-model objects."""
        ...
    
    @property
    def model_consistency_report(self): # -> dict[str, list[Any]]:
        """Summary of detected inconsistencies between the AEDT modeler and PyAEDT structures.

        Returns
        -------
        dict

        """
        ...
    
    @property
    def objects_by_name(self): # -> dict[Any, Any]:
        """Object dictionary organized by name.

        Returns
        -------
        dict
        """
        ...
    
    @pyaedt_function_handler()
    def refresh(self): # -> None:
        """Refresh this object."""
        ...
    
    @pyaedt_function_handler()
    def cleanup_objects(self): # -> None:
        """Clean up objects that no longer exist in the modeler because they were removed by previous operations.

        This method also updates object IDs that may have changed via
        a modeler operation such as :func:`ansys.aedt.core.modeler.Model3D.Modeler3D.unite`
        or :func:`ansys.aedt.core.modeler.Model2D.Modeler2D.unite`.

        Returns
        -------
        dict
           Dictionary of updated object IDs.

        """
        ...
    
    @pyaedt_function_handler()
    def cleanup_solids(self): # -> None:
        """Clean up solids that no longer exist in the modeler because
        they were removed by previous operations.

        This method also updates object IDs that may have changed via
        a modeler operation such as :func:`ansys.aedt.core.modeler.Model3D.Modeler3D.unite`
        or :func:`ansys.aedt.core.modeler.Model2D.Modeler2D.unite`.

        Returns
        -------
        dict
           Dictionary of updated object IDs.

        """
        ...
    
    @pyaedt_function_handler()
    def cleanup_points(self): # -> None:
        """Clean up points that no longer exist in the modeler because they were removed by previous operations.

        This method also updates object IDs that may have changed via
        a modeler operation such as :func:`ansys.aedt.core.modeler.Model3D.Modeler3D.unite`
        or :func:`ansys.aedt.core.modeler.Model2D.Modeler2D.unite`.

        Returns
        -------
        dict
           Dictionary of updated object IDs.

        """
        ...
    
    @pyaedt_function_handler()
    def find_new_objects(self): # -> list[Any]:
        """Find any new objects in the modeler that were created by previous operations.

        Returns
        -------
        dict
            Dictionary of new objects.
        """
        ...
    
    @pyaedt_function_handler()
    def add_new_objects(self): # -> list[Any]:
        """Add objects that have been created in the modeler by previous operations.

        Returns
        -------
        list
            List of added objects.
        """
        ...
    
    @pyaedt_function_handler()
    def add_new_solids(self): # -> list[Any]:
        """Add objects that have been created in the modeler by previous operations.

        Returns
        -------
        list
            List of added objects.
        """
        ...
    
    @pyaedt_function_handler()
    def add_new_points(self): # -> list[Any]:
        """Add objects that have been created in the modeler by previous operations.

        Returns
        -------
        list
            List of added objects.

        """
        ...
    
    @pyaedt_function_handler()
    def add_new_user_defined_component(self): # -> list[Any]:
        """Add 3D components and user-defined models that have been created in the modeler by
        previous operations.

        Returns
        -------
        list
            List of added components.

        """
        ...
    
    @pyaedt_function_handler()
    def refresh_all_ids(self): # -> int:
        """Refresh all IDs."""
        ...
    
    @pyaedt_function_handler(materialname="material")
    def get_objects_by_material(self, material=...): # -> list[dict[Any, Any]]:
        """Get a list of objects either of a specified material or classified by material.

        Parameters
        ----------
        material : str
            Name of the material. The default is ``None``.

        Returns
        -------
        list of class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            If a material name is not provided, the method returns
            a list of dictionaries where keys are material names
            of conductors, dielectrics, gases, and liquids respectively
            in the design and values are objects assigned to these materials.
            If a material name is provided, the method returns a list
            of objects assigned to the material.

        References
        ----------
        >>> oEditor.GetObjectsByMaterial

        """
        ...
    
    def __get__(self, instance, owner): # -> Self:
        ...
    
    @pyaedt_function_handler()
    def fit_all(self): # -> None:
        """Fit all.

        References
        ----------
        >>> oEditor.FitAll

        Examples
        --------

        >>> from ansys.aedt.core import hfss
        >>> hfss = Hfss()
        >>> point_object = hfss.modeler.fit_all
        """
        ...
    
    @pyaedt_function_handler(selection="assignment")
    def cover_lines(self, assignment): # -> Literal[True]:
        """Cover closed lines and transform them to a sheet.

        Parameters
        ----------
        assignment : str, int
            Polyline object to cover.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CoverLines
        """
        ...
    
    @pyaedt_function_handler(selection="assignment")
    def cover_faces(self, assignment): # -> Literal[True]:
        """Cover a face.

        Parameters
        ----------
        assignment : str, int
            Sheet object to cover.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CoverLines
        """
        ...
    
    @pyaedt_function_handler()
    def uncover_faces(self, assignment): # -> Literal[True]:
        """Uncover faces.

        Parameters
        ----------
        assignment : list
            Sheet objects to uncover.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.UncoverFaces

        Examples
        --------
        >>> from ansys.aedt.core import Maxwell3d
        >>> app = Maxwell3d()
        >>> circle_1 = app.modeler.create_circle(cs_plane=0, position=[0, 0, 0], radius=3, name="Circle1")
        >>> box_1 = app.modeler.create_box(origin=[-13.9, 0, 0], sizes=[27.8, -40, 25.4], name="Box1")
        >>> app.modeler.uncover_faces([circle_1.faces[0], [box_1.faces[0], box_1.faces[2]]])
        """
        ...
    
    @pyaedt_function_handler()
    def create_coordinate_system(self, origin=..., reference_cs=..., name=..., mode=..., view=..., x_pointing=..., y_pointing=..., psi=..., theta=..., phi=..., u=...): # -> CoordinateSystem | Literal[False]:
        """Create a coordinate system.

        Parameters
        ----------
        origin : list, optional
            List of ``[x, y, z]`` coordinates for the origin of the
            coordinate system.  The default is ``None``, in which case
            ``[0, 0, 0]`` is used.
        reference_cs : str, optional
            Name of the reference coordinate system. The default is
            ``"Global"``.
        name : str, optional
            Name of the coordinate system. The default is ``None``.
        mode : str, optional
            Definition mode. Options are ``"axis"``, ``"axisrotation"``,
            ``"view"``, ``"zxz"``, and ``"zyz"`` The default
            is ``"axis"``.  You can also use the ``ansys.aedt.core.generic.constants.CSMODE``
            enumerator.

            * If ``mode="axis"``, specify the ``x_pointing`` and ``y_pointing`` parameters.
            * If ``mode="axisrotation"``, specify the ``theta`` and ``u`` parameters.
            * If ``mode="view"``, specify the ``view`` parameter.
            * If ``mode="zxz"`` or ``mode="zyz"``, specify the ``phi``, ``theta``,
              and ``psi`` parameters.


            Parameters not needed by the specified mode are ignored.
            The default mode, ``"axis"``, is a coordinate system parallel to the
            global coordinate system centered in the global origin.

        view : str, int optional
            View for the coordinate system if ``mode="view"``. Options
            are ``"iso"``, ``None``, ``"XY"``, ``"XZ"``, and ``"XY"``. The
            default is ``"iso"``. The ``"rotate"`` option is obsolete. You can
            also use the ``ansys.aedt.core.generic.constants.VIEW`` enumerator.

            .. note::
              For backward compatibility, ``mode="view", view="rotate"`` are the same as
              ``mode="axis"``. Because the "rotate" option in the "view" mode is obsolete, use
              ``mode="axis"`` instead.

        x_pointing : list, optional
            List of the ``[x, y, z]`` coordinates specifying the X axis
            pointing in the global coordinate system if ``mode="axis"``.
            The default is ``[1, 0, 0]``.
        y_pointing : list, optional
            List of the ``[x, y, z]`` coordinates specifying the Y axis
            pointing in the global coordinate system if ``mode="axis"``.
            The default is ``[0, 1, 0]``.
        phi : float, optional
            Euler angle phi in degrees if ``mode="zxz"`` or ``mode="zyz"``.
            The default is ``0``.
        theta : float, optional
            Euler angle theta or rotation angle in degrees if ``mode="zxz"``,
            ``mode="zyz"``, or ``mode="axisrotation"``. The default is ``0``.
        psi : float, optional
            Euler angle psi in degrees if ``mode="zxz"`` or ``mode="zyz"``.
            The default is ``0``.
        u : list
            List of the ``[ux, uy, uz]`` coordinates for the rotation axis
            if ``mode="zxz"``. The default is ``[1, 0, 0]``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.CoordinateSystem`
            Created coordinate system.

        References
        ----------
        >>> oEditor.CreateRelativeCS
        """
        ...
    
    @pyaedt_function_handler()
    def create_face_coordinate_system(self, face, origin, axis_position, axis=..., name=..., offset=..., rotation=..., always_move_to_end=...): # -> FaceCoordinateSystem | Literal[False]:
        """Create a face coordinate system.

        The face coordinate has always the Z axis parallel to face normal.
        The X and Y axis lie on the face plane.

        Parameters
        ----------
        face : int, FacePrimitive
            Face where the coordinate system is defined.
        origin : int, FacePrimitive, EdgePrimitive, VertexPrimitive
            Coordinate system origin. The origin must belong to the face where the
            coordinate system is defined.

            - If a face is specified, the origin is placed on the face center. It must be
              the same as the ``face`` parameter.
            - If an edge is specified, the origin is placed on the edge midpoint.
            - If a vertex is specified, the origin is placed on the vertex.

        axis_position : int, FacePrimitive, EdgePrimitive, VertexPrimitive
            Specify where the X or Y axis is pointing. The position must belong to the face where the
            coordinate system is defined.
            Select which axis is considered with the option ``axis``.
            If a face is specified, the position is placed on the face center. It must be the same as ``face``.
            If an edge is specified, the position is placed on the edce midpoint.
            If a vertex is specified, the position is placed on the vertex.
        axis : str, optional
            Select which axis is considered for positioning. Possible values are ``"X"`` and ``"Y"``.
            The default is ``"X"``.
        name : str, optional
            Name of the coordinate system. The default is ``None``.
        offset : list, optional
            List of the ``[x, y]`` coordinates specifying the offset of the coordinate system origin.
            The offset specified in the face coordinate system reference.
            The default is ``[0, 0]``.
        rotation : float, optional
            Rotation angle of the coordinate system around its Z axis. Angle is in degrees.
            The default is ``0``.
        always_move_to_end : bool, optional
            If ``True`` the Face Coordinate System creation operation will always be moved to the end of subsequent
            objects operation. This will guarantee that the coordinate system will remain solidal with the object
            face. If ``False`` the option "Always Move CS to End" is set to off. The default is ``True``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.FaceCoordinateSystem`
        """
        ...
    
    @pyaedt_function_handler(obj="assignment")
    def create_object_coordinate_system(self, assignment, origin, x_axis, y_axis, move_to_end=..., reverse_x_axis=..., reverse_y_axis=..., name=...): # -> ObjectCoordinateSystem | Literal[False]:
        """Create an object coordinate system.

        Parameters
        ----------
        assignment : str, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Object to attach the object coordinate system to.
        origin : int, VertexPrimitive, EdgePrimitive, FacePrimitive, list
            Refer to the origin where the object coordinate system is anchored.
            It can be:

             - int in which case it refers to the entity Id.
             - VertexPrimitive, EdgePrimitive, FacePrimitive in which case it refers to the entity type.
             - list in which case it refers to the origin coordinate system ``[x, y, z]``.

        x_axis : int, VertexPrimitive, EdgePrimitive, FacePrimitive, list
            Entity that the x axis of the object coordinate system points to.
            It can be:

             - int in which case it refers to the entity Id.
             - VertexPrimitive, EdgePrimitive, FacePrimitive in which case it refers to the entity type.
             - list in which case it refers to the point coordinate system ``[x, y, z]`` that the x axis points to.

        y_axis : int, VertexPrimitive, EdgePrimitive, FacePrimitive, list
            Entity that the y axis of the object coordinate system points to.
            It can be:

             - int in which case it refers to the entity Id.
             - VertexPrimitive, EdgePrimitive, FacePrimitive in which case it refers to the entity type.
             - list in which case it refers to the point coordinate system ``[x, y, z]`` that the y axis points to.

        move_to_end : bool, optional
            If ``True`` the Coordinate System creation operation will always be moved to the end of subsequent
            objects operation. This will guarantee that the coordinate system will remain solidal with the object
            face. If ``False`` the option "Always Move CS to End" is set to off. The default is ``True``.
        reverse_x_axis : bool, optional
            Whether the x-axis is in the reverse direction.
            The default is ``False``.
        reverse_y_axis : bool, optional
            Whether the y-axis is in the reverse direction.
            The default is ``False``.
        name : str, optional
            Name of the coordinate system. The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(ref_cs="coordinate_system")
    def global_to_cs(self, point, coordinate_system): # -> list[float] | list[Any]:
        """Transform a point from the global coordinate system to another coordinate system.

        Parameters
        ----------
        point : list
            List of the ``[x, y, z]`` coordinates to transform.
        coordinate_system : str, CoordinateSystem
            Name of the destination reference system. The ``CoordinateSystem`` object can also be
            used.

        Returns
        -------
        list
            List of the transformed ``[x, y, z]`` coordinates.

        """
        ...
    
    @pyaedt_function_handler()
    def set_working_coordinate_system(self, name): # -> Literal[True]:
        """Set the working coordinate system to another coordinate system.

        Parameters
        ----------
        name : str, FaceCoordinateSystem, CoordinateSystem
            Name of the coordinate system or ``CoordinateSystem`` object to set as the working
            coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.SetWCS
        """
        ...
    
    @pyaedt_function_handler()
    def get_working_coordinate_system(self):
        """Get the active coordinate system.

        Returns
        -------
        str
            Name of the active coordinate system.

        References
        ----------
        >>> oEditor.GetActiveCoordinateSystem
        """
        ...
    
    @pyaedt_function_handler()
    def invert_cs(self, coordinate_system, to_global=...): # -> tuple[list[Any], Any]:
        """Get the inverse translation and the conjugate quaternion of the input coordinate system.

        By defining a new coordinate system with this information, the reference coordinate system
        of the input coordinate system is obtained.

        Parameters
        ----------
        coordinate_system : str, CoordinateSystem
            Name of the destination reference system. A ``CoordinateSystem`` object can also be
            used.
        to_global : bool, optional
            Whether to compute the inverse transformation of the input coordinate system with
            respect to the global coordinate system. The default is ``False``.

        Returns
        -------
        tuple
            List of the ``[x, y, z]`` coordinates of the origin and the quaternion defining the
            coordinate system.
        """
        ...
    
    @pyaedt_function_handler()
    def reference_cs_to_global(self, coordinate_system): # -> tuple[Any | list[Any], Any]:
        """Get the origin and quaternion defining the coordinate system in the global coordinates.

        Parameters
        ----------
        coordinate_system : str, CoordinateSystem
            Name of the destination reference system. The ``CoordinateSystem`` object can also be used.

        Returns
        -------
        tuple
            List of the ``[x, y, z]`` coordinates of the origin and the quaternion defining the
            coordinate system in the global coordinates.
        """
        ...
    
    @pyaedt_function_handler()
    def duplicate_coordinate_system_to_global(self, coordinate_system):
        """Create a duplicate coordinate system referenced to the global coordinate system.

        Having this coordinate system referenced to the global coordinate
        system removes all nested coordinate system dependencies.

        Parameters
        ----------
        coordinate_system : str, CoordinateSystem
            Name of the destination reference system. The ``CoordinateSystem`` object can also be used.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.CoordinateSystem`
            Created coordinate system.

        References
        ----------
        >>> oEditor.CreateRelativeCS
        """
        ...
    
    @pyaedt_function_handler(objects="assignment")
    def set_objects_deformation(self, assignment): # -> bool:
        """Assign deformation objects to a Workbench link.

        Parameters
        ----------
        assignment : list
            List of the deformation objects to assign to the Workbench link.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetObjectDeformation
        """
        ...
    
    @pyaedt_function_handler(objects="assignment", ambient_temp="ambient_temperature")
    def set_objects_temperature(self, assignment, ambient_temperature=..., create_project_var=...): # -> bool:
        """Assign temperatures to objects.

        The materials assigned to the objects must have a thermal modifier.

        Parameters
        ----------
        assignment : list
            List of objects.
        ambient_temperature : float, optional
            Ambient temperature. The default is ``22``.
        create_project_var : bool, optional
            Whether to create a project variable for the ambient temperature.
            The default is ``False``. If ``True,`` ``$AmbientTemp`` is created.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetObjectTemperature
        """
        ...
    
    @pyaedt_function_handler(objectname="assignment", startposition="origin")
    def find_point_around(self, assignment, origin, offset, plane): # -> list[int]:
        """Find the point around an object.

        Parameters
        ----------
        assignment : str
            Name of the object.
        origin : list
            List of the ``[x, y, z]`` coordinates for the starting
            position of the object.
        offset :
            Offset to apply.
        plane : str
            Coordinate plane of the arc. Choices are ``"YZ"``,
            ``"ZX"``, and ``"XY"``.


        Returns
        -------
        list
            List of the ``[x, y, z]`` coordinates for the point.

        """
        ...
    
    @pyaedt_function_handler(objectname="assignment", groundname="ground_name", axisdir="orientation")
    def create_sheet_to_ground(self, assignment, ground_name=..., orientation=..., sheet_dim=...): # -> Polyline:
        """Create a sheet between an object and a ground plane.

        The ground plane must be bigger than the object and perpendicular
        to one of the three axes.

        Parameters
        ----------
        assignment : str
            Name of the object.
        ground_name : str, optional
            Name of the ground. The default is ``None``, in which case the
            bounding box is used.
        orientation : int, optional
            Axis direction. Options are ``0`` through ``5``. The default is ``0``.
        sheet_dim : optional
            Sheet dimension in millimeters. The default is ``1``.

        Returns
        -------
        int
            ID of the sheet created.

        References
        ----------
        >>> oEditor.CreatePolyline
        """
        ...
    
    @pyaedt_function_handler()
    def get_boundaries_name(self): # -> list[Any]:
        """Retrieve all boundary names.

        Returns
        -------
        list
            List of boundary names. Boundaries with multiple modes will return one
            boundary for each mode.

        References
        ----------
        >>> oModule.GetBoundaries
        """
        ...
    
    @pyaedt_function_handler(obj_list="assignment")
    def set_object_model_state(self, assignment, model=...): # -> Literal[True]:
        """Set a list of objects to either models or non-models.

        Parameters
        ----------
        assignment : list
            List of objects IDs or names.
        model : bool, optional
            Whether to set the objects as models. The default is ``True``.
            If ``False``, the objects are set as non-models.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler()
    def get_objects_in_group(self, group): # -> list[Any] | None:
        """Retrieve a list of objects belonging to a group.

        Parameters
        ----------
        group : str
            Name of the group.

        Returns
        -------
        list
            List of objects belonging to the group.

        References
        ----------
        >>> oEditor.GetObjectsInGroup
        """
        ...
    
    @pyaedt_function_handler()
    def get_group_bounding_box(self, group): # -> list[float] | None:
        """Retrieve the bounding box of a group.

        Parameters
        ----------
        group : str
            Name of the group.

        Returns
        -------
        list
            List of six float values representing the bounding box
            in the form ``[min_x, min_y, min_z, max_x, max_y, max_z]``.

        References
        ----------
        >>> oEditor.GetObjectsInGroup
        >>> oEditor.GetModelBoundingBox
        """
        ...
    
    @pyaedt_function_handler(object_id="assignment")
    def convert_to_selections(self, assignment, return_list=...): # -> list[Any] | str:
        """Convert modeler objects.

        This method converts modeler object or IDs to the corresponding
        output according to the following scheme:

        ====================  ===========================
          ``assignment``          Return value
        ====================  ===========================

         ``int``                 object name (str)
          ``Object3D``           object name (str)
          ``FacePrimitive``      int, face ID
          ``EdgePrimitive``      int, edge ID
          ``str``                return the same ``str``


        - If ``object_id`` is a list, a list is returned according
        to the table. If ``object_id`` is a single value, a list
        of ``length == 1`` is returned (default).

        - If the second argument, ``return_list``, is set to `False` (default), a
        string is returned with elements separated by a comma (,)".


        Parameters
        ----------
        assignment : str, int, list
            One or more object IDs whose name will be returned. A list can contain
            both strings (object names) and integers (object IDs).
        return_list : bool, option
            Whether to return a list of the selections. The default is
            ``False``, in which case a string of the selections is returned.
            If ``True``, a list of the selections is returned.

        Returns
        -------
        str or list
           Name of the objects corresponding to the one or more object IDs passed as arguments.

        """
        ...
    
    @pyaedt_function_handler(objects="assignment")
    def split(self, assignment, plane=..., sides=..., tool=..., split_crossing_objs=..., delete_invalid_objs=...):
        """Split a list of objects.
        In case of 3D design possible splitting options are plane, Face Primitive, Edge Primitive or Polyline.
        In case of 2D design possible splitting option is plane.

        Parameters
        ----------
        assignment : str, int, or list
            One or more objects to split. A list can contain
            both strings (object names) and integers (object IDs).
        plane : str, optional
            Coordinate plane of the cut or the Application.PLANE object.
            The default value is ``None``.
            Choices for the coordinate plane are ``"XY"``, ``"YZ"``, and ``"ZX"``.
            If plane or tool parameter are not provided the method returns ``False``.
        sides : str, optional
            Which side to keep. The default is ``"Both"``, in which case
            all objects are kept after the split. Options are ``"Both"``,
            ``"NegativeOnly"``, and ``"PositiveOnly"``.
        tool : str, int, :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`or
                :class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`, optional
            For 3D design types is the name, ID, face, edge or polyline used to split the objects.
            For 2D design types is the name of the plane used to split the objects.
            The default value is ``None``.
            If plane or tool parameter are not provided the method returns ``False``.
        split_crossing_objs : bool, optional
            Whether to split crossing plane objects.
            The default is ``False``.
        delete_invalid_objs : bool, optional
            Whether to delete invalid objects.
            The default is ``True``.

        Returns
        -------
        list of str
            List of split object names.

        References
        ----------
        >>> oEditor.Split
        """
        ...
    
    @pyaedt_function_handler(objid="assignment", position="origin")
    def duplicate_and_mirror(self, assignment, origin, vector, is_3d_comp=..., duplicate_assignment=...): # -> list[Any] | Literal[True]:
        """Duplicate and mirror a selection.

        Parameters
        ----------
        assignment : str, int, or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name or ID of the object.
        origin : list
            List of the ``[x, y, z]`` coordinates or
            Application.Position object for the selection.
        vector : float, str
            List of the ``[x1, y1, z1]`` coordinates or
            Application.Position object for the vector.
        is_3d_comp : bool, optional
            If ``True``, the method will try to return the duplicated list of 3dcomponents. The default is ``False``.
        duplicate_assignment : bool, optional
            If True, the method duplicates selection assignments. The default value is ``True``.

        Returns
        -------
        list
            List of objects created or an empty list.

        References
        ----------
        >>> oEditor.DuplicateMirror
        """
        ...
    
    @pyaedt_function_handler(objid="assignment", position="origin")
    def mirror(self, assignment, origin, vector, duplicate=..., is_3d_comp=..., duplicate_assignment=...): # -> list[Any] | Literal[True]:
        """Mirror a selection.

        Parameters
        ----------
        assignment : str, int, or Object3d
            Name or ID of the object.
        origin : int or float
            List of the ``[x, y, z]`` coordinates or the
            ``Application.Position`` object for the selection.
        duplicate : bool, optional
            Whether if duplicate the object before mirror or not. Default is ``False``.
        is_3d_comp : bool, optional
            Whether the component is 3D. The default is ``False``. If ``True``, the method
            tries to return the duplicated list of 3D components.
        vector : list
            List of the ``[x1, y1, z1]`` coordinates or
            the ``Application.Position`` object for the vector.
        duplicate_assignment : bool, optional
            Whether to duplicate selection assignments. The default is ``True``.

        Returns
        -------
        bool, list
            List of objects created or ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Mirror
        >>> oEditor.DuplicateMirror
        """
        ...
    
    @pyaedt_function_handler(objid="assignment")
    def move(self, assignment, vector): # -> Literal[True]:
        """Move objects from a list.

        Parameters
        ----------
        assignment : list, Position object
            List of object IDs.
        vector : list
            Vector of the direction move. It can be a list of the ``[x, y, z]``
            coordinates or a Position object.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Move
        """
        ...
    
    @pyaedt_function_handler(objid="assignment", cs_axis="axis", nclones="clones")
    def duplicate_around_axis(self, assignment, axis, angle=..., clones=..., create_new_objects=..., is_3d_comp=..., duplicate_assignment=...): # -> tuple[Literal[True], list[Any]] | tuple[Literal[False], list[Any]]:
        """Duplicate a selection around an axis.

        Parameters
        ----------
        assignment : list, str, int, Object3d or UserDefinedComponent
            Name or ID of the object.
        axis : str
            Coordinate system axis or the Application.AXIS object.
        angle : float, optional
            Angle rotation in degees. The default is ``90``.
        clones : int or str, optional
            Number of clones. The default is ``2``.
        create_new_objects :
            Whether to create the copies as new objects. The
            default is ``True``.
        is_3d_comp : bool, optional
            If ``True``, the method will try to return the duplicated list of 3dcomponents. The default is ``False``.
        duplicate_assignment : bool, optional
            If True, the method duplicates selection assignments. The default value is ``True``.

        Returns
        -------
        tuple

        References
        ----------
        >>> oEditor.DuplicateAroundAxis
        """
        ...
    
    @pyaedt_function_handler(objid="assignment", nclones="clones", attachObject="attach")
    def duplicate_along_line(self, assignment, vector, clones=..., attach=..., is_3d_comp=..., duplicate_assignment=...): # -> tuple[Literal[True], list[Any]] | tuple[Literal[False], list[Any]]:
        """Duplicate a selection along a line.

        Parameters
        ----------
        assignment : list, str, int, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name or ID of the object.
        vector : list
            List of ``[x1,y1,z1]`` coordinates or the Application.Position object for
            the vector.
        attach : bool, optional
            The default is ``False``.
        clones : int, optional
            Number of clones. The default is ``2``.
        is_3d_comp : bool, optional
            If True, the method will try to return the duplicated list of 3dcomponents. The default is ``False``.
        duplicate_assignment : bool, optional
            If True, the method duplicates selection assignments. The default value is ``True``.

        Returns
        -------
        tuple

        References
        ----------
        >>> oEditor.DuplicateAlongLine
        """
        ...
    
    @pyaedt_function_handler(objid="assignment", bBothSides="both_sides")
    def thicken_sheet(self, assignment, thickness, both_sides=...): # -> list[Any] | Point | Plane | Object3d:
        """Thicken the sheet of the selection.

        Parameters
        ----------
        assignment : list, str, int, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name or ID of the object.
        thickness : float, str
            Amount to thicken the sheet by.
        both_sides : bool, optional
            Whether to thicken the sheet on both side. The default is ``False``.

        Returns
        -------
        ansys.aedt.core.modeler.cad.object_3d.Object3d

        References
        ----------
        >>> oEditor.ThickenSheet
        """
        ...
    
    @pyaedt_function_handler(obj_name="assignment", face_id="faces")
    def sweep_along_normal(self, assignment, faces, sweep_value=...): # -> list[Point | Plane | Object3d] | Point | Plane | Object3d | Literal[False]:
        """Sweep the selection along the vector.

        Parameters
        ----------
        assignment : list, str, int, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name or ID of the object.
        faces : int or list
            Face or list of faces to sweep.
        sweep_value : float, optional
            Sweep value. The default is ``0.1``.

        Returns
        -------
        ansys.aedt.core.modeler.cad.object_3d.Object3d

        References
        ----------
        >>> oEditor.SweepFacesAlongNormal
        """
        ...
    
    @pyaedt_function_handler(objid="assignment")
    def sweep_along_vector(self, assignment, sweep_vector, draft_angle=..., draft_type=...): # -> list[Any] | Point | Plane | Object3d:
        """Sweep the selection along a vector.

        Parameters
        ----------
        assignment : list, str, int, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name or ID of the object.
        sweep_vector : list
            List of ``[x1, y1, z1]`` coordinates or Application.Position object for
            the vector.
        draft_angle : float, optional
            Draft angle in degrees. The default is ``0``.
        draft_type : str
            Type of the draft. Options are ``"Round"``, ``"Natural"``,
            and ``"Extended"``. The default is ``"Round"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or list of
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            One or more objects created.

        References
        ----------
        >>> oEditor.SweepAlongVector
        """
        ...
    
    @pyaedt_function_handler(objid="assignment")
    def sweep_along_path(self, assignment, sweep_object, draft_angle=..., draft_type=..., is_check_face_intersection=..., twist_angle=...): # -> list[Any] | Point | Plane | Object3d:
        """Sweep the selection along a path.

        Parameters
        ----------
        assignment : list, str, int, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name or ID of the object.
        sweep_object : str, int
            Name or ID of the sweep.
        draft_angle : float, optional
            Draft angle in degrees. The default is ``0``.
        draft_type : str
            Type of the draft. Options are ``"Round"``, ``"Natural"``,
            and ``"Extended"``. The default is ``"Round"``.
        is_check_face_intersection : bool, optional
            The default is ``False``.
        twist_angle : float, optional
           Twist angle in degrees. The default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.SweepAlongPath
        """
        ...
    
    @pyaedt_function_handler(objid="assignment", cs_axis="axis")
    def sweep_around_axis(self, assignment, axis, sweep_angle=..., draft_angle=..., number_of_segments=...): # -> list[Any] | Point | Plane | Object3d:
        """Sweep the selection around the axis.

        Parameters
        ----------
        assignment : list, str, int, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name or ID of the object.
        axis :
            Coordinate system axis or the Application.AXIS object.
        sweep_angle : float
            Sweep angle in degrees. The default is ``360``.
        draft_angle : float
            Draft angle in degrees. The default is ``0``.
        number_of_segments : int, optional
            Number of segments of the sweep operation. Default is ``0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.SweepAroundAxis
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment")
    def section(self, assignment, plane, create_new=..., section_cross_object=...): # -> Literal[True]:
        """Section the selection.

        Parameters
        ----------
        assignment : list, str, int, or  :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            One or more objects to section.
        plane : str
            Coordinate plane or Application.PLANE object.
            Choices for the coordinate plane are ``"XY"``, ``"YZ"``, and ``"ZX"``.'
        create_new : bool, optional
            The default is ``True``, but this parameter has no effect.
        section_cross_object : bool, optional
            The default is ``False``, but this parameter has no effect.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Section
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment")
    def separate_bodies(self, assignment, create_group=...): # -> list[Any] | Literal[False]:
        """Separate bodies of the selection.

        Parameters
        ----------
        assignment : list, str
            List of objects to separate.
        create_group : bool, optional
            Whether to create a group. The default is ``False``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or bool
            3D object.
            ``False`` when failed.

        References
        ----------
        >>> oEditor.SeparateBody
        """
        ...
    
    @pyaedt_function_handler(objid="assignment", cs_axis="axis", unit="units")
    def rotate(self, assignment, axis, angle=..., units=...): # -> Literal[True]:
        """Rotate the selection.

        Parameters
        ----------
        assignment :  list, str, int, or  :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
             ID of the object.
        axis : str
            Coordinate system axis or the Application.AXIS object.
        angle : float, str
            Angle of rotation. The units, defined by ``unit``, can be either
            degrees or radians. The default is ``90.0``.
        units : text, optional
             Units for the angle. Options are ``"deg"`` or ``"rad"``.
             The default is ``"deg"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Rotate
        """
        ...
    
    @pyaedt_function_handler()
    def subtract(self, blank_list, tool_list, keep_originals=..., **kwargs): # -> Literal[True]:
        """Subtract objects.

        Parameters
        ----------
        blank_list : str, Object3d, int or List of str, int and Object3d.
            List of objects to subtract from. The list can be of
            either :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` objects or object IDs.
        tool_list : list, str
            List of objects to subtract. The list can be of
            either Object3d objects or object IDs.
        keep_originals : bool, optional
            Whether to keep the original objects. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Subtract
        """
        ...
    
    @pyaedt_function_handler()
    def imprint(self, blank_list, tool_list, keep_originals=...): # -> Literal[True]:
        """Imprin an object list on another object list.

        Parameters
        ----------
        blank_list : list of Object3d or list of int
            List of objects to imprint from. The list can be of
            either :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` objects or object IDs.
        tool_list : list of Object3d or list of int
            List of objects to imprint. The list can be of
            either Object3d objects or object IDs.
        keep_originals : bool, optional
            Whether to keep the original objects. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Imprint
        """
        ...
    
    @pyaedt_function_handler(tool_list="assignment")
    def imprint_normal_projection(self, assignment, keep_originals=...): # -> Literal[True]:
        """Imprint the normal projection of objects over a sheet.

        Parameters
        ----------
        assignment : list
            List of objects to imprint. The list can be of
            either Object3d objects or object IDs.
        keep_originals : bool, optional
            Whether to keep the original objects. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ImprintProjection
        """
        ...
    
    @pyaedt_function_handler(tool_list="assignment")
    def imprint_vector_projection(self, assignment, vector_points, distance, keep_originals=...): # -> Literal[True]:
        """Imprint the projection of objects over a sheet with a specified vector and distance.

        Parameters
        ----------
        assignment : list
            List of objects to imprint. The list can be of
            either Object3d objects or object IDs.
        vector_points : list
            List of [x,y,z] vector projection.
        distance : str, int
            Distance of Projection.
        keep_originals : bool, optional
            Whether to keep the original objects. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ImprintProjection
        """
        ...
    
    @pyaedt_function_handler(theList="assignment")
    def purge_history(self, assignment, non_model=...): # -> Literal[True]:
        """Purge history objects from object names.

        Parameters
        ----------
        assignment : list
            List of object names to purge.
        non_model : bool, optional
            Convert new parts to non-model objects. The default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.PurgeHistory

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> app = Hfss()
        >>> cylinder1 = hfss.modeler.create_cylinder(orientation="X", origin=[5, 0, 0], radius=1, height=20)
        >>> aedtapp.modeler.purge_history(assignment=cylinder1)
        """
        ...
    
    @pyaedt_function_handler()
    def get_model_bounding_box(self): # -> list[float]:
        """Retrieve the model bounding box.

        Returns
        -------
        List
            List of six float values representing the bounding box
            in the form ``[min_x, min_y, min_z, max_x, max_y, max_z]``.

        References
        ----------
        >>> oEditor.GetModelBoundingBox
        """
        ...
    
    @pyaedt_function_handler(unite_list="assignment")
    def unite(self, assignment, purge=..., keep_originals=...): # -> list[Any] | str | Literal[False]:
        """Unite objects from a list.

        Parameters
        ----------
        assignment : list, str
            List of objects to unite.
        purge : bool, optional
            Purge history after unite. Default is False.
        keep_originals : bool, optional
            Keep original objects used for the operation. Default is False.

        Returns
        -------
        str
            The united object that is the first in the list.

        References
        ----------
        >>> oEditor.Unite
        """
        ...
    
    @pyaedt_function_handler(objid="assignment")
    def clone(self, assignment): # -> tuple[Literal[True], list[Any]]:
        """Clone objects from a list of object IDs.

        Parameters
        ----------
        assignment : list
            List of object IDs.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        List
            List of names of objects cloned when successful.

        References
        ----------
        >>> oEditor.Copy
        >>> oEditor.Paste
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment")
    def copy(self, assignment): # -> list[Any] | str | None:
        """Copy objects to the clipboard.

            Parameters
            ----------
            assignment : list
                List of objects (IDs or names).

            Returns
            -------
            list
                List of names of the objects copied when successful.

        References
        ----------
        >>> oEditor.Copy
        """
        ...
    
    @pyaedt_function_handler()
    def paste(self): # -> list[Any]:
        """Paste objects from the clipboard.

        Returns
        -------
        list
            List of passed objects.

        References
        ----------
        >>> oEditor.Paste
        """
        ...
    
    @pyaedt_function_handler(theList="assignment")
    def intersect(self, assignment, keep_originals=..., **kwargs): # -> list[Any] | str | None:
        """Intersect objects from a list.

        Parameters
        ----------
        assignment : list
            List of objects.
        keep_originals : bool, optional
            Whether to keep the original object. The default is ``False``.

        Returns
        -------
        str
            Retrieve the resulting 3D Object when succeeded.

        References
        ----------
        >>> oEditor.Intersect
        """
        ...
    
    @pyaedt_function_handler()
    def detach_faces(self, assignment, faces): # -> list[Object3d | Any]:
        """Section the object.

        Parameters
        ----------
        assignment : Object3d or str
            Object from which to detach faces.
        faces : List[FacePrimitive] or List[int] or int or FacePrimitive
            Face or faces to detach from the object.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            List of objects resulting from the operation (including the original one).

        References
        ----------
        >>> oEditor.DetachFaces

        """
        ...
    
    @pyaedt_function_handler(theList="assignment")
    def connect(self, assignment): # -> list[Any] | Literal[False]:
        """Connect objects from a list.

        Parameters
        ----------
        assignment : list
            List of objects.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d.Object3d` or bool
            3D object.
            ``False`` when failed.

        References
        ----------
        >>> oEditor.Connect
        """
        ...
    
    @pyaedt_function_handler()
    def chassis_subtraction(self, chassis_part): # -> Literal[True]:
        """Subtract all non-vacuum objects from the main chassis object.

        Parameters
        ----------
        chassis_part : str
            Name of the main chassis object.

        References
        ----------
        >>> oEditor.Subtract
        """
        ...
    
    @pyaedt_function_handler(obj="assignment", face_position="face_location")
    def check_plane(self, assignment, face_location, offset=...): # -> Literal['XY', 'XZ', 'YZ'] | None:
        """Check for the plane that is defined as the face for an object.

        Parameters
        ----------
        assignment : str
            Name of the object.
        face_location : list
            List of the ``[x, y, z]`` coordinates for the position of the face.
        offset : optional
            Offset to apply. The default is ``1``.

        Returns
        -------
        str
            Name of the plane. It can be "XY", "XZ" or "YZ".

        """
        ...
    
    @pyaedt_function_handler()
    def get_matched_object_name(self, search_string):
        """Retrieve the name of the matched object.

        Parameters
        ----------
        search_string : str
            Text string to search for.


        Returns
        -------
        str
            Name of the matched object.

        References
        ----------
        >>> oEditor.GetMatchedObjectName
        """
        ...
    
    @pyaedt_function_handler()
    def clean_objects_name(self, main_part_name): # -> Literal[True]:
        """Clean the names of the objects for a main part.

        Parameters
        ----------
        main_part_name : str
            Name of the main part.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.RenamePart
        """
        ...
    
    @pyaedt_function_handler(defname="name")
    def create_airbox(self, offset=..., offset_type=..., name=...):
        """Create an airbox that is as big as the bounding extension of the project.

        Parameters
        ----------
        offset :
            Double offset value to apply on the airbox faces versus the bounding box.
            The default is ``0``.
        offset_type : str
            Type of the offset. Options are ``"Absolute"`` and ``"Relative"``.
            The default is ``"Absolute"``. If ``"Relative"``, the offset input
            is between 0 and 100.
        name : str, optional
            Name of the airbox. The default is ``"AirBox_Auto"``.

        Returns
        -------
        int
            ID of the airbox created.

        References
        ----------
        >>> oEditor.CreateBox
        """
        ...
    
    @pyaedt_function_handler()
    def create_air_region(self, x_pos=..., y_pos=..., z_pos=..., x_neg=..., y_neg=..., z_neg=..., is_percentage=...): # -> Point | Plane | Object3d | Literal[False]:
        """Create an air region.

        Parameters
        ----------
        x_pos : float or str, optional
            If float, padding in the +X direction in modeler units.
            If str, padding with units in the +X direction.
            The default is ``0``.
        y_pos : float or str, optional
            If float, padding in the +Y direction in modeler units.
            If str, padding with units in the +Y direction.
            The default is ``0``.
        z_pos : float or str, optional
            If float, padding in the +Z direction in modeler units.
            If str, padding with units in the +Z direction.
            The default is ``0``.
        x_neg : float or str, optional
            If float, padding in the -X direction in modeler units.
            If str, padding with units in the -X direction.
            The default is ``0``.
        y_neg : float or str, optional
            If float, padding in the -Y direction in modeler units.
            If str, padding with units in the -Y direction.
            The default is ``0``.
        z_neg : float or str, optional
            If float, padding in the -Z direction in modeler units.
            If str, padding with units in the -Z direction.
            The default is ``0``.
        is_percentage : bool, optional
            Region definition in percentage or absolute value. The default is `True``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.CreateRegion
        """
        ...
    
    @pyaedt_function_handler(listvalues="values")
    def edit_region_dimensions(self, values): # -> Literal[True]:
        """Modify the dimensions of the region.

        Parameters
        ----------
        values : list
            List of the padding percentages along all six directions in
            the form ``[+X, -X, +Y, -Y, +Z, -Z]``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(face_list="assignment")
    def create_face_list(self, assignment, name=...): # -> Lists | Literal[False]:
        """Create a list of faces given a list of face ID or a list of objects.

        Parameters
        ----------
        assignment : list
            List of face ID or list of objects

        name : str, optional
           Name of the new list.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.Lists`
            List object when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateEntityList
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment")
    def create_object_list(self, assignment, name=...): # -> Lists | Literal[False]:
        """Create an object list given a list of object names.

        Parameters
        ----------
        assignment : list
            List of object names.
        name : str, optional
            Name of the new object list.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.Lists`
            List object when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateEntityList
        """
        ...
    
    @pyaedt_function_handler(objectname="assignment")
    def generate_object_history(self, assignment, non_model=...): # -> Literal[True]:
        """Generate history for the object.

        Parameters
        ----------
        assignment : str
            Name of the history object.
        non_model : bool, optional
            Convert new parts to non-model objects. The default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.GenerateHistory

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> app = Hfss()
        >>> cylinder1 = hfss.modeler.create_cylinder(orientation="X", origin=[5, 0, 0], radius=1, height=20)
        >>> aedtapp.modeler.purge_history(assignment=cylinder1)
        >>> aedtapp.modeler.generate_object_history(assignment=cylinder1)
        """
        ...
    
    @pyaedt_function_handler(bondname="assignment", bond_direction="direction", numberofsegments="number_of_segments")
    def create_faceted_bondwire_from_true_surface(self, assignment, direction, min_size=..., number_of_segments=...): # -> Literal[False]:
        """Create a faceted bondwire from an existing true surface bondwire.

        Parameters
        ----------
        assignment : str
            Name of the bondwire to replace.
        direction : list
            List of the ``[x, y, z]`` coordinates for the axis direction
            of the bondwire. For example, ``[0, 1, 2]``.
        min_size : float
            Minimum size of the subsegment of the new polyline. The default is ``0.2``.
        number_of_segments : int, optional
            Number of segments. The default is ``8``.

        Returns
        -------
        str
            Name of the bondwire created.
        """
        ...
    
    @pyaedt_function_handler()
    def get_entitylist_id(self, name):
        """Retrieve the ID of an entity list.

        Parameters
        ----------
        name : str
            Name of the entity list.

        Returns
        -------
        int
            ID of the entity list.

        References
        ----------
        >>> oEditor.GetEntityListIDByName
        """
        ...
    
    @pyaedt_function_handler(externalobjects="assignment")
    def create_outer_facelist(self, assignment, name=...): # -> Literal[True]:
        """Create a face list from a list of outer objects.

        Parameters
        ----------
        assignment : list
            List of outer objects.
        name : str, optional
            Name of the new list. The default is ``"outer_faces"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(diellist="tool_parts", metallist="blank_parts")
    def explicitly_subtract(self, tool_parts, blank_parts): # -> Literal[True]:
        """Explicitly subtract all elements in a SolveInside list and a SolveSurface list.

        Parameters
        ----------
        tool_parts : list
            List of dielectrics.
        blank_parts : list
            List of metals.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Subtract
        >>> oEditor.PurgeHistory
        """
        ...
    
    @pyaedt_function_handler(port_sheets="assignment")
    def find_port_faces(self, assignment): # -> list[Any]:
        """Find the vacuums given a list of input sheets.

        Starting from a list of input sheets, this method creates a list of output sheets
        that represent the blank parts (vacuums) and the tool parts of all the intersections
        of solids on the sheets. After a vacuum on a sheet is found, a port can be
        created on it.

        Parameters
        ----------
        assignment : list
            List of input sheets names.

        Returns
        -------
        List
            List of output sheets (`2x len(port_sheets)`).

        """
        ...
    
    @pyaedt_function_handler()
    def get_line_ids(self): # -> dict[Any, Any]:
        """Create a dictionary of object IDs for the lines in the design with the line name as the key."""
        ...
    
    @pyaedt_function_handler()
    def get_bounding_dimension(self): # -> list[Any]:
        """Retrieve the x, y and z size of the bounding box for the model.

        This method is called without arguments.

        Returns
        -------
        list
            List of three float values representing the bounding box dimensions
            in the form ``[dim_x, dim_y, dim_z]``.

        References
        ----------
        >>> oEditor.GetModelBoundingBox
        """
        ...
    
    @pyaedt_function_handler(edge_id="assignment")
    def get_object_name_from_edge_id(self, assignment): # -> Literal[False]:
        """Retrieve the object name for a predefined edge ID.

        Parameters
        ----------
        assignment : int
            ID of the edge.

        Returns
        -------
        str
            Name of the edge if it exists, ``False`` otherwise.

        References
        ----------
        >>> oEditor.GetEdgeIDsFromObject
        """
        ...
    
    @pyaedt_function_handler()
    def get_solving_volume(self): # -> str:
        """Generate a mesh for a setup.

        Returns
        -------
        int
            ``1`` when successful, ``0`` when failed.

        References
        ----------
        >>> oEditor.GetModelBoundingBox
        """
        ...
    
    @pyaedt_function_handler(txtfilter="text_filter")
    def vertex_data_of_lines(self, text_filter=...): # -> dict[Any, Any]:
        """Generate a dictionary of line vertex data for all lines contained within the design.

        Parameters
        ----------
        text_filter : str, optional
            Text string for filtering. The default is ``None``. When a text string is specified,
            line data is generated only if this text string is contained within the line name.

        Returns
        -------
        dict
            Dictionary of the line name with a list of vertex positions in either 2D or 3D.

        """
        ...
    
    @pyaedt_function_handler(sLineName="assignment")
    def get_vertices_of_line(self, assignment): # -> list[Any]:
        """Generate a list of vertex positions for a line object from AEDT in model units.

        Parameters
        ----------
        assignment : str
            Name of the line object in AEDT.

        Returns
        -------
        list
            List of the ``[x, y, (z)]`` coordinates for the 2D or 3D line object.

        References
        ----------
        >>> oEditor.GetVertexIDsFromObject
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment_to_export", removed_objects="assignment_to_remove", fileName="file_name", filePath="file_path", fileFormat="file_format")
    def export_3d_model(self, file_name=..., file_path=..., file_format=..., assignment_to_export=..., assignment_to_remove=..., major_version=..., minor_version=...): # -> Literal[True]:
        """Export the 3D model.

        Parameters
        ----------
        file_name : str, optional
            Name of the file.
        file_path : str, optional
            Path for the file.
        file_format : str, optional
            Format of the file. The default is ``".step"``.
        assignment_to_export : list, optional
            List of objects to export. The default is ``None``.
        assignment_to_remove : list, optional
            List of objects to remove. The default is ``None``.
        major_version : int, optional
            File format major version. The default is -1.
        minor_version : int, optional
            File format major version. The default is -1.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Export
        """
        ...
    
    @pyaedt_function_handler(filename="input_file")
    def import_3d_cad(self, input_file, healing=..., refresh_all_ids=..., import_materials=..., create_lightweigth_part=..., group_by_assembly=..., create_group=..., separate_disjoints_lumped_object=..., import_free_surfaces=..., point_coicidence_tolerance=..., reduce_stl=..., reduce_percentage=..., reduce_error=..., merge_planar_faces=..., merge_angle=...): # -> Literal[True]:
        """Import a CAD model.

        Parameters
        ----------
        input_file : str
            Full path and name of the CAD file.
        healing : bool, optional
            Whether to perform healing. The default is ``False``, in which
            case healing is not performed.
        refresh_all_ids : bool, optional
            Whether to refresh all IDs after the CAD file is loaded. The
            default is ``True``. Refreshing IDs can take a lot of time in
            a big project.
        import_materials : bool optional
            Either to import material names from the file or not if presents.
        create_lightweigth_part : bool ,optional
            Either to import lightweight or not.
        group_by_assembly : bool, optional
            Either import by sub-assembly or individual parts. The default is ``False``.
        create_group : bool, optional
            Either to create a new group of imported objects. The default is ``True``.
        separate_disjoints_lumped_object : bool, optional
            Either to automatically separate disjoint parts. The default is ``False``.
        import_free_surfaces : bool, optional
            Either to import free surfaces parts. The default is ``False``.
        point_coicidence_tolerance : float, optional
            Tolerance on point. Default is ``1e-6``.
        reduce_stl : bool, optional
            Whether to reduce the stl file on import or not. Default is ``True``.
        reduce_percentage : int, optional
            Stl reduce percentage. Default is  ``0``.
        reduce_error : int, optional
            Stl error percentage during reduce operation. Default is  ``0``.
        merge_planar_faces : bool, optional
            Stl automatic planar face merge during import. Default is ``True``.
        merge_angle : float, optional
            Stl import angle in radians for which faces will be considered planar. Default is ``2e-2``.

        Returns
        -------
         bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Import
        """
        ...
    
    @pyaedt_function_handler(SCFile="input_file")
    def import_spaceclaim_document(self, input_file): # -> Literal[True]:
        """Import a SpaceClaim document.

        Parameters
        ----------
        input_file :
            Full path and name of the SpaceClaim file.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateUserDefinedModel
        """
        ...
    
    def import_discovery_model(self, input_file): # -> bool:
        """Import a Discovery file.

        Parameters
        ----------
        input_file :
            Full path and name of the Discovery file.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateUserDefinedModel
        """
        ...
    
    @pyaedt_function_handler(input_dict="primitives")
    def import_primitives_from_file(self, input_file=..., primitives=...): # -> list[Any] | Literal[False]:
        """Import and create primitives from a JSON file or dictionary of properties.

        Parameters
        ----------
        input_file : str, optional
            Path to a JSON file containing all primitives to import. It can be used in alternative to ``parameters``.
        primitives : dict, optional
            Dictionary containing all primitives to import. It can be used in alternative to ``input_file``.

        Returns
        -------
        list
            List of created primitives.

        Examples
        --------
        >>> from ansys.aedt.core import Icepak
        >>> aedtapp = Icepak()
        >>> aedtapp.modeler.import_primitives_from_file(r"C:\\temp\\primitives.json")
        """
        ...
    
    @pyaedt_function_handler()
    def modeler_variable(self, value): # -> str:
        """Modeler variable.

        Parameters
        ----------
        value :


        Returns
        -------

        """
        ...
    
    @pyaedt_function_handler()
    def break_spaceclaim_connection(self): # -> Literal[True]:
        """Disconnect from the running SpaceClaim instance.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.BreakUDMConnection
        """
        ...
    
    @pyaedt_function_handler(SpaceClaimFile="input_file")
    def load_scdm_in_hfss(self, input_file): # -> Literal[True]:
        """Load a SpaceClaim file in HFSS.

        Parameters
        ----------
        input_file : str
            Full path and name of the SpaceClaim file.


        Returns
        -------
         bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateUserDefinedModel
        >>> oEditor.BreakUDMConnection
        """
        ...
    
    @pyaedt_function_handler(mats="filter_materials")
    def get_faces_from_materials(self, filter_materials): # -> list[Any]:
        """Select all outer faces given a list of materials.

        Parameters
        ----------
        filter_materials : list
            List of materials to include in the search for outer
            faces.

        Returns
        -------
        list
            List of all outer faces of the specified materials.

        References
        ----------
        >>> oEditor.GetObjectsByMaterial
        >>> oEditor.GetFaceIDs
        """
        ...
    
    @pyaedt_function_handler(obj_list="assignment")
    def scale(self, assignment, x=..., y=..., z=...): # -> Literal[True]:
        """Scale a list of objects.

        Parameters
        ----------
        assignment : list
            List of objects IDs or names.
        x : float, optional
            Scale factor for X.
        y : float, optional
            Scale factor for Y.
        z : float, optional
            Scale factor for Z.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Scale
        """
        ...
    
    @pyaedt_function_handler(elements="assignment")
    def select_allfaces_fromobjects(self, assignment): # -> list[Any]:
        """Select all outer faces given a list of objects.

        Parameters
        ----------
        assignment : list
            List of objects to include in the search for outer faces.

        Returns
        -------
        List
            List of outer faces in the given list of objects.

        References
        ----------
        >>> oEditor.GetFaceIDs
        """
        ...
    
    @pyaedt_function_handler()
    def setunassigned_mats(self): # -> Literal[True]:
        """Find unassagned objects and set them to non-model.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.SetPropertyValue
        """
        ...
    
    @pyaedt_function_handler(inputlist="assignment", internalExtr="extrude_internally", internalvalue="internal_extrusion")
    def automatic_thicken_sheets(self, assignment, value, extrude_internally=..., internal_extrusion=...): # -> Literal[True]:
        """Create thickened sheets for a list of input faces.

        This method automatically checks the direction in which to thicken the sheets.

        Parameters
        ----------
        assignment : list
            List of faces.
        value : float
            Value in millimeters to thicken the sheets.
        extrude_internally : bool, optional
            Whether to extrude sheets internally. The default is ``True``.
        internal_extrusion : float, optional
            Value in millimeters to thicken the sheets internally (vgoing into the model).
            The default is ``1``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ThickenSheet
        """
        ...
    
    @pyaedt_function_handler(faces="assignment")
    def move_face(self, assignment, offset=...): # -> Literal[True]:
        """Move an input face or a list of input faces of a specific object.

        This method moves a face or a list of faces which belong to the same solid.

        Parameters
        ----------
        assignment : list
            List[int] or list[:class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`] object or mixed.
        offset : float, optional
             Offset to apply in model units. The default is ``1.0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.MoveFaces

        """
        ...
    
    @pyaedt_function_handler(edges="assignment")
    def move_edge(self, assignment, offset=...): # -> Literal[True]:
        """Move an input edge or a list of input edges of a specific object.

        This method moves an edge or a list of edges which belong to the same solid.

        Parameters
        ----------
        assignment : list
            List of Edge ID or list[:class:`ansys.aedt.core.modeler.cad.elements_3d.EdgePrimitive`] object or mixed.
        offset : float, optional
             Offset to apply in model units. The default is ``1.0``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.MoveEdges

        """
        ...
    
    @pyaedt_function_handler()
    def create_group(self, objects=..., components=..., groups=..., group_name=...): # -> str:
        """Group objects or groups into one group.

        At least one between ``objects``, ``components``, ``groups`` has to be defined.

        Parameters
        ----------
        objects : list, optional
            List of objects. The default is ``None``, in which case a group
            with all objects is created.
        components : list, optional
            List of 3d components to group. The default is ``None``.
        groups : list, optional
            List of groups. The default is ``None``.
        group_name : str, optional
            Name of the new group. The default is ``None``.
            It is not possible to choose the name but a name is
            assigned automatically.

        Returns
        -------
        str
           Name assigned to the new group.

        References
        ----------
        >>> oEditor.CreateGroup
        """
        ...
    
    @pyaedt_function_handler()
    def ungroup(self, groups): # -> Literal[True]:
        """Ungroup one or more groups.

        Parameters
        ----------
        groups : list
            List of group names.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Ungroup
        """
        ...
    
    @pyaedt_function_handler()
    def flatten_assembly(self): # -> Literal[True]:
        """Flatten the assembly, removing all group trees.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.FlattenGroup
        """
        ...
    
    @pyaedt_function_handler(sheet_name="sheet", object_name="object")
    def wrap_sheet(self, sheet, object, imprinted=...): # -> bool:
        """Execute the sheet wrapping around an object.

        If wrapping produces an unclassified operation it will be reverted.

        Parameters
        ----------
        sheet : str, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Sheet name or sheet object.
        object : str, :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Object name or solid object.
        imprinted : bool, optional
            Either if imprint or not over the sheet. Default is ``False``.

        Returns
        -------
        bool
            Command execution status.
        """
        ...
    
    @pyaedt_function_handler(input_objects_list="assignment")
    def heal_objects(self, assignment, auto_heal=..., tolerant_stitch=..., simplify_geometry=..., tighten_gaps=..., heal_to_solid=..., stop_after_first_stitch_error=..., max_stitch_tolerance=..., explode_and_stitch=..., geometry_simplification_tolerance=..., maximum_generated_radius=..., simplify_type=..., tighten_gaps_width=..., remove_silver_faces=..., remove_small_edges=..., remove_small_faces=..., silver_face_tolerance=..., small_edge_tolerance=..., small_face_area_tolerance=..., bounding_box_scale_factor=..., remove_holes=..., remove_chamfers=..., remove_blends=..., hole_radius_tolerance=..., chamfer_width_tolerance=..., blend_radius_tolerance=..., allowable_surface_area_change=..., allowable_volume_change=...): # -> bool:
        """Repair invalid geometry entities for the selected objects within the specified tolerance settings.

        Parameters
        ----------
        assignment : str
            List of object names to analyze.
        auto_heal : bool, optional
            Auto heal option. Default value is ``True``.
        tolerant_stitch : bool, optional
            Tolerant stitch for manual healing. The default is ``True``.
        simplify_geometry : bool, optional
            Simplify geometry for manual healing. The default is ``True``.
        tighten_gaps : bool, optional
            Tighten gaps for manual healing. The default is ``True``.
        heal_to_solid : bool, optional
            Heal to solid for manual healing. The default is ``False``.
        stop_after_first_stitch_error : bool, optional
            Stop after first stitch error for manual healing. The default is ``False``.
        max_stitch_tolerance : float, str, optional
            Max stitch tolerance for manual healing. The default is ``0.001``.
        explode_and_stitch : bool, optional
            Explode and stitch for manual healing. The default is ``True``.
        geometry_simplification_tolerance : float, str, optional
            Geometry simplification tolerance for manual healing in mm. The default is ``1``.
        maximum_generated_radius : float, str, optional
            Maximum generated radius for manual healing in mm. The default is ``1``.
        simplify_type : int, optional
            Simplify type for manual healing. The default is ``0`` which refers to ``Curves``.
            Other available values are ``1`` for ``Surfaces`` and ``2`` for ``Both``.
        tighten_gaps_width : float, str, optional
            Tighten gaps width for manual healing in mm. The default is ``0.00001``.
        remove_silver_faces : bool, optional
            Remove silver faces for manual healing. The default is ``True``.
        remove_small_edges : bool, optional
            Remove small edges faces for manual healing. The default is ``True``.
        remove_small_faces : bool, optional
            Remove small faces for manual healing. The default is ``True``.
        silver_face_tolerance : float, str, optional
            Silver face tolerance for manual healing in mm. The default is ``1``.
        small_edge_tolerance : float, str, optional
            Silver face tolerance for manual healing in mm. The default is ``1``.
        small_face_area_tolerance : float, str, optional
            Silver face tolerance for manual healing in mm^2. The default is ``1``.
        bounding_box_scale_factor : int, optional
            Bounding box scaling factor for manual healing. The default is ``0``.
        remove_holes : bool, optional
            Remove holes for manual healing. The default is ``True``.
        remove_chamfers : bool, optional
            Remove chamfers for manual healing. The default is``True``.
        remove_blends : bool, optional
            Remove blends for manual healing. The default is ``True``.
        hole_radius_tolerance : float, str, optional
            Hole radius tolerance for manual healing in mm. The default is ``1``.
        chamfer_width_tolerance : float, str, optional
            Chamfer width tolerance for manual healing in mm. The default is ``1``.
        blend_radius_tolerance : float, str, optional
            Blend radius tolerance for manual healing in mm. The default is ``1``.
        allowable_surface_area_change : float, str, optional
            Allowable surface area for manual healing in mm. The default is ``1``.
        allowable_volume_change : float, str, optional
            Allowable volume change for manual healing in mm. The default is ``1``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(input_objects_list="assignment")
    def simplify_objects(self, assignment, simplify_type=..., extrusion_axis=..., clean_up=..., allow_splitting=..., separate_bodies=..., clone_body=..., generate_primitive_history=..., interior_points_on_arc=..., length_threshold_percentage=..., create_group_for_new_objects=...): # -> bool:
        """Simplify command to converts complex objects into simpler primitives which are easy to mesh and solve.

        Parameters
        ----------
        assignment : str
            List of object names to simplify.
        simplify_type : str, optional
            Simplify type. The default is ``"Polygon Fit"``. Options are
            ``"Bounding Box"``, ``"Polygon Fit"``, and ``"Primitive Fit"`.
        extrusion_axis : str, optional
            Extrusion axis. The default is ``"Auto"``.
            Options are ``"Auto"``, ``"X"``, ``"Y"``, and ``"Z"``.
        clean_up : bool, optional
            Whether to clean up. The default is ``True``.
        allow_splitting : bool, optional
            Whether to allow splitting. The default is ``True``.
        separate_bodies : bool, optional
            Whether to separate bodies. The default is ``True``.
        clone_body : bool, optional
            Whether to clone the body. The default is ``True``.
        generate_primitive_history : bool, optional
            Whether to generate primitive history. The default is ``False``.
            If ``True``, the history for the selected objects is purged.
            ```
        interior_points_on_arc : float, optional
            Number points on curve. The default is ``5``.
        length_threshold_percentage : float, optional
            Length threshold percentage. The default is ``25``.
        create_group_for_new_objects : bool, optional
            Create group for new objects. The default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(id="assignment")
    def get_face_by_id(self, assignment): # -> Literal[False]:
        """Get the face object given its ID.

        Parameters
        ----------
        assignment : int
            ID of the face to retrieve.

        Returns
        -------
        modeler.cad.elements_3d.FacePrimitive
            Face object.

        """
        ...
    
    @pyaedt_function_handler()
    def create_point(self, position, name=..., color=...): # -> Point | Plane | Object3d:
        """Create a point.

        Parameters
        ----------
        position : list
            List of ``[x, y, z]`` coordinates. Note, The list can be empty or contain less than 3 elements.
        name : str, optional
            Name of the point. The default is ``None``, in which case the
            default name is assigned.
        color : str, optional
            String exposing 3 int values such as "(value1 value2 value3)". Default value is ``"(143 175 143)"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.Point`
            Point object.

        References
        ----------
        >>> oEditor.CreateBox

        Examples
        --------

        >>> from ansys.aedt.core import hfss
        >>> hfss = Hfss()
        >>> point_object = hfss.modeler.primivites.create_point([0, 0, 0], name="mypoint")

        """
        ...
    
    @pyaedt_function_handler()
    def create_plane(self, name=..., plane_base_x=..., plane_base_y=..., plane_base_z=..., plane_normal_x=..., plane_normal_y=..., plane_normal_z=..., color=...): # -> Point | Plane | Object3d:
        """Create a plane.

        Parameters
        ----------
        name : str, optional
            Name of the plane. The default is ``None``, in which case the
            default name is assigned.
        plane_base_x : str
            X coordinate of the plane base. The default value is ``"0mm"``.
        plane_base_y : str
            Y coordinate of the plane base. The default value is ``"0mm"``.
        plane_base_z : str
            Z coordinate of the plane base. The default value is ``"0mm"``.
        plane_normal_x : str
            X coordinate of the normal plane. The default value is ``"0mm"``.
        plane_normal_y : str
            Y coordinate of the normal plane. The default value is ``"0mm"``.
        plane_normal_z : str
            Z coordinate of the normal plane. The default value is ``"0mm"``.
        color : str, optional
            String exposing the three integer values for the color of the plane. The
            default value is ``"(143 175 143)"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitives.Plane`
            Planes object.

        References
        ----------
        >>> oEditor.CreateBox

        Examples
        --------
        Create a new plane.
        >>> from ansys.aedt.core import hfss
        >>> hfss = Hfss()
        >>> plane_object = hfss.modeler.primivites.create_plane(
        ...     plane_base_y="-0.8mm", plane_normal_x="-0.7mm", name="myplane"
        ... )

        """
        ...
    
    @pyaedt_function_handler(obj="assignment")
    def update_object(self, assignment): # -> Point | Plane | Object3d:
        """Update any :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` derivatives
        that have potentially been modified by a modeler operation.

        Parameters
        ----------
        assignment : int, str, or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Object to be updated after a modeler operation.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
           Updated 3D object.

        """
        ...
    
    @pyaedt_function_handler()
    def update_geometry_property(self, assignment, name=..., value=...): # -> bool:
        """Update property of assigned geometry objects.

        Parameters
        ----------
        assignment : str, or list
            Object name or list of object names to be updated.
        name : str, optional
            Property name to change. The default is ``None``, in which case no property is updated.
            Available options are: ``"display_wireframe"``, `"material"``, and `"solve_inside"``.
        value : bool or str, optional
            Property value. The default is ``None`` in which case
            no value is assigned.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def value_in_object_units(self, value): # -> list[Any]:
        """Convert one or more strings for numerical lengths to floating point values.

        Parameters
        ----------
        value : str or list of str
            One or more strings for numerical lengths. For example, ``"10mm"``
            or ``["10mm", "12mm", "14mm"]``. When a list is given, the entire
            list is converted.

        Returns
        -------
        List of floats
            Defined in model units :attr:`ansys.aedt.core.modeler.model_units`.

        """
        ...
    
    @pyaedt_function_handler(obj_to_check="assignment")
    def does_object_exists(self, assignment): # -> bool:
        """Check to see if an object exists.

        Parameters
        ----------
        assignment : str, int
            Object name or object ID.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(parts="assignment", region_name="name")
    def create_subregion(self, padding_values, padding_types, assignment, name=...): # -> Point | Plane | Object3d:
        """Create a subregion.

        Parameters
        ----------
        padding_values : float, str, list of floats or list of str
            Padding values to apply. If a list is not provided, the same
            value is applied to all padding directions. If a list of floats
            or strings is provided, the values are
            interpreted as padding for ``["+X", "-X", "+Y", "-Y", "+Z", "-Z"]``.
        padding_types : str or list of str, optional
            Padding definition. The default is ``"Percentage Offset"``.
            Options are ``"Absolute Offset"``,
            ``"Absolute Position"``, ``"Percentage Offset"``, and
            ``"Transverse Percentage Offset"``. When using a list,
            different padding types can be provided for different
           directions.
        assignment : list of str
            One or more names of the parts to include in the subregion.
        name : str, optional
            Region name. The default is ``None``, in which case the name
            is generated automatically.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Subregion object.

        References
        ----------
        >>> oEditor.CreateRegion
        """
        ...
    
    def reassign_subregion(self, region, parts): # -> bool:
        """Modify parts in the subregion.

        Parameters
        ----------
        region : :class:`ansys.aedt.core.modules.mesh_icepak.SubRegion`
            Subregion to modify.
        parts : list of str
            One or more names of the parts to include in the subregion.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.CreateRegion
        """
        ...
    
    @pyaedt_function_handler(region_name="name")
    def create_region(self, pad_value=..., pad_type=..., name=..., **kwarg): # -> Point | Plane | Object3d | Literal[False]:
        """Create an air region.

        Parameters
        ----------
        pad_value : float, str, list of floats or list of str, optional
            Padding values to apply. If a list is not provided, the same
            value is applied to all padding directions. If a list of floats
            or strings is provided, the values are
            interpreted as padding for ``["+X", "-X", "+Y", "-Y", "+Z", "-Z"]``.
        pad_type : str, optional
            Padding definition. The default is ``"Percentage Offset"``.
            Options are ``"Absolute Offset"``,
            ``"Absolute Position"``, ``"Percentage Offset"``, and
            ``"Transverse Percentage Offset"``. When using a list,
            different padding types can be provided for different
           directions.
        name : str, optional
            Region name. The default is ``None``, in which case the name
            is generated automatically.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Region object.

        References
        ----------
        >>> oEditor.CreateRegion
        """
        ...
    
    @pyaedt_function_handler(edge="assignment")
    def create_object_from_edge(self, assignment, non_model=...): # -> list[Any] | None:
        """Create an object from one or multiple edges.

        Parameters
        ----------
        assignment : list, int or :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`
            Face ID or :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive` object or Face List.
        non_model : bool, optional
            Either if create the new object as model or non-model. The default is `False`.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or list
            3D objects.

        References
        ----------
        >>> oEditor.CreateObjectFromFaces
        """
        ...
    
    @pyaedt_function_handler(face="assignment")
    def create_object_from_face(self, assignment, non_model=...): # -> list[Any] | None:
        """Create an object from one or multiple face.

        Parameters
        ----------
        assignment : list, int or :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`
            Face ID or :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive` object or Face List.
        non_model : bool, optional
            Either if create the new object as model or non-model. Default is `False`.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or list
            3D objects.

        References
        ----------
        >>> oEditor.CreateObjectFromFaces
        """
        ...
    
    @pyaedt_function_handler()
    def polyline_segment(self, type, num_seg=..., num_points=..., arc_angle=..., arc_center=..., arc_plane=...): # -> PolylineSegment:
        """New segment of a polyline.

        Parameters
        ----------
        type : str
            Type of the object. Choices are ``"Line"``, ``"Arc"``, ``"Spline"``,
            and ``"AngularArc"``.
        num_seg : int, optional
            Number of segments for the types ``"Arc"``, ``"Spline"``, and
            ``"AngularArc"``.  The default is ``0``. For the type
            ``Line``, this parameter is ignored.
        num_points : int, optional
            Number of control points for the type ``Spline``. For other
            types, this parameter
            is defined automatically.
        arc_angle : float or str, optional
            Sweep angle in radians or a valid value string. For example,
            ``"35deg"`` or ``"Specific
            to type AngularArc"``.
        arc_center : list or str, optional
            List of values in model units or a valid value string. For
            example, a list of ``[x, y, z]`` coordinates or ``"Specific to
            type AngularArc"``.
        arc_plane : str, int optional
            Plane in which the arc sweep is performed in the active
            coordinate system ``"XY"``, ``"YZ"`` or ``"ZX"``. The default is
            ``None``, in which case the plane is determined automatically
            by the first coordinate for which the starting point and
            center point have the same value.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.polylines.PolylineSegment`
        """
        ...
    
    @pyaedt_function_handler(position_list="points", matname="material")
    def create_polyline(self, points, segment_type=..., cover_surface=..., close_surface=..., name=..., material=..., xsection_type=..., xsection_orient=..., xsection_width=..., xsection_topwidth=..., xsection_height=..., xsection_num_seg=..., xsection_bend_type=..., non_model=...): # -> Polyline:
        """Draw a polyline object in the 3D modeler.

        This method retrieves the
        :class:`ansys.aedt.core.modeler.cad.primitives.Polyline` object, which has
        additional methods for manipulating the polyline. For example,
        you can use
        :func:`ansys.aedt.core.modeler.cad.primitives.Polyline.insert_segment` to
        insert a segment or
        :attr:`ansys.aedt.core.modeler.cad.primitives.Polyline.id` to retrieve the
        ID of the polyline object.

        Parameters
        ----------
        points : list
            Array of positions of each point of the polyline.  A
            position is a list of 2D or 3D coordinates. Position
            coordinate values can be numbers or valid AEDT string
            expressions. For example, ``[0, 1, 2]``, ``["0mm", "5mm",
            "1mm"]``, or ``["x1", "y1", "z1"]``.
        segment_type : str or PolylineSegment or list, optional
            The default behavior is to connect all points as
            ``"Line"`` segments. The default is ``None``.
            Use a ``"PolylineSegment"``, for ``"Line"``, ``"Arc"``, ``"Spline"``,
            or ``"AngularArc"``.
            A list of segment types (str or :class:`ansys.aedt.core.modeler.cad.primitives.PolylineSegment`) is
            valid for a compound polyline.
        cover_surface : bool, optional
            The default is ``False``.
        close_surface : bool, optional
            The default is ``False``, which automatically joins the
            starting and ending points.
        name : str, optional
            Name of the polyline. The default is ``None``.
        material : str, optional
            Name of the material. The default is ``None``, in which case the
            default material is assigned.
        xsection_type : str, optional
            Type of the cross-section. Options are ``"Line"``, ``"Circle"``,
            ``"Rectangle"``, and ``"Isosceles Trapezoid"``. The default is ``None``.
        xsection_orient : str, optional
            Direction of the normal vector to the width of the cross-section.
            Options are ``"X"``, ``"Y"``, ``"Z"``, and ``"Auto"``. The default is
            ``None``, which sets the direction to ``"Auto"``.
        xsection_width : float or str, optional
            Width or diameter of the cross-section for all  types. The
            default is ``1``.
        xsection_topwidth : float or str, optional
            Top width of the cross-section for type ``"Isosceles Trapezoid"`` only.
            The default is ``1``.
        xsection_height : float or str
            Height of the cross-section for type ``"Rectangle"`` or ``"Isosceles
            Trapezoid"`` only. The default is ``1``.
        xsection_num_seg : int, optional
            Number of segments in the cross-section surface for type ``"Circle"``,
            ``"Rectangle"``, or ``"Isosceles Trapezoid"``. The default is ``0``. The
            value must be ``0`` or greater than ``2``.
        xsection_bend_type : str, optional
            Type of the bend for the cross-section. The default is
            ``None``, in which case the bend type is set to
            ``"Corner"``. For the type ``"Circle"``, the bend type
            should be set to ``"Curved"``.
        non_model : bool, optional
            Either if the polyline will be created as model or unmodel object.

        Returns
        -------
        ansys.aedt.core.modeler.polylines.Polyline
           Polyline object.

        References
        ----------
        >>> oEditor.CreatePolyline

        Examples
        --------
        Set up the desktop environment.

        >>> from ansys.aedt.core.modeler.cad.polylines import PolylineSegment
        >>> from ansys.aedt.core import Desktop
        >>> from ansys.aedt.core import Maxwell3d
        >>> desktop = Desktop(version="2025.1", new_desktop=False)
        >>> m3d = Maxwell3d()
        >>> m3d.modeler.model_units = "mm"

        Define some test data points.

        >>> test_points = [
        ...     ["0mm", "0mm", "0mm"],
        ...     ["100mm", "20mm", "0mm"],
        ...     ["71mm", "71mm", "0mm"],
        ...     ["0mm", "100mm", "0mm"],
        ... ]

        The default behavior assumes that all points are to be
        connected by line segments.  Optionally specify the name.

        >>> P1 = m3d.modeler.create_polyline(test_points, name="PL_line_segments")

        Specify that the first segment is a line and the last three
        points define a three-point arc.

        >>> P2 = m3d.modeler.create_polyline(test_points, segment_type=["Line", "Arc"], name="PL_line_plus_arc")

        Redraw the 3-point arc alone from the last three points and
        additionally specify five segments using ``PolylineSegment``.

        >>> P3 = m3d.modeler.create_polyline(
        ...     test_points[1:], segment_type=PolylineSegment(segment_type="Arc", num_seg=7), name="PL_segmented_arc"
        ... )

        Specify that the four points form a spline and add a circular
        cross-section with a diameter of 1 mm.

        >>> P4 = m3d.modeler.create_polyline(
        ...     test_points, segment_type="Spline", name="PL_spline", xsection_type="Circle", xsection_width="1mm"
        ... )

        Use the ``PolylineSegment`` object to specify more detail about
        the individual segments.  Create a center point arc starting
        from the position ``test_points[1]``, rotating about the
        center point position ``test_points[0]`` in the XY plane.

        >>> start_point = test_points[1]
        >>> center_point = test_points[0]
        >>> segment_def = PolylineSegment(
        ...     segment_type="AngularArc", arc_center=center_point, arc_angle="90deg", arc_plane="XY"
        ... )
        >>> m3d.modeler.create_polyline(start_point, segment_type=segment_def, name="PL_center_point_arc")

        Create a spline using a list of variables for the coordinates of the points.

        >>> x0, y0, z0 = "0", "0", "1"
        >>> x1, y1, z1 = "1", "3", "1"
        >>> x2, y2, z2 = "2", "2", "1"
        >>> P5 = m3d.modeler.create_polyline(
        ...     points=[[x0, y0, z0], [x1, y1, z1], [x2, y2, z2]], segment_type="Spline", name="polyline_with_variables"
        ... )

        Create a closed geometry by specifying in ``segment_type`` a list of ``PolylineSegments`` including
        ``AngularArc`` segments.

        >>> test_points_1 = [[0.4, 0, 0], [-0.4, -0.6, 0], [0.4, 0, 0]]
        >>> P6 = m3d.modeler.create_polyline(
        ...     points=test_points_1,
        ...     segment_type=[
        ...         PolylineSegment(
        ...             segment_type="AngularArc", arc_center=[0, 0, 0], arc_angle="180deg", arc_plane="XY"
        ...         ),
        ...         PolylineSegment(segment_type="Line"),
        ...         PolylineSegment(
        ...             segment_type="AngularArc", arc_center=[0, -0.6, 0], arc_angle="180deg", arc_plane="XY"
        ...         ),
        ...         PolylineSegment(segment_type="Line"),
        ...     ],
        ... )
        """
        ...
    
    @pyaedt_function_handler(face="assignment", poly_width="width")
    def create_spiral_on_face(self, assignment, width, filling_factor=...): # -> Polyline:
        """Create a Spiral Polyline inside a face.

        Parameters
        ----------
        assignment : int or str or :class:`ansys.aedt.core.modeler.cad.elements_3d.FacePrimitive`
        width : float
        filling_factor : float

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.elements_3d.Polyline`
        """
        ...
    
    @pyaedt_function_handler(object="assignment")
    def get_existing_polyline(self, assignment): # -> Polyline:
        """Retrieve a polyline object to manipulate it.

        Parameters
        ----------
        src_object : :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            An existing polyline object in the 3D Modeler.

        Returns
        -------
        Polyline
        """
        ...
    
    @pyaedt_function_handler(udp_dll_name="dll", udp_parameters_list="parameters", upd_library="library")
    def create_udp(self, dll, parameters, library=..., name=...): # -> Point | Plane | Object3d:
        """Create a user-defined primitive (UDP).

        Parameters
        ----------
        dll : str
            Name of the UDP DLL or Python file. The default for the file format
            is ``".dll"``.
        parameters :
            List of the UDP parameters.
        library : str, optional
            Name of the UDP library. The default is ``"syslib"``.
        name : str, optional
            Name of the component. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            UDP object created.

        References
        ----------
        >>> oEditor.CreateUserDefinedPart

        Examples
        --------
        >>> my_udp = self.aedtapp.modeler.create_udp(
        ...     dll="RMxprt/ClawPoleCore", parameters=my_udpPairs, library="syslib"
        ... )
        <class 'ansys.aedt.core.modeler.cad.object_3d.Object3d'>

        """
        ...
    
    @pyaedt_function_handler(object_name="assignment", operation_name="operation", udp_parameters_list="parameters")
    def update_udp(self, assignment, operation, parameters): # -> Literal[True]:
        """Update an existing geometrical object that was originally created using a user-defined primitive (UDP).

        Parameters
        ----------
        assignment : str
            Name of the object to update.
        operation : str
            Name of the operation used to create the object.
        parameters : list
            List of the UDP parameters to update and their value.

        Returns
        -------
        bool
            ``True`` when successful.

        References
        ----------
        >>> oEditor.CreateUserDefinedPart

        Examples
        --------
        >>> self.aedtapp.modeler.update_udp(
        ...     assignment="ClawPoleCore",
        ...     operation="CreateUserDefinedPart",
        ...     parameters=[["Length", "110mm"], ["DiaGap", "125mm"]],
        ... )
        True

        """
        ...
    
    @pyaedt_function_handler(objects="assignment")
    def delete(self, assignment=...): # -> bool:
        """Delete objects or groups.

        Parameters
        ----------
        assignment : list, optional
            List of objects or group names. The default is ``None``,
            in which case all objects are deleted.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Delete

        """
        ...
    
    @pyaedt_function_handler()
    def delete_objects_containing(self, contained_string, case_sensitive=...): # -> Literal[True]:
        """Delete all objects with a given prefix.

        Parameters
        ----------
        contained_string : str
            Prefix in the names of the objects to delete.
        case_sensitive : bool, optional
            Whether the prefix is case sensitive. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Delete

        """
        ...
    
    @pyaedt_function_handler(objname="assignment")
    def get_obj_id(self, assignment): # -> None:
        """Return the object ID from an object name.

        Parameters
        ----------
        assignment : str
            Name of the object.

        Returns
        -------
        int
            Object ID.

        """
        ...
    
    @pyaedt_function_handler(objname="assignment")
    def get_object_from_name(self, assignment): # -> Object3d | Polyline | None:
        """Return the object from an object name.

        Parameters
        ----------
        assignment : str
            Name of the object.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object returned.

        """
        ...
    
    @pyaedt_function_handler(stringname="string_name")
    def get_objects_w_string(self, string_name, case_sensitive=...): # -> list[Any]:
        """Retrieve all objects with a given string in their names.

        Parameters
        ----------
        string_name : str
            String to search object names for.
        case_sensitive : bool, optional
            Whether the string is case-sensitive. The default is ``True``.

        Returns
        -------
        list
            List of object names with the given string.

        """
        ...
    
    @pyaedt_function_handler(start_obj="start_object", end_obj="end_object", port_direction="direction")
    def find_closest_edges(self, start_object, end_object, direction=...):
        """Retrieve the two closest edges that are not perpendicular for two objects.

        Parameters
        ----------
        start_object : str
            Name of the starting object.
        end_object : str
            Name of the ending object.
        direction : str, optional
            Direction of the port to which to give edges precedence when more than two couples
            are at the same distance. For example, for a coax or microstrip, precedence is given
            to the edges that are on the given axis direction, such as ``"XNeg"``. Options are
            ``"XNeg"``, ``"XPos"``, ``"YNeg"``, ``"YPos`"``, ``"ZNeg"``, and ``"ZPos"``.
            The default is ``0``.

        Returns
        -------
        list
            List with two edges if present.

        """
        ...
    
    @pyaedt_function_handler(edgelist="assignment", portonplane="port_on_plane", axisdir="axis", startobj="start_object", endobject="end_object")
    def get_equivalent_parallel_edges(self, assignment, port_on_plane=..., axis=..., start_object=..., end_object=...): # -> list[list[Any] | Any | None] | Literal[False] | None:
        """Create two new edges that are parallel and equal to the smallest edge given a parallel couple of edges.

        Parameters
        ----------
        assignment : list
            List of two parallel edges.
        port_on_plane : bool, optional
            Whether edges are to be on the plane orthogonal to the axis direction.
            The default is ``True``.
        axis : int, optional
            Axis direction. Choices are ``0`` through ``5``. The default is ``0``.
        start_object : str, optional
             Name of the starting object. The default is ``""``.
        end_object : str, optional
             Name of the ending object. The default is ``""``.

        Returns
        -------
        list
            List of two created edges.

        """
        ...
    
    @pyaedt_function_handler(partId="assignment")
    def get_object_faces(self, assignment): # -> list[int]:
        """Retrieve the face IDs of a given object ID or object name.

        Parameters
        ----------
        assignment : int or str
            Object ID or object name.

        Returns
        -------
        List
            List of faces IDs.

        References
        ----------
        >>> oEditor.GetFaceIDs

        """
        ...
    
    @pyaedt_function_handler(partId="assignment")
    def get_object_edges(self, assignment): # -> list[int]:
        """Retrieve the edge IDs of a given object ID or object name.

        Parameters
        ----------
        assignment : int or str
            Object ID or object name.

        Returns
        -------
        List
            List of edge IDs.

        References
        ----------
        >>> oEditor.GetEdgeIDsFromObject

        """
        ...
    
    @pyaedt_function_handler(partID="assignment")
    def get_face_edges(self, assignment): # -> list[int]:
        """Retrieve the edge IDs of a given face name or face ID.

        Parameters
        ----------
        assignment : int or str
            Object ID or object name.

        Returns
        -------
        List
            List of edge IDs.

        References
        ----------
        >>> oEditor.GetEdgeIDsFromFace

        """
        ...
    
    @pyaedt_function_handler(partID="assignment")
    def get_object_vertices(self, assignment): # -> list[int]:
        """Retrieve the vertex IDs of a given object name or object ID.

        Parameters
        ----------
        assignment : int or str
            Object ID or object name.

        Returns
        -------
        List
            List of vertex IDs.

        References
        ----------
        >>> oEditor.GetVertexIDsFromObject

        """
        ...
    
    @pyaedt_function_handler(face_id="assignment")
    def get_face_vertices(self, assignment): # -> list[int]:
        """Retrieve the vertex IDs of a given face ID or face name.

        Parameters
        ----------
        assignment : int or str
            Object ID or object name, which is available
            using the methods :func:`ansys.aedt.core.modeler.cad.primitives_3d.Primitives3D.get_object_vertices`
            or :func:`ansys.aedt.core.modeler.cad.primitives_2d.Primitives2D.get_object_vertices`.

        Returns
        -------
        List
            List of vertex IDs.

        References
        ----------
        >>> oEditor.GetVertexIDsFromFace

        """
        ...
    
    @pyaedt_function_handler(edgeID="assignment")
    def get_edge_length(self, assignment): # -> float | Literal[0, False]:
        """Get the length of an edge.

        Parameters
        ----------
        assignment : int
            ID of the edge.

        Returns
        -------
        type
            Edge length.

        """
        ...
    
    @pyaedt_function_handler(edgeID="assignment")
    def get_edge_vertices(self, assignment): # -> list[int]:
        """Retrieve the vertex IDs of a given edge ID or edge name.

        Parameters
        ----------
        assignment : int, str
            Object ID or object name, which is available using the
            methods :func:`ansys.aedt.core.modeler.cad.primitives_3d.Primitives3D.get_object_vertices`
            or :func:`ansys.aedt.core.modeler.cad.primitives_2d.Primitives2D.get_object_vertices`.

        Returns
        -------
        List
            List of vertex IDs.

        References
        ----------
        >>> oEditor.GetVertexIDsFromEdge

        """
        ...
    
    @pyaedt_function_handler(vertex_id="assignment")
    def get_vertex_position(self, assignment): # -> list[float]:
        """Retrieve a vector of vertex coordinates.

        Parameters
        ----------
        assignment : int or str
            ID or name of the vertex.

        Returns
        -------
        List
            List of ``[x, y, z]`` coordinates indicating the position.

        References
        ----------
        >>> oEditor.GetVertexPosition

        """
        ...
    
    @pyaedt_function_handler(face_id="assignment")
    def get_face_area(self, assignment):
        """Retrieve the area of a given face ID.

        Parameters
        ----------
        assignment : int
            ID of the face.

        Returns
        -------
        float
            Value for the face area.

        References
        ----------
        >>> oEditor.GetFaceArea

        """
        ...
    
    @pyaedt_function_handler(face_id="assignment")
    def get_face_center(self, assignment): # -> list[float] | Literal[False]:
        """Retrieve the center position for a given planar face ID.

        Parameters
        ----------
        assignment : int
            ID of the face.

        Returns
        -------
        List
            A list of ``[x, y, z]`` coordinates for the
            planar face center position.

        References
        ----------
        >>> oEditor.GetFaceCenter

        """
        ...
    
    @pyaedt_function_handler(sheet="assignment", axisdir="axis")
    def get_mid_points_on_dir(self, assignment, axis): # -> tuple[Any | list[Any], Any | list[Any]]:
        """Retrieve midpoints on a given axis direction.

        Parameters
        ----------
        assignment :

        axis : int
            Axis direction. Choices are ``0`` through ``5``.

        Returns
        -------
        type

        """
        ...
    
    @pyaedt_function_handler(partID="assignment")
    def get_edge_midpoint(self, assignment): # -> list[Any] | list[float] | None:
        """Retrieve the midpoint coordinates of a given edge ID or edge name.

        Parameters
        ----------
        assignment : int or str
            Object ID  or object name.

        Returns
        -------
        list
            List of midpoint coordinates. If the edge is not a segment with
            two vertices, an empty list is returned.
        """
        ...
    
    @pyaedt_function_handler()
    def get_bodynames_from_position(self, position, units=..., include_non_model=...): # -> list[Any]:
        """Retrieve the names of the objects that are in contact with a given point.

        Parameters
        ----------
        position : list
            List of ``[x, y, z]`` coordinates for the point.
        units : str, optional
            Units, such as ``"m"``. The default is ``None``, in which case the
            model units are used.
        include_non_model : bool, optional
            Either if include or not non model objects.

        Returns
        -------
        list
            List of object names.

        References
        ----------
        >>> oEditor.GetBodyNamesByPosition

        """
        ...
    
    @pyaedt_function_handler(obj_name="assignment")
    def get_edgeid_from_position(self, position, assignment=..., units=...): # -> int | None:
        """Get an edge ID from a position.

        Parameters
        ----------
        position : list
            List of ``[x, y, z]`` coordinates for the position.
        assignment : str, optional
            Name of the object. The default is ``None``, in which case all
            objects are searched.
        units : str, optional
            Units for the position, such as ``"m"``. The default is ``None``,
            in which case the model units are used.

        Returns
        -------
        type
            Edge ID of the first object touching this position.
        """
        ...
    
    @pyaedt_function_handler(vertexid="vertex", obj_name="assignment")
    def get_edgeids_from_vertexid(self, vertex, assignment): # -> list[Any]:
        """Retrieve edge IDs for a vertex ID.

        Parameters
        ----------
        vertex : int
            Vertex ID.
        assignment : str
            Name of the object.

        Returns
        -------
        List
            List of edge IDs for the vertex ID.

        References
        ----------
        >>> oEditor.GetEdgeIDsFromObject
        >>> oEditor.GetVertexIDsFromEdge

        """
        ...
    
    @pyaedt_function_handler(obj_name="assignment")
    def get_faceid_from_position(self, position, assignment=..., units=...): # -> None:
        """Retrieve a face ID from a position.

        Parameters
        ----------
        position : list
            List of ``[x, y, z]`` coordinates for the position.
        assignment : str, optional
            Name of the object. The default is ``None``, in which case all
            objects are searched.
        units : str, optional
            Units, such as ``"m"``. The default is ``None``, in which case the
            model units are used.

        Returns
        -------
        int
            Face ID of the first object touching this position.

        References
        ----------
        >>> oEditor.GetFaceByPosition

        """
        ...
    
    @pyaedt_function_handler(sheets="assignment", tol="tolerance")
    def get_edges_on_bounding_box(self, assignment, return_colinear=..., tolerance=...): # -> list[Any]:
        """Retrieve the edges of the sheets passed in the input that are lying on the bounding box.

        This method creates new lines for the detected edges and returns the IDs of these lines.
        If required, only colinear edges are returned.

        Parameters
        ----------
        assignment : int, str, or list
            ID or name for one or more sheets.
        return_colinear : bool, optional
            Whether to return only colinear edges. The default is ``True``.
            If ``False``, all edges on the bounding box are returned.
        tolerance : float, optional
            Geometric tolerance. The default is ``1e-6``.

        Returns
        -------
        list
            List of edge IDs lying on the bounding box.

        """
        ...
    
    @pyaedt_function_handler(sheet="assignment", XY_plane="xy_plane", YZ_plane="yz_plane", XZ_plane="xz_plane", tol="tolerance")
    def get_edges_for_circuit_port_from_sheet(self, assignment, xy_plane=..., yz_plane=..., xz_plane=..., allow_perpendicular=..., tolerance=...): # -> list[Any]:
        """Retrieve two edge IDs that are suitable for a circuit port from a sheet.

        One edge belongs to the sheet passed in the input, and the second edge
        is the closest edge's coplanar to the first edge (aligned to the XY, YZ,
        or XZ plane). This method creates new lines for the detected edges and returns
        the IDs of these lines.

        This method accepts one or more sheet objects as input,
        while the method :func:`Primitives.get_edges_for_circuit_port`
        accepts a face ID.

        Parameters
        ----------
        assignment : int, str, or list
            ID or name for one or more sheets.
        xy_plane : bool, optional
            Whether the edge's pair are to be on the XY plane.
            The default is ``True``.
        yz_plane : bool, optional
            Whether the edge's pair are to be on the YZ plane.
            The default is ``True``.
        xz_plane : bool, optional
            Whether the edge's pair are to be on the XZ plane.
            The default is ``True``.
        allow_perpendicular : bool, optional
            Whether the edge's pair are to be perpendicular.
            The default is ``False``.
        tolerance : float, optional
            Geometric tolerance. The default is ``1e-6``.

        Returns
        -------
        list
            List of edge IDs.

        """
        ...
    
    @pyaedt_function_handler(face_id="assignment", XY_plane="xy_plane", YZ_plane="yz_plane", XZ_plane="xz_plane", tol="tolerance")
    def get_edges_for_circuit_port(self, assignment, xy_plane=..., yz_plane=..., xz_plane=..., allow_perpendicular=..., tolerance=...): # -> list[Any]:
        """Retrieve two edge IDs suitable for the circuit port.

        One edge belongs to the face ID passed in the input, and the second edge
        is the closest edge's coplanar to the first edge (aligned to the XY, YZ,
        or XZ plane). This method creates new lines for the detected edges and returns
        the IDs of these lines.

        This method accepts a face ID in the input, while the `get_edges_for_circuit_port_from_port`
        method accepts one or more sheet objects.

        Parameters
        ----------
        assignment :
            ID of the face.
        xy_plane : bool, optional
            Whether the edge's pair are to be on the XY plane.
            The default is ``True``.
        yz_plane : bool, optional
            Whether the edge's pair are to be on the YZ plane.
            The default is ``True``.
        xz_plane : bool, optional
            Whether the edge's pair are to be on the XZ plane.
            The default is ``True``.
        allow_perpendicular : bool, optional
            Whether the edge's pair are to be perpendicular.
            The default is ``False``.
        tolerance : float, optional
            Geometric tolerance. The default is ``1e-6``.

        Returns
        -------
        list
            List of edge IDs.

        """
        ...
    
    @pyaedt_function_handler()
    def get_closest_edgeid_to_position(self, position, units=...): # -> int | None:
        """Get the edge ID closest to a given position.

        Parameters
        ----------
        position : list
            List of ``[x,y,z]`` coordinates for the position.
        units :
            Units for the position, such as ``"m"``. The default is ``None``, which means the model units are used.

        Returns
        -------
        int
            Edge ID of the edge closest to this position.

        """
        ...
    
    @pyaedt_function_handler(object_name="assignment")
    def convert_segments_to_line(self, assignment): # -> Literal[True]:
        """Convert a CreatePolyline list of segments to lines.

        This method applies to splines and 3-point arguments.

        Parameters
        ----------
        assignment : int, str, or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Specified for the object.

        Returns
        -------
        bool
            ``True`` if successful, ``False`` if it fails.

        References
        ----------
        >>> oEditor.ChangeProperty

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> aedtapp = Hfss()
        >>> edge_object = aedtapp.modeler.create_object_from_edge("my_edge")
        >>> aedtapp.modeler.generate_object_history(edge_object)
        >>> aedtapp.modeler.convert_segments_to_line(edge_object.name)

        """
        ...
    


class PrimitivesBuilder:
    """Create primitives from a JSON file or dictionary of properties.

    Parameters
    ----------
    app :
        Inherited parent object.
    input_file : str, optional
        Path to a JSON file containing primitive settings.
    input_dict : dict, optional
        Dictionary containing primitive settings.

    Returns
    -------
    :class:`ansys.aedt.core.modeler.cad.primitives.PrimitivesBuilder`
        Primitives builder object if successful.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.modeler.cad.primitives import PrimitivesBuilder
    >>> aedtapp = Hfss()
    >>> primitive_file = "primitives_file.json"
    >>> primitives_builder = PrimitivesBuilder(aedtapp, input_file=primitive_file)
    >>> primitives_builder.create(),,
    >>> aedtapp.release_desktop()
    """
    def __init__(self, app, input_file=..., input_dict=...) -> None:
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @pyaedt_function_handler()
    def create(self): # -> list[Any] | Literal[False]:
        """Create instances of defined primitives.

        Returns
        -------
        list
            List of instance names created.
        """
        ...
    
    @pyaedt_function_handler()
    def convert_units(self, values): # -> list[Any]:
        """Convert input values to default units.

        If a value has units, convert it to a numeric value with the default units.

        Parameters
        ----------
        values : list
            List of values.

        Returns
        -------
        list
            List of numeric values.
        """
        ...
    


