"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.modeler import Modeler
from ansys.aedt.core.modeler.cad.primitives_2d import Primitives2D

class ModelerRMxprt(Modeler):
    """Provides the Modeler RMxprt application interface.

    This class is inherited in the caller application and is accessible through the modeler variable
    object( eg. ``rmxprt.modeler``).

    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def oeditor(self):
        """oEditor Module.

        References
        ----------
        >>> oEditor = oDesign.SetActiveEditor("Machine")"""
        ...
    


class Modeler2D(Primitives2D):
    """Provides the Modeler 2D application interface.

    This class is inherited in the caller application and is accessible through the modeler variable
    object( eg. ``maxwell2d.modeler``).

    Examples
    --------
    >>> from ansys.aedt.core import Maxwell2d
    >>> app = Maxwell2d()
    >>> my_modeler = app.modeler
    """
    def __init__(self, application) -> None:
        ...
    
    def __get__(self, instance, owner): # -> Self:
        ...
    
    @property
    def primitives(self): # -> Self:
        """Primitives.

        .. deprecated:: 0.4.15
            No need to use primitives anymore. You can instantiate primitives methods directly from modeler instead.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitives_2d.Primitives2D`

        """
        ...
    
    @pyaedt_function_handler(object_name="assignment")
    def calculate_radius_2D(self, assignment, inner=...): # -> float | Literal[0]:
        """Calculate the extremity of an object in the radial direction.

        Parameters
        ----------
        assignment : str
            name of the object from which to calculate the radius.
        inner : bool, optional
            The default is ``False``.

        Returns
        -------
        float
            Radius value.

            .. note::
                If ``inner=True``, then the maximum is returned; otherwise,
                the minimum is returned.

        """
        ...
    
    @pyaedt_function_handler()
    def radial_split_2D(self, radius, name): # -> Literal[True]:
        """Split the stator and rotor for mesh refinement.

        Parameters
        ----------
        radius : float
            Radius of the circle.
        name : str
            Name of the circle.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def objects_in_bounding_box(self, bounding_box, check_lines=..., check_sheets=...): # -> list[Any]:
        """Given a 2D bounding box, check if sheets and lines are inside it.

        Parameters
        ----------
        bounding_box : list
            List of either the 4 or 6 coordinates of the bounding box vertices.
            Bounding box is provided as [xmin, ymin, zmin, xmax, ymax, zmax].
        check_lines : bool, optional
            Whether to check line objects. The default is ``True``.
        check_sheets : bool, optional
            Whether to check sheet objects. The default is ``True``.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
        """
        ...
    


