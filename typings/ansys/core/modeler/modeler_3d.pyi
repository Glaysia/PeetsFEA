"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.cad.primitives_3d import Primitives3D

class Modeler3D(Primitives3D):
    """Provides the Modeler 3D application interface.

    This class is inherited in the caller application and is accessible through the modeler variable
    object. For example, ``hfss.modeler``.

    Parameters
    ----------
    application : :class:`ansys.aedt.core.application.analysis_3d.FieldAnalysis3D`

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> hfss = Hfss()
    >>> my_modeler = hfss.modeler
    """
    def __init__(self, application) -> None:
        ...
    
    def __get__(self, instance, owner): # -> Self:
        ...
    
    @property
    def primitives(self): # -> Self:
        """Primitives.

        .. deprecated:: 0.4.15
            No need to use primitives anymore. You can instantiate primitives methods directly from modeler instead.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.primitives_3d.Primitives3D`

        """
        ...
    
    @pyaedt_function_handler(component_file="input_file", component_name="name", object_list="assignment", boundaries_list="boundaries", excitation_list="excitations", included_cs="coordinate_systems", reference_cs="reference_coordinate_system", auxiliary_dict="export_auxiliary")
    def create_3dcomponent(self, input_file, name=..., variables_to_include=..., assignment=..., boundaries=..., excitations=..., coordinate_systems=..., reference_coordinate_system=..., is_encrypted=..., allow_edit=..., security_message=..., password=..., edit_password=..., password_type=..., hide_contents=..., replace_names=..., component_outline=..., export_auxiliary=..., monitor_objects=..., datasets=..., native_components=..., create_folder=...):
        """Create a 3D component file.

        Parameters
        ----------
        input_file : str
            Full path to the A3DCOMP file.
        name : str, optional
            Name of the component. The default is ``None``.
        variables_to_include : list, optional
            List of variables to include. The default is all variables.
        assignment : list, optional
            List of object names to export. The default is all object names.
        boundaries : list, optional
            List of Boundaries names to export. The default is all boundaries.
        excitations : list, optional
            List of Excitation names to export. The default is all excitations.
        coordinate_systems : list, optional
            List of Coordinate Systems to export. The default is the ``reference_cs``.
        reference_coordinate_system : str, optional
            The Coordinate System reference. The default is ``"Global"``.
        is_encrypted : bool, optional
            Whether the component has encrypted protection. The default is ``False``.
        allow_edit : bool, optional
            Whether the component is editable with encrypted protection.
            The default is ``False``.
        security_message : str, optional
            Security message to display when component is inserted.
            The default value is an empty string.
        password : str, optional
            Security password needed when adding the component.
            The default value is ``None``.
        edit_password : str, optional
            Edit password.
            The default value is ``None``.
        password_type : str, optional
            Password type. Options are ``UserSuppliedPassword`` and ``InternalPassword``.
            The default is ``UserSuppliedPassword``.
        hide_contents : bool or list, optional
            List of object names to hide when the component is encrypted.
            If set to an empty list or ``False``, all objects are visible.
        replace_names : bool, optional
            Whether to replace objects and material names.
            The default is ``False``.
        component_outline : str, optional
            Component outline. Value can either be ``BoundingBox`` or ``None``.
            The default is ``BoundingBox``.
        export_auxiliary : bool or str, optional
            Whether to export the auxiliary file containing information about defined
            datasets and Icepak monitor objects. A destination file can be specified
            using a string.
            The default is ``False``.
        monitor_objects : list, optional
            List of monitor objects' names to export. The default is the names of all
            monitor objects. This argument is relevant only if ``auxiliary_dict_file``
            is not set to ``False``.
        datasets : list, optional
            List of dataset names to export. The default is all datasets. This argument
             is relevant only if ``auxiliary_dict_file`` is set to ``True``.
        native_components : list, optional
            List of native_components names to export. The default is all
            native_components. This argument is relevant only if ``auxiliary_dict_file``
            is set to ``True``.
        create_folder : Bool, optional
            If the specified path to the folder where the 3D component should be saved
            does not exist, then create the folder. Default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.Create3DComponent
        """
        ...
    
    @pyaedt_function_handler(component_name="name", object_list="assignment", boundaries_list="boundaries", excitation_list="excitations", included_cs="coordinate_systems", reference_cs="reference_coordinate_system")
    def replace_3dcomponent(self, name=..., variables_to_include=..., assignment=..., boundaries=..., excitations=..., coordinate_systems=..., reference_coordinate_system=...): # -> Object3d | Polyline:
        """Replace with 3D component.

        Parameters
        ----------
        name : str, optional
            Name of the component. The default is ``None``.
        variables_to_include : list, optional
            List of variables to include. The default is ``None``.
        assignment : list, optional
            List of object names to export. The default is all object names.
        boundaries : list, optional
            List of Boundaries names to export. The default is all boundaries.
        excitations : list, optional
            List of Excitation names to export. The default is all excitations.
        coordinate_systems : list, optional
            List of coordinate systems to export. The default is all coordinate systems.
        reference_coordinate_system : str, optional
            The coordinate system reference. The default is ``"Global"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.components_3d.UserDefinedComponent`
            User-defined component object.

        References
        ----------
        >>> oEditor.ReplaceWith3DComponent
        """
        ...
    
    @pyaedt_function_handler(startingposition="origin", innerradius="inner_radius", outerradius="outer_radius", dielradius="diel_radius", matinner="mat_inner", matouter="mat_outer", matdiel="mat_diel")
    def create_coaxial(self, origin, axis, inner_radius=..., outer_radius=..., diel_radius=..., length=..., mat_inner=..., mat_outer=..., mat_diel=...): # -> tuple[Point | Plane | Object3d | Literal[False], Point | Plane | Object3d | Literal[False], Point | Plane | Object3d | Literal[False]]:
        """Create a coaxial.

        Parameters
        ----------
        origin : list
            List of ``[x, y, z]`` coordinates for the starting position.
        axis : int
            Coordinate system AXIS (integer ``0`` for X, ``1`` for Y, ``2`` for Z) or
            the :class:`Application.AXIS` enumerator.
        inner_radius : float, optional
            Inner coax radius. The default is ``1``.
        outer_radius : float, optional
            Outer coax radius. The default is ``2``.
        diel_radius : float, optional
            Dielectric coax radius. The default is ``1.8``.
        length : float, optional
            Coaxial length. The default is ``10``.
        mat_inner : str, optional
            Material for the inner coaxial. The default is ``"copper"``.
        mat_outer : str, optional
            Material for the outer coaxial. The default is ``"copper"``.
        mat_diel : str, optional
            Material for the dielectric. The default is ``"teflon_based"``.

        Returns
        -------
        tuple
            Contains the inner, outer, and dielectric coax as
            :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` objects.

        References
        ----------
        >>> oEditor.CreateCylinder
        >>> oEditor.AssignMaterial

        Examples
        --------
        This example shows how to create a Coaxial Along X Axis waveguide.

        >>> from ansys.aedt.core import Hfss
        >>> app = Hfss()
        >>> position = [0, 0, 0]
        >>> coax = app.modeler.create_coaxial(
        ...     position, app.AXIS.X, inner_radius=0.5, outer_radius=0.8, diel_radius=0.78, length=50
        ... )

        """
        ...
    
    @pyaedt_function_handler()
    def create_waveguide(self, origin, wg_direction_axis, wgmodel=..., wg_length=..., wg_thickness=..., wg_material=..., parametrize_w=..., parametrize_h=..., create_sheets_on_openings=..., name=...): # -> tuple[Point | Plane | Object3d | Literal[False], list[Any] | Any | Literal[-1] | None, list[Any] | Any | Literal[-1] | None] | None:
        """Create a standard waveguide and optionally parametrize `W` and `H`.

        Available models are WG0.0, WG0, WG1, WG2, WG3, WG4, WG5, WG6,
        WG7, WG8, WG9, WG9A, WG10, WG11, WG11A, WG12, WG13, WG14,
        WG15, WR102, WG16, WG17, WG18, WG19, WG20, WG21, WG22, WG24,
        WG25, WG26, WG27, WG28, WG29, WG29, WG30, WG31, and WG32.

        Parameters
        ----------
        origin : list
            List of ``[x, y, z]`` coordinates for the original position.
        wg_direction_axis : int
            Coordinate system axis (integer ``0`` for X, ``1`` for Y, ``2`` for Z) or
            the :class:`Application.AXIS` enumerator.
        wgmodel : str, optional
            Waveguide model. The default is ``"WG0"``.
        wg_length : float, optional
            Waveguide length. The default is ``100``.
        wg_thickness : float, optional
            Waveguide thickness. The default is ``None``, in which case the
            thickness is `wg_height/20`.
        wg_material : str, optional
            Waveguide material. The default is ``"aluminum"``.
        parametrize_w : bool, optional
            Whether to parametrize `W`. The default is ``False``.
        parametrize_h : bool, optional
            Whether to parametrize `H`. The default is ``False``.
        create_sheets_on_openings : bool, optional
            Whether to create sheets on both openings. The default is ``False``.
        name : str, optional
            Name of the waveguide. The default is ``None``.

        Returns
        -------
        Tuple[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
            Objects created by the waveguide.

        References
        ----------
        >>> oEditor.CreateBox
        >>> oEditor.AssignMaterial


        Examples
        --------
        This example shows how to create a WG9 waveguide.

        >>> from ansys.aedt.core import Hfss
        >>> app = Hfss()
        >>> position = [0, 0, 0]
        >>> wg1 = app.modeler.create_waveguide(position, app.AXIS.,
        ...                                    wgmodel="WG9", wg_length=2000)


        """
        ...
    
    @pyaedt_function_handler()
    def create_conical_rings(self, axis, origin, bottom_radius, top_radius, cone_height, ring_height, thickness=..., name=...): # -> list[Any] | Literal[False]:
        """Create rings in a conical shape.

        Parameters
        ----------
        axis : str
            Coordinate system of the axis.
        origin : list, optional
            List of ``[x, y, z]`` coordinates for the center position
            of the bottom of the cone.
        bottom_radius : float
            Bottom radius of the cone.
        top_radius : float
            Top radius of the cone.
        cone_height : float
            Height of the cone.
        ring_height : float
            Ring height.
        thickness : float, optional
            Ring thickness. The default is ``None``, in which case a 2D sheet is created.
        name : str, optional
            Name of the cone. The default is ``None``, in which case
            the default name is assigned.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`] or bool
            List of 3D object or ``False`` if it fails.

        References
        ----------
        >>> oEditor.CreatePolyline
        >>> oEditor.SweepAroundAxis
        >>> oEditor.ThickenSheet

        Examples
        --------
        This example shows how to create rings along Z axis with a cone shape.

        >>> from ansys.aedt.core import Hfss
        >>> app = Hfss()
        >>> position = [0, 0, 0]
        >>> cone_object = aedtapp.modeler.create_conical_rings(
        ...     axis="Z", origin=[0, 0, 0], bottom_radius=2, top_radius=3, cone_height=4, ring_height=0.1
        ... )

        """
        ...
    
    @pyaedt_function_handler()
    def objects_in_bounding_box(self, bounding_box, check_solids=..., check_lines=..., check_sheets=...): # -> list[Any]:
        """Given a bounding box checks if objects, sheets and lines are inside it.

        Parameters
        ----------
        bounding_box : list
            List of coordinates of bounding box vertices.
            Bounding box is provided as [xmin, ymin, zmin, xmax, ymax, zmax].
        check_solids : bool, optional
            Check solid objects.
        check_lines : bool, optional
            Check line objects.
        check_sheets : bool, optional
            Check sheet objects.

        Returns
        -------
        list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`]
        """
        ...
    
    @pyaedt_function_handler()
    def import_nastran(self, file_path, import_lines=..., lines_thickness=..., import_as_light_weight=..., decimation=..., group_parts=..., enable_planar_merge=..., save_only_stl=..., preview=..., merge_angle=...): # -> tuple[Any | list[Any], dict[str, Any] | Any] | tuple[list[Object3d], dict[str, Any] | Any]:
        """Import Nastran file into 3D Modeler by converting the faces to stl and reading it.

        The solids are translated directly to AEDT format.

        Parameters
        ----------
        file_path : str
            Path to .nas file.
        import_lines : bool, optional
            Whether to import the lines or only triangles. Default is ``True``.
        lines_thickness : float, optional
            Whether to thicken lines after creation and it's default value.
            Every line will be parametrized with a design variable called ``xsection_linename``.
        import_as_light_weight : bool, optional
            Import the stl generatated as light weight. It works only on SBR+ and HFSS Regions. Default is ``False``.
        decimation : float, optional
            Fraction of the original mesh to remove before creating the stl file.  If set to ``0.9``,
            this function tries to reduce the data set to 10% of its
            original size and removes 90% of the input triangles.
        group_parts : bool, optional
            Whether to group imported parts by object ID. The default is ``True``.
        enable_planar_merge : str, optional
            Whether to enable or not planar merge. It can be ``"True"``, ``"False"`` or ``"Auto"``.
            ``"Auto"`` will disable the planar merge if stl contains more than 50000 triangles.
        save_only_stl : bool, optional
            Whether to import the model in HFSS or only generate the stl file.
        preview : bool, optional
            Whether to preview the model in pyvista or skip it.
        merge_angle : float, optional
            Angle in radians for which faces will be considered planar. Default is ``1e-3``.

        Returns
        -------
        List of :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`, dict
            New object created and nastran dictionary.
        """
        ...
    
    @pyaedt_function_handler()
    def import_from_openstreet_map(self, latitude_longitude, env_name=..., terrain_radius=..., include_osm_buildings=..., including_osm_roads=..., import_in_aedt=..., plot_before_importing=..., z_offset=..., road_step=..., road_width=..., create_lightweigth_part=...): # -> dict[str, Any]:
        """Import OpenStreet Maps into AEDT.

        Parameters
        ----------
        latitude_longitude : list
            Latitude and longitude.
        env_name : str, optional
            Name of the environment used to create the scene. The default value is ``"default"``.
        terrain_radius : float, int
            Radius to take around center. The default value is ``500``.
        include_osm_buildings : bool
            Either if include or not 3D Buildings. Default is ``True``.
        including_osm_roads : bool
            Either if include or not road. Default is ``True``.
        import_in_aedt : bool
            Either if import stl after generation or not. Default is ``True``.
        plot_before_importing : bool
            Either if plot before importing or not. Default is ``True``.
        z_offset : float
            Road elevation offset. Default is ``0``.
        road_step : float
            Road simplification steps in meter. Default is ``3``.
        road_width : float
            Road width  in meter. Default is ``8``.
        create_lightweigth_part : bool
            Either if import as lightweight object or not. Default is ``True``.

        Returns
        -------
        dict
            Dictionary of generated infos.

        Notes
        -----
        Please note that elevation is not computed anymore in this method.
        Please check the example
        ``https://examples.aedt.docs.pyansys.com/version/dev/examples/high_frequency/antenna/large_scenarios/city.html``
        to compute also elevation.

        """
        ...
    
    @pyaedt_function_handler(objects_list="assignment", segments_number="segments", mesh_sheets_number="mesh_sheets")
    def objects_segmentation(self, assignment, segmentation_thickness=..., segments=..., apply_mesh_sheets=..., mesh_sheets=...): # -> tuple[dict[Any, Any], Any | dict[Any, Any]] | dict[Any, Any] | Literal[False]:
        """Get segmentation of an object given the segmentation thickness or number of segments.

        Parameters
        ----------
        assignment : list, str
            List of objects to apply the segmentation to.
            It can either be a list of strings (object names), integers (object IDs), or
            a list[:class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`] classes.
        segmentation_thickness : float, optional
            Segmentation thickness.
            Model units are automatically assigned. The default is ``None``.
        segments : int, optional
            Number of segments to segment the object to. The default is ``None``.
        apply_mesh_sheets : bool, optional
            Whether to apply mesh sheets to selected objects.
            Mesh sheets are needed in case the user would like to have additional layers
            inside the objects for a finer mesh and more accurate results. The default is ``False``.
        mesh_sheets : int, optional
            Number of mesh sheets within one magnet segment.
            If nothing is provided and ``apply_mesh_sheets=True``, the default value is ``2``.

        Returns
        -------
        dict or tuple
            Depending on value ``apply_mesh_sheets`` it returns either a dictionary or a tuple.
            If mesh sheets are applied the method returns a tuple where:
            - First dictionary is the segments that the object has been divided into.
            - Second dictionary is the mesh sheets eventually needed to apply the mesh.
            to inside the object. Keys are the object names, and values are respectively
            segments sheets and mesh sheets of the
            :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` class.
            If mesh sheets are not applied the method returns only the dictionary of
            segments that the object has been divided into.
            ``False`` is returned if the method fails.
        """
        ...
    
    @pyaedt_function_handler
    def change_region_padding(self, padding_data, padding_type, direction=..., region_name=...): # -> bool:
        """
        Change region padding settings.

        Parameters
        ----------
        padding_data : str or list of str
            Padding value (with unit if necessary). A list of padding values must have corresponding
            elements in ``padding_type`` and ``direction`` arguments.
        padding_type : str or list of str
            Padding type. Available options are ``"Percentage Offset"``, ``"Transverse Percentage Offset"``,
            ``"Absolute Offset"``, ``"Absolute Position"``.
        direction : str or list of str, optional
            Direction to which apply the padding settings. A direction can be ``"+X"``, ``"-X"``,
            `"+Y"``, ``"-Y"``, ``"+Z"`` or ``"-Z"``. Default is ``None``, in which case all the
            directions are used (in the order written in the previous sentence).
        region_name : str optional
            Region name. Default is ``Region``.

        Returns
        -------
        bool
            ``True`` if successful, else ``None``.

        Examples
        --------
        >>> import ansys.aedt.core
        >>> app = ansys.aedt.core.Icepak()
        >>> app.modeler.change_region_padding("10mm", padding_type="Absolute Offset", direction="-X")
        """
        ...
    
    @pyaedt_function_handler(region_cs="assignment", region_name="name")
    def change_region_coordinate_system(self, assignment=..., name=...): # -> Literal[False]:
        """
        Change region coordinate system.

        Parameters
        ----------
        assignment : str, optional
            Region coordinate system. Default is ``Global``.
        name : str optional
            Region name. Default is ``Region``.

        Returns
        -------
        bool
            ``True`` if successful, else ``None``.

        Examples
        --------
        >>> import ansys.aedt.core
        >>> app = ansys.aedt.core.Icepak()
        >>> app.modeler.create_coordinate_system(origin=[1, 1, 1], name="NewCS")
        >>> app.modeler.change_region_coordinate_system(assignment="NewCS")
        """
        ...
    


