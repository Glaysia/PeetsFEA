"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.modeler.advanced_cad.multiparts import Actor, MultiPartComponent

def read_actors(fn, actor_lib): # -> dict[Any, Any]:
    """Read and map actors in a JSON file to a list of actor objects.

    Parameters
    ----------
    fn : str
        Name of the JSON file describing the actors.
    actor_lib : str
        Full path to the library containing the actor definitions.

    Returns
    -------
    list
        List of actor objects.
    """
    ...

class Generic(Actor):
    """Provides an instance of an actor.

    This class is derived from :class:`ansys.aedt.core.modeler.multiparts.MultiPartComponent`.

    .. note::
       Motion is always forward in the X-axis direction of the person
       coordinate system.

    Parameters
    ----------
    actor_folder : str
        Full path to the directory containing the definition of the person.
        This can be changed later in the :class:`Person` class definition.
    speed : float or str
        Speed of the person in the X-axis direction.
    relative_cs_name : str
        Name of the relative coordinate system of the actor. The default is ``None``,
        in which case the global coordinate system is used.

    """
    def __init__(self, actor_folder, speed=..., relative_cs_name=...) -> None:
        """Generic class."""
        ...
    


class Person(Actor):
    """Provides an instance of a person.

    This class is derived from :class:`ansys.aedt.core.modeler.multiparts.MultiPartComponent`.

    .. note::
       Motion is always forward in the X-axis direction of the person coordinate system.

    Parameters
    ----------
    actor_folder : str
        Full path to the folder containing the definition of the
        person. This can be changed later in the :class:`Person`
        class definition.
    speed : float or str, optional
        Speed of the person in the X-axis direction. The default is ``"0"``.
    stride : float or str, optional
        Stride length of the person. The default is "0.8meters".
    relative_cs_name : str, optional
        Name of the relative coordinate system of the actor. The
        default is ``None``, in which case the global coordinate
        system is used.

    """
    def __init__(self, actor_folder, speed=..., stride=..., relative_cs_name=...) -> None:
        """Initialize person actor."""
        ...
    
    @property
    def stride(self): # -> str:
        """Stride in meters.

        Returns
        -------
        str
        """
        ...
    
    @stride.setter
    def stride(self, s): # -> None:
        ...
    
    @pyaedt_function_handler()
    def insert(self, app, motion=...): # -> None:
        """Insert the person in HFSS SBR+.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss
            HFSS application instance.
        motion : bool, optional
            Whether the person is in motion. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


class Bird(Actor):
    """Provides an instance of a bird.

    This class is derived from :class:`ansys.aedt.core.modeler.multiparts.MultiPartComponent`.

    .. note::
       Motion is always forward in the X-axis direction.

    Parameters
    ----------
    bird_folder : str
        Full path to the directory containing the definition of the
        bird. This can be changed later.
    speed : float or str, optional
        Speed of the bird. The default is ``"2.0"``.
    flapping_rate : float or str, optional
        Flapping rate. The default is ``"50Hz"``.
    relative_cs_name : str, optional
        Name of the relative coordinate system of the actor. The
        default is``None``, in which case the global coordinate system
        is used.

    """
    def __init__(self, bird_folder, speed=..., flapping_rate=..., relative_cs_name=...) -> None:
        """Bike class."""
        ...
    
    @pyaedt_function_handler()
    def insert(self, app, motion=...): # -> None:
        """Insert the bird in HFSS SBR+.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss
        motion : bool
            Whether the bird is in motion. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


class Vehicle(Actor):
    """Provides an instance of a vehicle.

    This class is derived from :class:`ansys.aedt.core.modeler.multiparts.MultiPartComponent`.

    .. note::
        Motion is always forward in the X-axis direction.

    Parameters
    ----------
    car_folder : str, required
        Full path to the folder containing the definition of the
        vehicle.  This can be changed later.
    speed : float or str, optional
        Speed of the vehicle. The default is ``10.0``.
    relative_cs_name : str, optional
        Name of the relative coordinate system of the actor. The
        default is ``None``, in which case the global coordinate
        system is used.

    """
    def __init__(self, car_folder, speed=..., relative_cs_name=...) -> None:
        """Vehicle class."""
        ...
    
    @pyaedt_function_handler()
    def insert(self, app, motion=...): # -> Literal[True]:
        """Insert the vehicle in HFSS SBR+.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss
        motion : bool, optional
            Whether the vehicle is in motion. The default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


class Radar(MultiPartComponent):
    """Manages the radar definition and placement in the HFSS design.

    Parameters
    ----------
    radar_folder : str
        Full path to the folder containing the radar file.
    name : str, optional
        Name of the radar file. The default is ``None``.
    motion : bool, optional
        Whether the actor is in motion. The default is ``False``.
    use_relative_cs : bool, optional
        Whether to use the relative coordinate system. The default is ``False``.
    offset : list, optional
        List of offset values. The default is ``("0", "0", "0")``.
    speed : float or str, optional
        Speed of the vehicle. The default is ``0``.
    relative_cs_name : str, optional
        Name of the relative coordinate system of the actor. The
        default is ``None``, in which case the global coordinate
        system is used.

    """
    def __init__(self, radar_folder, name=..., motion=..., use_relative_cs=..., offset=..., speed=..., relative_cs_name=...) -> None:
        ...
    
    @property
    def units(self): # -> None:
        """Multi-part units.

        Returns
        -------
        str
            Multipart units.
        """
        ...
    
    @property
    def speed_name(self): # -> str:
        """Speed variable name.

        Returns
        -------
        str
            Name of the speed variable.
        """
        ...
    
    @property
    def speed_expression(self): # -> str:
        """Speed variable expression.

        Returns
        -------
        str
            Expression for the speed variable.
        """
        ...
    
    @speed_expression.setter
    def speed_expression(self, s): # -> None:
        ...
    
    @pyaedt_function_handler()
    def insert(self, app, motion=...): # -> list[Any]:
        """Insert radar in the HFSS application instance.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss
        motion : bool, optional
            Whether the actor is in motion. The default is ``False``.

        Returns
        -------
        list
            List of antennae that have been placed.
        """
        ...
    


