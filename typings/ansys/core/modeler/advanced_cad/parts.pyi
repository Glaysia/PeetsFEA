"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class Part:
    """Manages 3D component placement and definition.

    Parameters
    ----------
    part_folder : str
        Path to the folder with the A3DCOMP files.
    part_dict : dict
        Defines relevant properties of the class with the following keywords:
        * 'comp_name': str, Name of the A3DCOMP file.
        * 'offset': list or str, Offset coordinate system definition relative to the parent.
        * 'rotation_cs': list or str, Rotation coordinate system relative to the parent.
        * 'rotation': str or numeric, Rotation angle.
        * 'compensation_angle': str or numeric, Initial angle.
        * 'rotation_axis': str, Rotation axis (``"X"``, ``"Y"``, or ``"Z"``).
        * 'duplicate_number': str or int, Number of instances for linear duplication.
        * 'duplicate_vector': list, Vector for duplication relative to the parent coordinate system.
    parent :  str
        The default is ``None``.
    name : str, optional
        Name of the A3DCOMP file without the extension. The default is ``None``.
    """
    allowed_keys = ...
    def __init__(self, part_folder, part_dict, parent=..., name=...) -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    @pyaedt_function_handler()
    def zero_offset(self, kw): # -> bool:
        """Check if the coordinate system defined by kw is [0, 0, 0].

        Parameters
        ----------
        kw : str
             Coordinate system for kw. Options are ``offset`` and ``rotation_cs``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @property
    def file_name(self):
        """Antenna file name.

        Returns
        -------
        str
            Full name of the A3DCOMP file.
        """
        ...
    
    @property
    def cs_name(self):
        """Coordinate system name.

        Returns
        -------
        str
            Name of the coordinate system.
        """
        ...
    
    @property
    def yaw_name(self):
        """Yaw variable name. Yaw is the rotation about the object's Z-axis.

        Returns
        -------
        str
            ame of the yaw variable.

        """
        ...
    
    @property
    def pitch_name(self):
        """Pitch variable name. Pitch is the rotation about the object's Y-axis.

        Returns
        -------
        str
            Name of the pitch variable.
        """
        ...
    
    @property
    def roll_name(self):
        """Roll variable name. Roll is the rotation about the object's X-axis.

        Returns
        -------
        str
             Name of the roll variable.
        """
        ...
    
    @property
    def local_origin(self): # -> list[int] | list[Any]:
        """Local part offset values.

        Returns
        -------
        list
            List of offset values for the local part.
        """
        ...
    
    @property
    def rotate_origin(self): # -> list[int] | list[Any]:
        """Origin rotation list.

        Returns
        -------
        list
            List of offset values for the rotation.
        """
        ...
    
    @property
    def yaw(self): # -> str:
        """Yaw variable value.

        Returns
        -------
        str
            Value for the yaw variable.
        """
        ...
    
    @yaw.setter
    def yaw(self, yaw): # -> None:
        ...
    
    @property
    def pitch(self): # -> str:
        """Pitch variable value.

        Returns
        -------
        str
            Value of the pitch variable.
        """
        ...
    
    @pitch.setter
    def pitch(self, pitch): # -> None:
        ...
    
    @property
    def roll(self): # -> str:
        """Roll variable value.

        Returns
        -------
        str
            Value of the roll variable.
        """
        ...
    
    @roll.setter
    def roll(self, roll): # -> None:
        ...
    
    @property
    def name(self):
        """Part name.

        Returns
        -------
        str
            Name of the part.
        """
        ...
    
    @pyaedt_function_handler()
    def set_relative_cs(self, app): # -> Literal[True]:
        """Create a parametric coordinate system.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @property
    def rot_cs_name(self):
        """Rotation coordinate system name.

        Returns
        -------
        str
            Name of the rotation coordinate system.
        """
        ...
    
    @pyaedt_function_handler()
    def do_rotate(self, app, aedt_object): # -> Literal[True]:
        """Set the rotation coordinate system relative to the parent coordinate system.

        This method should only be called if there is rotation in the component.
        The rotation coordinate system is offset from the parent coordinate system.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss
            HFSS application instance.
        aedt_object : str
            Name of the HFSS design.
        """
        ...
    
    @pyaedt_function_handler()
    def insert(self, app): # -> list[Any]:
        """Insert 3D component in AEDT.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss

        Returns
        -------
        str
            Name of inserted object.
        """
        ...
    


class Antenna(Part):
    """Manages antennas.

    This class is derived from :class:`Part`.

    Parameters
    ----------
    root_folder : str
        Root directory
    ant_dict : dict
        Antenna dictionary
    parent : str, optional
        The default is ``None``.
    name : str, optional
        The default is ``None``.

    """
    def __init__(self, root_folder, ant_dict, parent=..., name=...) -> None:
        ...
    
    @property
    def params(self): # -> dict[Any, Any]:
        """Multi-part component parameters.

        Returns
        -------
        dict
            Dictionary of parameters for a multi-part component.
        """
        ...
    
    @pyaedt_function_handler()
    def insert(self, app, units=...):
        """Insert antenna in HFSS SBR+.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss
        units :
            The default is ``None``.

        Returns
        -------
        str
            Name of the inserted object.
        """
        ...
    


