"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class MultiPartComponent:
    """Supports multi-part 3D components for HFSS SBR+.

    .. note::
           Forward motion is in the X-axis direction if motion is set.

    Parameters
    ----------
    comp_folder : str
        Full path to the folder with the JSON file containing the component definition.
        This JSON file must have the same name as the folder.
    name : str, optional
        Name of the multipart component. If this value is set, the
        component is selected from the corresponding JSON file in
        ``comp_folder``. The default is ``None``, in which case the
        name of the first JSON file in the folder is used.
    use_relative_cs : bool, optional
        Whether to use the relative coordinate system. The default is ``False``.
        Set to ``False`` if the multi-part component doesn't move. Set to ``True``
        if the multi-part component moves relative to the global coordinate system.
    relative_cs_name : str, optional
        Name of the coordinate system to connect the multipart relative system to
        when ``use_relative_cs=True``.
    motion : bool, optional
        Whether expressions should be used to define the position and orientation of
        the multi-part component. The default is ``False``.
    offset : list, optional
        List of ``[x, y, z]`` coordinate values defining the component offset.
        The default is ``["0", "0", "0"]``.
    yaw : str or float, optional
        Yaw angle, indicating the rotation about the component's Z-axis. The default
        is ``"0deg"``.
    pitch : str or float, optional
        Pitch angle, indicating the rotation about the component Y-axis The default
        is ``"0deg"``.
    roll : str or float, optional
        Roll angle, indicating the rotation about the component X-axis. The default
        is ``"0deg"``.
    roll : str or float, optional
        Roll angle, indicating the rotation about the component's X-axis. The default

    """
    _component_classes = ...
    _names = ...
    _t = ...
    _t_value = ...
    modeler_units = ...
    @staticmethod
    def start(app): # -> Literal[True]:
        """Initialize app for SBR+ simulation.

        Parameters
        ----------
        app : class:`ansys.aedt.core.Hfss`
            HFSS application instance.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    def __init__(self, comp_folder, name=..., use_relative_cs=..., relative_cs_name=..., motion=..., offset=..., yaw=..., pitch=..., roll=...) -> None:
        ...
    
    @property
    def cs_name(self): # -> str:
        """Coordinate system name.

        Returns
        -------
        str
            Name of the coordinate system.
        """
        ...
    
    @property
    def index(self): # -> int:
        """Number of multi-part components.

        Returns
        -------
        int
           Number of multi-part components.
        """
        ...
    
    @property
    def offset_x_name(self): # -> str:
        """X-axis offset name.

        Returns
        -------
        str
            Name of the X-axis offset.
        """
        ...
    
    @property
    def offset_y_name(self): # -> str:
        """Y-axis offset name.

        Returns
        -------
        str
            Name of the Y-axis offset.
        """
        ...
    
    @property
    def offset_z_name(self): # -> str:
        """Z-axis offset name.

        Returns
        -------
        str
            Name of the Z-axis offset.
        """
        ...
    
    @property
    def offset_names(self): # -> list[Any | str]:
        """X-, Y-, and Z-axis offset names.

        Returns
        -------
        list
            List of the offset names for the X-, Y-, and Z-axes.
        """
        ...
    
    @property
    def yaw_name(self): # -> str:
        """Yaw variable name. Yaw is the rotation about the object's Z-axis.

        Returns
        -------
        str
            Name of the yaw variable.
        """
        ...
    
    @property
    def yaw(self): # -> str:
        """Yaw variable value.

        Returns
        -------
        str
            Value for the yaw variable.
        """
        ...
    
    @yaw.setter
    def yaw(self, yaw_str): # -> None:
        ...
    
    @property
    def pitch_name(self): # -> str:
        """Pitch variable name. Pitch is the rotation about the object's Y-axis.

        Returns
        -------
        str
            Name of the pitch variable.
        """
        ...
    
    @property
    def pitch(self): # -> str:
        """Pitch variable value.

        Returns
        -------
        str
            Value of the pitch variable.
        """
        ...
    
    @pitch.setter
    def pitch(self, pitch_str): # -> None:
        ...
    
    @property
    def roll_name(self): # -> str:
        """Roll variable name. Roll is the rotation about the object's X-axis.

        Returns
        -------
        str
            Name of the roll variable.
        """
        ...
    
    @property
    def roll(self): # -> str:
        """Roll variable value.

        Returns
        -------
        str
            Value of the roll variable.
        """
        ...
    
    @roll.setter
    def roll(self, roll_str): # -> None:
        ...
    
    @property
    def name(self): # -> str:
        """Unique instance name.

        Returns
        -------
        str
           Name of the unique instance.
        """
        ...
    
    @property
    def use_global_cs(self): # -> bool:
        """Global coordinate system.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @property
    def offset(self): # -> list[Any]:
        """Offset values for the multi-part component.

        Returns
        -------
        list
            List of offset values.
        """
        ...
    
    @offset.setter
    def offset(self, o): # -> None:
        ...
    
    @pyaedt_function_handler()
    def position_in_app(self, app): # -> None:
        """Set up design variables and values to enable motion for the multi-part 3D component.

        Parameters
        ----------
        app : ansys.aedt.core.Hfss
            HFSS application instance.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.Modeler.CoordinateSystem`
        """
        ...
    
    @pyaedt_function_handler()
    def insert(self, app, motion=...): # -> Literal[True]:
        """Insert the object in HFSS SBR+.

        Returns
        -------
        bool
        """
        ...
    


class Environment(MultiPartComponent):
    """Supports multi-part 3D components without motion for HFSS SBR+.

    This class is derived from :class:`MultiPartComponent`. Its
    call signature is identical to the parent class except
    ``motion`` is always set to ``False``.

    Parameters
    ----------
    env_folder : str
        Full path to the folder with the JSON file containing the component definition.
    relative_cs_name : str, optional
        Name of the coordinate system to connect the component's relative system to
        when ``use_relative_cs=True``. The default is ``None``, in which case the
        global coordinate system is used.
    """
    def __init__(self, env_folder, relative_cs_name=...) -> None:
        ...
    
    @property
    def cs_name(self): # -> Literal['Global']:
        """Coordinate system name.

        Returns
        -------
        str
            Name of the coordinate system.
        """
        ...
    
    @property
    def yaw(self):
        """Yaw variable value. Yaw is the rotation about the object's Z-axis.

        Returns
        -------
        str
            Value for the yaw variable.
        """
        ...
    
    @yaw.setter
    def yaw(self, yaw_str): # -> None:
        ...
    
    @property
    def pitch(self):
        """Pitch variable value. Pitch is the rotation about the object's Y-axis.

        Returns
        -------
        str
            Value for the pitch variable.
        """
        ...
    
    @pitch.setter
    def pitch(self, pitch_str): # -> None:
        ...
    
    @property
    def roll(self):
        """Roll variable value. Roll is the rotation about the object's X-axis.

        Returns
        -------
        str
            Value for the roll variable.
        """
        ...
    
    @roll.setter
    def roll(self, roll_str): # -> None:
        ...
    
    @property
    def offset(self): # -> list[Any] | tuple[Any, Any, Any]:
        """Offset for the multi-part component.

        Returns
        -------
        list
        """
        ...
    
    @offset.setter
    def offset(self, o): # -> None:
        ...
    


class Actor(MultiPartComponent):
    """Provides an instance of an actor.

    This class is derived from :class:`MultiPartComponent`.

    .. note::  Motion is always forward in the X-axis direction.

    Parameters
    ----------
    actor_folder : str
        Full path to the folder containing the definition of the person.
        This can be changed later in the :class:`Person` class definition.
    speed : float or str
        Speed of the person in the X-direction. The default is ``0```.
    relative_cs_name : str
        Name of the relative coordinate system of the actor. The default is ``None``,
        in which case the global coordinate system is used.
    """
    def __init__(self, actor_folder, speed=..., relative_cs_name=...) -> None:
        ...
    
    @property
    def speed_name(self): # -> str:
        """Speed variable name.

        Returns
        -------
        str
            Name of the speed variable.
        """
        ...
    
    @property
    def speed_expression(self): # -> str:
        """Speed variable expression.

        Returns
        -------
        str
            Expression for the speed variable.
        """
        ...
    
    @speed_expression.setter
    def speed_expression(self, s): # -> None:
        ...
    


