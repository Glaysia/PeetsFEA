"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

LAYERS = ...
class NamedVariable:
    """Cast PyAEDT variable object to simplify getters and setters in Stackup3D.

    Parameters
    ----------
    application : :class:`ansys.aedt.core.hfss.Hfss`
        HFSS design or project where the variable is to be created.
    name : str
        The name of the variable. If the name begins with an '$', the variable will be a project variable.
        Otherwise, it will be a design variable.
    expression : str
        Expression of the value.

    Examples
    --------

    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import NamedVariable
    >>> hfss = Hfss()
    >>> my_frequency = NamedVariable(hfss, "my_frequency", "900000Hz")
    >>> wave_length_formula = "c0/" + my_frequency.name
    >>> my_wave_length = NamedVariable(hfss, "my_wave_length", wave_length_formula)
    >>> my_permittivity = NamedVariable(hfss, "my_permittivity", "2.2")
    >>> my_wave_length.expression = my_wave_length.expression + "/" + my_permittivity.name

    """
    def __init__(self, application, name, expression) -> None:
        ...
    
    @property
    def name(self): # -> Any:
        """Name of the variable as a string."""
        ...
    
    @property
    def expression(self): # -> Any | str:
        """Expression of the variable as a string."""
        ...
    
    @expression.setter
    def expression(self, expression): # -> None:
        """Set the expression of the variable.

        Parameters
        ----------
        expression: str
            Value expression of the variable."""
        ...
    
    @property
    def unit_system(self):
        """Unit system of the expression as a string."""
        ...
    
    @property
    def units(self):
        """Units."""
        ...
    
    @property
    def value(self):
        """Value."""
        ...
    
    @property
    def numeric_value(self):
        """Numeric part of the expression as a float value."""
        ...
    
    @property
    def evaluated_value(self):
        """String that combines the numeric value and the units."""
        ...
    
    @pyaedt_function_handler()
    def hide_variable(self, value=...): # -> Literal[True]:
        """Set the variable to a hidden variable.

        Parameters
        ----------
        value : bool, optional
            Whether the variable is a hidden variable. The default is ``True``.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def read_only_variable(self, value=...): # -> Literal[True]:
        """Set the variable to a read-only variable.

        Parameters
        ----------
        value : bool, optional
            Whether the variable is a read-only variable. The default is ``True``.

        Returns
        -------
        bool
        """
        ...
    


class DuplicatedParametrizedMaterial:
    """Provides a class to duplicate a material and manage its duplication in PyAEDT and in AEDT.

    For each material property a NamedVariable is created as attribute.

    Parameters
    ----------
    application : :class:`ansys.aedt.core.hfss.Hfss
        HFSS design or project where the variable is to be created.
    material_name : str
        The material name which will be cloned.
    cloned_material_name : str
        The cloned material named
    list_of_properties : list of string
        Currently unavailable, but this parameter could be used to select the properties which needs to be parametrized.
        Currently, the permittivity, permeability, conductivity, dielectric loss tangent and the magnetic loss tangent
         are parametrized with a NamedVariable.

    Examples
    --------

    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import DuplicatedParametrizedMaterial
    >>> hfss = Hfss()
    >>> my_copper = DuplicatedParametrizedMaterial(hfss, "copper", "my_copper")
    >>> my_material_name = my_copper.material_name
    >>> my_material = my_copper.material
    >>> my_copper_conductivity = my_copper.conductivity

    """
    def __init__(self, application, material_name, cloned_material_name, list_of_properties=...) -> None:
        ...
    
    @property
    def material(self): # -> None:
        ...
    
    @property
    def material_name(self): # -> Any | None:
        ...
    
    @property
    def permittivity(self): # -> NamedVariable | None:
        ...
    
    @property
    def permeability(self): # -> NamedVariable | None:
        ...
    
    @property
    def conductivity(self): # -> NamedVariable | None:
        ...
    
    @property
    def dielectric_loss_tangent(self): # -> NamedVariable | None:
        ...
    
    @property
    def magnetic_loss_tangent(self): # -> NamedVariable | None:
        ...
    


class Layer3D:
    """Provides a class for a management of a parametric layer in 3D Modeler.

    The Layer3D class is not intended to be used with its constructor,
    but by using the method "add_layer" available in the Stackup3D class.

    Parameters
    ----------
    stackup : :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Stackup3D`
        The stackup where the layers will be added.
    app : :class:`ansys.aedt.core.hfss.Hfss`
        HFSS design or project where the variable is to be created.
    name : str
        Name of the layer.
    layer_type : str
        "S" for signal layers, "D" for dielectric layers, "G" for ground layers.
    material_name : str
        The material name of the layer.
    thickness : float
        The thickness of the layer.
    fill_material : str
        In ground and signal layers, the dielectric material name which will fill the non-conductive areas of the layer.
    index : int
        The number of the layer, starting from bottom to top.
    frequency : float
        The layer frequency, it will be common to all geometric shapes on the layer.

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
    >>> hfss = Hfss()
    >>> my_stackup = Stackup3D(hfss, 2.5e9)
    >>> my_layer = my_stackup.add_layer("my_layer")
    >>> gnd = my_stackup.add_ground_layer("gnd")
    >>> diel = my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
    >>> top = my_stackup.add_signal_layer("top")

    """
    def __init__(self, stackup, app, name, layer_type=..., material_name=..., thickness=..., fill_material=..., index=..., frequency=...) -> None:
        ...
    
    @property
    def name(self): # -> Any:
        """Layer name.

        Returns
        -------
        str
        """
        ...
    
    @property
    def type(self): # -> str | None:
        """Layer type.

        Returns
        -------
        str
        """
        ...
    
    @property
    def number(self): # -> int:
        """Layer ID.

        Returns
        -------
        int
        """
        ...
    
    @property
    def material_name(self):
        """Material name.

        Returns
        -------
        str
        """
        ...
    
    @property
    def material(self):
        """Material.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.Material`
            Material.
        """
        ...
    
    @property
    def duplicated_material(self):
        """Duplicated material.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.DuplicatedParametrizedMaterial`
            Material.
        """
        ...
    
    @property
    def filling_material(self):
        """Fill material.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.Material`
            Material.
        """
        ...
    
    @property
    def filling_material_name(self):
        """Fill material name.

        Returns
        -------
        str
        """
        ...
    
    @property
    def thickness(self): # -> NamedVariable | None:
        """Thickness variable.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def thickness_value(self):
        """Thickness value.


        Returns
        -------
        float, str
        """
        ...
    
    @thickness.setter
    def thickness(self, value): # -> None:
        ...
    
    @property
    def elevation(self): # -> NamedVariable:
        """Layer elevation.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @property
    def elevation_value(self):
        """Layer elevation value.

        Returns
        -------
        str, float
        """
        ...
    
    @property
    def stackup(self): # -> Any:
        """Stackup.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Stackup3D`
        """
        ...
    
    @property
    def frequency(self): # -> NamedVariable:
        """Frequency variable.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
        """
        ...
    
    @pyaedt_function_handler()
    def duplicate_parametrize_material(self, material_name, cloned_material_name=..., list_of_properties=...):
        """Duplicate a material and parametrize all properties.

        Parameters
        ----------
        material_name : str
            Name of origin material
        cloned_material_name : str, optional
            Name of destination material. The default is ``None``.
        list_of_properties : list, optional
            Properties to parametrize. The default is
            ``("permittivity", "permeability", "conductivity", "dielectric_loss_tan", "magnetic_loss_tan")``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.material.Material`
            Material object.
        """
        ...
    
    @pyaedt_function_handler()
    def add_patch(self, frequency, patch_width, patch_length=..., patch_position_x=..., patch_position_y=..., patch_name=..., axis=...): # -> Patch | Literal[False]:
        """Create a parametric patch.

        Parameters
        ----------
        frequency : float, None
            Frequency value for the patch calculation in Hz.
        patch_width : float
            Patch width.
        patch_length : float, optional
            Patch length. The default is ``None``.
        patch_position_x : float, optional
            Patch start x position.
        patch_position_y : float, optional
            Patch start y position. The default is ``0.``
        patch_name : str, optional
            Patch name. The default is ``None``.
        axis : str, optional
            Line orientation axis. The default is ``"X"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Patch`

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_patch = top.add_patch(frequency=None, patch_width=51, patch_name="MLPatch")
        >>> my_stackup.resize_around_element(my_patch)
        """
        ...
    
    @pyaedt_function_handler()
    def add_trace(self, line_width, line_length, is_electrical_length=..., is_impedance=..., line_position_x=..., line_position_y=..., line_name=..., axis=..., reference_system=..., frequency=...): # -> Trace | Literal[False]:
        """Create a trace.

        Parameters
        ----------
        line_width : float
            Line width. It can be the physical width or the line impedance.
        line_length : float
            Line length. It can be the physical length or the electrical length in degrees.
        is_electrical_length : bool, optional
            Whether the line length is an electrical length or a physical length. The default
            is ``False``, which means it is a physical length.
        is_impedance : bool, optional
            Whether the line width is an impedance. The default is ``False``, in which case
            the line width is a geometrical value.
        line_position_x : float, optional
            Line center start x position. The default is ``0``.
        line_position_y : float, optional
            Line center start y position. The default is ``0``.
        line_name : str, optional
            Line name. The default is ``None``.
        axis : str, optional
            Line orientation axis. The default is ``"X"``.
        reference_system : str, optional
            Line reference system. The default is ``None``, in which case a new coordinate
            system is created.
        frequency : float, optional
            Frequency value for the line calculation in Hz. The default is ``1e9``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Trace`

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss(new_desktop=True)
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_trace = top.add_trace(line_width=2.5, line_length=22)
        >>> my_stackup.resize_around_element(my_trace)

        """
        ...
    
    @pyaedt_function_handler()
    def add_polygon(self, points, material=..., is_void=..., poly_name=...): # -> Polygon | Literal[True]:
        """Create a polygon.

        Parameters
        ----------
        points : list
            Points list of [x,y] coordinates.
        material : str, optional
            Material name. The default is ``"copper"``.
        is_void : bool, optional
            Whether the polygon is a void. The default is ``False``.
            On ground layers, it will act opposite of the Boolean value because the ground
            is negative.
        poly_name : str, optional
            Polygon name. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Polygon`

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_polygon = top.add_polygon([[0, 0], [0, 1], [1, 1], [1, 0]])
        >>> my_stackup.dielectric_x_position = "2mm"
        >>> my_stackup.dielectric_y_position = "2mm"
        >>> my_stackup.dielectric_length = "-3mm"
        >>> my_stackup.dielectric_width = "-3mm"

        """
        ...
    


class PadstackLayer:
    """Provides a data class for the definition of a padstack layer and relative pad and antipad values."""
    def __init__(self, padstack, layer_name, elevation, thickness) -> None:
        ...
    
    @property
    def layer_name(self): # -> Any:
        """Padstack instance layer.

        Returns
        -------
        str
            Name of the padstack instance layer.
        """
        ...
    
    @property
    def pad_radius(self): # -> int:
        """Pad radius on the specified layer.

        Returns
        -------
        float
            Pad radius on the specified layer.
        """
        ...
    
    @pad_radius.setter
    def pad_radius(self, value): # -> None:
        ...
    
    @property
    def antipad_radius(self): # -> int:
        """Antipad radius on the specified layer.

        Returns
        -------
        float
            Antipad radius on the specified layer.
        """
        ...
    
    @antipad_radius.setter
    def antipad_radius(self, value): # -> None:
        ...
    


class Padstack:
    """Provides the ``Padstack`` class member of Stackup3D."""
    def __init__(self, app, stackup, name, material=...) -> None:
        ...
    
    @property
    def plating_ratio(self): # -> int | float | str:
        """Plating ratio between 0 and 1.

        Returns
        -------
        float
        """
        ...
    
    @plating_ratio.setter
    def plating_ratio(self, val): # -> None:
        ...
    
    @property
    def padstacks_by_layer(self): # -> dict[Any, Any]:
        """Get the padstack definitions by layers.

        Returns
        -------
        dict
            Dictionary of padstack definitions by layers.
        """
        ...
    
    @property
    def num_sides(self): # -> int:
        """Number of sides on the circle, which is ``0`` for a true circle.

        Returns
        -------
        int
        """
        ...
    
    @num_sides.setter
    def num_sides(self, val): # -> None:
        ...
    
    @pyaedt_function_handler()
    def set_all_pad_value(self, value): # -> Literal[True]:
        """Set all pads in all layers to a specified value.

        Parameters
        ----------
        value : float
            Pad radius.

        Returns
        -------
        bool
            "True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def set_all_antipad_value(self, value): # -> Literal[True]:
        """Set all antipads in all layers to a specified value.

        Parameters
        ----------
        value : float
            Pad radius.

        Returns
        -------
        bool
             "True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def set_start_layer(self, layer): # -> Literal[True]:
        """Set the start layer to a specified value.

        Parameters
        ----------
        layer : str
            Layer name.

        Returns
        -------
        bool
             "True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def set_stop_layer(self, layer): # -> Literal[True]:
        """Set the stop layer to a specified value.

        Parameters
        ----------
        layer : str
            Layer name.

        Returns
        -------
        bool
             "True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler()
    def add_via(self, position_x=..., position_y=..., instance_name=..., reference_system=...): # -> None:
        """Insert a new via on this padstack.

        Parameters
        ----------
        position_x : float, optional
            Center x position. The default is ``0``.
        position_y : float, optional
            Center y position. The default is ``0``.
        instance_name : str, optional
            Via name. The default is ``None``.
        reference_system : str, optional
            Whether to use an existing reference system or create a new one. The default
            is ``None``, in which case a new reference system is created.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Object created.
        """
        ...
    


class Stackup3D:
    """Main Stackup3D Class.

    Parameters
    ----------
    application : :class:`ansys.aedt.core.hfss.Hfss`
        HFSS design or project where the variable is to be created.
    frequency : float
        The stackup frequency, it will be common to all layers in the stackup.

    Examples
    --------

    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
    >>> hfss = Hfss(new_desktop=True)
    >>> my_stackup = Stackup3D(hfss, 2.5e9)

    """
    def __init__(self, application, frequency=...) -> None:
        ...
    
    @property
    def thickness(self): # -> NamedVariable:
        """Total stackup thickness.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
        """
        ...
    
    @property
    def application(self): # -> Any:
        """Application object.

        Returns
        -------
        :class:`ansys.aedt.core.hfss.Hfss`
        """
        ...
    
    @property
    def padstacks(self): # -> list[Any]:
        """List of definitions created.

        Returns
        -------
        List
        """
        ...
    
    @property
    def dielectrics(self): # -> list[Any]:
        """List of dielectrics created.

        Returns
        -------
        List
        """
        ...
    
    @property
    def grounds(self): # -> list[Any]:
        """List of grounds created.

        Returns
        -------
        List
        """
        ...
    
    @property
    def signals(self): # -> list[Any]:
        """List of signals created.

        Returns
        -------
        List
        """
        ...
    
    @property
    def objects(self): # -> list[Any]:
        """List of objects created.

        Returns
        -------
        List
        """
        ...
    
    @property
    def objects_by_layer(self): # -> dict[Any, Any]:
        """List of definitions created.

        Returns
        -------
        List
        """
        ...
    
    @property
    def start_position(self): # -> NamedVariable:
        """Variable containing the start position.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
        """
        ...
    
    @start_position.setter
    def start_position(self, expression): # -> None:
        ...
    
    @property
    def dielectric_x_position(self): # -> NamedVariable:
        """Stackup x origin.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @dielectric_x_position.setter
    def dielectric_x_position(self, expression): # -> None:
        ...
    
    @property
    def dielectric_y_position(self): # -> NamedVariable:
        """Stackup y origin.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @dielectric_y_position.setter
    def dielectric_y_position(self, expression): # -> None:
        ...
    
    @property
    def dielectric_width(self): # -> NamedVariable:
        """Stackup width.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @dielectric_width.setter
    def dielectric_width(self, expression): # -> None:
        ...
    
    @property
    def dielectric_length(self): # -> NamedVariable:
        """Stackup length.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @dielectric_length.setter
    def dielectric_length(self, expression): # -> None:
        ...
    
    @property
    def layer_names(self): # -> list[Any]:
        """List of all layer names.

        Returns
        -------
        list
        """
        ...
    
    @property
    def layer_positions(self): # -> list[Any]:
        """List of all layer positions.

        Returns
        -------
        List
        """
        ...
    
    @property
    def stackup_layers(self): # -> dict[Any, Any]:
        """Dictionary of all stackup layers.

        Returns
        -------
        dict
        """
        ...
    
    @property
    def z_position_offset(self): # -> int:
        """Elevation.

        Returns
        -------

        """
        ...
    
    @property
    def frequency(self): # -> NamedVariable | None:
        """Frequency variable.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
        """
        ...
    
    @property
    def duplicated_material_list(self): # -> list[Any]:
        """List of all duplicated material.

        Returns
        -------
        List
        """
        ...
    
    @pyaedt_function_handler()
    def add_padstack(self, name, material=...): # -> Padstack:
        """Add a new padstack definition.

        Parameters
        ----------
        name : str
            padstack name
        material : str, optional
            Padstack material. The default is ``"copper"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Padstack`
        """
        ...
    
    @pyaedt_function_handler()
    def add_layer(self, name, layer_type=..., material_name=..., thickness=..., fill_material=..., frequency=...): # -> Layer3D:
        """Add a new layer to the stackup.

        The new layer can be a signal (S), ground (G), or dielectric (D).
        The layer is entirely filled with the specified fill material. Anything will be drawn
        material.

        Parameters
        ----------
        name : str
            Layer name.
        layer_type : str, optional
            Layer type. The default is ``"S"``. Options are:

             - ``"D"`` for "dielectric" layer
             - ``"G"`` for "ground" layer
             - ``"S"`` for "signal" layer

        material_name : str, optional
            Material name. The default is ``"copper"``. The material is parametrized.
        thickness : float, optional
            Thickness value. The default is ``0.035``. The thickness will be parametrized.
        fill_material : str, optional
            Fill material name. The default is ``"FR4_epoxy"``. The fill material will be
            parametrized. This parameter is not valid for dielectrics.
        frequency : float, optional
            The layer frequency, it will be common to all geometric shapes on the layer. The default is None, so each
            shape must have their own frequency.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
            Layer object.

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> my_layer = my_stackup.add_layer("my_layer")

        """
        ...
    
    @pyaedt_function_handler()
    def add_signal_layer(self, name, material=..., thickness=..., fill_material=..., frequency=...): # -> Layer3D:
        """Add a new ground layer to the stackup.

        A signal layer is positive. The layer is entirely filled with the fill material.
        Anything will be drawn material.

        Parameters
        ----------
        name : str
            Layer name.
        material : str
            Material name. Material will be parametrized.
        thickness : float, str, None
            Thickness value. Thickness will be parametrized.
        fill_material : str
            Fill Material name. Material will be parametrized.=
        material : str, optional
            Material name. Material will be parametrized. Default value is `"copper"`.
        thickness : float, optional
            Thickness value. Thickness will be parametrized. Default value is `0.035`.
        fill_material : str, optional
            Fill material name. Material will be parametrized. Default value is `"FR4_epoxy"`.
        frequency : float, optional
            The layer frequency, it will be common to all geometric shapes on the layer. The default is None, so each
            shape must have their own frequency.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
            Layer object.

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> my_signal_layer = my_stackup.add_signal_layer("signal_layer")

        """
        ...
    
    @pyaedt_function_handler()
    def add_dielectric_layer(self, name, material=..., thickness=..., frequency=...): # -> Layer3D:
        """Add a new dielectric layer to the stackup.

        Parameters
        ----------
        name : str
            Layer name.
        material : str
            Material name. The default is ``"FR4_epoxy"``. The material will be parametrized.
        thickness : float, str, optional
            Thickness value. The default is ``0.035``. The thickness will be parametrized.
        frequency : float, optional
            The layer frequency, it will be common to all geometric shapes on the layer. The default is None, so each
            shape must have their own frequency.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
            Layer object.

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> my_dielectric_layer = my_stackup.add_dielectric_layer("diel", thickness=1.5, material="Duroid (tm)")

        """
        ...
    
    @pyaedt_function_handler()
    def add_ground_layer(self, name, material=..., thickness=..., fill_material=..., frequency=...): # -> Layer3D:
        """Add a new ground layer to the stackup.

        A ground layer is negative.
        The layer is entirely filled with  metal. Any polygon will draw a void in it.

        Parameters
        ----------
        name : str
            Layer name.
        material : str, op
            Material name. Material will be parametrized.
        thickness : float, str, None
            Thickness value. Thickness will be parametrized.
        fill_material : str
            Fill Material name. Material will be parametrized.
        frequency : float, optional
            The layer frequency, it will be common to all geometric shapes on the layer. The default is None, so each
            shape must have their own frequency.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
            Layer Object.

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> my_ground_layer = my_stackup.add_ground_layer("gnd")

        """
        ...
    
    @pyaedt_function_handler()
    def resize(self, percentage_offset): # -> Literal[True]:
        """Resize the stackup around objects created by a percentage offset.

        Parameters
        ----------
        percentage_offset : float
            Offset of resize. The value must be greater than 0.

        Returns
        -------
        bool
        """
        ...
    
    def resize_around_element(self, element, percentage_offset=...): # -> Literal[True]:
        """Resize the stackup around parametrized objects and make it parametrize.

        Parameters
        ----------
        element : :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Patch,
            :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Trace
            Element around which the resizing is done.
        percentage_offset : float, optional
            Offset of resize. Value accepted are greater than 0. O.25 by default.

        Returns
        -------
        bool

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_patch = top.add_patch(frequency=None, patch_width=51, patch_name="MLPatch")
        >>> my_stackup.resize_around_element(my_patch)

        """
        ...
    


class CommonObject:
    """CommonObject Class in Stackup3D. This class must not be directly used."""
    def __init__(self, application) -> None:
        ...
    
    @property
    def reference_system(self): # -> None:
        """Coordinate system of the object.

        Returns
        -------
        str
        """
        ...
    
    @property
    def dielectric_layer(self): # -> None:
        """Dielectric layer that the object belongs to.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
        """
        ...
    
    @property
    def signal_layer(self): # -> None:
        """Signal layer that the object belongs to.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
        """
        ...
    
    @property
    def name(self): # -> None:
        """Object name.

        Returns
        -------
        str
        """
        ...
    
    @property
    def application(self): # -> Any:
        """App object."""
        ...
    
    @property
    def aedt_object(self): # -> None:
        """PyAEDT object 3D.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
        """
        ...
    
    @property
    def layer_name(self): # -> None:
        """Layer name.

        Returns
        -------
        str
        """
        ...
    
    @property
    def layer_number(self): # -> None:
        """Layer ID.

        Returns
        -------
        int
        """
        ...
    
    @property
    def material_name(self): # -> None:
        """Material name.

        Returns
        -------
        str
        """
        ...
    
    @property
    def points_on_layer(self): # -> list[list[Any]]:
        """Object bounding box.

        Returns
        -------
        List
            List of [x,y] coordinate of the bounding box.
        """
        ...
    


class Patch(CommonObject):
    """Patch Class in Stackup3D. Create a parametrized patch.

    It is preferable to use the add_patch method
    in the class Layer3D than directly the class constructor.

    Parameters
    ----------
    application : :class:`ansys.aedt.core.hfss.Hfss`
        HFSS design or project where the variable is to be created.
    frequency : float, None
        Target resonant frequency for the patch antenna. The default is ``None``,
        in which case the patch frequency is that of the
        layer or of the stackup.
    dx : float
        The patch width.
    signal_layer : :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
        The signal layer where the patch will be drawn.
    dielectric_layer : :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
        The dielectric layer between the patch and the ground layer. Its permittivity and thickness are used in
        prediction formulas.
    dy : float, None, optional
        The patch length. By default, it is None and so the length is calculated by prediction formulas.
    patch_position_x : float, optional
        Patch x position, by default it is 0.
    patch_position_y : float, optional
        Patch y position, by default it is 0.
    patch_name : str, optional
        Patch name, by  default "patch".
    reference_system : str, None, optional
        Coordinate system of the patch. By default, None.
    axis : str, optional
        Patch length axis, by default "X".

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
    >>> hfss = Hfss()
    >>> stackup = Stackup3D(hfss)
    >>> gnd = stackup.add_ground_layer("ground", material="copper", thickness=0.035, fill_material="air")
    >>> dielectric = stackup.add_dielectric_layer("dielectric", thickness="0.5" + length_units, material="Duroid (tm)")
    >>> signal = stackup.add_signal_layer("signal", material="copper", thickness=0.035, fill_material="air")
    >>> patch = signal.add_patch(patch_length=9.57, patch_width=9.25, patch_name="Patch")
    >>> stackup.resize_around_element(patch)
    >>> pad_length = [3, 3, 3, 3, 3, 3]  # Air bounding box buffer in mm.
    >>> region = hfss.modeler.create_region(pad_length, is_percentage=False)
    >>> hfss.assign_radiation_boundary_to_objects(region)
    >>> patch.create_probe_port(gnd, rel_x_offset=0.485)

    """
    def __init__(self, application, frequency, dx, signal_layer, dielectric_layer, dy=..., patch_position_x=..., patch_position_y=..., patch_name=..., reference_system=..., axis=...) -> None:
        ...
    
    @property
    def frequency(self): # -> NamedVariable:
        """Model frequency.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def substrate_thickness(self):
        """Substrate thickness.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def width(self): # -> NamedVariable:
        """Width.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @property
    def position_x(self): # -> NamedVariable:
        """Starting position X.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @property
    def position_y(self): # -> NamedVariable:
        """Starting position Y.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @property
    def permittivity(self): # -> NamedVariable:
        """Permittivity.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @property
    def effective_permittivity(self): # -> NamedVariable:
        """Effective permittivity.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @property
    def added_length(self): # -> NamedVariable:
        """Added length calculation.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable object.
        """
        ...
    
    @property
    def wave_length(self): # -> NamedVariable:
        """Wave length.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def length(self): # -> NamedVariable:
        """Length.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def impedance(self): # -> tuple[NamedVariable, NamedVariable]:
        """Impedance.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    def create_probe_port(self, reference_layer, rel_x_offset=..., rel_y_offset=..., r=..., name=...): # -> None:
        """Create a coaxial probe port for the patch.

        Parameters
        ----------
        reference_layer : class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
            Reference layer (ground).

        rel_x_offset : float,
            Relative x-offset for probe feed.
            Provide a value between 0.0 and 1.0.
            Offset in the x-direction relative to the center of the patch.
            `0` places the probe at the center of the patch.
            `1` places the probe at the edge of the patch.
            Default: 0

        rel_y_offset : float, value between 0 and 1
            `0` places the probe at the center of the patch.
            `1` places the probe at the edge of the patch.
            Default: 0

        d : float, probe diameter
            Default: 0.01

        name : str, optional name of probe port.
            Default value `"Probe"`

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_patch = top.add_patch(frequency=None, patch_width=51, patch_name="MLPatch")
        >>> my_stackup.resize_around_element(my_patch)
        >>> my_patch.create_probe_port(gnd)
        """
        ...
    
    def create_lumped_port(self, reference_layer, opposite_side=..., port_name=..., axisdir=...):
        """Create a parametrized lumped port.

        Parameters
        ----------
        reference_layer : class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
            Reference layer, which is the ground layer in most cases.
        opposite_side : bool, optional
            Change the side where the port is created.
        port_name : str, optional
            Name of the lumped port.
        axisdir : int or :class:`ansys.aedt.core.application.analysis.Analysis.AxisDir`, optional
            Position of the port. It should be one of the values for ``Application.AxisDir``,
            which are: ``XNeg``, ``YNeg``, ``ZNeg``, ``XPos``, ``YPos``, and ``ZPos``.
            The default is ``Application.AxisDir.XNeg``.

        Returns
        -------
        bool

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_patch = top.add_patch(frequency=None, patch_width=51, patch_name="MLPatch")
        >>> my_stackup.resize_around_element(my_patch)
        >>> my_patch.create_lumped_port(gnd)
        """
        ...
    
    def quarter_wave_feeding_line(self, impedance_to_adapt=...): # -> Trace:
        """Create a Trace to feed the patch.

        The trace length is the quarter wavelength, and this width is calculated
        to return the desired impedance.

        Parameters
        ----------
        impedance_to_adapt : float, optional
            Impedance the feeding line must return. By default 50 Ohms.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Trace`

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_patch = top.add_patch(frequency=None, patch_width=51, patch_name="MLPatch")
        >>> my_stackup.resize_around_element(my_patch)
        >>> my_feeding_line = my_patch.quarter_wave_feeding_line()
        >>> my_stackup.dielectric_x_position.expression = my_stackup.dielectric_x_position.expression +
        >>> " - " + my_feeding_line.length.name
        >>> my_stackup.dielectric_length.expression = my_stackup.dielectric_length.expression +
        >>> " + " + my_feeding_line.length.name

        """
        ...
    
    def set_optimal_width(self): # -> None:
        """Set the expression of the NamedVariable corresponding to the patch width, to an optimal expression.

        Examples
        --------

        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss()
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_patch = top.add_patch(frequency=None, patch_width=51, patch_name="MLPatch")
        >>> my_stackup.resize_around_element(my_patch)
        >>> my_patch.set_optimal_width()

        """
        ...
    


class Trace(CommonObject):
    """Trace Class in Stackup3D. Create a parametrized trace.

    It is preferable to use the add_trace method in the class Layer3D
    than directly the class constructor.

    Parameters
    ----------
    application : :class:`ansys.aedt.core.hfss.Hfss`
        HFSS design or project where the variable is to be created.
    frequency : float, None
        The line frequency, it is used in prediction formulas. If it is None, the line frequency will be that of the
        layer or of the stackup.
    line_width : float, None
        The line width. If it is None, it will calculate it from characteristic impedance of the line.
    line_impedance : float
        The characteristic impedance of the line. If a line width is entered by the user, the characteristic impedance
        will be calculated from it.
    signal_layer : :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
        The signal layer where the line will be drawn.
    dielectric_layer : :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
        The dielectric layer between the line and the ground layer. Its permittivity and thickness are used in
        prediction formulas.
    line_electrical_length : float, None, optional
        The ratio between the line length and the wavelength in degree. By default 90 which is corresponding
        to the quarter of the wavelength. If it is None, it will be directly calculated from the line length entered
        by the user.
    line_length : float, None, optional
        The line length. By default, it is None and so the length is calculated by prediction formulas according to the
        electrical length.
    line_position_x : float, optional
        Line x position, by default it is 0.
    line_position_y : float, optional
        Line y position, by default it is 0.
    line_name : str, optional
        Line name, by  default "line".
    reference_system : str, None, optional
        Coordinate system of the line. By default, None.
    axis : str, optional
        Line length axis, by default "X".

    Examples
    --------
    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
    >>> hfss = Hfss(new_desktop=True)
    >>> my_stackup = Stackup3D(hfss, 2.5e9)
    >>> gnd = my_stackup.add_ground_layer("gnd")
    >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
    >>> top = my_stackup.add_signal_layer("top")
    >>> my_trace = top.add_trace(line_width=2.5, line_length=22)
    >>> my_stackup.resize_around_element(my_trace)
    """
    def __init__(self, application, frequency, line_width, line_impedance, signal_layer, dielectric_layer, line_electrical_length=..., line_length=..., line_position_x=..., line_position_y=..., line_name=..., reference_system=..., axis=...) -> None:
        ...
    
    @property
    def frequency(self): # -> NamedVariable:
        """Frequency.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def substrate_thickness(self):
        """Substrate Thickness.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def width(self): # -> NamedVariable | None:
        """Width.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def width_h_w(self): # -> NamedVariable | None:
        """Width when the substrat thickness is two times upper than the width.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def width_w_h(self): # -> NamedVariable | None:
        """Width when the width is two times upper than substrat thickness.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def position_x(self): # -> NamedVariable:
        """Starting Position X.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def position_y(self): # -> NamedVariable:
        """Starting Position Y.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def permittivity(self):
        """Permittivity.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def added_length(self): # -> NamedVariable:
        """Added Length.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def length(self): # -> NamedVariable:
        """Length.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def charac_impedance(self): # -> NamedVariable:
        """Characteristic Impedance.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def effective_permittivity(self): # -> NamedVariable | None:
        """Effective Permittivity.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def effective_permittivity_w_h(self): # -> NamedVariable | None:
        """Effective Permittivity when width is upper than dielectric thickness.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def effective_permittivity_h_w(self): # -> NamedVariable | None:
        """Effective Permittivity when dielectric thickness is upper than width.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def wave_length(self): # -> NamedVariable:
        """Wave Length.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    @property
    def electrical_length(self): # -> NamedVariable:
        """Electrical Length.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.NamedVariable`
            Variable Object.
        """
        ...
    
    def create_lumped_port(self, reference_layer, opposite_side=..., port_name=..., axisdir=...):
        """Create a parametrized lumped port.

        Parameters
        ----------
        reference_layer : class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
            Reference layer, which is the ground layer in most cases.
        opposite_side : bool, optional
            Change the side where the port is created.
        port_name : str, optional
            Name of the lumped port.
        axisdir : int or :class:`ansys.aedt.core.application.analysis.Analysis.AxisDir`, optional
            Position of the port. It should be one of the values for ``Application.AxisDir``,
            which are: ``XNeg``, ``YNeg``, ``ZNeg``, ``XPos``, ``YPos``, and ``ZPos``.
            The default is ``Application.AxisDir.XNeg``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
        >>> hfss = Hfss(new_desktop=True)
        >>> my_stackup = Stackup3D(hfss, 2.5e9)
        >>> gnd = my_stackup.add_ground_layer("gnd")
        >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
        >>> top = my_stackup.add_signal_layer("top")
        >>> my_trace = top.add_trace(line_width=2.5, line_length=90, is_electrical_length=True)
        >>> my_stackup.resize_around_element(my_trace)
        >>> my_trace.create_lumped_port(gnd)
        >>> my_trace.create_lumped_port(gnd, opposite_side=True)

        """
        ...
    


class Polygon(CommonObject):
    """Polygon Class in Stackup3D. It is preferable to use the add_polygon method in the class Layer3D than directly
    the class constructor.

    Parameters
    ----------
    application : :class:`ansys.aedt.core.hfss.Hfss`
        HFSS design or project where the variable is to be created.
    point_list : list
        Points list of [x,y] coordinates.
    signal_layer : :class:`ansys.aedt.core.modeler.advanced_cad.stackup_3d.Layer3D`
        The signal layer where the line will be drawn.
    poly_name : str, optional
            Polygon name. The default is ``poly``.
    mat_name : str, optional
        The polygon material name.
    is_void : bool, optional
            Whether the polygon is a void. The default is ``False``.
            On ground layers, it will act opposite of the Boolean value because the ground
            is negative.
    reference_system : str, None, optional
        Coordinate system of the polygon. By default, None.

    Examples
    --------

    >>> from ansys.aedt.core import Hfss
    >>> from ansys.aedt.core.modeler.advanced_cad.stackup_3d import Stackup3D
    >>> hfss = Hfss(new_desktop=True)
    >>> my_stackup = Stackup3D(hfss, 2.5e9)
    >>> gnd = my_stackup.add_ground_layer("gnd", thickness=None)
    >>> my_stackup.add_dielectric_layer("diel1", thickness=1.5, material="Duroid (tm)")
    >>> top = my_stackup.add_signal_layer("top", thickness=None)
    >>> my_polygon = top.add_polygon([[0, 0], [0, 1], [1, 1], [1, 0]])
    >>> my_stackup.dielectric_x_position = "2mm"
    >>> my_stackup.dielectric_y_position = "2mm"
    >>> my_stackup.dielectric_length = "-3mm"
    >>> my_stackup.dielectric_width = "-3mm"

    """
    def __init__(self, application, point_list, signal_layer, poly_name=..., mat_name=..., is_void=..., reference_system=...) -> None:
        ...
    
    @property
    def points_on_layer(self): # -> list[list[Any]]:
        """Object Bounding Box.

        Returns
        -------
        List
            List of [x,y] coordinate of bounding box.
        """
        ...
    


