"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.application.analysis_3d import FieldAnalysis3D
from ansys.aedt.core.generic.general_methods import deprecate_argument, pyaedt_function_handler
from ansys.aedt.core.mixins import CreateBoundaryMixin

"""This module contains these classes: ``Q2d``, ``Q3d``, and ``QExtractor``."""
class QExtractor(FieldAnalysis3D):
    """Extracts a 2D or 3D field analysis.

    Parameters
    ----------
    FieldAnalysis3D :

    FieldAnalysis2D :

    object :


    """
    @property
    def design_file(self): # -> Path:
        """Design file."""
        ...
    
    def __init__(self, Q3DType, project=..., design=..., solution_type=..., setup_name=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @pyaedt_function_handler()
    def sources(self, matrix_index=..., is_gc_sources=...):
        """List of matrix sources.

        Parameters
        ----------
        matrix_index : int, optional
            Matrix index in matrices list. Default is ``0`` to use main matrix with no reduction.
        is_gc_sources : bool,
            In Q3d, define if to return GC sources or RL sources. Default `True`.

        Returns
        -------
        List
        """
        ...
    
    @pyaedt_function_handler(source_names="assignment", rm_name="reduced_matrix")
    def insert_reduced_matrix(self, operation_name, assignment=..., reduced_matrix=..., new_net_name=..., new_source_name=..., new_sink_name=...): # -> Matrix:
        """Insert a new reduced matrix.

        Parameters
        ----------
        operation_name : str
            Name of the operation to create.
        assignment : list, str, optional
            List of sources or nets or arguments needed for the operation. The default
            is ``None``.
        reduced_matrix : str, optional
            Name of the reduced matrix. The default is ``None``.
        new_net_name : str, optional
            Name of the new net. The default is ``None``.
        new_source_name : str, optional
            Name of the new source. The default is ``None``.
        new_sink_name : str, optional
            Name of the new sink. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.q3d_boundary.Matrix`
            Matrix object.
        """
        ...
    
    @pyaedt_function_handler()
    def get_all_sources(self):
        """Get all setup sources.

        Returns
        -------
        list of str
            List of all setup sources.

        References
        ----------
        >>> oModule.GetAllSources
        """
        ...
    
    @pyaedt_function_handler()
    def get_traces_for_plot(self, get_self_terms=..., get_mutual_terms=..., first_element_filter=..., second_element_filter=..., category=...):
        """Get a list of traces of specified designs ready to use in plot reports.

        Parameters
        ----------
        get_self_terms : bool, optional
            Whether to get self terms. The default is ``True``.
        get_mutual_terms : bool, optional
            Whether to get mutual terms. The default is ``True``.
        first_element_filter : str, optional
            Filter to apply to the first element of the equation.
            This parameter accepts ``*`` and ``?`` as special characters. The default is ``None``.
        second_element_filter : str, optional
            Filter to apply to the second element of the equation.
            This parameter accepts ``*`` and ``?`` as special characters. The default is ``None``.
        category : str
            Plot category name as in the report, including operator.
            The default is ``"C"``, which is the plot category name for capacitance.

        Returns
        -------
        list
            Traces of specified designs ready to use in plot reports.

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> hfss = Q3d(project_path)
        >>> hfss.get_traces_for_plot(first_element_filter="Bo?1", second_element_filter="GND*", category="C")
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup", mesh_path="output_file")
    def export_mesh_stats(self, setup, variations=..., output_file=..., setup_type=...): # -> str:
        """Export mesh statistics to a file.

        Parameters
        ----------
        setup : str
            Setup name.
        variations : str, optional
            Variation list. The default is ``""``.
        output_file : str or :class:`pathlib.Path`, optional
            Full path to the mesh statistics file. The default is ``None``, in which
            case the working directory is used.
        setup_type : str, optional
            Setup type in Q3D. Options are ``"CG"``, ``"AC RL"``, and ``"DC RL"``. The
            default is ``"CG"``.

        Returns
        -------
        str
            File path.

        References
        ----------
        >>> oDesign.ExportMeshStats
        """
        ...
    
    @pyaedt_function_handler()
    def edit_sources(self, cg=..., acrl=..., dcrl=...): # -> bool:
        """Set up the source loaded for Q3D or Q2D in multiple sources simultaneously.

        Parameters
        ----------
        cg : dict, optional
            Dictionary of input sources to modify the module and phase of a CG solution.
            Dictionary values can be:
            - 1 Value to set up ``0deg`` as the default
            - 2 Values tuple or list (magnitude and phase)
        acrl : dict, optional
            Dictionary of input sources to modify the module and phase of an ACRL solution.
            Dictionary values can be:
            - 1 Value to set up 0deg as the default
            - 2 Values tuple or list (magnitude and phase)
        dcrl : dict, optional
            Dictionary of input sources to modify the module and phase of a DCRL solution, This
            parameter is only available for Q3D. Dictionary values can be:
            - 1 Value to set up ``0deg`` as the default
            - 2 Values tuple or list (magnitude and phase)

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        Examples
        --------
        >>> sources_cg = {"Box1": ("1V", "0deg"), "Box1_2": "1V"}
        >>> sources_acrl = {"Box1:Source1": ("5A", "0deg")}
        >>> sources_dcrl = {"Box1_1:Source2": ("5V", "0deg")}
        >>> hfss.edit_sources(sources_cg, sources_acrl, sources_dcrl)
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def export_matrix_data(self, file_name, problem_type=..., variations=..., setup=..., sweep=..., reduce_matrix=..., r_unit=..., l_unit=..., c_unit=..., g_unit=..., freq=..., freq_unit=..., matrix_type=..., export_ac_dc_res=..., precision=..., field_width=..., use_sci_notation=..., length_setting=..., length=...):
        """Export matrix data.

        Parameters
        ----------
        file_name : str
            Full path to save the matrix data to.
            Options for file extensions are: ``*.m``, ``*.lvl``, ``*.csv``,
            and ``*.txt``.
        problem_type : str, optional
            Problem type. The default value is ``None``, in which case ``"C"`` is
            used. Options are ``"C"``, ``"AC RL"``, and ``"DC RL"``.
        variations : str, optional
            Design variation. The default is ``None``, in which case the
            current nominal variation is used.
        setup : str, optional
            Setup name. The default value is ``None``, in which case the first
            analysis setup is used.
        sweep : str, optional
            Solution frequency. The default is ``None``, in which case
            the default adaptive is used.
        reduce_matrix : str, optional
            Name of the matrix to display.
            Default value is ``"Original"``.
        r_unit : str, optional
            Resistance unit value.
            The default value is ``"ohm"``.
        l_unit : str, optional
            Inductance unit value.
            The default value is ``"nH"``.
        c_unit : str, optional
            Capacitance unit value.
            Default value is ``"pF"``.
        g_unit : str, optional
            Conductance unit value.
            The default value is ``"mho"``.
        freq : str, optional
            Selected frequency.
            The default value is ``"0Hz"``.
        freq_unit : str, optional
            Frequency unit. The default value is ``None``, in which case the
            default unit is used.
        matrix_type : str, optional
            Matrix type. The default is ``None``.
            Options are ``"Couple"``, ``"Maxwell"``, and ``"Spice"``.
        export_ac_dc_res : bool, optional
            Whether to add the AC and DC resistance.
            The default is ``False``.
        precision : int, optional
            Precision format.
            The default value is ``15``.
        field_width : int, optional
            Field Width.
            The default value is ``20``.
        use_sci_notation : bool, optional
            Use sci notation.
            Whether to use scientific notation.
            The default value is ``True``.  When ``False``, the display format is used.
        length_setting : str, optional
            Length setting if the design si 2D.
            The default value is ``"Distributed"``.
        length : str, optional
            Length.
            The default value is ``"1meter"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(file_name="output_file", setup_name="setup", matrix_name="matrix", num_cells="cells", freq="frequency", model_name="model")
    def export_equivalent_circuit(self, output_file, setup=..., sweep=..., variations=..., matrix=..., cells=..., user_changed_settings=..., include_cap=..., include_cond=..., include_dcr=..., include_dcl=..., include_acr=..., include_acl=..., include_r=..., include_l=..., add_resistance=..., parse_pin_names=..., export_distributed=..., lumped_length=..., rise_time_value=..., rise_time_unit=..., coupling_limit_type=..., cap_limit=..., ind_limit=..., res_limit=..., cond_limit=..., model=..., frequency=..., file_type=..., include_cpp=...):
        """Export matrix data.

        Parameters
        ----------
        output_file : str
            Full path for saving the matrix data to.
            Options for file extensions are CIR, SML, SP, PKG, SPC, LIB, CKT, BSP,
            DML, and ICM.
        setup : str, optional
            Setup name.
            The default value is ``None``, in which case the first analysis setup is used.
        sweep : str, optional
            Solution frequency. The default is ``None``, in which case
            the default adaptive is used.
        variations : list or str, optional
            Design variation. The default is ``None``, in which case the
            current nominal variation is used. If you provide a
            design variation, use the format ``{Name}:{Value}``.
        matrix : str, optional
            Name of the matrix to show. The default is ``"Original"``.
        cells : int, optional
            Number of cells in export.
            Default value is 2.
        user_changed_settings : bool, optional
            Whether user has changed settings or not, defaulted to True.
            Default value is False.
        include_cap : bool, optional
            Include Capacitance.
            Default value is True.
        include_cond : bool, optional
            Include Conductance.
            Default value is True.
        coupling_limit_type : int, optional
            Coupling limit types.
            Values can be: ``"By Value" -> 0`` or ``"By Fraction Of Self Term" -> 1``.
            If None, no coupling limits are set.
            Default value is None.
        include_dcr : bool, optional
            Flag indicates whether to export DC resistance matrix.
            Default value is ``False``.
        include_dcl : bool, optional
            Flag indicates whether to export DC Inductance matrix.
            Default value is ``False``.
        include_acr : bool, optional
            Flag indicates whether to export AC resistance matrix.
            Default value is ``False``.
        include_acl : bool, optional
            Flag indicates whether to export AC inductance matrix.
            Default value is ``False``.
        include_r : bool, optional
            Flag indicates whether to export resistance.
            Default value is True.
        include_l : bool, optional
            Flag indicates whether to export inductance.
            Default value is True.
        add_resistance : bool, optional
            Adds the DC and AC resistance.
            Default value is True.
        parse_pin_names : bool, optional
            Parse pin names.
            Default value is False.
        export_distributed : bool, optional
            Flag to tell whether to export in distributed mode or Lumped mode.
            Default value is True.
        lumped_length : str, optional
            Length of the design.
            Default value is 1 meter.
        rise_time_value : str, optional
            Rise time to calculate the number of cells.
            Default value is 1e-09.
        rise_time_unit : str, optional
            Rise time unit.
            Default is s.
        cap_limit : str, optional
            Capacitance limit.
            Default value is 1pF if coupling_limit_type is 0.
            Default value is 0.01 if coupling_limit_type is 1.
        cond_limit : str, optional
            Conductance limit.
            Default value is 1mSie if coupling_limit_type is 0.
            Default value is 0.01 if coupling_limit_type is 1.
        res_limit : str, optional
            Resistance limit.
            Default value is 1ohm if coupling_limit_type is 0.
            Default value is 0.01 if coupling_limit_type is 1.
        ind_limit : str, optional
            Inductance limit.
            Default value is 1nH if coupling_limit_type is 0.
            Default value is 0.01 if coupling_limit_type is 1.
        model : str, optional
            Model name or name of the sub circuit (Optional).
            If None then file_name is considered as model name.
        frequency : str, optional
            Sweep frequency in Hz.
            Default value is 0.
        file_type : str, optional
            The type of file format.
            Type of HSPICE file format. (All HSPICE file formats have the same extension,
            which is ``*.sp``.) Options are:
            "Hspice": simple HSPICE file format.
            "Welement": Nexxim/HSPICE W Element file format
            "RLGC": Nexxim/HSPICE RLGC W Element file format
            Default value is Hspice.
        include_cpp : bool, optional
            Whether to include chip package control.
            Default value is False.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.ExportCircuit

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> aedtapp = Q3d()
        >>> box = aedtapp.modeler.create_box([30, 30, 30], [10, 10, 10], name="mybox")
        >>> net = aedtapp.assign_net(box, "my_net")
        >>> source = aedtapp.assign_source_to_objectface(
        ...     box.bottom_face_z.id, axisdir=0, source_name="Source1", net_name=net.name
        ... )
        >>> sink = aedtapp.sink(box.top_face_z.id, direction=0, name="Sink1", net_name=net.name)
        >>> aedtapp["d"] = "20mm"
        >>> aedtapp.modeler.duplicate_along_line(objid="Box1", vector=[0, "d", 0])
        >>> mysetup = aedtapp.create_setup()
        >>> aedtapp.analyze_setup(mysetup.name)
        >>> aedtapp.export_equivalent_circuit(
        ...     output_file="test_export_circuit.cir", setup=mysetup.name, sweep="LastAdaptive", variations=["d: 20mm"]
        ... )
        """
        ...
    


class Q3d(QExtractor, CreateBoundaryMixin):
    """Provides the Q3D app interface.

    This class allows you to create an instance of Q3D and link to an
    existing project or create a new one.

    Parameters
    ----------
    project : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open. The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    design : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    setup : str, optional
        Name of the setup to use as the nominal. The default is
        ``None``, in which case the active setup is used or nothing
        is used.
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case
        the active version or latest installed version is used.
        This parameter is ignored when Script is launched within AEDT.
        Examples of input values are ``251``, ``25.1``, ``2025.1``, ``"2025.1"``.
    non_graphical : bool, optional
        Whether to launch AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT is launched in graphical mode.
        This parameter is ignored when a script is launched within AEDT.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine. The default is ``False``. This parameter is ignored when
        a script is launched within AEDT.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to open the AEDT student version. The default is ``False``.
        This parameter is ignored when a script is launched within AEDT.
    machine : str, optional
        Machine name to connect the oDesktop session to. This works only in
        2022 R2 and later. The remote server must be up and running with the
        command `"ansysedt.exe -grpcsrv portnum"`. If the machine is `"localhost"`,
        the server also starts if not present.
    port : int, optional
        Port number on which to start the oDesktop communication on an already
        existing server. This parameter is ignored when a new server is created.
        It works only in 2022 R2 and later. The remote server must be up and
        running with the command `"ansysedt.exe -grpcsrv portnum"`.
    aedt_process_id : int, optional
        Process ID for the instance of AEDT to point PyAEDT at. The default is
        ``None``. This parameter is only used when ``new_desktop = False``.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.

    Examples
    --------
    Create an instance of Q3D and connect to an existing Q3D
    design or create a new Q3D design if one does not exist.

    >>> from ansys.aedt.core import Q3d
    >>> app = Q3d()

    """
    @pyaedt_function_handler(designname="design", projectname="project", specified_version="version", setup_name="setup", new_desktop_session="new_desktop")
    def __init__(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @property
    def nets(self): # -> list[Any]:
        """Nets in a Q3D project.

        .. deprecated:: 0.17.1
           Use :func:`net_names` property instead.

        Returns
        -------
        List of nets in a Q3D project.

        """
        ...
    
    @property
    def net_names(self): # -> list[Any]:
        """Nets in a Q3D project.

        Returns
        -------
        List of nets in a Q3D project.

        References
        ----------
        >>> oModule.ListNets
        """
        ...
    
    @property
    def design_nets(self): # -> dict[Any, Any]:
        """Get all nets.

        Returns
        -------
        dict[str, :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`]
           Nets.

        References
        ----------
        >>> oModule.GetExcitations
        """
        ...
    
    @property
    def nets_by_type(self): # -> dict[Any, Any]:
        """Design nets by type.

        Returns
        -------
        dict
            Dictionary of nets.
        """
        ...
    
    @pyaedt_function_handler()
    def delete_all_nets(self): # -> Literal[True]:
        """Delete all nets in the design."""
        ...
    
    @pyaedt_function_handler(nets="assignment")
    def objects_from_nets(self, assignment, materials=...): # -> dict[Any, Any]:
        """Find the objects that belong to one or more nets. You can filter by materials.

        Parameters
        ----------
        assignment : str, list
            One or more nets to search for. The search is case-insensitive.
        materials : str, list, optional
            One or more materials for filtering the net objects. The default
            is ``None``. The search is case insensitive.

        Returns
        -------
        dict
            Dictionary of net name and objects that belongs to it.
        """
        ...
    
    @pyaedt_function_handler()
    def net_sources(self, net_name): # -> list[Any]:
        """Check if a net has sources and return a list of source names.

        Parameters
        ----------
        net_name : str
            Name of the net to search for.

        Returns
        -------
        List
            List of source names.

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> q3d = Q3d("my_project")
        >>> net = q3d.net_sources("Net1")
        """
        ...
    
    @pyaedt_function_handler()
    def net_sinks(self, net_name): # -> list[Any]:
        """Check if a net has sinks and return a list of sink names.

        Parameters
        ----------
        net_name : str
            Name of the net to search for.

        Returns
        -------
        List
            List of sink names.

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> q3d = Q3d("my_project")
        >>> net = q3d.net_sinks("Net1")
        """
        ...
    
    @pyaedt_function_handler()
    def auto_identify_nets(self): # -> Literal[True]:
        """Identify nets automatically.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AutoIdentifyNets
        """
        ...
    
    @pyaedt_function_handler()
    def toggle_net(self, net_name, net_type=...):
        """Toggle net type.

        Parameters
        ----------
        net_name : str or :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`, optional
            Name of the net. The default is ```None``, in which case the
            default name is used.
        net_type : str, bool
            Type of net to create. Options are ``"Signal"``, ``"Ground"`` and ``"Floating"``.
            The default is ``"Signal"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Net object.

        References
        ----------
        >>> oModule.ToggleNet

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> q3d = Q3d()
        >>> box = q3d.modeler.create_box([30, 30, 30], [10, 10, 10], name="mybox")
        >>> aedtapp.auto_identify_nets()
        >>> net = aedtapp.nets[0]
        >>> new_net = aedtapp.toggle_net(net, "Floating")
        """
        ...
    
    @pyaedt_function_handler(objects="assignment")
    def assign_net(self, assignment, net_name=..., net_type=...): # -> BoundaryObject:
        """Assign a net to a list of objects.

        Parameters
        ----------
        assignment : list, str
            List of objects to assign the net to. It can be a single object.
        net_name : str, optional
            Name of the net. The default is ```None``, in which case the
            default name is used.
        net_type : str, bool
            Type of net to create. Options are ``"Signal"``, ``"Ground"`` and ``"Floating"``.
            The default is ``"Signal"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Source object.

        References
        ----------
        >>> oModule.AssignSignalNet
        >>> oModule.AssignGroundNet
        >>> oModule.AssignFloatingNet

        Examples
        --------
        >>> from ansys.aedt.core import Q3d
        >>> q3d = Q3d()
        >>> box = q3d.modeler.create_box([30, 30, 30], [10, 10, 10], name="mybox")
        >>> net_name = "my_net"
        >>> net = q3d.assign_net(box, net_name)
        """
        ...
    
    @pyaedt_function_handler(objects="assignment", axisdir="direction")
    def source(self, assignment=..., direction=..., name=..., net_name=..., terminal_type=...): # -> BoundaryObject:
        """Generate a source on a face of an object or a group of faces or face ids.

        The face ID is selected based on the axis direction. It is the face that
        has the maximum/minimum in this axis direction.

        Parameters
        ----------
        assignment : str, int or list or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name of the object or face ID or face ID list.
        direction : int, optional
            Initial axis direction. Options are ``0`` to ``5``. The default is ``0``.
        name : str, optional
            Name of the source. The default is ``None``.
        net_name : str, optional
            Name of the net. The default is ``None``, in which case the ``object_name`` is considered.
        terminal_type : str
            Type of the terminal. Options are ``voltage`` and ``current``. The default is ``voltage``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Source object.

        References
        ----------
        >>> oModule.AssignSource
        """
        ...
    
    @pyaedt_function_handler(objects="assignment", axisdir="direction")
    def sink(self, assignment=..., direction=..., name=..., net_name=..., terminal_type=...): # -> BoundaryObject:
        """Generate a sink on a face of an object or a group of faces or face ids.

        The face ID is selected based on the axis direction. It is the face that
        has the maximum/minimum in this axis direction.

        Parameters
        ----------
        assignment : str, int or list or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            Name of the object or face ID or face ID list.
        direction : int, optional
            Initial axis direction. Options are ``0`` to ``5``. The default is ``0``.
        name : str, optional
            Name of the source. The default is ``None``.
        net_name : str, optional
            Name of the net. The default is ``None``, in which case the ``object_name`` is considered.
        terminal_type : str
            Type of the terminal. Options are ``voltage`` and ``current``. The default is ``voltage``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Sink object.

        References
        ----------
        >>> oModule.AssignSource
        """
        ...
    
    @pyaedt_function_handler(object_name="assignment", axisdir="direction", sink_name="name")
    def assign_sink_to_objectface(self, assignment, direction=..., name=..., net_name=...): # -> BoundaryObject | Literal[False]:
        """Generate a sink on a face of an object.

        .. deprecated:: 0.8.9
            This method is deprecated. Use the ``sink()`` method instead.

        The face ID is selected based on the axis direction. It is the face that has
        the maximum or minimum in this axis direction.

        Parameters
        ----------
        assignment : str, int
            Name of the object or face ID.
        direction : int, optional
            Initial axis direction. Options are ``0`` to ``5``. The default is ``0``.
        name : str, optional
            Name of the sink. The default is ``None``.
        net_name : str, optional
            Name of the net. The default is ``None``, in which case the ``object_name`` is considered.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Sink object.

        References
        ----------
        >>> oModule.AssignSink
        """
        ...
    
    @pyaedt_function_handler(sheetname="assignment", objectname="object_name", netname="net_name", sinkname="sink_name")
    def assign_sink_to_sheet(self, assignment, object_name=..., net_name=..., sink_name=..., terminal_type=...): # -> BoundaryObject:
        """Generate a sink on a sheet.

        .. deprecated:: 0.8.9
            This method is deprecated. Use the ``sink()`` method instead.

        Parameters
        ----------
        assignment :
            Name of the sheet to create the sink on.
        object_name : str, optional
            Name of the parent object. The default is ``None``.
        net_name : str, optional
            Name of the net. The default is ``None``.
        sink_name : str, optional
            Name of the sink. The default is ``None``.
        terminal_type : str
            Type of the terminal. Options are ``voltage`` and ``current``. The default is ``voltage``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Source object.

        References
        ----------
        >>> oModule.AssignSink
        """
        ...
    
    @pyaedt_function_handler()
    def create_frequency_sweep(self, setupname, units=..., freqstart=..., freqstop=..., freqstep=..., sweepname=...): # -> Literal[False]:
        """Create a frequency sweep.

        .. deprecated:: 0.7.12
            This method is deprecated. To create a frequency sweep use ``create_frequency_sweep()``
            from setup object.
            Example
            -------
            >>> from ansys.aedt.core import Q3d
            >>> q3d = Q3d()
            >>> setup1 = q3d.create_setup(name="Setup1")
            >>> sweep1 = setup1.create_frequency_sweep(unit="GHz", freqstart=0.5, freqstop=1.5, sweepname="Sweep1")
            >>> q3d.release_desktop(True, True)

        Parameters
        ----------
        setupname : str
            Name of the setup that is attached to the sweep.
        units : str, optional
            Units of the frequency. For example, ``"MHz"`` or
            ``"GHz"``. The default is ``None`` which takes the Default Desktop units.
        freqstart : float, str, optional
            Starting frequency of the sweep. The default is ``0``.
             If a unit is passed with the number, such as ``"1MHz"``, the unit is ignored.
        freqstop : float, str, optional
            Stopping frequency of the sweep. The default is ``1``.
            If a unit is passed with the number, such as``"1MHz"``, the unit is ignored.
        freqstep : optional
            Frequency step point.
        sweepname : str, optional
            Name of the sweep. The default is ``None``, in which case the
            default name is used.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_sweeps.SweepHFSS3DLayout`
            Sweep object when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.InsertSweep
        """
        ...
    
    @pyaedt_function_handler()
    def create_discrete_sweep(self, setupname, freqstart, freqstop=..., freqstep=..., units=..., sweepname=..., savefields=...): # -> Literal[False]:
        """Create a discrete sweep with a single frequency value.

        .. deprecated:: 0.7.12
            This method is deprecated. To create a discrete frequency sweep use ``create_frequency_sweep()``
            from setup object.
            Example
            -------
            >>> from ansys.aedt.core import Q3d
            >>> q3d = Q3d()
            >>> setup1 = q3d.create_setup(name="Setup1")
            >>> sweep1 = setup1.create_frequency_sweep(
            ...     unit="GHz", freqstart=0.5, freqstop=1.5, sweepname="Sweep1", sweep_type="Discrete"
            ... )
            >>> q3d.release_desktop(True, True)

        Parameters
        ----------
        setupname : str
            Name of the setup that the sweeps belongs to.
        freqstart : float
            Starting point for the discrete frequency.
        freqstop : float, optional
            Stopping point for the discrete frequency. If ``None``,
            a single-point sweep is performed.
        freqstep : float, optional
            Step point for the discrete frequency. If ``None``,
            11 points are created.
        units : str, optional
            Units of the discrete frequency. For example, ``"MHz"`` or
            ``"GHz"``. The default is ``"GHz"``.
        sweepname : str, optional
            Name of the sweep. The default is ``None``, in which case
            the default name is used.
        savefields : bool, optional
            Whether to save fields. The default is ``False``.

        Returns
        -------
        SweepMatrix
            Sweep option.

        References
        ----------
        >>> oModule.InsertSweep
        """
        ...
    
    @pyaedt_function_handler()
    def set_material_thresholds(self, insulator_threshold=..., perfect_conductor_threshold=..., magnetic_threshold=...): # -> bool:
        """Set material threshold.

        Parameters
        ----------
        insulator_threshold : float, optional
            Threshold for the insulator or conductor. The default is "None", in which
            case the threshold is set to 10000.
        perfect_conductor_threshold : float, optional
            Threshold that decides whether a conductor is perfectly conducting. This value
            must be higher than the value for the insulator threshold. The default is ``None``,
            in which case the value is set to 1E+030.
        magnetic_threshold : float, optional
            Threshold that decides whether a material is magnetic. The default is "None",
            in which case the value is set to 1.01.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(setupname="name")
    def create_setup(self, name=..., **kwargs): # -> SetupHFSSAuto | SetupSBR | SetupMaxwell | SetupQ3D | SetupIcepak | SetupHFSS:
        """Create an analysis setup for Q3D Extractor.

        Optional arguments are passed along with the ``name`` parameter.

        Parameters
        ----------
        name : str, optional
            Name of the setup. The default is "Setup1".
        **kwargs : dict, optional
            Available keys depend on the setup chosen.
            For more information, see :doc:`../SetupTemplatesQ3D`.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.SetupQ3D`
            3D Solver Setup object.

        References
        ----------
        >>> oModule.InsertSetup

        Examples
        --------

        >>> from ansys.aedt.core import Q3d
        >>> app = Q3d()
        >>> app.create_setup(name="Setup1", DC__MinPass=2)

        """
        ...
    
    @pyaedt_function_handler()
    def assign_thin_conductor(self, assignment, material=..., thickness=..., name=...): # -> BoundaryObject | Literal[False]:
        """Assign a thin conductor to a sheet.

        The method accepts both a sheet name or a face id.
        If a face it is provided, then a sheet will be created and the boundary assigned to it.

        Parameters
        ----------
        assignment : str or int or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d` or list
            Object assignment.
        material : str, optional
            Material. Default is ``"copper"``.
        thickness : float, str, optional
            Conductor thickness. It can be as number of a string with units. Default is ``1``.
        name : str, optional
            Name of the boundary. Default is ``""``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Source object.
        """
        ...
    
    @pyaedt_function_handler()
    def get_mutual_coupling(self, source1, sink1, source2, sink2, calculation=..., setup_sweep_name=..., variations=...): # -> Literal[False]:
        """Get mutual coupling between two terminals.

        User has to provide the pair, source and sink of each terminal. If the provided sinks are not part of the
        original matrix, a new matrix will be created.

        Parameters
        ----------
        source1 : str
            First element source.
        sink1 : str
            First element sink.
        source2 : str
            Second element source.
        sink2 : str
            Second element sink.
        calculation : str, optional
            Calculation type.
            Available options are: ``"ACL"``, ``"ACR"``, ``"DCL"``, ``"DCR"``.
            The default is ``"ACL"``.
        setup_sweep_name : str, optional
            Name of the setup. The default is ``None``, in which case the ``nominal_adaptive``
            setup is used. Be sure to build a setup string in the form of
            ``"SetupName : SetupSweep"``, where ``SetupSweep`` is the sweep name to
            use in the export or ``LastAdaptive``.
        variations : dict, optional
            Dictionary of all families including the primary sweep.
            The default is ``None`` which uses all variations of the setup.

        Returns
        -------
        :class:`pyaedt.modules.solutions.SolutionData` or bool
            Solution Data object if successful, ``False`` otherwise.

        Examples
        --------
        >>> from pyaedt import Q3d
        >>> aedtapp = Q3d()
        >>> data = aedtapp.modeler.get_mutual_coupling("a1", "a2", "b1", "b2", calculation="DCL")
        """
        ...
    


class Q2d(QExtractor, CreateBoundaryMixin):
    """Provides the Q2D app interface.

    This class allows you to create an instance of Q2D and link to an
    existing project or create a new one.

    Parameters
    ----------
    project : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open. The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    design : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    setup : str, optional
        Name of the setup to use as the nominal. The default is
        ``None``, in which case the active setup is used or
        nothing is used.
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case
        the active version or latest installed version is used.  This
        parameter is ignored when a script is launched within AEDT.
        Examples of input values are ``251``, ``25.1``, ``2025.1``, ``"2025.1"``.
    non_graphical : bool, optional
        Whether to launch AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT is launched in graphical mode.
        This parameter is ignored when a script is launched within AEDT.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine. The default is ``False``. This parameter is ignored
        when a script is launched within AEDT.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to open the AEDT student version. This parameter is
        ignored when a script is launched within AEDT.
    machine : str, optional
        Machine name to connect the oDesktop session to. This works only in 2022 R2
        and later. The remote server must be up and running with the command
        `"ansysedt.exe -grpcsrv portnum"`. If the machine is `"localhost"`,
        the server also starts if not present.
    port : int, optional
        Port number on which to start the oDesktop communication on an already existing server.
        This parameter is ignored when creating a new server. It works only in 2022 R2 or later.
        The remote server must be up and running with the command `"ansysedt.exe -grpcsrv portnum"`.
    aedt_process_id : int, optional
        Process ID for the instance of AEDT to point PyAEDT at. The default is
        ``None``. This parameter is only used when ``new_desktop = False``.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.

    Examples
    --------
    Create an instance of Q2D and link to a project named
    ``projectname``. If this project does not exist, create one with
    this name.

    >>> from ansys.aedt.core import Q2d
    >>> app = Q2d(projectname)

    Create an instance of Q2D and link to a design named
    ``designname`` in a project named ``projectname``.

    >>> app = Q2d(projectname, designame)

    Create an instance of Q2D and open the specified project,
    which is named ``myfile.aedt``.

    >>> app = Q2d("myfile.aedt")

    """
    @property
    def dim(self): # -> Literal['2D', '3D']:
        """Dimension."""
        ...
    
    @pyaedt_function_handler(designname="design", projectname="project", specified_version="version", setup_name="setup", new_desktop_session="new_desktop")
    def __init__(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @pyaedt_function_handler(position="origin", dimension_list="sizes", matname="material")
    def create_rectangle(self, origin, sizes, name=..., material=...): # -> Point | Plane | Object3d:
        """Create a rectangle.

        Parameters
        ----------
        origin : list
            List of ``[x, y]`` coordinates for the starting point of the rectangle.
        sizes : list
            List of ``[width, height]`` dimensions.
        name : str, optional
            Name of the rectangle. The default is ``None``, in which case
            the default name is assigned.
        material : str, optional
            Name of the material. The default is ``None``, in which case
            the default material is used.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            3D object.

        References
        ----------
        >>> oEditor.CreateRectangle
        """
        ...
    
    @pyaedt_function_handler(target_objects="assignment", unit="units")
    def assign_single_signal_line(self, assignment, name=..., solve_option=..., thickness=..., units=...): # -> None:
        """Assign the conductor type to sheets.

        Parameters
        ----------
        assignment : list
            List of Object3D.
        name : str, optional
            Name of the conductor. The default is ``""``, in which case the default name is used.
        solve_option : str, optional
            Method for solving. Options are ``"SolveInside"``, ``"SolveOnBoundary"``, and ``"Automatic"``.
            The default is ``"SolveInside"``.
        thickness : float, optional
            Conductor thickness. The default is ``None``, in which case the conductor thickness
            is obtained by dividing the conductor's area by its perimeter (A/p). If multiple
            conductors are selected, the average conductor thickness is used.
        units : str, optional
            Thickness unit. The default is ``"um"``.

        References
        ----------
        >>> oModule.AssignSingleSignalLine
        >>> oModule.AssignSingleReferenceGround
        """
        ...
    
    @pyaedt_function_handler(target_objects="assignment", unit="units")
    def assign_single_conductor(self, assignment, name=..., conductor_type=..., solve_option=..., thickness=..., units=...): # -> BoundaryObject:
        """
        Assign the conductor type to sheets.

        Parameters
        ----------
        assignment : list
            List of Object3D.
        name : str, optional
            Name of the conductor. The default is ``""``, in which case the default name is used.
        conductor_type : str
            Type of the conductor. Options are ``"SignalLine"`` and ``"ReferenceGround"``. The default is
            ``"SignalLine"``.
        solve_option : str, optional
            Method for solving. Options are ``"SolveInside"``, ``"SolveOnBoundary"``, and ``"Automatic"``.
            The default is ``"SolveInside"``.
        thickness : float, optional
            Conductor thickness. The default is ``None``, in which case the conductor thickness is obtained by dividing
            the conductor's area by its perimeter (A/p). If multiple conductors are selected, the average conductor
            thickness is used.
        units : str, optional
            Thickness unit. The default is ``"um"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Source object.

        References
        ----------
        >>> oModule.AssignSingleSignalLine
        >>> oModule.AssignSingleReferenceGround
        """
        ...
    
    @pyaedt_function_handler(edges="assignment", unit="units")
    def assign_huray_finitecond_to_edges(self, assignment, radius, ratio, units=..., name=...): # -> BoundaryObject:
        """
        Assign the Huray surface roughness model to edges.

        Parameters
        ----------
        assignment :
        radius :
        ratio :
        units : str, optional
            The default is ``"um"``.
        name : str, optional
            The default is ``""``, in which case the default name is used.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Source object.

        References
        ----------
        >>> oMdoule.AssignFiniteCond
        """
        ...
    
    @pyaedt_function_handler()
    def auto_assign_conductors(self): # -> Literal[True]:
        """Automatically assign conductors to signal lines.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    @deprecate_argument(arg_name="analyze", message="The ``analyze`` argument will be removed in future versions. Analyze before exporting results.")
    def export_w_elements(self, analyze=..., export_folder=...): # -> list[Any]:
        """Export all W-elements to files.

        Parameters
        ----------
        analyze : bool, optional
            Whether to analyze before export. Solutions must be present for the design.
            The default is ``False``.
        export_folder : str or :class:`pathlib.Path`, optional
            Full path to the folder to export files to. The default is ``None``, in
            which case the working directory is used.

        Returns
        -------
        list
            List of all exported files.
        """
        ...
    
    @pyaedt_function_handler(conductor_name="assignment")
    def toggle_conductor_type(self, assignment, new_type): # -> bool:
        """Change the conductor type.

        Parameters
        ----------
        assignment : str
            Name of the conductor to update.
        new_type : str
            New conductor type.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(setup_name="name", setuptype="setup_type")
    def create_setup(self, name=..., setup_type=..., **kwargs): # -> SetupHFSSAuto | SetupSBR | SetupMaxwell | SetupQ3D | SetupIcepak | SetupHFSS:
        """Create an analysis setup for 2D Extractor.

        Optional arguments are passed along with the ``setup_type`` and ``name``
        parameters.  Keyword names correspond to the ``setup_type``
        corresponding to the native AEDT API.  The list of
        keywords here is not exhaustive.

        Parameters
        ----------
        name : str, optional
            Name of the setup. The default is "Setup1".
        setup_type : int, str, optional
            Type of the setup. Options are "IcepakSteadyState"
            and "IcepakTransient". The default is "IcepakSteadyState".
        **kwargs : dict, optional
            Available keys depend on the setup chosen.
            For more information, see :doc:`../SetupTemplatesQ3D`.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.SetupHFSS`
            Solver Setup object.

        References
        ----------
        >>> oModule.InsertSetup

        Examples
        --------

        >>> from ansys.aedt.core import Q2d
        >>> app = Q2d()
        >>> app.create_setup(name="Setup1", RLDataBlock__MinPass=2)

        """
        ...
    


