"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.internal.checks import min_aedt_version

"""This module contains these classes: `CouplingsEmit`.

This module provides for interacting with EMIT Analysis and Results windows.
"""
class CouplingsEmit:
    """Provides for interaction with the EMIT ```coupling`` folder.

    This class is accessible through the results variable
    object (``emit.couplings``) for the EMIT app.

    Parameters
    ----------
    app :
        Inherited parent object.

    Examples
    --------
    >>> from ansys.aedt.core import Emit
    >>> app = Emit()
    >>> my_couplings = app.couplings
    """
    def __init__(self, app) -> None:
        ...
    
    @property
    def logger(self):
        """Logger."""
        ...
    
    @property
    def projdir(self):
        """Project directory."""
        ...
    
    @property
    def coupling_names(self):
        """List of existing link names.

        Parameters
        ----------
        None

        Returns
        -------
        coupling_names : list str
            List of all existing linked couplings.

        Examples
        --------
        >>> app = Emit()
        >>> my_couplings = app.couplings
        >>> coupling_names = my_couplings.coupling_names
        """
        ...
    
    def add_link(self, new_coupling_name): # -> None:
        """Add a new link if it's not already there.

        Parameters
        ----------
        new_coupling_name : str
            Name of the design to link. The design must be
            within the same project as the EMIT design.

        Returns
        -------
        None

        Examples
        --------
        >>> app = Emit()
        >>> app.couplings.add_link("HFSS_Design")
        """
        ...
    
    def delete_link(self, coupling_link_name): # -> None:
        """Delete a link from the EMIT design.

        Parameters
        ----------
        coupling_link_name : str
            Name of the link to delete.

        Returns
        -------
        None

        Examples
        --------
        >>> app = Emit()
        >>> app.couplings.delete_link("HFSS_Design")
        """
        ...
    
    def update_link(self, coupling_name): # -> None:
        """Update the link if it's a valid link.

        Check if anything in the linked design has changed and retrieve updated data if it has.

        Parameters
        ----------
        coupling_name : str
            Name of the linked design.

        Returns
        -------
        None

        Examples
        --------
        >>> app = Emit()
        >>> app.update_link("HFSS_Design")
        """
        ...
    
    @property
    @min_aedt_version("2022.2")
    def linkable_design_names(self):
        """List the available link names.

        This property is only available in AEDT version 2022.2 or higher.

        Parameters
        ----------
        None

        Returns
        -------
        linkable_design_names : list str
            List of all existing, non-EMIT designs in the active project.
            If a design is already linked, it is excluded from the list.

        Examples
        --------
        >>> app = Emit("Apache with multiple links")
        >>> links = app.couplings.linkable_design_names
        """
        ...
    
    @property
    def cad_nodes(self): # -> dict[Any, Any]:
        """Dictionary of the CAD nodes.

        Parameters
        ----------
        None

        Returns
        -------
        cad_nodes : dict
            A dict containing all of the CAD nodes with their
            properties for the given design.

        Examples
        --------
        >>> app = Emit()
        >>> cad_nodes = app.couplings.cad_nodes
        """
        ...
    
    @property
    def antenna_nodes(self):
        """Dictionary of the antenna nodes.

        Parameters
        ----------
        None

        Returns
        -------
        antenna_nodes : dict
            A dictionary containing all of the antenna nodes with their
            properties for the given design.

        Examples
        --------
        >>> app = Emit()
        >>> antenna_nodes = app.couplings.antenna_nodes
        """
        ...
    


