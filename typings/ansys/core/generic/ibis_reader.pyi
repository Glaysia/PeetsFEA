"""
This type stub file was generated by pyright.
"""

class Component:
    """Component extracted from ibis model."""
    def __init__(self) -> None:
        ...
    
    @property
    def name(self): # -> None:
        """Name of the component.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].name

        """
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @property
    def manufacturer(self): # -> None:
        """Manufacturer of the component.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].manufacturer

        """
        ...
    
    @manufacturer.setter
    def manufacturer(self, value): # -> None:
        ...
    
    @property
    def pins(self): # -> dict[Any, Any]:
        """Pins of the component.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> pins = ibis.components["MT47H64M4BP-3_25"].pins

        """
        ...
    
    @pins.setter
    def pins(self, value): # -> None:
        ...
    
    @property
    def differential_pins(self): # -> dict[Any, Any]:
        """Pins of the component.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> pins = ibis.components["MT47H64M4BP-3_25"].differential_pins

        """
        ...
    
    @differential_pins.setter
    def differential_pins(self, value): # -> None:
        ...
    


class Pin:
    """Pin from a component with all its data feature.

    Parameters
    ----------
    name : str
        Name of the pin.
    circuit : class:`ansys.aedt.core.circuit.Circuit`
        Circuit in which the pin will be added to.
    """
    def __init__(self, name, buffername, app) -> None:
        ...
    
    @property
    def is_differential(self): # -> bool:
        """Flag indicating if the pin is differential.

        Returns
        -------
        bool
        """
        ...
    
    @is_differential.setter
    def is_differential(self, val): # -> None:
        ...
    
    @property
    def name(self): # -> Any:
        """Full name of the pin including the component name and the ibis filename.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].name
        """
        ...
    
    @property
    def buffer_name(self): # -> Any:
        """Full name of the buffer including the component name and the ibis filename."""
        ...
    
    @property
    def short_name(self): # -> None:
        """Name of the pin without the name of the component.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].short_name
        """
        ...
    
    @short_name.setter
    def short_name(self, value): # -> None:
        ...
    
    @property
    def signal(self): # -> None:
        """Signal of the pin.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].signal
        """
        ...
    
    @signal.setter
    def signal(self, value): # -> None:
        ...
    
    @property
    def model(self): # -> None:
        """Model of the pin.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].signal
        """
        ...
    
    @model.setter
    def model(self, value): # -> None:
        ...
    
    @property
    def r_value(self): # -> None:
        """Resistance value in ohms.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].r_value
        """
        ...
    
    @r_value.setter
    def r_value(self, value): # -> None:
        ...
    
    @property
    def l_value(self): # -> None:
        """Inductance value in H.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].l_value
        """
        ...
    
    @l_value.setter
    def l_value(self, value): # -> None:
        ...
    
    @property
    def c_value(self): # -> None:
        """Capacitance value in F.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].c_value
        """
        ...
    
    @c_value.setter
    def c_value(self, value): # -> None:
        ...
    
    def add(self): # -> Literal[False]:
        """Add a pin to the list of components in the Project Manager."""
        ...
    
    def insert(self, x, y, angle=...):
        """Insert a pin at a defined location inside the graphical window.

        Parameters
        ----------
        x : float
            X position of the pin.
        y : float
            Y position of the pin.
        angle : float, optional
            Angle of the pin. The default value is ``"0.0"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        """
        ...
    


class DifferentialPin:
    """Provides the differential pin from a component with all its data feature.

    Parameters
    ----------
    name : str
        Name of the pin.
    circuit : class:`ansys.aedt.core.circuit.Circuit`
        Circuit to add the pin to.
    """
    def __init__(self, name, buffer_name, app) -> None:
        ...
    
    @property
    def model(self): # -> None:
        """Model of the pin.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].signal
        """
        ...
    
    @model.setter
    def model(self, value): # -> None:
        ...
    
    @property
    def buffer_name(self): # -> Any:
        """Full name of the buffer including the component name and Ibis filename."""
        ...
    
    @property
    def short_name(self): # -> None:
        """Short name of the buffer, which excludes the Ibis filename."""
        ...
    
    @property
    def negative_pin(self):
        """Negative pin.

        Returns
        -------
        str
        """
        ...
    
    @property
    def vdiff(self): # -> None:
        """Differential voltage.

        Returns
        -------
        float
        """
        ...
    
    @property
    def tdelay_min(self): # -> None:
        """Minimum delay.

        Returns
        -------
        float
        """
        ...
    
    @property
    def tdelay_max(self): # -> None:
        """Maximum delay.

        Returns
        -------
        float
        """
        ...
    
    @property
    def tdelay_typ(self):
        """Typical delay.

        Returns
        -------
        float
        """
        ...
    
    @property
    def name(self): # -> Any:
        """Full name of the pin including the component name and Ibis filename.

        Examples
        --------
        >>> from pathlib import Path
        >>> ibis_file = Path(path_to_ibis_files) / "u26a_800_modified.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        >>> ibis.components["MT47H64M4BP-3_25"].pins["A1_MT47H64M4BP-3_25_u26a_800"].name
        """
        ...
    
    def add(self): # -> Literal[False]:
        """Add a pin to the list of components in the Project Manager."""
        ...
    
    def insert(self, x, y, angle=...):
        """Insert a pin at a defined location inside the graphical window.

        Parameters
        ----------
        x : float
            X position of the pin.
        y : float
            Y position of the pin.
        angle : float, optional
            Angle of the pin. The default value is ``"0.0"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        """
        ...
    


class Buffer:
    def __init__(self, ibis_name, short_name, app) -> None:
        ...
    
    @property
    def name(self): # -> str:
        """Full name of the buffer including the ibis filename."""
        ...
    
    @property
    def short_name(self): # -> Any:
        """Short name of the buffer without the ibis filename included."""
        ...
    
    def add(self): # -> None:
        """Add a buffer to the list of components in the Project Manager."""
        ...
    
    def insert(self, x, y, angle=...):
        """Insert a buffer at a defined location inside the graphical window.

        Parameters
        ----------
        x : float
            X position of the buffer.
        y : float
            Y position of the buffer.
        angle : float, optional
            Angle of the buffer. The default value is ``"0.0"``.

        Returns
        -------
        :class:`ansys.aedt.core.modeler.circuits.object_3d_circuit.CircuitComponent`
            Circuit Component Object.

        """
        ...
    


class ModelSelector:
    def __init__(self) -> None:
        ...
    
    @property
    def model_selector_items(self): # -> list[Any]:
        """Model selector items."""
        ...
    
    @model_selector_items.setter
    def model_selector_items(self, value): # -> None:
        ...
    
    @property
    def name(self): # -> None:
        """Name of the model selector."""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    


class ModelSelectorItem:
    def __init__(self) -> None:
        ...
    
    @property
    def description(self): # -> list[Any]:
        """Description of the item."""
        ...
    
    @description.setter
    def description(self, value): # -> None:
        ...
    
    @property
    def name(self): # -> None:
        """Name of the item."""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    


class Model:
    def __init__(self) -> None:
        ...
    
    @property
    def name(self): # -> None:
        """Name of the item."""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @property
    def model_type(self):
        """Type of the model."""
        ...
    
    @model_type.setter
    def model_type(self, value): # -> None:
        ...
    
    @property
    def clamp(self): # -> None:
        """Clamp."""
        ...
    
    @clamp.setter
    def clamp(self, value): # -> None:
        ...
    
    @property
    def enable(self): # -> None:
        """Is model enabled or not."""
        ...
    
    @enable.setter
    def enable(self, value): # -> None:
        ...
    
    @property
    def ami(self): # -> None:
        """Is model enabled or not."""
        ...
    
    @ami.setter
    def ami(self, value): # -> None:
        ...
    
    @property
    def c_comp(self): # -> None:
        """Is model enabled or not."""
        ...
    
    @c_comp.setter
    def c_comp(self, value): # -> None:
        ...
    


class Ibis:
    """Ibis model with all data extracted: name, components, models.

    Parameters
    ----------
    name : str
        Name of ibis model.
    circuit : class:`ansys.aedt.core.circuit.Circuit`
        Circuit in which the ibis components will be used.
    """
    def __init__(self, name, app) -> None:
        ...
    
    @property
    def name(self): # -> Any:
        """Name of the ibis model."""
        ...
    
    @property
    def components(self): # -> dict[Any, Any]:
        """List of all components included in the ibis file."""
        ...
    
    @components.setter
    def components(self, value): # -> None:
        ...
    
    @property
    def model_selectors(self): # -> list[Any]:
        """List of all model selectors included in the ibis file."""
        ...
    
    @model_selectors.setter
    def model_selectors(self, value): # -> None:
        ...
    
    @property
    def models(self): # -> list[Any]:
        """List of all models included in the ibis file."""
        ...
    
    @models.setter
    def models(self, value): # -> None:
        ...
    
    @property
    def buffers(self):
        """Buffers included into the ibis model."""
        ...
    
    @buffers.setter
    def buffers(self, value): # -> None:
        ...
    


class AMI:
    """Ibis-AMI model with all data extracted: name, components, models.

    Parameters
    ----------
    name : str
        Name of ibis model.
    circuit : class:`ansys.aedt.core.circuit.Circuit`
        Circuit in which the ibis components will be used.
    """
    def __init__(self, name, app) -> None:
        ...
    
    @property
    def name(self): # -> Any:
        """Name of the ibis model."""
        ...
    
    @property
    def components(self): # -> dict[Any, Any]:
        """List of all components included in the ibis file."""
        ...
    
    @components.setter
    def components(self, value): # -> None:
        ...
    
    @property
    def model_selectors(self): # -> list[Any]:
        """List of all model selectors included in the ibis file."""
        ...
    
    @model_selectors.setter
    def model_selectors(self, value): # -> None:
        ...
    
    @property
    def models(self): # -> list[Any]:
        """List of all models included in the ibis file."""
        ...
    
    @models.setter
    def models(self, value): # -> None:
        ...
    
    @property
    def buffers(self):
        """Buffers included into the ibis model."""
        ...
    
    @buffers.setter
    def buffers(self, value): # -> None:
        ...
    


class IbisReader:
    """Reads *.ibis file content.

    Setup an Ibis object exposing all the extracted data.

    Parameters
    ----------
    filename : str or :class:`pathlib.Path`
        Name of ibis model.
    circuit : class:`ansys.aedt.core.circuit.Circuit`
        Circuit in which the ibis components will be used.
    """
    def __init__(self, filename, circuit) -> None:
        ...
    
    @property
    def ibis_model(self): # -> Ibis | None:
        """Ibis model gathering the entire set of data extracted from the \\*.ibis file."""
        ...
    
    def parse_ibis_file(self): # -> dict[Any, Any] | Literal[False]:
        """Read \\*.ibis file content.

        Returns
        ----------
        :class:`ansys.aedt.core.generic.ibis_reader.Ibis`
            Ibis object exposing all data from the ibis file.

        Examples
        --------
        Read u26a_800.ibs file provided in the AEDT suit installation.
        >>> from pathlib import Path
        >>> from ansys.aedt.core import Desktop
        >>> from ansys.aedt.core.circuit import Circuit
        >>> from ansys.aedt.core.generic import ibis_reader
        >>> desktop = Desktop()
        >>> circuit = Circuit()
        >>> ibis_file = Path(desktop.install_path) / "buflib" / "IBIS" / "u26a_800.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)

        """
        ...
    
    def import_model_in_aedt(self): # -> bool:
        """Check and import the ibis model in AEDT.

        Returns
        -------
        bool
            ``True`` when the model is imported successfully, ``False`` if not imported or model already present.

        """
        ...
    
    def read_model(self, ibis, model_list): # -> None:
        """Extract model's info.

        Parameters
        ----------
        ibis : :class:`ansys.aedt.core.generic.ibis_reader.Ibis`
            ibis object containing all info.
        current_line : str
            Current line content.
        ibis_file : TextIO
            File's stream.

        """
        ...
    
    def read_model_selector(self, ibis, model_selector_list): # -> None:
        """Extract model selector's info.

        Parameters
        ----------
        ibis : :class:`ansys.aedt.core.generic.ibis_reader.Ibis`
            ibis object containing all info.
        current_line : str
            Current line content.
        ibis_file : TextIO
            File's stream.

        """
        ...
    
    @classmethod
    def make_model(cls, current_line): # -> ModelSelectorItem:
        """Create model object.

        Parameters
        ----------
        current_line : str
            Current line content.

        Returns
        -------
        :class:`ansys.aedt.core.generic.ibis_reader.ModelSelectorItem`
            Model selector item.

        """
        ...
    
    def read_component(self, ibis, comp_infos): # -> None:
        """Extracts component's info.

        Parameters
        ----------
        ibis : :class:`ansys.aedt.core.generic.ibis_reader.Ibis`
            ibis object containing all info.
        comp_infos : list

        """
        ...
    
    @classmethod
    def fill_package_info(cls, component, pkg_info): # -> None:
        """Extract model's info.

        Parameters
        ----------
        component : :class:`ansys.aedt.core.generic.ibis_reader.Component`
            Current line content.
        current_line : str
            Current line content.
        ibis_file : TextIO
            File's stream.

        """
        ...
    
    @classmethod
    def get_component_name(cls, line):
        """Get the name of the component.

        Parameters
        ----------
        line : str
            Current line content.

        Returns
        -------
        str
            Name of the component.

        """
        ...
    
    def make_diff_pin_object(self, line, component, ibis): # -> DifferentialPin | None:
        """Extract the model's differential pin information.

        Parameters
        ----------
        line : str
            Current line content.
        component : str
            Name of the component.
        ibis : :class:`ansys.aedt.core.generic.ibis_reader.Ibis`
            Ibis object containing all pin information.

        Returns
        -------
        :class:`ansys.aedt.core.generic.ibis_reader.Pin`
            Pin object.

        """
        ...
    
    def make_pin_object(self, line, component_name, ibis): # -> Pin:
        """Extract model's info.

        Parameters
        ----------
        line : str
            Current line content.
        component_name : str
            Name of the component.
        ibis : :class:`ansys.aedt.core.generic.ibis_reader.Ibis`
            ibis object containing all info.

        Returns
        -------
        :class:`ansys.aedt.core.generic.ibis_reader.Pin`
            Pin object.

        """
        ...
    
    @classmethod
    def get_first_parameter(cls, line): # -> Literal['']:
        """Get first parameter string value.

        Parameters
        ----------
        line : str
            Current line content.

        Returns
        -------
        str
            First info extracted from the current line.
        """
        ...
    


class AMIReader(IbisReader):
    """Reads *.ibis file content.
    Setup an Ibis object exposing all the extracted data.

    Parameters
    ----------
    filename : str
        Name of ibis model.
    circuit : class:`ansys.aedt.core.circuit.Circuit`
        Circuit in which the ibis components will be used.
    """
    def __init__(self, filename, circuit) -> None:
        ...
    
    @property
    def ami_model(self): # -> None:
        """Ibis-AMI model gathering the entire set of data extracted from the \\*.ami file."""
        ...
    
    def parse_ibis_file(self): # -> dict[Any, Any] | Literal[False]:
        """Reads \\*.ami file content.

        Returns
        -------
        :class:`ansys.aedt.core.generic.ibis_reader.Ibis`
            Ibis object exposing all data from the ibis file.

        Examples
        --------
        Read u26a_800.ibs file provided in the AEDT suit installation.
        >>> from pathlib import Path
        >>> from ansys.aedt.core import Desktop
        >>> from ansys.aedt.core.circuit import Circuit
        >>> from ansys.aedt.core.generic import ibis_reader
        >>> desktop = Desktop()
        >>> circuit = Circuit()
        >>> ibis_file = Path(desktop.install_path) / "buflib" / "IBIS" / "u26a_800.ibs"
        >>> ibis = ibis_reader.IbisReader(ibis_file, circuit)
        """
        ...
    
    def import_model_in_aedt(self): # -> Literal[False] | None:
        ...
    


def is_started_with(src, find, ignore_case=...):
    """Verify if a string content starts with a specific string or not.

    This is identical to ``str.startswith``, except that it includes
    the ``ignore_case`` parameter.

    Parameters
    ----------
    src : str
        Current line content.
    find : str
        Current line content.
    ignore_case : bool, optional
        Case sensitive or not. The default value is ``True``.

    Returns
    -------
    bool
        ``True`` if the src string starts with the pattern.
    """
    ...

def lowercase_json(json_data): # -> str | dict[str | dict[str | dict[Any, str | dict[Any, Any] | list[Any] | Any] | list[Any] | Any, str | dict[Any, Any] | list[Any] | Any] | list[Any] | Any, str | dict[Any, Any] | list[Any] | Any] | list[Any]:
    """Convert a json structure to lower case."""
    ...

def ibis_parsing(file): # -> dict[Any, Any] | Literal[False]:
    """Open and parse ibis file using json Ibis template.

    Parameters
    ----------
    file : str
        File name to parse.
    """
    ...

