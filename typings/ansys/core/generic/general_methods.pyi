"""
This type stub file was generated by pyright.
"""

is_linux = ...
is_windows = ...
inside_desktop = ...
inclusion_list = ...
def raise_exception_or_return_false(e): # -> Literal[False] | None:
    ...

def deprecate_kwargs(func_name, kwargs, aliases): # -> None:
    """Use helper function for deprecating function arguments."""
    ...

def deprecate_argument(arg_name: str, version: str = ..., message: str = ..., removed: bool = ...): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    """
    Decorator to deprecate a specific argument (positional or keyword) in a function.

    Parameters:
        arg_name : str
            The name of the deprecated argument.
        version : str
            The version in which the argument was removed.
        message : str, optional
            Custom deprecation message.
        removed : bool
            If ``True``, using the argument raises a TypeError.
            If ``False``, a DeprecationWarning is issued.
    """
    ...

def pyaedt_function_handler(direct_func=..., **deprecated_kwargs): # -> _Wrapped[Callable[..., Any], object, Callable[..., Any], Any | bool | None] | Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | bool | None]]:
    """Provide an exception handler, logging mechanism, and argument converter for client-server communications.

    This method returns the function itself if correctly executed. Otherwise, it returns ``False``
    and displays errors.

    """
    ...

@pyaedt_function_handler()
def check_numeric_equivalence(a, b, relative_tolerance=...): # -> bool:
    """Check if two numeric values are equivalent to within a relative tolerance.

    Parameters
    ----------
    a : int, float
        Reference value to compare to.
    b : int, float
        Secondary value for the comparison.
    relative_tolerance : float, optional
        Relative tolerance for the equivalence test. The difference is relative to the first value.
        The default is ``1E-7``.

    Returns
    -------
    bool
        ``True`` if the two passed values are equivalent, ``False`` otherwise.
    """
    ...

@pyaedt_function_handler()
def get_version_and_release(input_version): # -> tuple[int, int]:
    ...

@pyaedt_function_handler()
def get_string_version(input_version): # -> str:
    ...

@pyaedt_function_handler()
def env_path(input_version): # -> str:
    """Get the path of the version environment variable for an AEDT version.

    Parameters
    ----------
    input_version : str
        AEDT version.

    Returns
    -------
    str
        Path of the version environment variable.

    Examples
    --------
    >>> env_path_student("2025.1")
    "C:/Program Files/ANSYSEM/ANSYSEM2025.1/Win64"
    """
    ...

@pyaedt_function_handler()
def env_value(input_version): # -> str:
    """Get the name of the version environment variable for an AEDT version.

    Parameters
    ----------
    input_version : str
        AEDT version.

    Returns
    -------
    str
        Name of the version environment variable.

    Examples
    --------
    >>> env_value(2025.1)
    "ANSYSEM_ROOT251"
    """
    ...

@pyaedt_function_handler()
def env_path_student(input_version): # -> str:
    """Get the path of the version environment variable for an AEDT student version.

    Parameters
    ----------
    input_version : str
       AEDT student version.

    Returns
    -------
    str
        Path of the student version environment variable.

    Examples
    --------
    >>> env_path_student(2025.1)
    "C:/Program Files/ANSYSEM/ANSYSEM2025.1/Win64"
    """
    ...

@pyaedt_function_handler()
def env_value_student(input_version): # -> str:
    """Get the name of the version environment variable for an AEDT student version.

    Parameters
    ----------
    input_version : str
        AEDT student version.

    Returns
    -------
    str
         Name of the student version environment variable.

    Examples
    --------
    >>> env_value_student(2025.1)
    "ANSYSEMSV_ROOT251"
    """
    ...

@pyaedt_function_handler()
def time_fn(fn, *args, **kwargs):
    ...

@pyaedt_function_handler(search_key1="search_key_1", search_key2="search_key_2")
def filter_tuple(value, search_key_1, search_key_2): # -> bool:
    """Filter a tuple of two elements with two search keywords."""
    ...

@pyaedt_function_handler(search_key1="search_key_1")
def filter_string(value, search_key_1): # -> bool:
    """Filter a string"""
    ...

@pyaedt_function_handler()
def number_aware_string_key(s): # -> tuple[Any, ...]:
    """Get a key for sorting strings that treats embedded digit sequences as integers.

    Parameters
    ----------
    s : str
        String to calculate the key from.

    Returns
    -------
    tuple
        Tuple of key entries.
    """
    ...

@pyaedt_function_handler()
def active_sessions(version=..., student_version=..., non_graphical=...):
    """Get information for the active AEDT sessions.

    Parameters
    ----------
    version : str, optional
        Version to check. The default is ``None``, in which case all versions are checked.
        When specifying a version, you can use a three-digit format like ``"222"`` or a
        five-digit format like ``"2022.2"``.
    student_version : bool, optional
    non_graphical : bool, optional

    Returns
    -------
    dict
        {AEDT PID: port}
        If the PID corresponds to a COM session port is set to -1
    """
    ...

@pyaedt_function_handler()
def com_active_sessions(version=..., student_version=..., non_graphical=...): # -> list[Any]:
    """Get information for the active COM AEDT sessions.

    Parameters
    ----------
    version : str, optional
        Version to check. The default is ``None``, in which case all versions are checked.
        When specifying a version, you can use a three-digit format like ``"222"`` or a
        five-digit format like ``"2022.2"``.
    student_version : bool, optional
        Whether to check for student version sessions. The default is ``False``.
    non_graphical : bool, optional
        Whether to check only for active non-graphical sessions. The default is ``False``.

    Returns
    -------
    List
        List of AEDT process IDs.
    """
    ...

@pyaedt_function_handler()
def grpc_active_sessions(version=..., student_version=..., non_graphical=...): # -> list[Any]:
    """Get information for the active gRPC AEDT sessions.

    Parameters
    ----------
    version : str, optional
        Version to check. The default is ``None``, in which case all versions are checked.
        When specifying a version, you can use a three-digit format like ``"222"`` or a
        five-digit format like ``"2022.2"``.
    student_version : bool, optional
        Whether to check for student version sessions. The default is ``False``.
    non_graphical : bool, optional
        Whether to check only for active non-graphical sessions. The default is ``False``.

    Returns
    -------
    List
        List of gRPC ports.
    """
    ...

@pyaedt_function_handler(function_str="function")
def conversion_function(data, function=...): # -> Literal[False]:
    """Convert input data based on a specified function string.

    The available functions are:

    - `"dB10"`: Converts the data to decibels using base 10 logarithm.
    - `"dB20"`: Converts the data to decibels using base 20 logarithm.
    - `"abs"`: Computes the absolute value of the data.
    - `"real"`: Computes the real part of the data.
    - `"imag"`: Computes the imaginary part of the data.
    - `"norm"`: Normalizes the data to have values between 0 and 1.
    - `"ang"`: Computes the phase angle of the data in radians.
    - `"ang_deg"`: Computes the phase angle of the data in degrees.

    If an invalid function string is specified, the method returns ``False``.

    Parameters
    ----------
    data : list, numpy.array
        Numerical values to convert. The format can be ``list`` or ``numpy.array``.
    function : str, optional
        Conversion function. The default is `"dB10"`.

    Returns
    -------
    numpy.array or bool
        Converted data, ``False`` otherwise.

    Examples
    --------
    >>> values = [1, 2, 3, 4]
    >>> conversion_function(values, "dB10")
    array([-inf, 0., 4.77, 6.02])

    >>> conversion_function(values, "abs")
    array([1, 2, 3, 4])

    >>> conversion_function(values, "ang_deg")
    array([ 0., 0., 0., 0.])
    """
    ...

class PropsManager:
    def __getitem__(self, item): # -> None:
        """Get the `self.props` key value.

        Parameters
        ----------
        item : str
            Key to search
        """
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Set the `self.props` key value.

        Parameters
        ----------
        key : str
            Key to apply.
        value : int, float, bool, str, dict
            Value to apply.
        """
        ...
    
    @property
    def available_properties(self): # -> list[Any]:
        """Available properties.

        Returns
        -------
        list
        """
        ...
    
    @pyaedt_function_handler()
    def update(self): # -> None:
        """Update method."""
        ...
    


def clamp(n, minn, maxn):
    ...

rgb_color_codes = ...
@pyaedt_function_handler()
def install_with_pip(package_name, package_path=..., upgrade=..., uninstall=...): # -> None:
    """Install a new package using pip.

    This method is useful for installing a package from the AEDT Console without launching the Python environment.

    .. warning::

        Do not execute this function with untrusted environment variables.
        See the :ref:`security guide<ref_security_consideration>` for details.

    Parameters
    ----------
    package_name : str
        Name of the package to install.
    package_path : str, optional
        Path for the GitHub package to download and install. For example, ``git+https://.....``.
    upgrade : bool, optional
        Whether to upgrade the package. The default is ``False``.
    uninstall : bool, optional
        Whether to install the package or uninstall the package.
    """
    ...

class Help:
    def __init__(self) -> None:
        ...
    
    def search(self, keywords, app_name=..., search_in_examples_only=...): # -> None:
        """Search for one or more keywords.

        Parameters
        ----------
        keywords : str or list
        app_name : str, optional
            Name of a PyAEDT app. For example, ``"Hfss"``, ``"Circuit"``, ``"Icepak"``, or any other available app.
        search_in_examples_only : bool, optional
            Whether to search for the one or more keywords only in the PyAEDT examples.
            The default is ``False``.
        """
        ...
    
    def getting_started(self): # -> None:
        """Open the PyAEDT User guide page."""
        ...
    
    def examples(self): # -> None:
        """Open the PyAEDT Examples page."""
        ...
    
    def github(self): # -> None:
        """Open the PyAEDT GitHub page."""
        ...
    
    def changelog(self, release=...): # -> None:
        """Open the PyAEDT GitHub Changelog for a given release.

        Parameters
        ----------
        release : str, optional
            Release to get the changelog for. For example, ``"0.6.70"``.
        """
        ...
    
    def issues(self): # -> None:
        """Open the PyAEDT GitHub Issues page."""
        ...
    
    def ansys_forum(self): # -> None:
        """Open the PyAEDT GitHub Issues page."""
        ...
    
    def developer_forum(self): # -> None:
        """Open the Discussions page on the Ansys Developer site."""
        ...
    


online_help = ...
