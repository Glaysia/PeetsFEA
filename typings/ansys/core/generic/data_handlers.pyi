"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

json_to_dict = ...
@pyaedt_function_handler()
def format_decimals(el): # -> str:
    """Provide a formatted string for a decimal number.

    Parameters
    ----------
    el : float, int, str
        Decimal number to be formatted.

    Returns
    -------
    str
    """
    ...

@pyaedt_function_handler()
def random_string(length=..., only_digits=..., char_set=...): # -> str:
    """Generate a random string.

    Parameters
    ----------
    length :
        length of the random string (Default value = 6)
    only_digits : bool, optional
        ``True`` if only digits are to be included.
    char_set : str, optional
        Custom character set to pick the characters from.  By default chooses from
        ASCII and digit characters or just digits if ``only_digits`` is ``True``.

    Returns
    -------
    type
        random string

    """
    ...

@pyaedt_function_handler()
def unique_string_list(element_list, only_string=...): # -> list[str]:
    """Return a unique list of strings from an element list.

    Parameters
    ----------
    element_list :

    only_string :
         (Default value = True)

    Returns
    -------

    """
    ...

@pyaedt_function_handler()
def string_list(element_list): # -> list[str] | list[Any]:
    """Convert a string to a list if it is not already a list.

    Input must be a list or a string.

    Parameters
    ----------
    element_list : list, str
        List or strings to be converted to a list.

    Returns
    -------
    list

    """
    ...

@pyaedt_function_handler()
def ensure_list(element_list): # -> list[Any]:
    """Ensure that an object is a list.

    If it is not, it will be converted to a list.

    Parameters
    ----------
    element_list : object
        Object to be checked.

    Returns
    -------
    None
    """
    ...

@pyaedt_function_handler()
def variation_string_to_dict(variation_string, separator=...): # -> dict[Any, Any]:
    """Helper function to convert a list of "="-separated strings into a dictionary

    Returns
    -------
    dict
    """
    ...

RKM_MAPS = ...
AEDT_MAPS = ...
@pyaedt_function_handler()
def from_rkm(code): # -> str:
    """Convert an RKM code string to a string with a decimal point.

    Parameters
    ----------
    code : str
        RKM code string.

    Returns
    -------
    str
        String with a decimal point and an R value.

    Examples
    --------
    >>> from ansys.aedt.core.generic.data_handlers import from_rkm
    >>> from_rkm("R47")
    '0.47'

    >>> from_rkm("4R7")
    '4.7'

    >>> from_rkm("470R")
    '470'

    >>> from_rkm("4K7")
    '4.7k'

    >>> from_rkm("47K")
    '47k'

    >>> from_rkm("47K3")
    '47.3k'

    >>> from_rkm("470K")
    '470k'

    >>> from_rkm("4M7")
    '4.7M'

    """
    ...

@pyaedt_function_handler()
def to_aedt(code): # -> str:
    """

    Parameters
    ----------
    code : str

    Returns
    -------
    str

    """
    ...

def str_to_bool(s): # -> str | bool | None:
    """Convert a ``"True"`` or ``"False"`` string to its corresponding Boolean value.

    If the passed arguments are not relevant in the context of conversion, the argument
    itself is returned. This method can be called using the ``map()`` function to
    ensure conversion of Boolean strings in a list.

    Parameters
    ----------
    s: str

    Returns
    -------
    bool or str
         The method is not case-sensitive.
         - ``True`` is returned  if the input is ``"true"``, ``"1"``,
           `"yes"``, or ``"y"``,
         - ``False`` is returned if the input is ``"false"``, ``"no"``,
           ``"n``,  or ``"0"``.
         - Otherwise, the input value is passed through the method unchanged.

    """
    ...

@pyaedt_function_handler()
def from_rkm_to_aedt(code): # -> str:
    """

    Parameters
    ----------
    code : str


    Returns
    -------
    str

    """
    ...

unit_val = ...
resynch_maxwell2D_control_program_for_design = ...
@pyaedt_function_handler()
def float_units(val_str, units=...):
    """Retrieve units for a value.

    Parameters
    ----------
    val_str : str
        Name of the float value.

    units : str, optional
         The default is ``""``.

    Returns
    -------

    """
    ...

@pyaedt_function_handler()
def normalize_string_format(text): # -> str:
    ...

