"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.generic.general_methods import pyaedt_function_handler

class ConfigurationsOptions:
    """Options class for the configurations.
    User can enable or disable import export components."""
    def __init__(self, is_layout=...) -> None:
        ...
    
    @property
    def object_mapping_tolerance(self): # -> float:
        """Get/Set the tolerance value to be used in the object mapping (used e.g. for boundaries).

        Returns
        -------
        float
        """
        ...
    
    @object_mapping_tolerance.setter
    def object_mapping_tolerance(self, val): # -> None:
        ...
    
    @property
    def export_variables(self): # -> bool:
        """Define if the variables have to be exported into json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_variables = False  # Disable the variables export
        """
        ...
    
    @export_variables.setter
    def export_variables(self, val): # -> None:
        ...
    
    @property
    def export_setups(self): # -> bool:
        """Define if the setups have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_setups = False  # Disable the setup export
        """
        ...
    
    @export_setups.setter
    def export_setups(self, val): # -> None:
        ...
    
    @property
    def export_optimizations(self): # -> bool:
        """Define if the optimizations have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_optimizations = False  # Disable the optimization export
        """
        ...
    
    @export_optimizations.setter
    def export_optimizations(self, val): # -> None:
        ...
    
    @property
    def export_parametrics(self): # -> bool:
        """Define if the parametrics have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_parametrics = False  # Disable the parametrics export
        """
        ...
    
    @export_parametrics.setter
    def export_parametrics(self, val): # -> None:
        ...
    
    @property
    def export_boundaries(self): # -> bool:
        """Define if the boundaries have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_boundaries = False  # Disable the boundaries export
        """
        ...
    
    @export_boundaries.setter
    def export_boundaries(self, val): # -> None:
        ...
    
    @property
    def import_datasets(self): # -> bool:
        """Define if datasets have to be imported from json file. Default is `True`.

        Returns
        -------
        bool

        """
        ...
    
    @import_datasets.setter
    def import_datasets(self, val): # -> None:
        ...
    
    @property
    def export_datasets(self): # -> bool:
        """Define if datasets have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        """
        ...
    
    @export_datasets.setter
    def export_datasets(self, val): # -> None:
        ...
    
    @property
    def export_mesh_operations(self): # -> bool:
        """Define if the Mesh Operations have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_mesh_operations = False  # Disable the mesh operations export
        """
        ...
    
    @export_mesh_operations.setter
    def export_mesh_operations(self, val): # -> None:
        ...
    
    @property
    def export_coordinate_systems(self): # -> bool:
        """Define if the Coordinate Systems have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_coordinate_systems = False  # Disable the coordinate systems export
        """
        ...
    
    @export_coordinate_systems.setter
    def export_coordinate_systems(self, val): # -> None:
        ...
    
    @property
    def export_materials(self): # -> bool:
        """Define if the materials have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_export_materials = False  # Disable the materials export
        """
        ...
    
    @export_materials.setter
    def export_materials(self, val): # -> None:
        ...
    
    @property
    def export_object_properties(self): # -> bool:
        """Define if object properties have to be exported to json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.export_object_properties = False  # Disable the object properties export
        """
        ...
    
    @export_object_properties.setter
    def export_object_properties(self, val): # -> None:
        ...
    
    @property
    def import_variables(self): # -> bool:
        """Define if the variablbes have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_variables = False  # Disable the variables import
        """
        ...
    
    @import_variables.setter
    def import_variables(self, val): # -> None:
        ...
    
    @property
    def import_setups(self): # -> bool:
        """Define if the setups have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_setups = False  # Disable the setup import
        """
        ...
    
    @import_setups.setter
    def import_setups(self, val): # -> None:
        ...
    
    @property
    def import_optimizations(self): # -> bool:
        """Define if the optimizations have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_optimizations = False  # Disable the optimization import
        """
        ...
    
    @import_optimizations.setter
    def import_optimizations(self, val): # -> None:
        ...
    
    @property
    def import_parametrics(self): # -> bool:
        """Define if the parametrics have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_parametrics = False  # Disable the parametrics import
        """
        ...
    
    @import_parametrics.setter
    def import_parametrics(self, val): # -> None:
        ...
    
    @property
    def import_boundaries(self): # -> bool:
        """Define if the boundaries have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_boundaries = False  # Disable the boundaries import
        """
        ...
    
    @import_boundaries.setter
    def import_boundaries(self, val): # -> None:
        ...
    
    @property
    def import_mesh_operations(self): # -> bool:
        """Define if the Mesh Operations have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_mesh_operations = False  # Disable the mesh operations import
        """
        ...
    
    @import_mesh_operations.setter
    def import_mesh_operations(self, val): # -> None:
        ...
    
    @property
    def import_coordinate_systems(self): # -> bool:
        """Define if the Coordinate Systems have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_coordinate_systems = False  # Disable the coordinate systems import
        """
        ...
    
    @import_coordinate_systems.setter
    def import_coordinate_systems(self, val): # -> None:
        ...
    
    @property
    def import_materials(self): # -> bool:
        """Define if the materials have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_import_materials = False  # Disable the materials import
        """
        ...
    
    @property
    def import_output_variables(self): # -> bool:
        """Define if the output variables have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_output_variables = False  # Disable the materials import
        """
        ...
    
    @import_output_variables.setter
    def import_output_variables(self, val): # -> None:
        ...
    
    @import_materials.setter
    def import_materials(self, val): # -> None:
        ...
    
    @property
    def import_object_properties(self): # -> bool:
        """Define if object properties have to be imported/created from json file. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.import_object_properties = False  # Disable the object properties import
        """
        ...
    
    @import_object_properties.setter
    def import_object_properties(self, val): # -> None:
        ...
    
    @property
    def skip_import_if_exists(self): # -> bool:
        """Define if the existing boundaries or properties will be updated or not. Default is `True`.

        Returns
        -------
        bool

        Examples
        --------
        >>> from ansys.aedt.core import Hfss
        >>> hfss = Hfss()
        >>> hfss.configurations.options.skip_import_if_exists = False  # Disable the update of existing properties
        """
        ...
    
    @skip_import_if_exists.setter
    def skip_import_if_exists(self, val): # -> None:
        ...
    
    @pyaedt_function_handler()
    def unset_all_export(self): # -> Literal[True]:
        """Set all export properties to `False`.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def set_all_export(self): # -> Literal[True]:
        """Set all export properties to `True`.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def unset_all_import(self): # -> Literal[True]:
        """Set all import properties to `False`.

        Returns
        -------
        bool
        """
        ...
    
    @pyaedt_function_handler()
    def set_all_import(self): # -> Literal[True]:
        """Set all import properties to `True`.

        Returns
        -------
        bool
        """
        ...
    


class ImportResults:
    """Contains the results of the import operations.

    Each result can be ``True`` or ``False``.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def global_import_success(self): # -> bool:
        """Returns ``True`` if all imports are successful. It returns ``False`` otherwise.

        Returns
        -------
        bool
        """
        ...
    


class Configurations:
    """Enables export and import of a JSON configuration file that can be applied to a new or existing design."""
    def __init__(self, app) -> None:
        ...
    
    @property
    def schema(self): # -> Any | None:
        """Schema dictionary.

        Returns
        -------
        dict
        """
        ...
    
    @pyaedt_function_handler()
    def validate(self, config): # -> bool:
        """Validate a configuration file against the schema.

        The default schema can be found in ``pyaedt/misc/config.schema.json``.

        Parameters
        ----------
        config : str, dict
            Configuration as a JSON file or dictionary.

        Returns
        -------
        bool
            ``True`` if the configuration file is valid, ``False`` otherwise.
            If the validation fails, a warning is also written to the logger.
        """
        ...
    
    @pyaedt_function_handler()
    def import_config(self, config_file, *args):
        """Import configuration settings from a JSON or TOML file and apply it to the current design.

        The sections to be applied are defined with the ``configuration.options`` class.
        The import operation result is saved in the ``configuration.results`` class.

        Parameters
        ----------
        config_file : str
            Full path to json file.

        Returns
        -------
        dict, bool
            Config dictionary.
        """
        ...
    
    @pyaedt_function_handler()
    def export_config(self, config_file=..., overwrite=...): # -> str | Literal[False]:
        """Export current design properties to a JSON or TOML file.

        The sections to be exported are defined with ``configuration.options`` class.

        Parameters
        ----------
        config_file : str, optional
            Full path to json file. If ``None``, then the config file will be saved in working directory.
        overwrite : bool, optional
            If ``True`` the json file will be overwritten if already existing.
            If ``False`` and the version is compatible, the data in the existing file will be updated.
            Default is ``False``.

        Returns
        -------
        str
            Exported config file.
        """
        ...
    


class ConfigurationOptionsIcepak(ConfigurationsOptions):
    def __init__(self, app) -> None:
        ...
    
    @property
    def import_monitor(self): # -> bool:
        ...
    
    @import_monitor.setter
    def import_monitor(self, val): # -> None:
        ...
    
    @property
    def export_monitor(self): # -> bool:
        ...
    
    @export_monitor.setter
    def export_monitor(self, val): # -> None:
        ...
    
    @property
    def import_native_components(self): # -> bool:
        ...
    
    @import_native_components.setter
    def import_native_components(self, val): # -> None:
        ...
    
    @property
    def export_native_components(self): # -> bool:
        ...
    
    @export_native_components.setter
    def export_native_components(self, val): # -> None:
        ...
    


class ConfigurationOptions3DLayout(ConfigurationsOptions):
    def __init__(self, app) -> None:
        ...
    


class Configurations3DLayout(Configurations):
    """Enables export and import configuration options to be applied to a new or existing 3DLayout design."""
    def __init__(self, app) -> None:
        ...
    


class ConfigurationsIcepak(Configurations):
    """Enables export and import configuration options to be applied on a new or existing design."""
    def __init__(self, app) -> None:
        ...
    
    @pyaedt_function_handler()
    def update_monitor(self, m_case, m_object, m_quantity, m_name): # -> Literal[True]:
        """Generic method for inserting monitor object

        Parameters
        ----------
        m_case : str
            Type of monitored geometry object. "Point", "Face", "Vertex", "Surface" or "Object".
        m_object : lost or str or int
            Name or id (or list of these) of the geometry object being monitored.
        m_quantity : list or str
            Name or list of names of the quantity being monitored.
        m_name : str
            Name of the monitor object.

        Returns
        -------
        bool
            ``True`` if successful.
        """
        ...
    
    @pyaedt_function_handler()
    def import_config(self, config_file, *args):
        """Import configuration settings from a JSON or TOML file and apply it to the current design.

        The sections to be applied are defined with ``configuration.options`` class.
        The import operation result is saved in the ``configuration.results`` class.

        Parameters
        ----------
        config_file : str
            Full path to json file.
        *args : set, optional
            Name of objects to ignore for monitor assignment.

        Returns
        -------
        dict, bool
            Config dictionary.
        """
        ...
    


class ConfigurationsNexxim(Configurations):
    """Enables export and import configuration options to be applied to a new or existing Nexxim design."""
    @pyaedt_function_handler()
    def export_config(self, config_file=..., overwrite=...):
        """Export current design properties to a JSON or TOML file.

        Parameters
        ----------
        config_file : str, optional
            Full path to json file. If ``None``, then the config file will be saved in working directory.
        overwrite : bool, optional
            If ``True`` the json file will be overwritten if already existing.
            If ``False`` and the version is compatible, the data in the existing file will be updated.
            Default is ``False``.

        Returns
        -------
        str
            Exported config file.
        """
        ...
    
    @pyaedt_function_handler()
    def import_config(self, config_file, *args):
        """Import configuration settings from a JSON or TOML file and apply it to the current design.


        Parameters
        ----------
        config_file : str
            Full path to json file.

        Returns
        -------
        dict, bool
            Config dictionary.
        """
        ...
    


