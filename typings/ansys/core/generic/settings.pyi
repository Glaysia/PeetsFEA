"""
This type stub file was generated by pyright.
"""

import logging
from typing import Any, Union

"""This module contains the ``Settings`` and ``_InnerProjectSettings`` classes.

The first class encapsulates the settings associated with PyAEDT and AEDT including logging,
LSF, environment variables and general settings. Most of the default values used can be modified
using a YAML configuration file. An example of such file can be found in the documentation, see
`Settings YAML file <https://aedt.docs.pyansys.com/version/stable/User_guide/settings.html>`_.
The path to the configuration file should be specified with the environment variable
``PYAEDT_LOCAL_SETTINGS_PATH``. If no environment variable is set, the class will look for the
configuration file ``pyaedt_settings.yaml`` in the user's ``APPDATA`` folder for Windows and
``HOME`` folder for Linux.

The second class is intended for internal use only and shouldn't be modified by users.
"""
is_linux = ...
ALLOWED_LOG_SETTINGS = ...
ALLOWED_LSF_SETTINGS = ...
ALLOWED_GENERAL_SETTINGS = ...
ALLOWED_AEDT_ENV_VAR_SETTINGS = ...
def generate_log_filename(): # -> str:
    """Generate a log filename."""
    ...

class _InnerProjectSettings:
    """Global inner project settings.

    This class is intended for internal use only.
    """
    properties: dict = ...
    time_stamp: Union[int, float] = ...


class Settings:
    """Manages all PyAEDT environment variables and global settings."""
    def __init__(self) -> None:
        ...
    
    @property
    def logger(self): # -> Logger | None:
        """Active logger."""
        ...
    
    @logger.setter
    def logger(self, val): # -> None:
        ...
    
    @property
    def block_figure_plot(self): # -> bool:
        """Block matplotlib figure plot during python script run until the user close it manually.

        Default is ``False``."""
        ...
    
    @block_figure_plot.setter
    def block_figure_plot(self, val): # -> None:
        ...
    
    @property
    def enable_desktop_logs(self): # -> bool:
        """Enable or disable the logging to the AEDT message window."""
        ...
    
    @enable_desktop_logs.setter
    def enable_desktop_logs(self, val): # -> None:
        ...
    
    @property
    def global_log_file_size(self): # -> int:
        """Global PyAEDT log file size in MB. The default value is ``10``."""
        ...
    
    @global_log_file_size.setter
    def global_log_file_size(self, value): # -> None:
        ...
    
    @property
    def enable_global_log_file(self): # -> bool:
        """Enable or disable the global PyAEDT log file located in the global temp folder.

        The default is ``True``."""
        ...
    
    @enable_global_log_file.setter
    def enable_global_log_file(self, value): # -> None:
        ...
    
    @property
    def enable_local_log_file(self): # -> bool:
        """Enable or disable the local PyAEDT log file located in the ``projectname.pyaedt`` project folder.

        The default is ``True``."""
        ...
    
    @enable_local_log_file.setter
    def enable_local_log_file(self, value): # -> None:
        ...
    
    @property
    def global_log_file_name(self): # -> str:
        """Global PyAEDT log file path. The default is ``pyaedt_username.log``."""
        ...
    
    @global_log_file_name.setter
    def global_log_file_name(self, value): # -> None:
        ...
    
    @property
    def enable_debug_methods_argument_logger(self): # -> bool:
        """Flag for whether to write out the method's arguments in the debug logger.

        The default is ``False``."""
        ...
    
    @enable_debug_methods_argument_logger.setter
    def enable_debug_methods_argument_logger(self, val): # -> None:
        ...
    
    @property
    def enable_screen_logs(self): # -> bool:
        """Enable or disable the logging to STDOUT."""
        ...
    
    @enable_screen_logs.setter
    def enable_screen_logs(self, val): # -> None:
        ...
    
    @property
    def enable_file_logs(self): # -> bool:
        """Enable or disable the logging to a file."""
        ...
    
    @enable_file_logs.setter
    def enable_file_logs(self, val): # -> None:
        ...
    
    @property
    def enable_logger(self): # -> bool:
        """Enable or disable the logging overall."""
        ...
    
    @enable_logger.setter
    def enable_logger(self, val): # -> None:
        ...
    
    @property
    def logger_file_path(self): # -> str | None:
        """PyAEDT log file path."""
        ...
    
    @logger_file_path.setter
    def logger_file_path(self, val): # -> None:
        ...
    
    @property
    def logger_formatter(self): # -> str:
        """Message format of the log entries.

        The default is ``'%(asctime)s:%(destination)s:%(extra)s%(levelname)-8s:%(message)s'``."""
        ...
    
    @logger_formatter.setter
    def logger_formatter(self, val): # -> None:
        ...
    
    @property
    def logger_datefmt(self): # -> str:
        """Date format of the log entries.

        The default is ``'%Y/%m/%d %H.%M.%S'``"""
        ...
    
    @logger_datefmt.setter
    def logger_datefmt(self, val): # -> None:
        ...
    
    @property
    def enable_debug_edb_logger(self): # -> bool:
        """Enable or disable the logger for any EDB API methods."""
        ...
    
    @enable_debug_edb_logger.setter
    def enable_debug_edb_logger(self, val): # -> None:
        ...
    
    @property
    def enable_debug_grpc_api_logger(self): # -> bool:
        """Enable or disable the logging for the gRPC API calls."""
        ...
    
    @enable_debug_grpc_api_logger.setter
    def enable_debug_grpc_api_logger(self, val): # -> None:
        ...
    
    @property
    def enable_debug_geometry_operator_logger(self): # -> bool:
        """Enable or disable the logging for the geometry operators.

        This setting is useful for debug purposes.
        """
        ...
    
    @enable_debug_geometry_operator_logger.setter
    def enable_debug_geometry_operator_logger(self, val): # -> None:
        ...
    
    @property
    def enable_debug_internal_methods_logger(self): # -> bool:
        """Enable or disable the logging for internal methods.

        This setting is useful for debug purposes.
        """
        ...
    
    @enable_debug_internal_methods_logger.setter
    def enable_debug_internal_methods_logger(self, val): # -> None:
        ...
    
    @property
    def enable_debug_logger(self): # -> bool:
        """Enable or disable the debug level logger."""
        ...
    
    @enable_debug_logger.setter
    def enable_debug_logger(self, val): # -> None:
        ...
    
    @property
    def aedt_log_file(self): # -> str | None:
        """Path to the AEDT log file.

        Used to specify that Electronics Desktop has to be launched with ``-Logfile`` option.
        """
        ...
    
    @aedt_log_file.setter
    def aedt_log_file(self, value: str): # -> None:
        ...
    
    @property
    def lsf_queue(self): # -> str | None:
        """LSF queue name.

        This attribute is valid only on Linux systems running LSF Scheduler."""
        ...
    
    @lsf_queue.setter
    def lsf_queue(self, value): # -> None:
        ...
    
    @property
    def use_lsf_scheduler(self): # -> bool:
        """Whether to use LSF Scheduler.

        This attribute is valid only on Linux systems running LSF Scheduler."""
        ...
    
    @use_lsf_scheduler.setter
    def use_lsf_scheduler(self, value): # -> None:
        ...
    
    @property
    def lsf_aedt_command(self): # -> str:
        """Command to launch the task in the LSF Scheduler.

        The default is ``"ansysedt"``.
        This attribute is valid only on Linux systems running LSF Scheduler."""
        ...
    
    @lsf_aedt_command.setter
    def lsf_aedt_command(self, value): # -> None:
        ...
    
    @property
    def lsf_num_cores(self): # -> int:
        """Number of LSF cores.

        This attribute is valid only on Linux systems running LSF Scheduler."""
        ...
    
    @lsf_num_cores.setter
    def lsf_num_cores(self, value): # -> None:
        ...
    
    @property
    def lsf_ram(self): # -> int:
        """RAM allocated for the LSF job.

        This attribute is valid only on Linux systems running LSF Scheduler."""
        ...
    
    @lsf_ram.setter
    def lsf_ram(self, value): # -> None:
        ...
    
    @property
    def lsf_ui(self): # -> int | None:
        """Value passed in the LSF 'select' string to the ui resource."""
        ...
    
    @lsf_ui.setter
    def lsf_ui(self, value): # -> None:
        ...
    
    @property
    def lsf_timeout(self): # -> int:
        """Timeout in seconds for trying to start the interactive session. The default is ``3600`` seconds."""
        ...
    
    @lsf_timeout.setter
    def lsf_timeout(self, value): # -> None:
        ...
    
    @property
    def lsf_osrel(self): # -> str | None:
        """Operating system string.
        This attribute is valid only on Linux systems running LSF Scheduler."""
        ...
    
    @lsf_osrel.setter
    def lsf_osrel(self, value): # -> None:
        ...
    
    @property
    def custom_lsf_command(self): # -> str | None:
        """Command to launch in the LSF Scheduler. The default is ``None``.
        This attribute is valid only on Linux systems running LSF Scheduler."""
        ...
    
    @custom_lsf_command.setter
    def custom_lsf_command(self, value): # -> None:
        ...
    
    @property
    def aedt_environment_variables(self): # -> dict[str, str]:
        """Environment variables that are set before launching a new AEDT session,
        including those that enable the beta features."""
        ...
    
    @aedt_environment_variables.setter
    def aedt_environment_variables(self, value): # -> None:
        ...
    
    @property
    def remote_api(self): # -> bool:
        """State whether remote API is used or not."""
        ...
    
    @remote_api.setter
    def remote_api(self, value: bool): # -> None:
        ...
    
    @property
    def formatter(self): # -> Formatter | None:
        """Get the formatter."""
        ...
    
    @formatter.setter
    def formatter(self, value: logging.Formatter): # -> None:
        ...
    
    @property
    def remote_rpc_session(self): # -> Any:
        """Get the RPyC connection."""
        ...
    
    @remote_rpc_session.setter
    def remote_rpc_session(self, value: Any): # -> None:
        ...
    
    @property
    def remote_rpc_session_temp_folder(self): # -> str:
        """Get the remote RPyC session temp folder."""
        ...
    
    @remote_rpc_session_temp_folder.setter
    def remote_rpc_session_temp_folder(self, value: str): # -> None:
        ...
    
    @property
    def remote_rpc_service_manager_port(self): # -> int:
        """Get the remote RPyC service manager port."""
        ...
    
    @remote_rpc_service_manager_port.setter
    def remote_rpc_service_manager_port(self, value: int): # -> None:
        ...
    
    @property
    def time_tick(self): # -> float:
        """Time in seconds since the 'epoch' as a floating-point number."""
        ...
    
    @time_tick.setter
    def time_tick(self, value: float): # -> None:
        ...
    
    @property
    def release_on_exception(self): # -> bool:
        """Enable or disable the release of AEDT on exception."""
        ...
    
    @release_on_exception.setter
    def release_on_exception(self, value): # -> None:
        ...
    
    @property
    def objects_lazy_load(self): # -> bool:
        """Flag for enabling and disabling the lazy load. The default value is ``True``."""
        ...
    
    @objects_lazy_load.setter
    def objects_lazy_load(self, value): # -> None:
        ...
    
    @property
    def lazy_load(self): # -> bool:
        """Flag for enabling and disabling the lazy load. The default value is ``True``."""
        ...
    
    @lazy_load.setter
    def lazy_load(self, value): # -> None:
        ...
    
    @property
    def wait_for_license(self): # -> bool:
        """Enable or disable the use of the flag `-waitforlicense` when launching Electronic Desktop.

        The default value is ``False``."""
        ...
    
    @wait_for_license.setter
    def wait_for_license(self, value): # -> None:
        ...
    
    @property
    def retry_n_times_time_interval(self): # -> float:
        """Time interval between the retries by the ``_retry_n_times`` method."""
        ...
    
    @retry_n_times_time_interval.setter
    def retry_n_times_time_interval(self, value): # -> None:
        ...
    
    @property
    def number_of_grpc_api_retries(self): # -> int:
        """Number of gRPC API retries. The default is ``3``."""
        ...
    
    @number_of_grpc_api_retries.setter
    def number_of_grpc_api_retries(self, value): # -> None:
        ...
    
    @property
    def desktop_launch_timeout(self): # -> int:
        """Timeout in seconds for trying to launch AEDT. The default is ``120`` seconds."""
        ...
    
    @desktop_launch_timeout.setter
    def desktop_launch_timeout(self, value): # -> None:
        ...
    
    @property
    def aedt_version(self): # -> str | None:
        """AEDT version in the form ``"2023.x"``.

        In AEDT 2022 R2 and later, evaluating a bounding box by exporting a SAT file is disabled."""
        ...
    
    @aedt_version.setter
    def aedt_version(self, value): # -> None:
        ...
    
    @property
    def aedt_install_dir(self): # -> str | None:
        """AEDT installation path."""
        ...
    
    @aedt_install_dir.setter
    def aedt_install_dir(self, value): # -> None:
        ...
    
    @property
    def use_multi_desktop(self): # -> bool:
        """Flag indicating if multiple desktop sessions are enabled in the same Python script.

        Current limitations follow:
        - Release without closing the desktop is not possible,
        - The first desktop created must be the last to be closed.

        Enabling multiple desktop sessions is a beta feature."""
        ...
    
    @use_multi_desktop.setter
    def use_multi_desktop(self, value): # -> None:
        ...
    
    @property
    def edb_dll_path(self): # -> str | None:
        """Optional path for the EDB DLL file."""
        ...
    
    @edb_dll_path.setter
    def edb_dll_path(self, value): # -> None:
        ...
    
    @property
    def enable_pandas_output(self): # -> bool:
        """Flag for whether Pandas is being used to export dictionaries and lists.

        This attribute applies to Solution data output.
        The default is ``False``. If ``True``, the property or method returns a Pandas object.
        This property is valid only in the CPython environment.
        """
        ...
    
    @enable_pandas_output.setter
    def enable_pandas_output(self, val): # -> None:
        ...
    
    @property
    def force_error_on_missing_project(self): # -> bool:
        """Flag for whether to check the project path.

        The default is ``False``.
        If ``True``, when passing a project path, the project has to exist.
        Otherwise, an error is raised.
        """
        ...
    
    @force_error_on_missing_project.setter
    def force_error_on_missing_project(self, val): # -> None:
        ...
    
    @property
    def disable_bounding_box_sat(self): # -> bool:
        """Flag for enabling and disabling bounding box evaluation by exporting a SAT file."""
        ...
    
    @disable_bounding_box_sat.setter
    def disable_bounding_box_sat(self, val): # -> None:
        ...
    
    @property
    def use_grpc_api(self): # -> bool | None:
        """Flag for whether to use the gRPC API or legacy COM object."""
        ...
    
    @use_grpc_api.setter
    def use_grpc_api(self, val): # -> None:
        ...
    
    @property
    def enable_error_handler(self): # -> bool:
        """Flag for enabling and disabling the internal PyAEDT error handling."""
        ...
    
    @enable_error_handler.setter
    def enable_error_handler(self, val): # -> None:
        ...
    
    @property
    def pyaedt_server_path(self): # -> str:
        """Get ``PYAEDT_SERVER_AEDT_PATH`` environment variable."""
        ...
    
    @pyaedt_server_path.setter
    def pyaedt_server_path(self, val): # -> None:
        ...
    
    @property
    def skip_license_check(self): # -> bool:
        """Flag indicating whether to check for license availability when launching the Desktop."""
        ...
    
    @skip_license_check.setter
    def skip_license_check(self, value): # -> None:
        ...
    
    def load_yaml_configuration(self, path: str, raise_on_wrong_key: bool = ...): # -> None:
        """Update default settings from a YAML configuration file."""
        ...
    
    def writte_yaml_configuration(self, path: str): # -> None:
        """Write the current settings into a YAML configuration file."""
        ...
    


settings = ...
inner_project_settings = ...
