"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict

class Quantity(float):
    """Stores a number with its unit.

    Parameters
    ----------
    expression : float, str
        Numerical value of the variable with or without units.
    unit : str
        Units for the value.
    """
    def __new__(cls, expression, unit=...): # -> Self:
        ...
    
    def __init__(self, expression, unit=...) -> None:
        ...
    
    def to(self, unit): # -> Quantity | None:
        """Convert the actual number to new unit."""
        ...
    
    @property
    def expression(self): # -> str:
        ...
    
    @expression.setter
    def expression(self, value): # -> None:
        """Value number with unit.

        Returns
        -------
        str
        """
        ...
    
    @property
    def unit_system(self): # -> str | bool | None:
        """Value unit system.

        Returns
        -------
        str
        """
        ...
    
    @property
    def unit(self): # -> str:
        """Value unit.

        Returns
        -------
        str
        """
        ...
    
    @unit.setter
    def unit(self, value): # -> None:
        ...
    
    @property
    def value(self): # -> float:
        """Value number.

        Returns
        -------
        float
        """
        ...
    
    @value.setter
    def value(self, value): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __add__(self, other): # -> Quantity | None:
        ...
    
    def __sub__(self, other): # -> Quantity:
        ...
    
    def __mul__(self, other): # -> Quantity:
        ...
    
    def __truediv__(self, other): # -> Quantity:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __float__(self): # -> float:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs): # -> Quantity | NDArray[Any]:
        ...
    
    def __array__(self, dtype=...): # -> NDArray[Any]:
        ...
    
    def sqrt(self): # -> Quantity:
        """Square root of the value."""
        ...
    
    def log10(self): # -> Quantity:
        """Square root of the value."""
        ...
    
    def sin(self): # -> Quantity:
        """Square root of the value."""
        ...
    
    def cos(self): # -> Quantity:
        """Square root of the value."""
        ...
    
    def arcsin(self): # -> Quantity:
        """Square root of the value."""
        ...
    
    def arccos(self): # -> Quantity:
        """Square root of the value."""
        ...
    
    def tan(self): # -> Quantity:
        ...
    
    def arctan2(self, other): # -> Quantity:
        ...
    
    def __reduce__(self): # -> tuple[type[Self], tuple[str, str | Any]]:
        ...
    


def decompose_variable_value(variable_value: str, full_variables: Dict[str, Any] = ...) -> tuple:
    """Decompose a variable value.

    Parameters
    ----------
    variable_value : str
        The variable value to decompose, which may include a unit.
    full_variables : dict, optional
        A dictionary of full variable names and their values, used to resolve dependent variables.

    Returns
    -------
    tuples
        Tuple with variable value and unit.
    """
    ...

def is_close(a: float, b: float, relative_tolerance: float = ..., absolute_tolerance: float = ...) -> bool:
    """Whether two numbers are close to each other given relative and absolute tolerances.

    Parameters
    ----------
    a : float, int
        First number to compare.
    b : float, int
        Second number to compare.
    relative_tolerance : float
        Relative tolerance. The default value is ``1e-9``.
    absolute_tolerance : float
        Absolute tolerance. The default value is ``0.0``.

    Returns
    -------
    bool
        ``True`` if the two numbers are closed, ``False`` otherwise.
    """
    ...

def is_number(a: Any) -> bool:
    """Whether the given input is a number.

    Parameters
    ----------
    a : float, int, str
        Number to check.

    Returns
    -------
    bool
        ``True`` if it is a number, ``False`` otherwise.
    """
    ...

def is_array(a: Any) -> bool:
    """Whether the given input is an array.

    Parameters
    ----------
    a : list
        List to check.

    Returns
    -------
    bool
        ``True`` if it is an array, ``False`` otherwise.
    """
    ...

