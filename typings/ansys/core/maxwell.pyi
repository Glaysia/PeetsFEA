"""
This type stub file was generated by pyright.
"""

from ansys.aedt.core.application.analysis_3d import FieldAnalysis3D
from ansys.aedt.core.generic.general_methods import pyaedt_function_handler
from ansys.aedt.core.mixins import CreateBoundaryMixin

"""This module contains these Maxwell classes: ``Maxwell``, ``Maxwell2d``, and ``Maxwell3d``."""
class Maxwell(CreateBoundaryMixin):
    def __init__(self) -> None:
        ...
    
    @property
    def symmetry_multiplier(self): # -> int:
        """Symmetry multiplier.

        References
        ----------
        >>> oModule.GetSymmetryMultiplier()
        """
        ...
    
    @property
    def windings(self): # -> list[Any]:
        """Windings.

        References
        ----------
        >>> oModule.GetExcitationsOfType("Winding Group")"""
        ...
    
    @property
    def design_file(self): # -> Path:
        """Design file."""
        ...
    
    @pyaedt_function_handler()
    def change_symmetry_multiplier(self, value=...):
        """Set the design symmetry multiplier to a specified value.

        The symmetry multiplier is automatically applied to all input quantities.

        Parameters
        ----------
        value : int, optional
            Value to use as the Design Symmetry Multiplier coefficient. The default value is ``1``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetDesignSettings
        """
        ...
    
    @pyaedt_function_handler()
    def change_inductance_computation(self, compute_transient_inductance=..., incremental_matrix=...):
        """Enable the inductance computation for the transient analysis and set the incremental matrix.

        Parameters
        ----------
        compute_transient_inductance : bool, optional
            Whether to enable the inductance calculation for the transient analysis.
            The default is ``True``.
        incremental_matrix : bool, optional
            Whether to set the inductance calculation to ``Incremental`` if
            ``compute_transient_inductance=True``. The default is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.SetDesignSettings
        """
        ...
    
    @pyaedt_function_handler
    def apply_skew(self, skew_type=..., skew_part=..., skew_angle=..., skew_angle_unit=..., number_of_slices=..., custom_slices_skew_angles=...):
        """Apply skew to 2D model.

        Parameters
        ----------
        skew_type : str, optional
            Skew type.
            Possible choices are ``Continuous``, ``Step``, ``V-Shape``, ``User Defined``.
            The default value is ``Continuous``.
        skew_part : str, optional
            Part to skew.
            Possible choices are ``Rotor`` or ``Stator``.
            The default value is ``Rotor``.
        skew_angle : str, optional
            Skew angle.
            The default value is ``1``.
        skew_angle_unit : str, optional
            Skew angle unit.
            Possible choices are ``deg``, ``rad``, ``degsec``, ``degmin``.
            The default value is ``deg``.
        number_of_slices : str, optional
            Number of slices to split the selected part into.
            The default value is ``2``.
        custom_slices_skew_angles : list, optional
            List of custom angles to apply to slices.
            Only available if skew_type is ``User Defined``.
            The length of this list must be equal to number_of_slices.
            The default value is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(objects="assignment", value="core_loss_on_field")
    def set_core_losses(self, assignment, core_loss_on_field=...): # -> Literal[True]:
        """Whether to enable core losses for a set of objects.

        For ``EddyCurrent`` and ``Transient`` solver designs, core losses calculations
        may be included in the simulation on any object that has a corresponding
        core loss definition (with core loss coefficient settings) in the material library.

        Parameters
        ----------
        assignment : list, str
            List of object to apply core losses to.
        core_loss_on_field : bool, optional
            Whether to enable ``Consider core loss effect on field`` for the given list. The default is
            ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.SetCoreLoss

        Examples
        --------
        Set core losses in Maxwell 3D.

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> m3d.set_core_losses(assignment=["PQ_Core_Bottom", "PQ_Core_Top"], core_loss_on_field=True)
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(sources="assignment")
    def assign_matrix(self, assignment, matrix_name=..., turns=..., return_path=..., group_sources=..., branches=...):
        """Assign a matrix to the selection.

        Matrix assignment can be calculated based upon the solver type.
        For 2D/3D solvers the available solution types are: ``Magnetostatic``,
        ``Electrostatic``, ``Eddy Current``, ``DC Conduction`` and ``AC Conduction``.


        Parameters
        ----------
        assignment : list, str
            List of sources to assign a matrix to.
        matrix_name : str, optional
            Name of the matrix. The default is ``None``.
        turns : list, int, optional
            Number of turns. The default is 1.
        return_path : list, str, optional
            Return path. The default is ``infinite``
        group_sources : dict, list optional
            Dictionary consisting of ``{Group Name: list of source names}`` to add
            multiple groups. You can also define a list of strings. The default is ``None``.
        branches : : list, int, optional
            Number of branches. The default is ``None``, which indicates that only one
            branch exists.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.

        References
        ----------
        >>> oModule.AssignMatrix

        Examples
        --------
        Set matrix in a Maxwell magnetostatic analysis.

        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d(solution_type="MagnetostaticXY", version="2025.1", close_on_exit=True)
        >>> coil1 = m2d.modeler.create_rectangle([0, 1.5, 0], [8, 3], is_covered=True, name="Coil_1")
        >>> coil2 = m2d.modeler.create_rectangle([8.5, 1.5, 0], [8, 3], is_covered=True, name="Coil_2")
        >>> coil3 = m2d.modeler.create_rectangle([16, 1.5, 0], [8, 3], is_covered=True, name="Coil_3")
        >>> coil4 = m2d.modeler.create_rectangle([32, 1.5, 0], [8, 3], is_covered=True, name="Coil_4")
        >>> current1 = m2d.assign_current(assignment="Coil_1", amplitude=1, swap_direction=False, name="Current1")
        >>> current2 = m2d.assign_current(assignment="Coil_2", amplitude=1, swap_direction=True, name="Current2")
        >>> current3 = m2d.assign_current(assignment="Coil_3", amplitude=1, swap_direction=True, name="Current3")
        >>> current4 = m2d.assign_current(assignment="Coil_4", amplitude=1, swap_direction=True, name="Current4")
        >>> group_sources = {"Group1_Test": ["Current1", "Current3"], "Group2_Test": ["Current2", "Current4"]}
        >>> selection = ["Current1", "Current2", "Current3", "Current4"]
        >>> turns = [5, 1, 2, 3]
        >>> L = m2d.assign_matrix(assignment=selection, matrix_name="Test2", turns=turns, group_sources=group_sources)

        Set matrix in a Maxwell DC Conduction analysis.
        >>> m2d.assign_voltage(["Port1"], amplitude=1, name="1V")
        >>> m2d.assign_voltage(["Port2"], amplitude=0, name="0V")
        >>> m2d.assign_matrix(assignment=["1V"], matrix_name="Matrix1", group_sources=["0V"])
        >>> m2d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler()
    def setup_ctrlprog(self, setupname, file_str=..., keep_modifications=..., python_interpreter=..., aedt_lib_dir=...): # -> Literal[True]:
        """Configure the transient design setup to run a specific control program.

        The control program is executed from a temporary directory that Maxwell creates for every setup run.

        .. deprecated:: 0.6.71
        Use :func:`enable_control_program` method instead.

        Parameters
        ----------
        setupname : str
            Name of the setup.
            It will become the name of the Python file.
        file_str : str, optional
            Name of the file. The default value is ``None``.
        keep_modifications : bool, optional
            Whether to save the changes. The default value is ``False``.
        python_interpreter : str, optional
             Python interpreter to use. The default value is ``None``.
        aedt_lib_dir : str, optional
             Full path to the ``pyaedt`` directory. The default value is ``None``.

        Returns
        -------
        bool
            ``True`` when successful and ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment", activate_eddy_effects="enable_eddy_effects", activate_displacement_current="enable_displacement_current")
    def eddy_effects_on(self, assignment, enable_eddy_effects=..., enable_displacement_current=...): # -> Literal[True]:
        """Assign eddy effects on a list of objects.

        For Eddy Current solvers only, you must specify the displacement current on the model objects.

        Parameters
        ----------
        assignment : list, str
            List of objects to assign eddy effects to.
        enable_eddy_effects : bool, optional
            Whether to activate eddy effects. The default is ``True``.
        enable_displacement_current : bool, optional
            Whether to activate the displacement current. The default is ``True``.
            Valid only for Eddy Current solvers.

        Returns
        -------
        bool
            ``True`` when successful and ``False`` when failed.

        References
        ----------
        >>> oModule.SetEddyEffect
        """
        ...
    
    @pyaedt_function_handler(windings_name="assignment")
    def setup_y_connection(self, assignment=...): # -> Literal[True]:
        """Set up the Y connection.

        Parameters
        ----------
        assignment : list, optional
            List of windings. For example, ``["PhaseA", "PhaseB", "PhaseC"]``.
            The default is ``None``, in which case the design has no Y connection.

        Returns
        -------
        bool
            ``True`` when successful and ``False`` when failed.

        References
        ----------
        >>> oModule.SetupYConnection

        Examples
        --------
        Set up the Y connection for three existing windings named ``PhaseA``, ``PhaseB``, and ``PhaseC``.
        This creates one ``YConnection`` group containing these three phases.

        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d("Motor_EM_R2019R3.aedt")
        >>> m2d.set_active_design("Basis_Model_For_Test")
        >>> m2d.setup_y_connection(["PhaseA", "PhaseB", "PhaseC"])
        >>> m2d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(object_list="assignment")
    def assign_current(self, assignment, amplitude=..., phase=..., solid=..., swap_direction=..., name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign the source of the current.

        Parameters
        ----------
        assignment : list, str
            List of objects to assign the current source to.
        amplitude : float or str, optional
            Current amplitude. The default is ``1A``.
        phase : str, optional
            Current phase.
            The default is ``"0deg"``.
        solid : bool, optional
            Specifies the type of conductor, which can be solid or stranded.
            The default is ``True``, which means the conductor is solid``.
            When ``False``, it means the conductor is stranded.
        swap_direction : bool, optional
            Reference direction.
            The default is ``False`` which means that current is flowing inside the object.
        name : str, optional
            Name of the current excitation.
            The default is ``None`` in which case a generic name will be given.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.

        References
        ----------
        >>> oModule.AssignCurrent

        Examples
        --------

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d(solution_type="ElectroDCConduction")
        >>> cylinder = m3d.modeler.create_cylinder("X", [0, 0, 0], 10, 100, 250)
        >>> current = m3d.assign_current(cylinder.top_face_x.id, amplitude="2mA")
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(band_object="assignment")
    def assign_translate_motion(self, assignment, coordinate_system=..., axis=..., positive_movement=..., start_position=..., periodic_translate=..., negative_limit=..., positive_limit=..., velocity=..., mechanical_transient=..., mass=..., damping=..., load_force=..., motion_name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a translation motion to an object container.

        For both rotational and translational problems, the band objects must always enclose all the moving objects.

        Parameters
        ----------
        assignment : str
            Object container.
        coordinate_system : str, optional
            Coordinate system name. The default is ``"Global"``.
        axis : str or int, optional
            Coordinate system axis. The default is ``"Z"``.
            It can be a ``ansys.aedt.core.generic.constants.AXIS`` enumerator value.
        positive_movement : bool, optional
            Whether movement is positive. The default is ``True``.
        start_position : float or str, optional
            Starting position of the movement. The default is ``0``. If a float
            value is used, default modeler units are applied.
        periodic_translate : bool, optional
            Whether movement is periodic. The default is ``False``.
        negative_limit : float or str, optional
            Negative limit of the movement. The default is ``0``. If a float
            value is used, the default modeler units are applied.
        positive_limit : float or str, optional
            Positive limit of the movement. The default is ``0``. If a float
            value is used, the default modeler units are applied.
        velocity : float or str, optional
            Initial velocity.
            The default is ``0``. If a float value is used, "m_per_sec" units are applied.
        mechanical_transient : bool, optional
            Whether to consider the mechanical movement. The default is ``False``.
        mass : float or str, optional
            Mechanical mass. The default is ``1``. If a float value is used, "Kg" units
            are applied.
        damping : float, optional
            Damping factor. The default is ``0``.
        load_force : float or str, optional
            Load force is positive if it's applied in the same direction as the moving vector and negative
            in the opposite direction.
            The default is ``0``. If a float value is used, "newton" units are applied.
        motion_name : str, optional
            Motion name. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject` or ``False``
            Boundary object or bool if not successful.

        References
        ----------
        >>> oModule.AssignBand
        """
        ...
    
    @pyaedt_function_handler(band_object="assignment")
    def assign_rotate_motion(self, assignment, coordinate_system=..., axis=..., positive_movement=..., start_position=..., has_rotation_limits=..., negative_limit=..., positive_limit=..., non_cylindrical=..., mechanical_transient=..., angular_velocity=..., inertia=..., damping=..., load_torque=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a rotation motion to an object container.

        For both rotational and translational problems, the band objects must always enclose all the moving objects.

        Parameters
        ----------
        assignment : str,
            Object container.
        coordinate_system : str, optional
            Coordinate system name. The default is ``"Global"``.
        axis : str or int, optional
            Coordinate system axis. The default is ``"Z"``.
            It can be a ``ansys.aedt.core.generic.constants.AXIS`` enumerator value.
        positive_movement : bool, optional
            Whether the movement is positive. The default is ``True``.
        start_position : float or str, optional
            Starting position of the movement. The default is ``0``. If a float value
            is used, "deg" units are applied.
        has_rotation_limits : bool, optional
            Whether there is a limit in rotation. The default is ``False``.
        negative_limit : float or str, optional
            Negative limit of the movement. The default is ``0``. If a float value is
            used, "deg" units are applied.
        positive_limit : float or str, optional
            Positive limit of the movement. The default is ``360``. If a float value is used,
            "deg" units are applied.
        non_cylindrical : bool, optional
            Whether to consider non-cylindrical rotation. The default is ``False``.
        angular_velocity : float or str, optional
            Movement velocity. The default is ``"0rpm"``. If a float value is used,
            "rpm" units are applied.
        mechanical_transient : bool, optional
            Whether to consider mechanical movement. The default is ``False``.
        inertia : float, optional
            Mechanical inertia. The default is ``1``.
        damping : float, optional
            Damping factor. The default is ``0``.
        load_torque : float or str, optional
            Load torque sign is determined based on the moving vector, using the right-hand rule.
            The default is ``"0NewtonMeter"``. If a float value is used "NewtonMeter" units are applied.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.

        References
        ----------
        >>> oModule.AssignBand
        """
        ...
    
    @pyaedt_function_handler(face_list="assignment")
    def assign_voltage(self, assignment, amplitude=..., name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a voltage source to a list of faces in Maxwell 3D or a list of objects or edges in Maxwell 2D.

        Parameters
        ----------
        assignment : list
            List of faces, objects or edges to assign a voltage source to.
        amplitude : float, optional
            Voltage amplitude in mV. The default is ``1``.
        name : str, optional
            Name of the boundary. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.
            ``False`` when failed.

        References
        ----------
        >>> oModule.AssignVoltage

        Examples
        --------

        Create a region in Maxwell 2D and assign voltage to its edges.
        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d(version="2025.1", solution_type="ElectrostaticZ")
        >>> region_id = m2d.modeler.create_region(pad_value=[500, 50, 50])
        >>> voltage = m2d.assign_voltage(assignment=region_id.edges, amplitude=0, name="GRD")
        >>> m2d.release_desktop()

        Create a region in Maxwell 3D and assign voltage to its edges.
        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d(version="2025.1", solution_type="Electrostatic")
        >>> region_id = m3d.modeler.create_box([0, 0, 0], [10, 10, 10])
        >>> voltage = m3d.assign_voltage(assignment=region_id.faces, amplitude=0, name="GRD")
        >>> m3d.release_desktop()

        """
        ...
    
    @pyaedt_function_handler(face_list="assignment")
    def assign_voltage_drop(self, assignment, amplitude=..., swap_direction=..., name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a voltage drop across a list of faces to a specific value.

        The voltage drop applies only to sheet objects.

        Parameters
        ----------
        assignment : list
            List of faces to assign a voltage drop to.
        amplitude : float, optional
            Voltage amplitude in mV. The default is ``1``.
        swap_direction : bool, optional
            Whether to swap the direction. The default value is ``False``.
        name : str, optional
            Name of the boundary. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object.
            ``False`` when failed.

        References
        ----------
        >>> oModule.AssignVoltageDrop
        """
        ...
    
    @pyaedt_function_handler()
    def assign_floating(self, assignment, charge_value=..., name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign floating excitation to model conductors at unknown potentials
        and specify the total charge on the conductor.

        Parameters
        ----------
        assignment : list of int, :class:`ansys.aedt.core.modeler.cad.object3d.Object3d`,
                    :class:`ansys.aedt.core.modeler.elements_3d.FacePrimitive` or str
            List of objects or faces to assign the excitation to.
        charge_value : int, float, optional
            Charge value.
            If not provided, The default is ``0``.
        name : str, optional
            Name of the excitation.
            If not provided, a random name with prefix "Floating" will be generated.

        Returns
        -------
        :class:`ansys.aedt.core.modules.Boundary.BoundaryObject`
            Boundary object.
            ``False`` when failed.

        References
        ----------
        >>> oModule.AssignFloating

        Examples
        --------
        Assign a floating excitation for a Maxwell 2d Electrostatic design

        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d(version="2025.1")
        >>> m2d.solution_type = SOLUTIONS.Maxwell2d.ElectroStaticXY
        >>> rect = m2d.modeler.create_rectangle([0, 0, 0], [3, 1], name="Rectangle1")
        >>> floating = m2d.assign_floating(assignment=rect, charge_value=3, name="floating_test")
        >>> m2d.release_desktop(True, True)

        Assign a floating excitation for a Maxwell 3d Electrostatic design providing an object
        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d(version="2025.1")
        >>> m3d.solution_type = SOLUTIONS.Maxwell3d.ElectroStatic
        >>> box = m3d.modeler.create_box([0, 0, 0], [10, 10, 10], name="Box1")
        >>> floating = m3d.assign_floating(assignment=box, charge_value=3)
        Assign a floating excitation providing a list of faces
        >>> floating1 = m3d.assign_floating(assignment=[box.faces[0], box.faces[1]], charge_value=3)
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(coil_terminals="assignment", current_value="current", res="resistance", ind="inductance")
    def assign_winding(self, assignment=..., winding_type=..., is_solid=..., current=..., resistance=..., inductance=..., voltage=..., parallel_branches=..., phase=..., name=...): # -> BoundaryObject | MaxwellParameters | Literal[False]:
        """Assign a winding to a Maxwell design.

        Parameters
        ----------
        assignment : list, optional
            List of faces to create the coil terminal on.
            The default is ``None``.
        winding_type : str, optional
            Type of the winding. Options are ``"Current"``, ``"Voltage"``,
            and ``"External"``. The default is ``"Current"``.
        is_solid : bool, optional
            Whether the winding is the solid type. The default is ``True``. If ``False``,
            the winding is the stranded type.
        current : float, optional
            Value of the current in amperes. The default is ``1``.
        resistance : float, optional
            Resistance in ohms. The default is ``0``.
        inductance : float, optional
            Inductance in Henry (H). The default is ``0``.
        voltage : float, optional
            Voltage value. The default is ``0``.
        parallel_branches : int, optional
            Number of parallel branches. The default is ``1``.
        phase : float, optional
            Value of the phase delay in degrees. The default is ``0``.
        name : str, optional
            Name of the boundary. The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Bounding object for the winding, otherwise only the bounding object.
            ``False`` when failed.

        References
        ----------
        >>> oModule.AssignWindingGroup
        """
        ...
    
    @pyaedt_function_handler(windingname="assignment", coil_names="coils")
    def add_winding_coils(self, assignment, coils): # -> Literal[True]:
        """Add coils to the winding.

        Parameters
        ----------
        assignment : str
            Name of the winding.
        coils : list
            List of the coil names.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AddWindingTerminals
        >>> oModule.AddWindingCoils
        """
        ...
    
    @pyaedt_function_handler(input_object="assignment", conductor_number="conductors_number")
    def assign_coil(self, assignment, conductors_number=..., polarity=..., name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign coils to a list of objects or face IDs.

        Parameters
        ----------
        assignment : list
            List of objects or face IDs.
        conductors_number : int, optional
            Number of conductors. The default is ``1``.
        polarity : str, optional
            Type of the polarity. The default is ``"Positive"``.
        name : str, optional
            The default is ``None``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Bounding object for the winding, otherwise only the bounding object.
            ``False`` when failed.

        References
        ----------
        >>> oModule.AssignCoil
        """
        ...
    
    @pyaedt_function_handler(input_object="assignment", reference_cs="coordinate_system")
    def assign_force(self, assignment, coordinate_system=..., is_virtual=..., force_name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a force to one or more objects.

        Force assignment can be calculated based upon the solver type.
        For 3D solvers the available solution types are: ``Magnetostatic``,
        ``Electrostatic``, ``Eddy Current``, ``Transient`` and ``Electric Transient``.
        For 2D solvers the available solution types are: ``Magnetostatic``,
        ``Electrostatic``, ``Eddy Current`` and ``Transient``.

        Parameters
        ----------
        assignment : str, list
            One or more objects to assign the force to.
        coordinate_system : str, optional
            Name of the reference coordinate system. The default is ``"Global"``.
        is_virtual : bool, optional
            Whether the force is virtual. The default is ``True.``
        force_name : str, optional
            Name of the force. The default is ``None``, in which case the default
            name is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignForce

        Examples
        --------

        Assign virtual force to a magnetic object:

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> iron_object = m3d.modeler.create_box([0, 0, 0], [2, 10, 10], name="iron")
        >>> magnet_object = m3d.modeler.create_box([10, 0, 0], [2, 10, 10], name="magnet")
        >>> m3d.assign_material(iron_object, "iron")
        >>> m3d.assign_material(magnet_object, "NdFe30")
        >>> m3d.assign_force("iron", is_virtual=True, force_name="force_iron")

        Assign Lorentz force to a conductor:

        >>> conductor1 = m3d.modeler.create_box([0, 0, 0], [1, 1, 10], name="conductor1")
        >>> conductor2 = m3d.modeler.create_box([10, 0, 0], [1, 1, 10], name="conductor2")
        >>> m3d.assign_material(conductor1, "copper")
        >>> m3d.assign_material(conductor2, "copper")
        >>> m3d.assign_force("conductor1", is_virtual=False, force_name="force_copper")  # conductor, use Lorentz force
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(input_object="assignment", reference_cs="coordinate_system")
    def assign_torque(self, assignment, coordinate_system=..., is_positive=..., is_virtual=..., axis=..., torque_name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a torque to one or more objects.

        Torque assignment can be calculated based upon the solver type.
        For 3D solvers the available solution types are: ``Magnetostatic``,
        ``Electrostatic``, ``Eddy Current``, ``Transient`` and ``Electric Transient``.
        For 2D solvers the available solution types are: ``Magnetostatic``,
        ``Electrostatic``, ``Eddy Current`` and ``Transient``.

        Parameters
        ----------
        assignment : str or list
           One or more objects to assign the torque to.
        coordinate_system : str, optional
            Name of the reference coordinate system. The default is ``"Global"``.
        is_positive : bool, optional
            Whether the torque is positive. The default is ``True``.
        is_virtual : bool, optional
            Whether the torque is virtual. The default is ``True``.
        axis : str, optional
            Axis to apply the torque to. The default is ``"Z"``.
        torque_name : str, optional
            Name of the torque. The default is ``None``, in which
            case the default name is used.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignTorque
        """
        ...
    
    @pyaedt_function_handler()
    def solve_inside(self, name, activate=...): # -> Literal[True]:
        """Solve inside to generate a solution inside an object.

        With this method, Maxwell will create a mesh inside the object and generate the solution from the mesh.

        Parameters
        ----------
        name : str
            Name of the object to generate the solution into.

        activate : bool, optional
            The default value is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oEditor.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler()
    def analyze_from_zero(self): # -> Literal[True]:
        """Force the next solve to start from time 0 for a given setup.

        This method applies only to the Transient solution type.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.ResetSetupToTimeZero
        """
        ...
    
    @pyaedt_function_handler(val="angle")
    def set_initial_angle(self, motion_setup, angle): # -> Literal[True]:
        """Set the initial angle.

        Parameters
        ----------
        motion_setup : str
            Name of the motion setup.
        angle : float
            Value of the angle in degrees.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oDesign.ChangeProperty
        """
        ...
    
    @pyaedt_function_handler(entity_list="assignment")
    def assign_symmetry(self, assignment, symmetry_name=..., is_odd=...): # -> BoundaryObject | MaxwellParameters:
        """Assign symmetry boundary.

        This boundary condition defines a plane of geometric or magnetic symmetry in a structure.
        Assign it only to the outer surfaces of the problem region.

        Parameters
        ----------
        assignment : list
            List IDs or :class:`ansys.aedt.core.modeler.elements_3d.EdgePrimitive` or
            :class:`ansys.aedt.core.modeler.elements_3d.FacePrimitive`.
        symmetry_name : str, optional
            Name of the symmetry.
        is_odd : bool, optional
            Type of the symmetry. The default is ``True`,` in which case the H field
            is tangential to the boundary. If ``False``, the H field is normal to
            the boundary.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignSymmetry
        """
        ...
    
    @pyaedt_function_handler(entities="assignment", coordinate_system_name="coordinate_system", coordinate_system_cartesian="coordinate_system_type")
    def assign_current_density(self, assignment, current_density_name=..., phase=..., current_density_x=..., current_density_y=..., current_density_z=..., current_density_2d=..., coordinate_system=..., coordinate_system_type=...):
        """Assign current density to a single or list of entities.

        This method specifies the x-, y-, and z-components of the current density in a conduction path.

        Parameters
        ----------
        assignment : list
            Objects to assign the current to.
        current_density_name : str, optional
            Current density name.
            If no name is provided a random name is generated.
        phase : str, optional
            Current density phase.
            Available units are 'deg', 'degmin', 'degsec' and 'rad'.
            Default value is 0deg.
        current_density_x : str, optional
            Current density X coordinate value.
            Default value is 0 A/m2.
        current_density_y : str, optional
            Current density Y coordinate value.
            Default value is 0 A/m2.
        current_density_z : str, optional
            Current density Z coordinate value.
            Default value is 0 A/m2.
        current_density_2d : str, optional
            Current density 2D value.
            Default value is 0 A/m2.
        coordinate_system : str, optional
            Coordinate system name.
            Default value is 'Global'.
        coordinate_system_type : str, optional
            Coordinate system cartesian.
            Possible values can be ``"Cartesian"``, ``"Cylindrical"``, and ``"Spherical"``.
            Default value is ``"Cartesian"``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(input_object="assignment", radiation_name="radiation")
    def assign_radiation(self, assignment, radiation=...): # -> BoundaryObject | MaxwellParameters:
        """Assign radiation boundary to one or more objects.

        Radiation assignment can be calculated based upon the solver type.
        Available solution type is: ``Eddy Current``.

        Parameters
        ----------
        assignment : str, list
            One or more objects to assign the radiation to.
        radiation : str, optional
            Name of the force. The default is ``None``, in which case the default
            name is used.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Radiation objects. If the method fails to execute it returns ``False``.

        References
        ----------
        >>> oModule.Radiation

        Examples
        --------

        Assign radiation boundary to one box and one face:

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> box1 = m3d.modeler.create_box([0, 0, 0], [2, 10, 10])
        >>> box2 = m3d.modeler.create_box([10, 0, 0], [2, 10, 10])
        >>> m3d.assign_radiation([box1, box2.faces[0]])
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(objects="assignment")
    def enable_harmonic_force(self, assignment, force_type=..., window_function=..., use_number_of_last_cycles=..., last_cycles_number=..., calculate_force=...): # -> Literal[True]:
        """Enable the harmonic force calculation for the transient analysis.

        Parameters
        ----------
        assignment : list
            List of object names for force calculations.
        force_type : int, optional
            Force type. Options are ``0`` for objects, ``1`` for surface, and ``2`` for volumetric.
        window_function : str, optional
            Windowing function. Default is ``"Rectangular"``.
            Available options are: ``"Rectangular"``, ``"Tri"``, ``"Van Hann"``, ``"Hamming"``,
            ``"Blackman"``, ``"Lanczos"``, ``"Welch"``.
        use_number_of_last_cycles : bool, optional
            Use number of last cycles for force calculations. Default is ``True``.
        last_cycles_number : int, optional
            Defines the number of cycles to compute if `use_number_of_last_cycle` is ``True``.
        calculate_force : sr, optional
            How to calculate force. The default is ``"Harmonic"``.
            Options are ``"Harmonic"`` and ``"Transient"``.


        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        """
        ...
    
    @pyaedt_function_handler(layout_component_name="assignment")
    def enable_harmonic_force_on_layout_component(self, assignment: str, nets: dict, force_type: int = ..., window_function: str = ..., use_number_of_last_cycles: bool = ..., last_cycles_number: int = ..., calculate_force: str = ..., start_time: str = ..., stop_time: str = ..., use_number_of_cycles_for_stop_time: bool = ..., number_of_cycles_for_stop_time: int = ..., include_no_layer: bool = ...) -> bool:
        """Enable the harmonic force calculation for the transient analysis.

        Parameters
        ----------
        assignment : str
            Name of layout component to apply harmonic forces to.
        nets : dict
            Dictionary containing nets and layers to enable harmonic forces on.
        force_type : int, optional
            Force Type. ``0`` for Objects, ``1`` for Surface, ``2`` for volumetric.
        window_function : str, optional
            Windowing function. Default is ``"Rectangular"``.
            Available options are: ``"Rectangular"``, ``"Tri"``, ``"Van Hann"``, ``"Hamming"``,
            ``"Blackman"``, ``"Lanczos"``, ``"Welch"``.
        use_number_of_last_cycles : bool, optional
            Use number Of last cycles for force calculations. Default is ``True``.
        last_cycles_number : int, optional
            Defines the number of cycles to compute if `use_number_of_last_cycle` is ``True``.
        calculate_force : str, optional
            How to calculate force. The default is ``"Harmonic"``.
            Options are ``"Harmonic"`` and ``"Transient"``.
        start_time : str, optional
            Harmonic Force Start Time. Default is ``"0s"``.
        stop_time : str, optional
            Harmonic Force Stop Time. Default is ``"2ms"``.
        use_number_of_cycles_for_stop_time : bool, optional
            Use number of cycles for force stop time calculations. Default is ``True``.
        number_of_cycles_for_stop_time : int, optional
            Number of cycles for force stop time calculations. Default is ``1``.
        include_no_layer : bool, optional
            Whether to include ``"<no-layer>"`` layer or not (used for vias). Default is ``True``.


        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(setup_name="setup")
    def export_element_based_harmonic_force(self, output_directory=..., setup=..., start_frequency=..., stop_frequency=..., number_of_frequency=...):
        """Export an element-based harmonic force data to a .csv file.

        Parameters
        ----------
        output_directory : str, optional
            Path for the output directory. If ``None`` pyaedt working dir will be used.
        setup : str, optional
            Name of the solution setup. If ``None``, the nominal setup is used.
        start_frequency : float, optional
            When a float is entered the Start-Stop Frequency approach is used.
        stop_frequency : float, optional
            When a float is entered, the Start-Stop Frequency approach is used.
        number_of_frequency : int, optional
            When a number is entered, the number of frequencies approach is used.

        Returns
        -------
        str
            Path to the export directory.
        """
        ...
    
    @pyaedt_function_handler()
    def create_external_circuit(self, circuit_design=...): # -> MaxwellCircuit:
        """
        Create the external circuit including all the windings of type ``External`` in the Maxwell design.

        Parameters
        ----------
        circuit_design : str, optional
            Name of the created circuit design.
            If not provided the design name + ``_ckt`` is used.

        Returns
        -------
        :class:`ansys.aedt.core.maxwellcircuit.MaxwellCircuit`
            MaxwellCircuit object if successful, ``False`` otherwise.

        Examples
        --------
        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d()
        >>> m2d.modeler.create_circle([0, 0, 0], 10, name="Coil1")
        >>> m2d.assign_coil(assignment=["Coil1"])
        >>> m2d.assign_winding(assignment=["Coil1"], winding_type="External", name="Winding1")
        >>> cir = m2d.create_external_circuit()
        >>> m2d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler()
    def edit_external_circuit(self, netlist_file_path, schematic_design_name=..., parameters=...): # -> Literal[True]:
        """
        Edit the external circuit for the winding and allow editing of the circuit parameters.

        Parameters
        ----------
        netlist_file_path : str
            Path to the circuit netlist file.
        schematic_design_name : str, optional
            Name of the schematic design.
        parameters : dict, optional
            Name and value of the circuit parameters.
            Parameters must be provided as a dictionary, where the key is the parameter name
            and the value is the parameter value.
            If the dictionary is provided, the ``netlist_file_path`` parameter is automatically
            set to an empty string.
            The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler(setupname="name", setuptype="setup_type")
    def create_setup(self, name=..., setup_type=..., **kwargs):
        """Create an analysis setup for Maxwell 3D or 2D.

        Optional arguments are passed using the ``setup_type`` and ``name``
        parameters.
        Keyword names correspond to the ``setuptype`` corresponding to the native AEDT API.
        The list of keywords here is not exhaustive.

        Parameters
        ----------
        setup_type : int, str, optional
            Type of the setup. Depending on the solution type, options are
            ``"AC Conduction"``, ``"DC Conduction"``, ``"EddyCurrent"``, ``"AC Magnetic"``
            ``"Electric Transient"``, ``"Electrostatic"``, ``"Magnetostatic"``,
            and ``Transient"``.
        name : str, optional
            Name of the setup. The default is ``"Setup1"``.
        **kwargs : dict, optional
            Available keys depend on the setup chosen.
            For more information, see :doc:`../SetupTemplatesMaxwell`.

        Returns
        -------
        :class:`ansys.aedt.core.modules.solve_setup.SetupMaxwell`
            3D Solver Setup object.

        References
        ----------
        >>> oModule.InsertSetup

        Examples
        --------
        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> m3d.create_setup(name="My_Setup", setup_type="AC Magnetic", MaximumPasses=10, PercentError=2)
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(file_path="output_file", setup_name="setup")
    def export_rl_matrix(self, matrix_name, output_file, is_format_default=..., width=..., precision=..., is_exponential=..., setup=..., default_adaptive=..., is_post_processed=...): # -> Literal[True]:
        """Export R/L matrix after solving.

        Parameters
        ----------
        matrix_name : str
            Matrix name to be exported.
        output_file : str
            Output file path to export R/L matrix file to.
            Extension must be ``.txt``.
        is_format_default : bool, optional
            Whether the exported format is default or not.
            If False the custom format is set (no exponential).
        width : int, optional
            Column width in exported .txt file.
        precision : int, optional
            Decimal precision number in exported \\*.txt file.
        is_exponential : bool, optional
            Whether the format number is exponential or not.
        setup : str, optional
            Name of the setup.
            If not provided, the active setup is used.
        default_adaptive : str, optional
            Adaptive type.
            The default is ``"LastAdaptive"``.
        is_post_processed : bool, optional
            Boolean to check if it is post processed. Default value is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def export_c_matrix(self, matrix_name, output_file, setup=..., default_adaptive=..., is_post_processed=...): # -> Literal[True]:
        """Export Capacitance matrix after solving.

        Parameters
        ----------
        matrix_name : str
            Matrix name to be exported.
        output_file : str
            Output file path to export R/L matrix file to.
            Extension must be ``.txt``.
        setup : str, optional
            Name of the setup.
            If not provided, the active setup is used.
        default_adaptive : str, optional
            Adaptive type.
            The default is ``"LastAdaptive"``.
        is_post_processed : bool, optional
            Boolean to check if it is post processed. Default value is ``False``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    


class Maxwell3d(Maxwell, FieldAnalysis3D):
    """Provides the Maxwell 3D app interface.

    This class allows you to connect to an existing Maxwell 3D design or create a
    new Maxwell 3D design if one does not exist.

    Parameters
    ----------
    project : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open. The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    design : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    setup : str, optional
        Name of the setup to use as the nominal. The default is
        ``None``, in which case the active setup is used or
        nothing is used.
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case
        the active version or latest installed version is used. This
        parameter is ignored when a script is launched within AEDT.
        Examples of input values are ``251``, ``25.1``, ``2025.1``, ``"2025.1"``.
    non_graphical : bool, optional
        Whether to launch AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT is launched in graphical
        mode. This parameter is ignored when a script is launched within
        AEDT.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine. The default is ``False``. This parameter is ignored
        when a script is launched within AEDT.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to open the AEDT student version. The default is
        ``False``. This parameter is ignored when a script is launched
        within AEDT.
    machine : str, optional
        Machine name to connect the oDesktop session to. This works only in 2022 R2
        or later. The remote server must be up and running with the command
        `"ansysedt.exe -grpcsrv portnum"`. If the machine is `"localhost"`, the
        server also starts if not present.
    port : int, optional
        Port number on which to start the oDesktop communication on an already existing server.
        This parameter is ignored when a new server is created. It works only in 2022 R2 or later.
        The remote server must be up and running with the command `"ansysedt.exe -grpcsrv portnum"`.
    aedt_process_id : int, optional
        Process ID for the instance of AEDT to point PyAEDT at. The default is
        ``None``. This parameter is only used when ``new_desktop = False``.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.

    Examples
    --------
    Create an instance of Maxwell 3D and open the specified
    project, which is named ``mymaxwell.aedt``.

    >>> from ansys.aedt.core import Maxwell3d
    >>> m3d = Maxwell3d("mymaxwell.aedt")
    PyAEDT INFO: Added design ...

    Create an instance of Maxwell 3D using the 2025 R1 release and open
    the specified project, which is named ``mymaxwell2.aedt``.

    >>> m3d = Maxwell3d(version="2025.1", project="mymaxwell2.aedt")
    PyAEDT INFO: Added design ...

    """
    @property
    def dim(self): # -> Literal['3D']:
        """Dimensions."""
        ...
    
    @pyaedt_function_handler(designname="design", projectname="project", specified_version="version", setup_name="setup", new_desktop_session="new_desktop")
    def __init__(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        """Initialize the ``Maxwell`` class."""
        ...
    
    @pyaedt_function_handler(geometry_selection="assignment", insulation_name="insulation")
    def assign_insulating(self, assignment, insulation=...): # -> BoundaryObject | MaxwellParameters:
        """Create an insulating boundary condition.

        This boundary condition is used to model very thin sheets of perfectly insulating material between
        touching conductors. Current cannot cross an insulating boundary.

        Parameters
        ----------
        assignment : str or int
            Objects or faces to apply the insulating boundary to.
        insulation : str, optional
            Name of the insulation. The default is ``None``, in which case a unique name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object if successful, ``False`` otherwise.

        References
        ----------
        >>> oModule.AssignInsulating

        Examples
        --------

        Create a box and assign insulating boundary to it.

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> insulated_box = m3d.modeler.create_box([50, 0, 50], [294, 294, 19], name="InsulatedBox")
        >>> insulating_assignment = m3d.assign_insulating(assignment=insulated_box, insulation="InsulatingExample")
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(geometry_selection="assignment", impedance_name="impedance")
    def assign_impedance(self, assignment, material_name=..., permeability=..., conductivity=..., non_linear_permeability=..., impedance=...): # -> BoundaryObject | MaxwellParameters:
        """Create an impedance boundary condition for Transient or Eddy Current solvers.

        This boundary condition is used to simulate the effect of induced currents in a conductor without
        explicitly computing them.

        Parameters
        ----------
        assignment : str
            Faces or objects to apply the impedance boundary to.
        material_name : str, optional
            Material name. The default is ``None``. If other than ``None``, material properties values are extracted
            from the named material in the list of materials available. The default value is ``None``.
        permeability : float, optional
            Permeability of the material.The default value is ``0.0``.
        conductivity : float, optional
            Conductivity of the material. The default value is ``None``.
        non_linear_permeability : bool, optional
            If the option ``material_name`` is activated, the permeability can either be linear or not.
            The default value is ``False``.
        impedance : str, optional
            Name of the impedance. The default is ``None``, in which case a unique name is assigned.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object if successful, ``False`` otherwise.

        References
        ----------
        >>> oModule.AssignImpedance

        Examples
        --------

        Create a box and assign impedance boundary to the faces.

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> shield = m3d.modeler.create_box([-50, -50, -50], [294, 294, 19], name="shield")
        >>> shield_faces = m3d.modeler.select_allfaces_fromobjects(["shield"])
        >>> impedance_assignment = m3d.assign_impedance(assignment=shield_faces, impedance="ShieldImpedance")
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(entities="assignment")
    def assign_current_density_terminal(self, assignment, current_density_name=...): # -> bool:
        """Assign current density terminal to a single or list of entities for an Eddy Current or Magnetostatic solver.

        Parameters
        ----------
        assignment : list of int or :class:`ansys.aedt.core.modeler.elements_3d.FacePrimitive`
            Faces or sheet objects to assign the current density terminal to.
        current_density_name : str, optional
            Current density name.
            If no name is provided a random name is generated.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def get_conduction_paths(self): # -> dict[Any, Any]:
        """Get a dictionary of all conduction paths with relative objects. It works from AEDT 23R1.

        Returns
        -------
        dict
            Dictionary of all conduction paths with relative objects.

        """
        ...
    
    @pyaedt_function_handler(master_entity="independent", slave_entity="dependent")
    def assign_master_slave(self, independent, dependent, u_vector_origin_coordinates_master, u_vector_pos_coordinates_master, u_vector_origin_coordinates_slave, u_vector_pos_coordinates_slave, reverse_master=..., reverse_slave=..., same_as_master=..., bound_name=...): # -> tuple[BoundaryObject | MaxwellParameters, BoundaryObject | MaxwellParameters] | Literal[False]:
        """Assign dependent and independent boundary conditions to two faces of the same object.

        Parameters
        ----------
        independent : int
            ID of the master entity.
        dependent : int
            ID of the slave entity.
        u_vector_origin_coordinates_master : list
            Master's list of U vector origin coordinates.
        u_vector_pos_coordinates_master : list
            Master's list of U vector position coordinates.
        u_vector_origin_coordinates_slave : list
            Slave's list of U vector origin coordinates.
        u_vector_pos_coordinates_slave : list
            Slave's list of U vector position coordinates.
        reverse_master : bool, optional
            Whether to reverse the master edge to the V direction. The default is ``False``.
        reverse_slave : bool, optional
            Whether to reverse the master edge to the U direction. The default is ``False``.
        same_as_master : bool, optional
            Whether the B-Field of the slave edge and master edge are the same. The default is ``True``.
        bound_name : str, optional
            Name of the master boundary. The default is ``None``, in which case the default name
            is used. The name of the slave boundary has a ``_dep`` suffix.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`,
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Master and slave objects. If the method fails to execute it returns ``False``.

        References
        ----------
        >>> oModule.AssignIndependent
        >>> oModule.AssignDependent
        """
        ...
    
    @pyaedt_function_handler(objects_list="assignment")
    def assign_flux_tangential(self, assignment, flux_name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a flux tangential boundary for a transient A-Phi solver.

        Parameters
        ----------
        assignment : list
            List of objects to assign the flux tangential boundary condition to.
        flux_name : str, optional
            Name of the flux tangential boundary. The default is ``None``,
            in which case a random name is automatically generated.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object if successful, ``False`` otherwise.

        References
        ----------
        >>> oModule.AssignFluxTangential

        Examples
        --------
        Create a box and assign a flux tangential boundary to one of its faces.

        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> box = m3d.modeler.create_box([50, 0, 50], [294, 294, 19], name="Box")
        >>> flux_tangential = m3d.assign_flux_tangential(box.faces[0], "FluxExample")
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(nets_layers_mapping="net_layers", reference_cs="coordinate_system")
    def assign_layout_force(self, net_layers: dict, component_name: str, coordinate_system: str = ..., force_name: str = ..., include_no_layer: bool = ...) -> bool:
        """Assign the layout force to a component in a Transient A-Phi solver.

        To access layout component features the Beta option has to be enabled first.

        Parameters
        ----------
        net_layers : dict
            Each <net, layer> pair represents the objects in the intersection of the corresponding net and layer.
            The layer name is from the list of layer names. The net name is the dictionary's key.
        component_name : str
            Name of the 3D component to assign the layout force to.
        coordinate_system : str, optional
            Reference coordinate system.
            If not provided, the global one is used.
        force_name : str, optional
            Name of the layout force.
            If not provided a random name will be generated.
        include_no_layer : bool, optional
            Whether to include ``"<no-layer>"`` layer or not (used for vias). Default is ``True``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignLayoutForce

        Examples
        --------
        Create a dictionary to give as an input to assign_layout_force method.
        >>> nets_layers = {"<no-net>": ["PWR","TOP","UNNAMED_000","UNNAMED_002"],
        >>>                "GND": ["LYR_1","LYR_2","UNNAMED_006"]}
        >>>

        Assign layout force to a component.
        >>> from ansys.aedt.core import Maxwell3d
        >>> m3d = Maxwell3d()
        >>> m3d.assign_layout_force(net_layers=nets_layers, component_name="LC1_1")
        >>> m3d.release_desktop(True, True)
        """
        ...
    
    @pyaedt_function_handler(faces="assignment")
    def assign_tangential_h_field(self, assignment, x_component_real=..., x_component_imag=..., y_component_real=..., y_component_imag=..., coordinate_system=..., origin=..., u_pos=..., reverse=..., bound_name=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a tangential H field boundary to a list of faces.

        Parameters
        ----------
        assignment : list of int  or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            List of objects to assign an end connection to.
        x_component_real : float, str, optional
            X component value real part. The default is ``0``.
        x_component_imag : float, str, optional
            X component value imaginary part. The default is ``0``.
        y_component_real : float, str, optional
            Y component value real part. The default is ``0``.
        y_component_imag : float, str, optional
            Y component value imaginary part. The default is ``0``.
        coordinate_system : str, optional
            Coordinate system to use for the UV vector.
        origin : list, optional
            Origin of the UV vector.
            The default is ``None`, in which case the bottom left vertex is used.
        u_pos : list, optional
            Direction of the U vector.
            The default is ``None``, in which case the top left vertex is used.
        reverse : bool, optional
            Whether the vector is reversed. The default is ``False``.
        bound_name : str, optional
            Name of the end connection boundary.
            The default is ``None``, in which case the default name is used.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Newly created object when successful, ``False`` when failed.

        References
        ----------
        >>> oModule.AssignTangentialHField
        """
        ...
    
    @pyaedt_function_handler(faces="assignment", bound_name="boundary")
    def assign_zero_tangential_h_field(self, assignment, boundary=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a zero tangential H field boundary to a list of faces.

        Parameters
        ----------
        assignment : list of int or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            List of objects to assign an end connection to.
        boundary : str, optional
            Name of the end connection boundary. The default is ``None``, in which case the
            default name is used.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Newly created object. ``False`` if it fails.

        References
        ----------
        >>> oModule.AssignZeroTangentialHField
        """
        ...
    
    @pyaedt_function_handler()
    def assign_resistive_sheet(self, assignment, resistance=..., name=..., non_linear=..., anode_a=..., anode_b=..., anode_c=..., anode_d=..., cathode_a=..., cathode_b=..., cathode_c=..., cathode_d=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a resistive sheet boundary between two conductors.

        Available for Maxwell 3D Magnetostatic, Eddy Current and Transient designs.
        For 3D Magnetostatic designs, the user can specify the nonlinear anode and cathode coefficients.
        To understand the nonlinear relationship used by AEDT between the conductivity and current density,
        please refer to Maxwell Help guide.

        Parameters
        ----------
        assignment : list of int or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            List of objects to assign an end connection to.
        resistance : str, optional
            Resistance value with unit.
            For 3D Magnetostatic designs if non_linear is ``True``, it is not available.
            The default is ``1ohm``.
        name : str, optional
            Name of the boundary. The default is ``None``, in which case the default name is used.
        non_linear: bool, optional
            Whether the boundary is non-linear. The default is ``False``.
            Valid for 3D Magnetostatic designs only.
        anode_a : str, optional
            Anode a value that corresponds to the a coefficient in the non-linear relationship
            between conductivity and current density.
            The default value is ``"300000000"``.
        anode_b : str, optional
            Anode b value that corresponds to the b coefficient in the non-linear relationship
            between conductivity and current density.
            The default value is ``"10"``.
        anode_c : str, optional
            Anode c value that corresponds to the c coefficient in the non-linear relationship
            between conductivity and current density.
            The default value is ``"110000000000000"``.
        anode_d : str, optional
            Anode d value that corresponds to the d coefficient in the non-linear relationship
            between conductivity and current density.
            The default value is ``"2"``.
        cathode_a : str, optional
            Cathode a value that corresponds to the a coefficient in the non-linear relationship
            between conductivity and current density.
            The default value is ``"300000000"``.
        cathode_b : str, optional
            Cathode b value that corresponds to the b coefficient in the non-linear relationship
            between conductivity and current density.
            The default value is ``"10"``.
        cathode_c : str, optional
            Cathode c value that corresponds to the c coefficient in the non-linear relationship
            between conductivity and current density.
            The default value is ``"110000000000000"``.
        cathode_d : str, optional
            Cathode d value that corresponds to the d coefficient in the non-linear relationship
            between conductivity and current density.
            The default value is ``"2"``.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Newly created object. ``False`` if it fails.

        References
        ----------
        >>> oModule.AssignResistiveSheet

        Examples
        --------
        >>> import ansys.aedt.core
        >>> from ansys.aedt.core.generic.constants import SOLUTIONS
        >>> m3d = ansys.aedt.core.Maxwell3d(solution_type="Transient")
        >>> my_box = m3d.modeler.create_box(origin=[0, 0, 0], sizes=[0.4, -1, 0.8], material="copper")
        >>> resistive_face = my_box.faces[0]
        >>> bound = m3d.assign_resistive_sheet(assignment=resistive_face, resistance="3ohm")
        >>> m3d.solution_type = SOLUTIONS.Maxwell3d.Magnetostatic
        >>> bound = m3d.assign_resistive_sheet(assignment=resistive_face, non_linear=True)
        >>> m3d.release_desktop()
        """
        ...
    


class Maxwell2d(Maxwell, FieldAnalysis3D):
    """Provides the Maxwell 2D app interface.

    This class allows you to connect to an existing Maxwell 2D design or create a
    new Maxwell 2D design if one does not exist.

    Parameters
    ----------
    project : str, optional
        Name of the project to select or the full path to the project
        or AEDTZ archive to open. The default is ``None``, in which
        case an attempt is made to get an active project. If no
        projects are present, an empty project is created.
    design : str, optional
        Name of the design to select. The default is ``None``, in
        which case an attempt is made to get an active design. If no
        designs are present, an empty design is created.
    solution_type : str, optional
        Solution type to apply to the design. The default is
        ``None``, in which case the default type is applied.
    setup : str, optional
        Name of the setup to use as the nominal. The default is
        ``None``, in which case the active setup is used or
        nothing is used.
    version : str, int, float, optional
        Version of AEDT to use. The default is ``None``, in which case
        the active version or latest installed version is used.
        This parameter is ignored when a script is launched within AEDT.
        Examples of input values are ``251``, ``25.1``, ``2025.1``, ``"2025.1"``.
    non_graphical : bool, optional
        Whether to launch AEDT in non-graphical mode. The default
        is ``False``, in which case AEDT is launched in graphical mode.
        This parameter is ignored when a script is launched within AEDT.
    new_desktop : bool, optional
        Whether to launch an instance of AEDT in a new thread, even if
        another instance of the ``specified_version`` is active on the
        machine. The default is ``False``. This parameter is ignored when
        a script is launched within AEDT.
    close_on_exit : bool, optional
        Whether to release AEDT on exit. The default is ``False``.
    student_version : bool, optional
        Whether to open the AEDT student version. The default is ``False``.
        This parameter is ignored when a script is launched within AEDT.
    machine : str, optional
        Machine name to connect the oDesktop session to. This works only in 2022 R2
        or later. The remote server must be up and running with the command
        `"ansysedt.exe -grpcsrv portnum"`. If the machine is `"localhost"`,
        the server also starts if not present.
    port : int, optional
        Port number of which to start the oDesktop communication on an already existing
        server. This parameter is ignored when creating a new server. It works only in 2022
        R2 or later. The remote server must be up and running with the command `"ansysedt.exe -grpcsrv portnum"`.
    aedt_process_id : int, optional
        Process ID for the instance of AEDT to point PyAEDT at. The default is
        ``None``. This parameter is only used when ``new_desktop = False``.
    remove_lock : bool, optional
        Whether to remove lock to project before opening it or not.
        The default is ``False``, which means to not unlock
        the existing project if needed and raise an exception.

    Examples
    --------
    Create an instance of Maxwell 2D and connect to an existing
    Maxwell 2D design or create a new Maxwell 2D design if one does
    not exist.

    >>> from ansys.aedt.core import Maxwell2d
    >>> m2d = Maxwell2d()

    Create an instance of Maxwell 2D and link to a project named
    ``projectname``. If this project does not exist, create one with
    this name.

    >>> m2d = Maxwell2d(projectname)

    Create an instance of Maxwell 2D and link to a design named
    ``designname`` in a project named ``projectname``.

    >>> m2d = Maxwell2d(projectname, designname)
    """
    @property
    def dim(self): # -> Literal['2D', '3D']:
        """Dimensions."""
        ...
    
    @property
    def geometry_mode(self):
        """Geometry mode.

        References
        ----------
        >>> oDesign.GetGeometryMode"""
        ...
    
    @pyaedt_function_handler(designname="design", projectname="project", specified_version="version", setup_name="setup", new_desktop_session="new_desktop")
    def __init__(self, project=..., design=..., solution_type=..., setup=..., version=..., non_graphical=..., new_desktop=..., close_on_exit=..., student_version=..., machine=..., port=..., aedt_process_id=..., remove_lock=...) -> None:
        ...
    
    @property
    def xy_plane(self): # -> bool:
        """Maxwell 2D plane between ``True`` and ``False``."""
        ...
    
    @xy_plane.setter
    def xy_plane(self, value=...): # -> None:
        ...
    
    @property
    def model_depth(self): # -> Any | None:
        """Model depth."""
        ...
    
    @model_depth.setter
    def model_depth(self, value): # -> None:
        """Set model depth."""
        ...
    
    @pyaedt_function_handler(linefilter="line_filter", objectfilter="object_filter")
    def generate_design_data(self, line_filter=..., object_filter=...): # -> Literal[True]:
        """Generate a generic set of design data and store it in the extension directory in a ``design_data.json`` file.

        Parameters
        ----------
        line_filter : optional
            The default is ``None``.
        object_filter : optional
            The default is ``None``.

        Returns
        -------
        bool
            ``True`` when successful, ``False`` when failed.
        """
        ...
    
    @pyaedt_function_handler()
    def read_design_data(self): # -> Dict[Any, Any] | List[Any]:
        """Read back the design data as a dictionary.

        Returns
        -------
        dict
            Dictionary of design data.

        """
        ...
    
    @pyaedt_function_handler(edge_list="assignment", bound_name="boundary")
    def assign_balloon(self, assignment, boundary=..., is_voltage=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a balloon boundary to a list of edges.

        Parameters
        ----------
        assignment : list
            List of edges.
        boundary : str, optional
            Name of the boundary. The default is ``None``, in which
            case the default name is used.
        is_voltage: bool, optional
            Whether the boundary is of type voltage or not. The default is ``False``.
            This option is valid for Electrostatic solvers only.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Boundary object. If the method fails to execute it returns ``False``.

        References
        ----------
        >>> oModule.AssignBalloon


        Examples
        --------
        Set balloon boundary condition in Maxwell 2D.

        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d()
        >>> region_id = m2d.modeler.create_region()
        >>> region_edges = region_id.edges
        >>> m2d.assign_balloon(edge_list=region_edges)
        """
        ...
    
    @pyaedt_function_handler(input_edge="assignment", vectorvalue="vector_value", bound_name="boundary")
    def assign_vector_potential(self, assignment, vector_value=..., boundary=...): # -> BoundaryObject | MaxwellParameters:
        """Assign a vector potential boundary condition to specified edges.

        This method is valid for Maxwell 2D Eddy Current, Magnetostatic, and Transient solvers.

        Parameters
        ----------
        assignment : list
            List of edge names or edge IDs to assign a vector to.
        vector_value : float, optional
            Value of the vector. The default is ``0``.
        boundary : str, optional
            Name of the boundary. The default is ``None``, in which
            case the default name is used.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Vector Potential Object. ``False`` if it fails.

        References
        ----------
        >>> oModule.AssignVectorPotential


        Examples
        --------
        Set vector potential to zero at the boundary edges in Maxwell 2D.

        >>> from ansys.aedt.core import Maxwell2d
        >>> m2d = Maxwell2d()
        >>> region_id = m2d.modeler.create_region()
        >>> region_edges = region_id.edges
        >>> m2d.assign_vector_potential(input_edge=region_edges)
        """
        ...
    
    @pyaedt_function_handler(master_edge="independent", slave_edge="dependent", bound_name="boundary")
    def assign_master_slave(self, independent, dependent, reverse_master=..., reverse_slave=..., same_as_master=..., boundary=...): # -> tuple[BoundaryObject | MaxwellParameters, BoundaryObject | MaxwellParameters] | Literal[False]:
        """Assign dependent and independent boundary conditions to two edges of the same object.

        Parameters
        ----------
        independent : int
            ID of the master edge.
        dependent : int
            ID of the slave edge.
        reverse_master : bool, optional
            Whether to reverse the master edge to the V direction. The default is ``False``.
        reverse_slave : bool, optional
            Whether to reverse the master edge to the U direction. The default is ``False``.
        same_as_master : bool, optional
            Whether the B-Field of the slave edge and master edge are the same. The default is ``True``.
        boundary : str, optional
            Name of the master boundary. The default is ``None``, in which case the default name
            is used. The name of the slave boundary has a ``_dep`` suffix.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`,
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Master and slave objects. If the method fails to execute it returns ``False``.

        References
        ----------
        >>> oModule.AssignIndependent
        >>> oModule.AssignDependent
        """
        ...
    
    @pyaedt_function_handler(objects="assignment", bound_name="boundary")
    def assign_end_connection(self, assignment, resistance=..., inductance=..., boundary=...): # -> BoundaryObject | MaxwellParameters:
        """Assign an end connection to a list of objects.

        Parameters
        ----------
        assignment : list of int or str or :class:`ansys.aedt.core.modeler.cad.object_3d.Object3d`
            List of objects to assign an end connection to.
        resistance : float or str, optional
            Resistance value. If float is provided, the units are assumed to be ohms.
            The default value is ``0``,
        inductance : float or str, optional
            Inductance value. If a float is provided, the units are assumed to Henry (H).
            The default value is ``0``.
        boundary : str, optional
            Name of the end connection boundary. The default is ``None``, in which case the
            default name is used.

        Returns
        -------
        :class:`ansys.aedt.core.modules.boundary.common.BoundaryObject`
            Newly created object. ``False`` if it fails.

        References
        ----------
        >>> oModule.AssignEndConnection
        """
        ...
    


